"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return Consequent;
    }
});
var _array = require("./utilities/array");
var _string = require("./utilities/string");
var _query = require("./utilities/query");
var _ruleNames = require("./ruleNames");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Consequent = /*#__PURE__*/ function() {
    function Consequent(statementNode) {
        _classCallCheck(this, Consequent);
        this.statementNode = statementNode;
    }
    _createClass(Consequent, [
        {
            key: "getStatementNode",
            value: function getStatementNode() {
                return this.statementNode;
            }
        },
        {
            key: "matchStatementNode",
            value: function matchStatementNode(statementNode, metaSubstitutions) {
                var nonTerminalNode = statementNode, consequentNonTerminalNode = this.statementNode, consequentNonTerminalNodeMatches = matchConsequentNonTerminalNode(consequentNonTerminalNode, nonTerminalNode, metaSubstitutions), statementNodeMatches = consequentNonTerminalNodeMatches; ///
                return statementNodeMatches;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var statementString = (0, _string.nodeAsString)(this.statementNode), statement = statementString, json = {
                    statement: statement
                };
                return json;
            }
        }
    ], [
        {
            key: "fromJSON",
            value: function fromJSON(json, releaseContext) {
                var statement = json.statement, statementString = statement, statementNode = (0, _string.statementNodeFromStatementString)(statementString, releaseContext), consequent = new Consequent(statementNode);
                return consequent;
            }
        },
        {
            key: "fromStatementNode",
            value: function fromStatementNode(statementNode) {
                var consequent = new Consequent(statementNode);
                return consequent;
            }
        }
    ]);
    return Consequent;
}();
function matchConsequentNode(consequentNode, node, metaSubstitutions) {
    var consequentNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = consequentNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, consequentTerminalNode = consequentNode, consequentTerminalNodeMatches = matchConsequentTerminalNode(consequentTerminalNode, terminalNode, metaSubstitutions);
            consequentNodeMatches = consequentTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, consequentNonTerminalNode = consequentNode, consequentNonTerminalNodeMatches = matchConsequentNonTerminalNode(consequentNonTerminalNode, nonTerminalNode, metaSubstitutions);
            consequentNodeMatches = consequentNonTerminalNodeMatches; ///
        }
    }
    return consequentNodeMatches;
}
function matchConsequentNodes(consequentNodes, nodes, metaSubstitutions) {
    var consequentNodesMatches = false;
    var nodesLength = nodes.length, consequentNodesLength = consequentNodes.length;
    if (nodesLength === consequentNodesLength) {
        consequentNodesMatches = nodes.every(function(node, index) {
            var consequentNode = consequentNodes[index], consequentNodeMatches = matchConsequentNode(consequentNode, node, metaSubstitutions);
            if (consequentNodeMatches) {
                return true;
            }
        });
    }
    return consequentNodesMatches;
}
function matchConsequentVariable(consequentVariableNode, nodes, metaSubstitutions) {
    var consequentVariableMatches = true;
    var consequentVariableName = (0, _query.variableNameFromVariableNode)(consequentVariableNode), metaSubstitution = metaSubstitutions.find(function(metaSubstitution) {
        var variableName = metaSubstitution.getVariableName();
        if (variableName === consequentVariableName) {
            return true;
        }
    }) || null;
    if (metaSubstitution !== null) {
        var metaSubstitutionNodesMatch = metaSubstitution.matchNodes(nodes);
        consequentVariableMatches = metaSubstitutionNodesMatch; ///
    }
    return consequentVariableMatches;
}
function matchConsequentTerminalNode(consequentTerminalNode, terminalNode, metaSubstitutions) {
    var matches = consequentTerminalNode.match(terminalNode), consequentTerminalNodeMatches = matches; ///
    return consequentTerminalNodeMatches;
}
function matchConsequentNonTerminalNode(consequentNonTerminalNode, nonTerminalNode, metaSubstitutions) {
    var consequentNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), consequentRuleName = consequentNonTerminalNode.getRuleName(); ///
    if (ruleName === consequentRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), consequentChildNodes = consequentNonTerminalNode.getChildNodes(), nodes = childNodes, consequentNodes = consequentChildNodes, consequentChildNodesMatches = matchConsequentNodes(consequentNodes, nodes, metaSubstitutions);
        consequentNonTerminalNodeMatches = consequentChildNodesMatches; ///
        if (!consequentNonTerminalNodeMatches) {
            var ruleNameStatementRuleName = ruleName === _ruleNames.STATEMENT_RULE_NAME;
            if (ruleNameStatementRuleName) {
                var statementNode = nonTerminalNode, consequentStatementNode = consequentNonTerminalNode, consequentStatementNodeMatches = matchConsequentStatementNode(consequentStatementNode, statementNode, metaSubstitutions);
                consequentNonTerminalNodeMatches = consequentStatementNodeMatches; ///
            }
        }
    }
    return consequentNonTerminalNodeMatches;
}
function matchConsequentStatementNode(consequentStatementNode, statementNode, metaSubstitutions) {
    var consequentStatementNodeMatches = false;
    var consequentNonTerminalNode = consequentStatementNode, consequentChildNodes = consequentNonTerminalNode.getChildNodes(), consequentChildNodesLength = consequentChildNodes.length;
    if (consequentChildNodesLength === 1) {
        var firstConsequentChildNode = (0, _array.first)(consequentChildNodes), consequentChildNode = firstConsequentChildNode, consequentChildNodeNonTerminalNode = consequentChildNode.isNonTerminalNode();
        if (consequentChildNodeNonTerminalNode) {
            var consequentNonTerminalChildNode = consequentChildNode, consequentNonTerminalChildNodeRuleName = consequentNonTerminalChildNode.getRuleName(), consequentNonTerminalChildNodeRuleNameVariableRuleName = consequentNonTerminalChildNodeRuleName === _ruleNames.VARIABLE_RULE_NAME;
            if (consequentNonTerminalChildNodeRuleNameVariableRuleName) {
                var consequentVariableNode = consequentNonTerminalChildNode, nonTerminalNode = statementNode, childNodes = nonTerminalNode.getChildNodes(), nodes = childNodes, consequentMetaVariableMatches = matchConsequentVariable(consequentVariableNode, nodes, metaSubstitutions);
                consequentStatementNodeMatches = consequentMetaVariableMatches; ///
            }
        }
    }
    return consequentStatementNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,