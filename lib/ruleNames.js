"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CONSTRUCTOR_DECLARATION_RULE_NAME: function() {
        return CONSTRUCTOR_DECLARATION_RULE_NAME;
    },
    LABEL_RULE_NAME: function() {
        return LABEL_RULE_NAME;
    },
    META_ARGUMENT_RULE_NAME: function() {
        return META_ARGUMENT_RULE_NAME;
    },
    META_SUBPROOF_RULE_NAME: function() {
        return META_SUBPROOF_RULE_NAME;
    },
    QUALIFIED_METASTATEMENT_RULE_NAME: function() {
        return QUALIFIED_METASTATEMENT_RULE_NAME;
    },
    QUALIFIED_STATEMENT_RULE_NAME: function() {
        return QUALIFIED_STATEMENT_RULE_NAME;
    },
    RULE_SUBPROOF_RULE_NAME: function() {
        return RULE_SUBPROOF_RULE_NAME;
    },
    SUBPROOF_RULE_NAME: function() {
        return SUBPROOF_RULE_NAME;
    },
    UNQUALIFIED_METASTATEMENT_RULE_NAME: function() {
        return UNQUALIFIED_METASTATEMENT_RULE_NAME;
    },
    UNQUALIFIED_STATEMENT_RULE_NAME: function() {
        return UNQUALIFIED_STATEMENT_RULE_NAME;
    },
    VARIABLE_DECLARATION_RULE_NAME: function() {
        return VARIABLE_DECLARATION_RULE_NAME;
    }
});
var LABEL_RULE_NAME = "label";
var SUBPROOF_RULE_NAME = "subproof";
var RULE_SUBPROOF_RULE_NAME = "ruleSubproof";
var META_SUBPROOF_RULE_NAME = "metaSubproof";
var META_ARGUMENT_RULE_NAME = "metaArgument";
var QUALIFIED_STATEMENT_RULE_NAME = "qualifiedStatement";
var VARIABLE_DECLARATION_RULE_NAME = "variableDeclaration";
var UNQUALIFIED_STATEMENT_RULE_NAME = "unqualifiedStatement";
var CONSTRUCTOR_DECLARATION_RULE_NAME = "constructorDeclaration";
var QUALIFIED_METASTATEMENT_RULE_NAME = "qualifiedMetastatement";
var UNQUALIFIED_METASTATEMENT_RULE_NAME = "unqualifiedMetastatement";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydWxlTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBjb25zdCBMQUJFTF9SVUxFX05BTUUgPSBcImxhYmVsXCI7XG5leHBvcnQgY29uc3QgU1VCUFJPT0ZfUlVMRV9OQU1FID0gXCJzdWJwcm9vZlwiO1xuZXhwb3J0IGNvbnN0IFJVTEVfU1VCUFJPT0ZfUlVMRV9OQU1FID0gXCJydWxlU3VicHJvb2ZcIjtcbmV4cG9ydCBjb25zdCBNRVRBX1NVQlBST09GX1JVTEVfTkFNRSA9IFwibWV0YVN1YnByb29mXCI7XG5leHBvcnQgY29uc3QgTUVUQV9BUkdVTUVOVF9SVUxFX05BTUUgPSBcIm1ldGFBcmd1bWVudFwiO1xuZXhwb3J0IGNvbnN0IFFVQUxJRklFRF9TVEFURU1FTlRfUlVMRV9OQU1FID0gXCJxdWFsaWZpZWRTdGF0ZW1lbnRcIjtcbmV4cG9ydCBjb25zdCBWQVJJQUJMRV9ERUNMQVJBVElPTl9SVUxFX05BTUUgPSBcInZhcmlhYmxlRGVjbGFyYXRpb25cIjtcbmV4cG9ydCBjb25zdCBVTlFVQUxJRklFRF9TVEFURU1FTlRfUlVMRV9OQU1FID0gXCJ1bnF1YWxpZmllZFN0YXRlbWVudFwiO1xuZXhwb3J0IGNvbnN0IENPTlNUUlVDVE9SX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSA9IFwiY29uc3RydWN0b3JEZWNsYXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IFFVQUxJRklFRF9NRVRBU1RBVEVNRU5UX1JVTEVfTkFNRSA9IFwicXVhbGlmaWVkTWV0YXN0YXRlbWVudFwiO1xuZXhwb3J0IGNvbnN0IFVOUVVBTElGSUVEX01FVEFTVEFURU1FTlRfUlVMRV9OQU1FID0gXCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRcIjtcbiJdLCJuYW1lcyI6WyJDT05TVFJVQ1RPUl9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJMQUJFTF9SVUxFX05BTUUiLCJNRVRBX0FSR1VNRU5UX1JVTEVfTkFNRSIsIk1FVEFfU1VCUFJPT0ZfUlVMRV9OQU1FIiwiUVVBTElGSUVEX01FVEFTVEFURU1FTlRfUlVMRV9OQU1FIiwiUVVBTElGSUVEX1NUQVRFTUVOVF9SVUxFX05BTUUiLCJSVUxFX1NVQlBST09GX1JVTEVfTkFNRSIsIlNVQlBST09GX1JVTEVfTkFNRSIsIlVOUVVBTElGSUVEX01FVEFTVEFURU1FTlRfUlVMRV9OQU1FIiwiVU5RVUFMSUZJRURfU1RBVEVNRU5UX1JVTEVfTkFNRSIsIlZBUklBQkxFX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBVWFBLGlDQUFpQztlQUFqQ0E7O0lBUkFDLGVBQWU7ZUFBZkE7O0lBSUFDLHVCQUF1QjtlQUF2QkE7O0lBREFDLHVCQUF1QjtlQUF2QkE7O0lBTUFDLGlDQUFpQztlQUFqQ0E7O0lBSkFDLDZCQUE2QjtlQUE3QkE7O0lBSEFDLHVCQUF1QjtlQUF2QkE7O0lBREFDLGtCQUFrQjtlQUFsQkE7O0lBU0FDLG1DQUFtQztlQUFuQ0E7O0lBSEFDLCtCQUErQjtlQUEvQkE7O0lBREFDLDhCQUE4QjtlQUE5QkE7OztBQU5OLElBQU1ULGtCQUFrQjtBQUN4QixJQUFNTSxxQkFBcUI7QUFDM0IsSUFBTUQsMEJBQTBCO0FBQ2hDLElBQU1ILDBCQUEwQjtBQUNoQyxJQUFNRCwwQkFBMEI7QUFDaEMsSUFBTUcsZ0NBQWdDO0FBQ3RDLElBQU1LLGlDQUFpQztBQUN2QyxJQUFNRCxrQ0FBa0M7QUFDeEMsSUFBTVQsb0NBQW9DO0FBQzFDLElBQU1JLG9DQUFvQztBQUMxQyxJQUFNSSxzQ0FBc0MifQ==