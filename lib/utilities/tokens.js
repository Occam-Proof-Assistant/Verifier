"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationTokensFromConstructorDeclarationString: function() {
        return constructorDeclarationTokensFromConstructorDeclarationString;
    },
    metavariableTokensFromMetavariableString: function() {
        return metavariableTokensFromMetavariableString;
    },
    substitutionTokensFromSubstitutionString: function() {
        return substitutionTokensFromSubstitutionString;
    },
    unqualifiedStatementTokensFromUnqualifiedStatementString: function() {
        return unqualifiedStatementTokensFromUnqualifiedStatementString;
    },
    variableTokensFromVariableString: function() {
        return variableTokensFromVariableString;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _customGrammar = require("./customGrammar");
var nominalLexerFromCombinedCustomGrammar = _occamcustomgrammars.lexersUtilities.nominalLexerFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), nominalLexer = nominalLexerFromCombinedCustomGrammar(combinedCustomGrammar);
function variableTokensFromVariableString(variableString, lexer) {
    var variableContent = "".concat(variableString), variableTokens = tokensFromContentAndLexer(variableContent, lexer);
    return variableTokens;
}
function metavariableTokensFromMetavariableString(metavariableString, lexer) {
    var metavariableContent = "".concat(metavariableString), metavariableTokens = tokensFromContentAndLexer(metavariableContent, lexer);
    return metavariableTokens;
}
function substitutionTokensFromSubstitutionString(substitutionString, lexer) {
    var substitutionContent = "".concat(substitutionString), substitutionTokens = tokensFromContentAndLexer(substitutionContent, lexer);
    return substitutionTokens;
}
function unqualifiedStatementTokensFromUnqualifiedStatementString(unqualifiedStatementString, lexer) {
    var content = unqualifiedStatementString, unqualifiedStatementTokens = tokensFromContentAndLexer(content, lexer);
    return unqualifiedStatementTokens;
}
function constructorDeclarationTokensFromConstructorDeclarationString(constructorDeclarationString, lexer) {
    var content = constructorDeclarationString, constructorDeclarationTokens = tokensFromContentAndLexer(content, lexer);
    return constructorDeclarationTokens;
}
function tokensFromContentAndLexer(content) {
    var lexer = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : nominalLexer;
    var tokens = lexer.tokenise(content);
    return tokens;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdG9rZW5zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBsZXhlcnNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tY3VzdG9tLWdyYW1tYXJzXCI7XG5cbmltcG9ydCB7IGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nIH0gZnJvbSBcIi4vY3VzdG9tR3JhbW1hclwiO1xuXG5jb25zdCB7IG5vbWluYWxMZXhlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIgfSA9IGxleGVyc1V0aWxpdGllcztcblxuY29uc3QgY29tYmluZWRDdXN0b21HcmFtbWFyID0gY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcoKSxcbiAgICAgIG5vbWluYWxMZXhlciA9IG5vbWluYWxMZXhlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIoY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhYmxlVG9rZW5zRnJvbVZhcmlhYmxlU3RyaW5nKHZhcmlhYmxlU3RyaW5nLCBsZXhlcikge1xuICBjb25zdCB2YXJpYWJsZUNvbnRlbnQgPSBgJHt2YXJpYWJsZVN0cmluZ31gLFxuICAgICAgICB2YXJpYWJsZVRva2VucyA9IHRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIodmFyaWFibGVDb250ZW50LCBsZXhlcik7XG5cbiAgcmV0dXJuIHZhcmlhYmxlVG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWV0YXZhcmlhYmxlVG9rZW5zRnJvbU1ldGF2YXJpYWJsZVN0cmluZyhtZXRhdmFyaWFibGVTdHJpbmcsIGxleGVyKSB7XG4gIGNvbnN0IG1ldGF2YXJpYWJsZUNvbnRlbnQgPSBgJHttZXRhdmFyaWFibGVTdHJpbmd9YCxcbiAgICAgICAgbWV0YXZhcmlhYmxlVG9rZW5zID0gdG9rZW5zRnJvbUNvbnRlbnRBbmRMZXhlcihtZXRhdmFyaWFibGVDb250ZW50LCBsZXhlcik7XG5cbiAgcmV0dXJuIG1ldGF2YXJpYWJsZVRva2Vucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnN0aXR1dGlvblRva2Vuc0Zyb21TdWJzdGl0dXRpb25TdHJpbmcoc3Vic3RpdHV0aW9uU3RyaW5nLCBsZXhlcikge1xuICBjb25zdCBzdWJzdGl0dXRpb25Db250ZW50ID0gYCR7c3Vic3RpdHV0aW9uU3RyaW5nfWAsXG4gICAgICAgIHN1YnN0aXR1dGlvblRva2VucyA9IHRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIoc3Vic3RpdHV0aW9uQ29udGVudCwgbGV4ZXIpO1xuXG4gIHJldHVybiBzdWJzdGl0dXRpb25Ub2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnF1YWxpZmllZFN0YXRlbWVudFRva2Vuc0Zyb21VbnF1YWxpZmllZFN0YXRlbWVudFN0cmluZyh1bnF1YWxpZmllZFN0YXRlbWVudFN0cmluZywgbGV4ZXIpIHtcbiAgY29uc3QgY29udGVudCA9IHVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nLCAgLy8vXG4gICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zID0gdG9rZW5zRnJvbUNvbnRlbnRBbmRMZXhlcihjb250ZW50LCBsZXhlcik7XG5cbiAgcmV0dXJuIHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vuc0Zyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nKGNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmcsIGxleGVyKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nLCAgLy8vXG4gICAgICAgIGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyKTtcblxuICByZXR1cm4gY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vucztcbn1cblxuZnVuY3Rpb24gdG9rZW5zRnJvbUNvbnRlbnRBbmRMZXhlcihjb250ZW50LCBsZXhlciA9IG5vbWluYWxMZXhlcikge1xuICBjb25zdCB0b2tlbnMgPSBsZXhlci50b2tlbmlzZShjb250ZW50KTtcblxuICByZXR1cm4gdG9rZW5zO1xufVxuIl0sIm5hbWVzIjpbImNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnNGcm9tQ29uc3RydWN0b3JEZWNsYXJhdGlvblN0cmluZyIsIm1ldGF2YXJpYWJsZVRva2Vuc0Zyb21NZXRhdmFyaWFibGVTdHJpbmciLCJzdWJzdGl0dXRpb25Ub2tlbnNGcm9tU3Vic3RpdHV0aW9uU3RyaW5nIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnNGcm9tVW5xdWFsaWZpZWRTdGF0ZW1lbnRTdHJpbmciLCJ2YXJpYWJsZVRva2Vuc0Zyb21WYXJpYWJsZVN0cmluZyIsIm5vbWluYWxMZXhlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIiLCJsZXhlcnNVdGlsaXRpZXMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tTm90aGluZyIsIm5vbWluYWxMZXhlciIsInZhcmlhYmxlU3RyaW5nIiwibGV4ZXIiLCJ2YXJpYWJsZUNvbnRlbnQiLCJ2YXJpYWJsZVRva2VucyIsInRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIiLCJtZXRhdmFyaWFibGVTdHJpbmciLCJtZXRhdmFyaWFibGVDb250ZW50IiwibWV0YXZhcmlhYmxlVG9rZW5zIiwic3Vic3RpdHV0aW9uU3RyaW5nIiwic3Vic3RpdHV0aW9uQ29udGVudCIsInN1YnN0aXR1dGlvblRva2VucyIsInVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nIiwiY29udGVudCIsInVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvblN0cmluZyIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMiLCJ0b2tlbnMiLCJ0b2tlbmlzZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBdUNnQkEsNERBQTREO2VBQTVEQTs7SUFyQkFDLHdDQUF3QztlQUF4Q0E7O0lBT0FDLHdDQUF3QztlQUF4Q0E7O0lBT0FDLHdEQUF3RDtlQUF4REE7O0lBckJBQyxnQ0FBZ0M7ZUFBaENBOzs7bUNBVGdCOzZCQUVpQjtBQUVqRCxJQUFNLEFBQUVDLHdDQUEwQ0Msb0NBQWUsQ0FBekREO0FBRVIsSUFBTUUsd0JBQXdCQyxJQUFBQSwrQ0FBZ0MsS0FDeERDLGVBQWVKLHNDQUFzQ0U7QUFFcEQsU0FBU0gsaUNBQWlDTSxjQUFjLEVBQUVDLEtBQUs7SUFDcEUsSUFBTUMsa0JBQWtCLEFBQUMsR0FBaUIsT0FBZkYsaUJBQ3JCRyxpQkFBaUJDLDBCQUEwQkYsaUJBQWlCRDtJQUVsRSxPQUFPRTtBQUNUO0FBRU8sU0FBU1oseUNBQXlDYyxrQkFBa0IsRUFBRUosS0FBSztJQUNoRixJQUFNSyxzQkFBc0IsQUFBQyxHQUFxQixPQUFuQkQscUJBQ3pCRSxxQkFBcUJILDBCQUEwQkUscUJBQXFCTDtJQUUxRSxPQUFPTTtBQUNUO0FBRU8sU0FBU2YseUNBQXlDZ0Isa0JBQWtCLEVBQUVQLEtBQUs7SUFDaEYsSUFBTVEsc0JBQXNCLEFBQUMsR0FBcUIsT0FBbkJELHFCQUN6QkUscUJBQXFCTiwwQkFBMEJLLHFCQUFxQlI7SUFFMUUsT0FBT1M7QUFDVDtBQUVPLFNBQVNqQix5REFBeURrQiwwQkFBMEIsRUFBRVYsS0FBSztJQUN4RyxJQUFNVyxVQUFVRCw0QkFDVkUsNkJBQTZCVCwwQkFBMEJRLFNBQVNYO0lBRXRFLE9BQU9ZO0FBQ1Q7QUFFTyxTQUFTdkIsNkRBQTZEd0IsNEJBQTRCLEVBQUViLEtBQUs7SUFDOUcsSUFBTVcsVUFBVUUsOEJBQ1ZDLCtCQUErQlgsMEJBQTBCUSxTQUFTWDtJQUV4RSxPQUFPYztBQUNUO0FBRUEsU0FBU1gsMEJBQTBCUSxPQUFPO1FBQUVYLFFBQUFBLGlFQUFRRjtJQUNsRCxJQUFNaUIsU0FBU2YsTUFBTWdCLFFBQVEsQ0FBQ0w7SUFFOUIsT0FBT0k7QUFDVCJ9