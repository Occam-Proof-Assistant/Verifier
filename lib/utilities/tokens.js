"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    frameTokensFromFrameString: function() {
        return frameTokensFromFrameString;
    },
    statementTokensFromStatementString: function() {
        return statementTokensFromStatementString;
    },
    termTokensFromTermString: function() {
        return termTokensFromTermString;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _customGrammar = require("./customGrammar");
var florenceLexerFromCombinedCustomGrammar = _occamcustomgrammars.lexersUtilities.florenceLexerFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), florenceLexer = florenceLexerFromCombinedCustomGrammar(combinedCustomGrammar);
function termTokensFromTermString(termString, lexer) {
    var content = termString, termTokens = tokensFromContentAndLexer(content, lexer);
    return termTokens;
}
function frameTokensFromFrameString(frameString, lexer) {
    var content = frameString, frameTokens = tokensFromContentAndLexer(content, lexer);
    return frameTokens;
}
function statementTokensFromStatementString(statementString, lexer) {
    var content = statementString, statementTokens = tokensFromContentAndLexer(content, lexer);
    return statementTokens;
}
function tokensFromContentAndLexer(content) {
    var lexer = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : florenceLexer;
    var tokens = lexer.tokenise(content);
    return tokens;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdG9rZW5zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBsZXhlcnNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tY3VzdG9tLWdyYW1tYXJzXCI7XG5cbmltcG9ydCB7IGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nIH0gZnJvbSBcIi4vY3VzdG9tR3JhbW1hclwiO1xuXG5jb25zdCB7IGZsb3JlbmNlTGV4ZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gPSBsZXhlcnNVdGlsaXRpZXM7XG5cbmNvbnN0IGNvbWJpbmVkQ3VzdG9tR3JhbW1hciA9IGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nKCksXG4gICAgICBmbG9yZW5jZUxleGVyID0gZmxvcmVuY2VMZXhlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIoY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRlcm1Ub2tlbnNGcm9tVGVybVN0cmluZyh0ZXJtU3RyaW5nLCBsZXhlcikge1xuICBjb25zdCBjb250ZW50ID0gdGVybVN0cmluZywgLy8vXG4gICAgICAgIHRlcm1Ub2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyKTtcblxuICByZXR1cm4gdGVybVRva2Vucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyYW1lVG9rZW5zRnJvbUZyYW1lU3RyaW5nKGZyYW1lU3RyaW5nLCBsZXhlcikge1xuICBjb25zdCBjb250ZW50ID0gZnJhbWVTdHJpbmcsICAvLy9cbiAgICAgICAgZnJhbWVUb2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyKTtcblxuICByZXR1cm4gZnJhbWVUb2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZW1lbnRUb2tlbnNGcm9tU3RhdGVtZW50U3RyaW5nKHN0YXRlbWVudFN0cmluZywgbGV4ZXIpIHtcbiAgY29uc3QgY29udGVudCA9IHN0YXRlbWVudFN0cmluZywgIC8vL1xuICAgICAgICBzdGF0ZW1lbnRUb2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyKTtcblxuICByZXR1cm4gc3RhdGVtZW50VG9rZW5zO1xufVxuXG5mdW5jdGlvbiB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyID0gZmxvcmVuY2VMZXhlcikge1xuICBjb25zdCB0b2tlbnMgPSBsZXhlci50b2tlbmlzZShjb250ZW50KTtcblxuICByZXR1cm4gdG9rZW5zO1xufVxuIl0sIm5hbWVzIjpbImZyYW1lVG9rZW5zRnJvbUZyYW1lU3RyaW5nIiwic3RhdGVtZW50VG9rZW5zRnJvbVN0YXRlbWVudFN0cmluZyIsInRlcm1Ub2tlbnNGcm9tVGVybVN0cmluZyIsImZsb3JlbmNlTGV4ZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwibGV4ZXJzVXRpbGl0aWVzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmciLCJmbG9yZW5jZUxleGVyIiwidGVybVN0cmluZyIsImxleGVyIiwiY29udGVudCIsInRlcm1Ub2tlbnMiLCJ0b2tlbnNGcm9tQ29udGVudEFuZExleGVyIiwiZnJhbWVTdHJpbmciLCJmcmFtZVRva2VucyIsInN0YXRlbWVudFN0cmluZyIsInN0YXRlbWVudFRva2VucyIsInRva2VucyIsInRva2VuaXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFrQmdCQSwwQkFBMEI7ZUFBMUJBOztJQU9BQyxrQ0FBa0M7ZUFBbENBOztJQWRBQyx3QkFBd0I7ZUFBeEJBOzs7bUNBVGdCOzZCQUVpQjtBQUVqRCxJQUFNLEFBQUVDLHlDQUEyQ0Msb0NBQWUsQ0FBMUREO0FBRVIsSUFBTUUsd0JBQXdCQyxJQUFBQSwrQ0FBZ0MsS0FDeERDLGdCQUFnQkosdUNBQXVDRTtBQUV0RCxTQUFTSCx5QkFBeUJNLFVBQVUsRUFBRUMsS0FBSztJQUN4RCxJQUFNQyxVQUFVRixZQUNWRyxhQUFhQywwQkFBMEJGLFNBQVNEO0lBRXRELE9BQU9FO0FBQ1Q7QUFFTyxTQUFTWCwyQkFBMkJhLFdBQVcsRUFBRUosS0FBSztJQUMzRCxJQUFNQyxVQUFVRyxhQUNWQyxjQUFjRiwwQkFBMEJGLFNBQVNEO0lBRXZELE9BQU9LO0FBQ1Q7QUFFTyxTQUFTYixtQ0FBbUNjLGVBQWUsRUFBRU4sS0FBSztJQUN2RSxJQUFNQyxVQUFVSyxpQkFDVkMsa0JBQWtCSiwwQkFBMEJGLFNBQVNEO0lBRTNELE9BQU9PO0FBQ1Q7QUFFQSxTQUFTSiwwQkFBMEJGLE9BQU87UUFBRUQsUUFBQUEsaUVBQVFGO0lBQ2xELElBQU1VLFNBQVNSLE1BQU1TLFFBQVEsQ0FBQ1I7SUFFOUIsT0FBT087QUFDVCJ9