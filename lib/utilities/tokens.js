"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    lineIndexFromLabelsAndTokens: function() {
        return lineIndexFromLabelsAndTokens;
    },
    leastLineIndexFromNodeAndTokens: function() {
        return leastLineIndexFromNodeAndTokens;
    },
    greatestLineIndexFromNodeAndTokens: function() {
        return greatestLineIndexFromNodeAndTokens;
    }
});
var _necessary = require("necessary");
var first = _necessary.arrayUtilities.first;
function lineIndexFromLabelsAndTokens(labels, tokens) {
    var firstLabel = first(labels), label = firstLabel, node = label.getNode(), leastLineIndex = leastLineIndexFromNodeAndTokens(node, tokens), lineIndex = leastLineIndex; ///
    return lineIndex;
}
function leastLineIndexFromNodeAndTokens(node, tokens) {
    var leastLineIndex = undefined; ///
    var firstSignificantToken = node.getFirstSignificantToken(), firstSignificantTokenIndex = significantTokenIndexFromSignificantTokenAndTokens(firstSignificantToken, tokens); ///
    var lineIndex = 0;
    tokens.some(function(token, tokenIndex) {
        if (tokenIndex === firstSignificantTokenIndex) {
            leastLineIndex = lineIndex; ///
            return true;
        }
        var tokenEndOfLineToken = token.isEndOfLineToken();
        if (tokenEndOfLineToken) {
            lineIndex += 1;
        }
    });
    return leastLineIndex;
}
function greatestLineIndexFromNodeAndTokens(node, tokens) {
    var greatestLineIndex = undefined; ///
    var lastSignificantToken = node.getLastSignificantToken(), lastSignificantTokenIndex = significantTokenIndexFromSignificantTokenAndTokens(lastSignificantToken, tokens);
    var lineIndex = 0;
    tokens.some(function(token, tokenIndex) {
        if (tokenIndex === lastSignificantTokenIndex) {
            greatestLineIndex = lineIndex; ///
            return true;
        }
        var tokenEndOfLineToken = token.isEndOfLineToken();
        if (tokenEndOfLineToken) {
            lineIndex += 1;
        }
    });
    return greatestLineIndex;
}
function significantTokenIndexFromSignificantTokenAndTokens(significantToken, tokens) {
    var significantTokenIndex = -1;
    tokens.some(function(token) {
        significantTokenIndex++;
        var tokenEqualToSignificantToken = token.isEqualTo(significantToken);
        if (tokenEqualToSignificantToken) {
            return true;
        }
    });
    return significantTokenIndex;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdG9rZW5zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lSW5kZXhGcm9tTGFiZWxzQW5kVG9rZW5zKGxhYmVscywgdG9rZW5zKSB7XG4gIGNvbnN0IGZpcnN0TGFiZWwgPSBmaXJzdChsYWJlbHMpLFxuICAgICAgICBsYWJlbCA9IGZpcnN0TGFiZWwsIC8vL1xuICAgICAgICBub2RlID0gbGFiZWwuZ2V0Tm9kZSgpLFxuICAgICAgICBsZWFzdExpbmVJbmRleCA9IGxlYXN0TGluZUluZGV4RnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKSxcbiAgICAgICAgbGluZUluZGV4ID0gbGVhc3RMaW5lSW5kZXg7IC8vL1xuXG4gIHJldHVybiBsaW5lSW5kZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWFzdExpbmVJbmRleEZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucykge1xuICBsZXQgbGVhc3RMaW5lSW5kZXggPSB1bmRlZmluZWQ7IC8vL1xuXG4gIGNvbnN0IGZpcnN0U2lnbmlmaWNhbnRUb2tlbiA9IG5vZGUuZ2V0Rmlyc3RTaWduaWZpY2FudFRva2VuKCksXG4gICAgICAgIGZpcnN0U2lnbmlmaWNhbnRUb2tlbkluZGV4ID0gc2lnbmlmaWNhbnRUb2tlbkluZGV4RnJvbVNpZ25pZmljYW50VG9rZW5BbmRUb2tlbnMoZmlyc3RTaWduaWZpY2FudFRva2VuLCB0b2tlbnMpOyAvLy9cblxuICBsZXQgbGluZUluZGV4ID0gMDtcblxuICB0b2tlbnMuc29tZSgodG9rZW4sIHRva2VuSW5kZXgpID0+IHsgIC8vL1xuICAgIGlmICh0b2tlbkluZGV4ID09PSBmaXJzdFNpZ25pZmljYW50VG9rZW5JbmRleCkge1xuICAgICAgbGVhc3RMaW5lSW5kZXggPSBsaW5lSW5kZXg7ICAvLy9cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW5FbmRPZkxpbmVUb2tlbiA9IHRva2VuLmlzRW5kT2ZMaW5lVG9rZW4oKTtcblxuICAgIGlmICh0b2tlbkVuZE9mTGluZVRva2VuKSB7XG4gICAgICBsaW5lSW5kZXggKz0gMTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsZWFzdExpbmVJbmRleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyZWF0ZXN0TGluZUluZGV4RnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKSB7XG4gIGxldCBncmVhdGVzdExpbmVJbmRleCA9IHVuZGVmaW5lZDsgIC8vL1xuXG4gIGNvbnN0IGxhc3RTaWduaWZpY2FudFRva2VuID0gbm9kZS5nZXRMYXN0U2lnbmlmaWNhbnRUb2tlbigpLFxuICAgICAgICBsYXN0U2lnbmlmaWNhbnRUb2tlbkluZGV4ID0gc2lnbmlmaWNhbnRUb2tlbkluZGV4RnJvbVNpZ25pZmljYW50VG9rZW5BbmRUb2tlbnMobGFzdFNpZ25pZmljYW50VG9rZW4sIHRva2Vucyk7XG5cbiAgbGV0IGxpbmVJbmRleCA9IDA7XG5cbiAgdG9rZW5zLnNvbWUoKHRva2VuLCB0b2tlbkluZGV4KSA9PiB7ICAvLy9cbiAgICBpZiAodG9rZW5JbmRleCA9PT0gbGFzdFNpZ25pZmljYW50VG9rZW5JbmRleCkge1xuICAgICAgZ3JlYXRlc3RMaW5lSW5kZXggPSBsaW5lSW5kZXg7ICAvLy9cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW5FbmRPZkxpbmVUb2tlbiA9IHRva2VuLmlzRW5kT2ZMaW5lVG9rZW4oKTtcblxuICAgIGlmICh0b2tlbkVuZE9mTGluZVRva2VuKSB7XG4gICAgICBsaW5lSW5kZXggKz0gMTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBncmVhdGVzdExpbmVJbmRleDtcbn1cblxuZnVuY3Rpb24gc2lnbmlmaWNhbnRUb2tlbkluZGV4RnJvbVNpZ25pZmljYW50VG9rZW5BbmRUb2tlbnMoc2lnbmlmaWNhbnRUb2tlbiwgdG9rZW5zKSB7XG4gIGxldCBzaWduaWZpY2FudFRva2VuSW5kZXggPSAtMTtcblxuICB0b2tlbnMuc29tZSgodG9rZW4pID0+IHtcbiAgICBzaWduaWZpY2FudFRva2VuSW5kZXgrKztcblxuICAgIGNvbnN0IHRva2VuRXF1YWxUb1NpZ25pZmljYW50VG9rZW4gPSB0b2tlbi5pc0VxdWFsVG8oc2lnbmlmaWNhbnRUb2tlbik7XG5cbiAgICBpZiAodG9rZW5FcXVhbFRvU2lnbmlmaWNhbnRUb2tlbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbkluZGV4O1xufVxuIl0sIm5hbWVzIjpbImxpbmVJbmRleEZyb21MYWJlbHNBbmRUb2tlbnMiLCJsZWFzdExpbmVJbmRleEZyb21Ob2RlQW5kVG9rZW5zIiwiZ3JlYXRlc3RMaW5lSW5kZXhGcm9tTm9kZUFuZFRva2VucyIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJsYWJlbHMiLCJ0b2tlbnMiLCJmaXJzdExhYmVsIiwibGFiZWwiLCJub2RlIiwiZ2V0Tm9kZSIsImxlYXN0TGluZUluZGV4IiwibGluZUluZGV4IiwidW5kZWZpbmVkIiwiZmlyc3RTaWduaWZpY2FudFRva2VuIiwiZ2V0Rmlyc3RTaWduaWZpY2FudFRva2VuIiwiZmlyc3RTaWduaWZpY2FudFRva2VuSW5kZXgiLCJzaWduaWZpY2FudFRva2VuSW5kZXhGcm9tU2lnbmlmaWNhbnRUb2tlbkFuZFRva2VucyIsInNvbWUiLCJ0b2tlbiIsInRva2VuSW5kZXgiLCJ0b2tlbkVuZE9mTGluZVRva2VuIiwiaXNFbmRPZkxpbmVUb2tlbiIsImdyZWF0ZXN0TGluZUluZGV4IiwibGFzdFNpZ25pZmljYW50VG9rZW4iLCJnZXRMYXN0U2lnbmlmaWNhbnRUb2tlbiIsImxhc3RTaWduaWZpY2FudFRva2VuSW5kZXgiLCJzaWduaWZpY2FudFRva2VuIiwic2lnbmlmaWNhbnRUb2tlbkluZGV4IiwidG9rZW5FcXVhbFRvU2lnbmlmaWNhbnRUb2tlbiIsImlzRXF1YWxUbyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBTWdCQSw0QkFBNEI7ZUFBNUJBOztJQVVBQywrQkFBK0I7ZUFBL0JBOztJQXlCQUMsa0NBQWtDO2VBQWxDQTs7O3lCQXZDZTtBQUUvQixJQUFNLEFBQUVDLFFBQVVDLHlCQUFjLENBQXhCRDtBQUVELFNBQVNILDZCQUE2QkssTUFBTSxFQUFFQyxNQUFNLEVBQUU7SUFDM0QsSUFBTUMsYUFBYUosTUFBTUUsU0FDbkJHLFFBQVFELFlBQ1JFLE9BQU9ELE1BQU1FLE9BQU8sSUFDcEJDLGlCQUFpQlYsZ0NBQWdDUSxNQUFNSCxTQUN2RE0sWUFBWUQsZ0JBQWdCLEdBQUc7SUFFckMsT0FBT0M7QUFDVDtBQUVPLFNBQVNYLGdDQUFnQ1EsSUFBSSxFQUFFSCxNQUFNLEVBQUU7SUFDNUQsSUFBSUssaUJBQWlCRSxXQUFXLEdBQUc7SUFFbkMsSUFBTUMsd0JBQXdCTCxLQUFLTSx3QkFBd0IsSUFDckRDLDZCQUE2QkMsbURBQW1ESCx1QkFBdUJSLFNBQVMsR0FBRztJQUV6SCxJQUFJTSxZQUFZO0lBRWhCTixPQUFPWSxJQUFJLENBQUMsU0FBQ0MsT0FBT0MsWUFBZTtRQUNqQyxJQUFJQSxlQUFlSiw0QkFBNEI7WUFDN0NMLGlCQUFpQkMsV0FBWSxHQUFHO1lBRWhDLE9BQU8sSUFBSTtRQUNiLENBQUM7UUFFRCxJQUFNUyxzQkFBc0JGLE1BQU1HLGdCQUFnQjtRQUVsRCxJQUFJRCxxQkFBcUI7WUFDdkJULGFBQWE7UUFDZixDQUFDO0lBQ0g7SUFFQSxPQUFPRDtBQUNUO0FBRU8sU0FBU1QsbUNBQW1DTyxJQUFJLEVBQUVILE1BQU0sRUFBRTtJQUMvRCxJQUFJaUIsb0JBQW9CVixXQUFZLEdBQUc7SUFFdkMsSUFBTVcsdUJBQXVCZixLQUFLZ0IsdUJBQXVCLElBQ25EQyw0QkFBNEJULG1EQUFtRE8sc0JBQXNCbEI7SUFFM0csSUFBSU0sWUFBWTtJQUVoQk4sT0FBT1ksSUFBSSxDQUFDLFNBQUNDLE9BQU9DLFlBQWU7UUFDakMsSUFBSUEsZUFBZU0sMkJBQTJCO1lBQzVDSCxvQkFBb0JYLFdBQVksR0FBRztZQUVuQyxPQUFPLElBQUk7UUFDYixDQUFDO1FBRUQsSUFBTVMsc0JBQXNCRixNQUFNRyxnQkFBZ0I7UUFFbEQsSUFBSUQscUJBQXFCO1lBQ3ZCVCxhQUFhO1FBQ2YsQ0FBQztJQUNIO0lBRUEsT0FBT1c7QUFDVDtBQUVBLFNBQVNOLG1EQUFtRFUsZ0JBQWdCLEVBQUVyQixNQUFNLEVBQUU7SUFDcEYsSUFBSXNCLHdCQUF3QixDQUFDO0lBRTdCdEIsT0FBT1ksSUFBSSxDQUFDLFNBQUNDLE9BQVU7UUFDckJTO1FBRUEsSUFBTUMsK0JBQStCVixNQUFNVyxTQUFTLENBQUNIO1FBRXJELElBQUlFLDhCQUE4QjtZQUNoQyxPQUFPLElBQUk7UUFDYixDQUFDO0lBQ0g7SUFFQSxPQUFPRDtBQUNUIn0=