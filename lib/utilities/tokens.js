"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationTokensFromConstructorDeclarationString: function() {
        return constructorDeclarationTokensFromConstructorDeclarationString;
    },
    metavariableTokensFromMetavariableString: function() {
        return metavariableTokensFromMetavariableString;
    },
    statementTokensFromUnqualifiedStatementTokens: function() {
        return statementTokensFromUnqualifiedStatementTokens;
    },
    substitutionTokensFromUnqualifiedStatementTokensAndSubstitutionNode: function() {
        return substitutionTokensFromUnqualifiedStatementTokensAndSubstitutionNode;
    },
    termTokensFromConstructorDeclarationTokens: function() {
        return termTokensFromConstructorDeclarationTokens;
    },
    unqualifiedStatementTokensFromUnqualifiedStatementString: function() {
        return unqualifiedStatementTokensFromUnqualifiedStatementString;
    },
    variableTokensFromVariableString: function() {
        return variableTokensFromVariableString;
    }
});
var _necessary = require("necessary");
var front = _necessary.arrayUtilities.front;
function variableTokensFromVariableString(variableString, lexer) {
    var variableContent = "".concat(variableString), variableTokens = tokensFromContentAndLexer(variableContent, lexer);
    return variableTokens;
}
function metavariableTokensFromMetavariableString(metavariableString, lexer) {
    var metavariableContent = "".concat(metavariableString), metavariableTokens = tokensFromContentAndLexer(metavariableContent, lexer);
    return metavariableTokens;
}
function unqualifiedStatementTokensFromUnqualifiedStatementString(unqualifiedStatementString, lexer) {
    var content = unqualifiedStatementString, unqualifiedStatementTokens = tokensFromContentAndLexer(content, lexer);
    return unqualifiedStatementTokens;
}
function constructorDeclarationTokensFromConstructorDeclarationString(constructorDeclarationString, lexer) {
    var content = constructorDeclarationString, constructorDeclarationTokens = tokensFromContentAndLexer(content, lexer);
    return constructorDeclarationTokens;
}
function termTokensFromConstructorDeclarationTokens(constructorDeclarationTokens) {
    var frontConstructorDeclarationTokens = front(constructorDeclarationTokens), termTokens = frontConstructorDeclarationTokens; ///
    return termTokens;
}
function statementTokensFromUnqualifiedStatementTokens(unqualifiedStatementTokens) {
    var frontUnqualifiedStatementTokens = front(unqualifiedStatementTokens), statementTokens = frontUnqualifiedStatementTokens; ///
    return statementTokens;
}
function substitutionTokensFromUnqualifiedStatementTokensAndSubstitutionNode(unqualifiedStatementTokens, substitutionNode) {
    var lastSignificantTokenIndex = substitutionNode.getLastSignificantTokenIndex(unqualifiedStatementTokens), firstSignificantTokenIndex = substitutionNode.getFirstSignificantTokenIndex(unqualifiedStatementTokens), start = firstSignificantTokenIndex, end = lastSignificantTokenIndex + 1, substitutionTokens = unqualifiedStatementTokens.slice(start, end);
    return substitutionTokens;
}
function tokensFromContentAndLexer(content, lexer) {
    var tokens = lexer.tokenise(content);
    return tokens;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdG9rZW5zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBmcm9udCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YXJpYWJsZVRva2Vuc0Zyb21WYXJpYWJsZVN0cmluZyh2YXJpYWJsZVN0cmluZywgbGV4ZXIpIHtcbiAgY29uc3QgdmFyaWFibGVDb250ZW50ID0gYCR7dmFyaWFibGVTdHJpbmd9YCxcbiAgICAgICAgdmFyaWFibGVUb2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKHZhcmlhYmxlQ29udGVudCwgbGV4ZXIpO1xuXG4gIHJldHVybiB2YXJpYWJsZVRva2Vucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGF2YXJpYWJsZVRva2Vuc0Zyb21NZXRhdmFyaWFibGVTdHJpbmcobWV0YXZhcmlhYmxlU3RyaW5nLCBsZXhlcikge1xuICBjb25zdCBtZXRhdmFyaWFibGVDb250ZW50ID0gYCR7bWV0YXZhcmlhYmxlU3RyaW5nfWAsXG4gICAgICAgIG1ldGF2YXJpYWJsZVRva2VucyA9IHRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIobWV0YXZhcmlhYmxlQ29udGVudCwgbGV4ZXIpO1xuXG4gIHJldHVybiBtZXRhdmFyaWFibGVUb2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnF1YWxpZmllZFN0YXRlbWVudFRva2Vuc0Zyb21VbnF1YWxpZmllZFN0YXRlbWVudFN0cmluZyh1bnF1YWxpZmllZFN0YXRlbWVudFN0cmluZywgbGV4ZXIpIHtcbiAgY29uc3QgY29udGVudCA9IHVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nLCAgLy8vXG4gICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zID0gdG9rZW5zRnJvbUNvbnRlbnRBbmRMZXhlcihjb250ZW50LCBsZXhlcik7XG5cbiAgcmV0dXJuIHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vuc0Zyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nKGNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmcsIGxleGVyKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nLCAgLy8vXG4gICAgICAgIGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyKTtcblxuICByZXR1cm4gY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlcm1Ub2tlbnNGcm9tQ29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vucyhjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zKSB7XG4gIGNvbnN0IGZyb250Q29uc3RydWN0b3JEZWNsYXJhdGlvblRva2VucyA9IGZyb250KGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMpLFxuICAgICAgICB0ZXJtVG9rZW5zID0gZnJvbnRDb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zOyAgLy8vXG5cbiAgcmV0dXJuIHRlcm1Ub2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZW1lbnRUb2tlbnNGcm9tVW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnModW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnMpIHtcbiAgY29uc3QgZnJvbnRVbnF1YWxpZmllZFN0YXRlbWVudFRva2VucyA9IGZyb250KHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zKSxcbiAgICAgICAgc3RhdGVtZW50VG9rZW5zID0gZnJvbnRVbnF1YWxpZmllZFN0YXRlbWVudFRva2VuczsgIC8vL1xuXG4gIHJldHVybiBzdGF0ZW1lbnRUb2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdGl0dXRpb25Ub2tlbnNGcm9tVW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnNBbmRTdWJzdGl0dXRpb25Ob2RlKHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zLCBzdWJzdGl0dXRpb25Ob2RlKSB7XG4gIGNvbnN0IGxhc3RTaWduaWZpY2FudFRva2VuSW5kZXggPSBzdWJzdGl0dXRpb25Ob2RlLmdldExhc3RTaWduaWZpY2FudFRva2VuSW5kZXgodW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnMpLFxuICAgICAgICBmaXJzdFNpZ25pZmljYW50VG9rZW5JbmRleCA9IHN1YnN0aXR1dGlvbk5vZGUuZ2V0Rmlyc3RTaWduaWZpY2FudFRva2VuSW5kZXgodW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnMpLFxuICAgICAgICBzdGFydCA9IGZpcnN0U2lnbmlmaWNhbnRUb2tlbkluZGV4LCAvLy9cbiAgICAgICAgZW5kID0gbGFzdFNpZ25pZmljYW50VG9rZW5JbmRleCArIDEsXG4gICAgICAgIHN1YnN0aXR1dGlvblRva2VucyA9IHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zLnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gIHJldHVybiBzdWJzdGl0dXRpb25Ub2tlbnM7XG59XG5cbmZ1bmN0aW9uIHRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIoY29udGVudCwgbGV4ZXIpIHtcbiAgY29uc3QgdG9rZW5zID0gbGV4ZXIudG9rZW5pc2UoY29udGVudCk7XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cbiJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zRnJvbUNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmciLCJtZXRhdmFyaWFibGVUb2tlbnNGcm9tTWV0YXZhcmlhYmxlU3RyaW5nIiwic3RhdGVtZW50VG9rZW5zRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zIiwic3Vic3RpdHV0aW9uVG9rZW5zRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zQW5kU3Vic3RpdHV0aW9uTm9kZSIsInRlcm1Ub2tlbnNGcm9tQ29uc3RydWN0b3JEZWNsYXJhdGlvblRva2VucyIsInVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nIiwidmFyaWFibGVUb2tlbnNGcm9tVmFyaWFibGVTdHJpbmciLCJmcm9udCIsImFycmF5VXRpbGl0aWVzIiwidmFyaWFibGVTdHJpbmciLCJsZXhlciIsInZhcmlhYmxlQ29udGVudCIsInZhcmlhYmxlVG9rZW5zIiwidG9rZW5zRnJvbUNvbnRlbnRBbmRMZXhlciIsIm1ldGF2YXJpYWJsZVN0cmluZyIsIm1ldGF2YXJpYWJsZUNvbnRlbnQiLCJtZXRhdmFyaWFibGVUb2tlbnMiLCJ1bnF1YWxpZmllZFN0YXRlbWVudFN0cmluZyIsImNvbnRlbnQiLCJ1bnF1YWxpZmllZFN0YXRlbWVudFRva2VucyIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmciLCJjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zIiwiZnJvbnRDb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zIiwidGVybVRva2VucyIsImZyb250VW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnMiLCJzdGF0ZW1lbnRUb2tlbnMiLCJzdWJzdGl0dXRpb25Ob2RlIiwibGFzdFNpZ25pZmljYW50VG9rZW5JbmRleCIsImdldExhc3RTaWduaWZpY2FudFRva2VuSW5kZXgiLCJmaXJzdFNpZ25pZmljYW50VG9rZW5JbmRleCIsImdldEZpcnN0U2lnbmlmaWNhbnRUb2tlbkluZGV4Iiwic3RhcnQiLCJlbmQiLCJzdWJzdGl0dXRpb25Ub2tlbnMiLCJzbGljZSIsInRva2VucyIsInRva2VuaXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUEyQmdCQSw0REFBNEQ7ZUFBNURBOztJQWRBQyx3Q0FBd0M7ZUFBeENBOztJQTRCQUMsNkNBQTZDO2VBQTdDQTs7SUFPQUMsbUVBQW1FO2VBQW5FQTs7SUFkQUMsMENBQTBDO2VBQTFDQTs7SUFkQUMsd0RBQXdEO2VBQXhEQTs7SUFkQUMsZ0NBQWdDO2VBQWhDQTs7O3lCQUplO0FBRS9CLElBQU0sQUFBRUMsUUFBVUMseUJBQWMsQ0FBeEJEO0FBRUQsU0FBU0QsaUNBQWlDRyxjQUFjLEVBQUVDLEtBQUs7SUFDcEUsSUFBTUMsa0JBQWtCLEFBQUMsR0FBaUIsT0FBZkYsaUJBQ3JCRyxpQkFBaUJDLDBCQUEwQkYsaUJBQWlCRDtJQUVsRSxPQUFPRTtBQUNUO0FBRU8sU0FBU1gseUNBQXlDYSxrQkFBa0IsRUFBRUosS0FBSztJQUNoRixJQUFNSyxzQkFBc0IsQUFBQyxHQUFxQixPQUFuQkQscUJBQ3pCRSxxQkFBcUJILDBCQUEwQkUscUJBQXFCTDtJQUUxRSxPQUFPTTtBQUNUO0FBRU8sU0FBU1gseURBQXlEWSwwQkFBMEIsRUFBRVAsS0FBSztJQUN4RyxJQUFNUSxVQUFVRCw0QkFDVkUsNkJBQTZCTiwwQkFBMEJLLFNBQVNSO0lBRXRFLE9BQU9TO0FBQ1Q7QUFFTyxTQUFTbkIsNkRBQTZEb0IsNEJBQTRCLEVBQUVWLEtBQUs7SUFDOUcsSUFBTVEsVUFBVUUsOEJBQ1ZDLCtCQUErQlIsMEJBQTBCSyxTQUFTUjtJQUV4RSxPQUFPVztBQUNUO0FBRU8sU0FBU2pCLDJDQUEyQ2lCLDRCQUE0QjtJQUNyRixJQUFNQyxvQ0FBb0NmLE1BQU1jLCtCQUMxQ0UsYUFBYUQsbUNBQW9DLEdBQUc7SUFFMUQsT0FBT0M7QUFDVDtBQUVPLFNBQVNyQiw4Q0FBOENpQiwwQkFBMEI7SUFDdEYsSUFBTUssa0NBQWtDakIsTUFBTVksNkJBQ3hDTSxrQkFBa0JELGlDQUFrQyxHQUFHO0lBRTdELE9BQU9DO0FBQ1Q7QUFFTyxTQUFTdEIsb0VBQW9FZ0IsMEJBQTBCLEVBQUVPLGdCQUFnQjtJQUM5SCxJQUFNQyw0QkFBNEJELGlCQUFpQkUsNEJBQTRCLENBQUNULDZCQUMxRVUsNkJBQTZCSCxpQkFBaUJJLDZCQUE2QixDQUFDWCw2QkFDNUVZLFFBQVFGLDRCQUNSRyxNQUFNTCw0QkFBNEIsR0FDbENNLHFCQUFxQmQsMkJBQTJCZSxLQUFLLENBQUNILE9BQU9DO0lBRW5FLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTcEIsMEJBQTBCSyxPQUFPLEVBQUVSLEtBQUs7SUFDL0MsSUFBTXlCLFNBQVN6QixNQUFNMEIsUUFBUSxDQUFDbEI7SUFFOUIsT0FBT2lCO0FBQ1QifQ==