"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationTokensFromConstructorDeclarationString: function() {
        return constructorDeclarationTokensFromConstructorDeclarationString;
    },
    metavariableTokensFromMetavariableString: function() {
        return metavariableTokensFromMetavariableString;
    },
    statementTokensFromUnqualifiedStatementTokens: function() {
        return statementTokensFromUnqualifiedStatementTokens;
    },
    substitutionTokensFromSubstitutionString: function() {
        return substitutionTokensFromSubstitutionString;
    },
    termTokensFromConstructorDeclarationTokens: function() {
        return termTokensFromConstructorDeclarationTokens;
    },
    unqualifiedStatementTokensFromUnqualifiedStatementString: function() {
        return unqualifiedStatementTokensFromUnqualifiedStatementString;
    },
    variableTokensFromVariableString: function() {
        return variableTokensFromVariableString;
    }
});
var _necessary = require("necessary");
var _occamcustomgrammars = require("occam-custom-grammars");
var _customGrammar = require("./customGrammar");
var front = _necessary.arrayUtilities.front, nominalLexerFromCombinedCustomGrammar = _occamcustomgrammars.lexersUtilities.nominalLexerFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), nominalLexer = nominalLexerFromCombinedCustomGrammar(combinedCustomGrammar);
function variableTokensFromVariableString(variableString, lexer) {
    var variableContent = "".concat(variableString), variableTokens = tokensFromContentAndLexer(variableContent, lexer);
    return variableTokens;
}
function metavariableTokensFromMetavariableString(metavariableString, lexer) {
    var metavariableContent = "".concat(metavariableString), metavariableTokens = tokensFromContentAndLexer(metavariableContent, lexer);
    return metavariableTokens;
}
function substitutionTokensFromSubstitutionString(substitutionString, lexer) {
    var substitutionContent = "".concat(substitutionString), substitutionTokens = tokensFromContentAndLexer(substitutionContent, lexer);
    return substitutionTokens;
}
function unqualifiedStatementTokensFromUnqualifiedStatementString(unqualifiedStatementString, lexer) {
    var content = unqualifiedStatementString, unqualifiedStatementTokens = tokensFromContentAndLexer(content, lexer);
    return unqualifiedStatementTokens;
}
function constructorDeclarationTokensFromConstructorDeclarationString(constructorDeclarationString, lexer) {
    var content = constructorDeclarationString, constructorDeclarationTokens = tokensFromContentAndLexer(content, lexer);
    return constructorDeclarationTokens;
}
function termTokensFromConstructorDeclarationTokens(constructorDeclarationTokens) {
    var frontConstructorDeclarationTokens = front(constructorDeclarationTokens), termTokens = frontConstructorDeclarationTokens; ///
    return termTokens;
}
function statementTokensFromUnqualifiedStatementTokens(unqualifiedStatementTokens) {
    var frontUnqualifiedStatementTokens = front(unqualifiedStatementTokens), statementTokens = frontUnqualifiedStatementTokens; ///
    return statementTokens;
}
function tokensFromContentAndLexer(content) {
    var lexer = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : nominalLexer;
    var tokens = lexer.tokenise(content);
    return tokens;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdG9rZW5zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcbmltcG9ydCB7IGxleGVyc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1jdXN0b20tZ3JhbW1hcnNcIjtcblxuaW1wb3J0IHsgY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcgfSBmcm9tIFwiLi9jdXN0b21HcmFtbWFyXCI7XG5cbmNvbnN0IHsgZnJvbnQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBub21pbmFsTGV4ZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gPSBsZXhlcnNVdGlsaXRpZXM7XG5cbmNvbnN0IGNvbWJpbmVkQ3VzdG9tR3JhbW1hciA9IGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nKCksXG4gICAgICBub21pbmFsTGV4ZXIgPSBub21pbmFsTGV4ZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcik7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YXJpYWJsZVRva2Vuc0Zyb21WYXJpYWJsZVN0cmluZyh2YXJpYWJsZVN0cmluZywgbGV4ZXIpIHtcbiAgY29uc3QgdmFyaWFibGVDb250ZW50ID0gYCR7dmFyaWFibGVTdHJpbmd9YCxcbiAgICAgICAgdmFyaWFibGVUb2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKHZhcmlhYmxlQ29udGVudCwgbGV4ZXIpO1xuXG4gIHJldHVybiB2YXJpYWJsZVRva2Vucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGF2YXJpYWJsZVRva2Vuc0Zyb21NZXRhdmFyaWFibGVTdHJpbmcobWV0YXZhcmlhYmxlU3RyaW5nLCBsZXhlcikge1xuICBjb25zdCBtZXRhdmFyaWFibGVDb250ZW50ID0gYCR7bWV0YXZhcmlhYmxlU3RyaW5nfWAsXG4gICAgICAgIG1ldGF2YXJpYWJsZVRva2VucyA9IHRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIobWV0YXZhcmlhYmxlQ29udGVudCwgbGV4ZXIpO1xuXG4gIHJldHVybiBtZXRhdmFyaWFibGVUb2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdGl0dXRpb25Ub2tlbnNGcm9tU3Vic3RpdHV0aW9uU3RyaW5nKHN1YnN0aXR1dGlvblN0cmluZywgbGV4ZXIpIHtcbiAgY29uc3Qgc3Vic3RpdHV0aW9uQ29udGVudCA9IGAke3N1YnN0aXR1dGlvblN0cmluZ31gLFxuICAgICAgICBzdWJzdGl0dXRpb25Ub2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKHN1YnN0aXR1dGlvbkNvbnRlbnQsIGxleGVyKTtcblxuICByZXR1cm4gc3Vic3RpdHV0aW9uVG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnNGcm9tVW5xdWFsaWZpZWRTdGF0ZW1lbnRTdHJpbmcodW5xdWFsaWZpZWRTdGF0ZW1lbnRTdHJpbmcsIGxleGVyKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSB1bnF1YWxpZmllZFN0YXRlbWVudFN0cmluZywgIC8vL1xuICAgICAgICB1bnF1YWxpZmllZFN0YXRlbWVudFRva2VucyA9IHRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIoY29udGVudCwgbGV4ZXIpO1xuXG4gIHJldHVybiB1bnF1YWxpZmllZFN0YXRlbWVudFRva2Vucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnNGcm9tQ29uc3RydWN0b3JEZWNsYXJhdGlvblN0cmluZyhjb25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nLCBsZXhlcikge1xuICBjb25zdCBjb250ZW50ID0gY29uc3RydWN0b3JEZWNsYXJhdGlvblN0cmluZywgIC8vL1xuICAgICAgICBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zID0gdG9rZW5zRnJvbUNvbnRlbnRBbmRMZXhlcihjb250ZW50LCBsZXhlcik7XG5cbiAgcmV0dXJuIGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXJtVG9rZW5zRnJvbUNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMoY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vucykge1xuICBjb25zdCBmcm9udENvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMgPSBmcm9udChjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zKSxcbiAgICAgICAgdGVybVRva2VucyA9IGZyb250Q29uc3RydWN0b3JEZWNsYXJhdGlvblRva2VuczsgIC8vL1xuXG4gIHJldHVybiB0ZXJtVG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVtZW50VG9rZW5zRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zKHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zKSB7XG4gIGNvbnN0IGZyb250VW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnMgPSBmcm9udCh1bnF1YWxpZmllZFN0YXRlbWVudFRva2VucyksXG4gICAgICAgIHN0YXRlbWVudFRva2VucyA9IGZyb250VW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnM7ICAvLy9cblxuICByZXR1cm4gc3RhdGVtZW50VG9rZW5zO1xufVxuXG5mdW5jdGlvbiB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyID0gbm9taW5hbExleGVyKSB7XG4gIGNvbnN0IHRva2VucyA9IGxleGVyLnRva2VuaXNlKGNvbnRlbnQpO1xuXG4gIHJldHVybiB0b2tlbnM7XG59XG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vuc0Zyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nIiwibWV0YXZhcmlhYmxlVG9rZW5zRnJvbU1ldGF2YXJpYWJsZVN0cmluZyIsInN0YXRlbWVudFRva2Vuc0Zyb21VbnF1YWxpZmllZFN0YXRlbWVudFRva2VucyIsInN1YnN0aXR1dGlvblRva2Vuc0Zyb21TdWJzdGl0dXRpb25TdHJpbmciLCJ0ZXJtVG9rZW5zRnJvbUNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMiLCJ1bnF1YWxpZmllZFN0YXRlbWVudFRva2Vuc0Zyb21VbnF1YWxpZmllZFN0YXRlbWVudFN0cmluZyIsInZhcmlhYmxlVG9rZW5zRnJvbVZhcmlhYmxlU3RyaW5nIiwiZnJvbnQiLCJhcnJheVV0aWxpdGllcyIsIm5vbWluYWxMZXhlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIiLCJsZXhlcnNVdGlsaXRpZXMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tTm90aGluZyIsIm5vbWluYWxMZXhlciIsInZhcmlhYmxlU3RyaW5nIiwibGV4ZXIiLCJ2YXJpYWJsZUNvbnRlbnQiLCJ2YXJpYWJsZVRva2VucyIsInRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIiLCJtZXRhdmFyaWFibGVTdHJpbmciLCJtZXRhdmFyaWFibGVDb250ZW50IiwibWV0YXZhcmlhYmxlVG9rZW5zIiwic3Vic3RpdHV0aW9uU3RyaW5nIiwic3Vic3RpdHV0aW9uQ29udGVudCIsInN1YnN0aXR1dGlvblRva2VucyIsInVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nIiwiY29udGVudCIsInVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvblN0cmluZyIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMiLCJmcm9udENvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMiLCJ0ZXJtVG9rZW5zIiwiZnJvbnRVbnF1YWxpZmllZFN0YXRlbWVudFRva2VucyIsInN0YXRlbWVudFRva2VucyIsInRva2VucyIsInRva2VuaXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUF5Q2dCQSw0REFBNEQ7ZUFBNURBOztJQXJCQUMsd0NBQXdDO2VBQXhDQTs7SUFtQ0FDLDZDQUE2QztlQUE3Q0E7O0lBNUJBQyx3Q0FBd0M7ZUFBeENBOztJQXFCQUMsMENBQTBDO2VBQTFDQTs7SUFkQUMsd0RBQXdEO2VBQXhEQTs7SUFyQkFDLGdDQUFnQztlQUFoQ0E7Ozt5QkFYZTttQ0FDQzs2QkFFaUI7QUFFakQsSUFBTSxBQUFFQyxRQUFVQyx5QkFBYyxDQUF4QkQsT0FDRixBQUFFRSx3Q0FBMENDLG9DQUFlLENBQXpERDtBQUVSLElBQU1FLHdCQUF3QkMsSUFBQUEsK0NBQWdDLEtBQ3hEQyxlQUFlSixzQ0FBc0NFO0FBRXBELFNBQVNMLGlDQUFpQ1EsY0FBYyxFQUFFQyxLQUFLO0lBQ3BFLElBQU1DLGtCQUFrQixBQUFDLEdBQWlCLE9BQWZGLGlCQUNyQkcsaUJBQWlCQywwQkFBMEJGLGlCQUFpQkQ7SUFFbEUsT0FBT0U7QUFDVDtBQUVPLFNBQVNoQix5Q0FBeUNrQixrQkFBa0IsRUFBRUosS0FBSztJQUNoRixJQUFNSyxzQkFBc0IsQUFBQyxHQUFxQixPQUFuQkQscUJBQ3pCRSxxQkFBcUJILDBCQUEwQkUscUJBQXFCTDtJQUUxRSxPQUFPTTtBQUNUO0FBRU8sU0FBU2xCLHlDQUF5Q21CLGtCQUFrQixFQUFFUCxLQUFLO0lBQ2hGLElBQU1RLHNCQUFzQixBQUFDLEdBQXFCLE9BQW5CRCxxQkFDekJFLHFCQUFxQk4sMEJBQTBCSyxxQkFBcUJSO0lBRTFFLE9BQU9TO0FBQ1Q7QUFFTyxTQUFTbkIseURBQXlEb0IsMEJBQTBCLEVBQUVWLEtBQUs7SUFDeEcsSUFBTVcsVUFBVUQsNEJBQ1ZFLDZCQUE2QlQsMEJBQTBCUSxTQUFTWDtJQUV0RSxPQUFPWTtBQUNUO0FBRU8sU0FBUzNCLDZEQUE2RDRCLDRCQUE0QixFQUFFYixLQUFLO0lBQzlHLElBQU1XLFVBQVVFLDhCQUNWQywrQkFBK0JYLDBCQUEwQlEsU0FBU1g7SUFFeEUsT0FBT2M7QUFDVDtBQUVPLFNBQVN6QiwyQ0FBMkN5Qiw0QkFBNEI7SUFDckYsSUFBTUMsb0NBQW9DdkIsTUFBTXNCLCtCQUMxQ0UsYUFBYUQsbUNBQW9DLEdBQUc7SUFFMUQsT0FBT0M7QUFDVDtBQUVPLFNBQVM3Qiw4Q0FBOEN5QiwwQkFBMEI7SUFDdEYsSUFBTUssa0NBQWtDekIsTUFBTW9CLDZCQUN4Q00sa0JBQWtCRCxpQ0FBa0MsR0FBRztJQUU3RCxPQUFPQztBQUNUO0FBRUEsU0FBU2YsMEJBQTBCUSxPQUFPO1FBQUVYLFFBQUFBLGlFQUFRRjtJQUNsRCxJQUFNcUIsU0FBU25CLE1BQU1vQixRQUFRLENBQUNUO0lBRTlCLE9BQU9RO0FBQ1QifQ==