"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationTokensFromConstructorDeclarationString: function() {
        return constructorDeclarationTokensFromConstructorDeclarationString;
    },
    metavariableTokensFromMetavariableString: function() {
        return metavariableTokensFromMetavariableString;
    },
    unqualifiedStatementTokensFromUnqualifiedStatementString: function() {
        return unqualifiedStatementTokensFromUnqualifiedStatementString;
    },
    variableTokensFromVariableString: function() {
        return variableTokensFromVariableString;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _customGrammar = require("./customGrammar");
var nominalLexerFromCombinedCustomGrammar = _occamcustomgrammars.lexersUtilities.nominalLexerFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), nominalLexer = nominalLexerFromCombinedCustomGrammar(combinedCustomGrammar);
function variableTokensFromVariableString(variableString, lexer) {
    var variableContent = "".concat(variableString), variableTokens = tokensFromContentAndLexer(variableContent, lexer);
    return variableTokens;
}
function metavariableTokensFromMetavariableString(metavariableString, lexer) {
    var metavariableContent = "".concat(metavariableString), metavariableTokens = tokensFromContentAndLexer(metavariableContent, lexer);
    return metavariableTokens;
}
function unqualifiedStatementTokensFromUnqualifiedStatementString(unqualifiedStatementString, lexer) {
    var content = unqualifiedStatementString, unqualifiedStatementTokens = tokensFromContentAndLexer(content, lexer);
    return unqualifiedStatementTokens;
}
function constructorDeclarationTokensFromConstructorDeclarationString(constructorDeclarationString, lexer) {
    var content = constructorDeclarationString, constructorDeclarationTokens = tokensFromContentAndLexer(content, lexer);
    return constructorDeclarationTokens;
}
function tokensFromContentAndLexer(content) {
    var lexer = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : nominalLexer;
    var tokens = lexer.tokenise(content);
    return tokens;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdG9rZW5zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBsZXhlcnNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tY3VzdG9tLWdyYW1tYXJzXCI7XG5cbmltcG9ydCB7IGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nIH0gZnJvbSBcIi4vY3VzdG9tR3JhbW1hclwiO1xuXG5jb25zdCB7IG5vbWluYWxMZXhlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIgfSA9IGxleGVyc1V0aWxpdGllcztcblxuY29uc3QgY29tYmluZWRDdXN0b21HcmFtbWFyID0gY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcoKSxcbiAgICAgIG5vbWluYWxMZXhlciA9IG5vbWluYWxMZXhlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIoY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhYmxlVG9rZW5zRnJvbVZhcmlhYmxlU3RyaW5nKHZhcmlhYmxlU3RyaW5nLCBsZXhlcikge1xuICBjb25zdCB2YXJpYWJsZUNvbnRlbnQgPSBgJHt2YXJpYWJsZVN0cmluZ31gLFxuICAgICAgICB2YXJpYWJsZVRva2VucyA9IHRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIodmFyaWFibGVDb250ZW50LCBsZXhlcik7XG5cbiAgcmV0dXJuIHZhcmlhYmxlVG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWV0YXZhcmlhYmxlVG9rZW5zRnJvbU1ldGF2YXJpYWJsZVN0cmluZyhtZXRhdmFyaWFibGVTdHJpbmcsIGxleGVyKSB7XG4gIGNvbnN0IG1ldGF2YXJpYWJsZUNvbnRlbnQgPSBgJHttZXRhdmFyaWFibGVTdHJpbmd9YCxcbiAgICAgICAgbWV0YXZhcmlhYmxlVG9rZW5zID0gdG9rZW5zRnJvbUNvbnRlbnRBbmRMZXhlcihtZXRhdmFyaWFibGVDb250ZW50LCBsZXhlcik7XG5cbiAgcmV0dXJuIG1ldGF2YXJpYWJsZVRva2Vucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nKHVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nLCBsZXhlcikge1xuICBjb25zdCBjb250ZW50ID0gdW5xdWFsaWZpZWRTdGF0ZW1lbnRTdHJpbmcsICAvLy9cbiAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnMgPSB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyKTtcblxuICByZXR1cm4gdW5xdWFsaWZpZWRTdGF0ZW1lbnRUb2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zRnJvbUNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmcoY29uc3RydWN0b3JEZWNsYXJhdGlvblN0cmluZywgbGV4ZXIpIHtcbiAgY29uc3QgY29udGVudCA9IGNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmcsICAvLy9cbiAgICAgICAgY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2VucyA9IHRva2Vuc0Zyb21Db250ZW50QW5kTGV4ZXIoY29udGVudCwgbGV4ZXIpO1xuXG4gIHJldHVybiBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zO1xufVxuXG5mdW5jdGlvbiB0b2tlbnNGcm9tQ29udGVudEFuZExleGVyKGNvbnRlbnQsIGxleGVyID0gbm9taW5hbExleGVyKSB7XG4gIGNvbnN0IHRva2VucyA9IGxleGVyLnRva2VuaXNlKGNvbnRlbnQpO1xuXG4gIHJldHVybiB0b2tlbnM7XG59XG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vuc0Zyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nIiwibWV0YXZhcmlhYmxlVG9rZW5zRnJvbU1ldGF2YXJpYWJsZVN0cmluZyIsInVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nIiwidmFyaWFibGVUb2tlbnNGcm9tVmFyaWFibGVTdHJpbmciLCJub21pbmFsTGV4ZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwibGV4ZXJzVXRpbGl0aWVzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmciLCJub21pbmFsTGV4ZXIiLCJ2YXJpYWJsZVN0cmluZyIsImxleGVyIiwidmFyaWFibGVDb250ZW50IiwidmFyaWFibGVUb2tlbnMiLCJ0b2tlbnNGcm9tQ29udGVudEFuZExleGVyIiwibWV0YXZhcmlhYmxlU3RyaW5nIiwibWV0YXZhcmlhYmxlQ29udGVudCIsIm1ldGF2YXJpYWJsZVRva2VucyIsInVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nIiwiY29udGVudCIsInVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvblN0cmluZyIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMiLCJ0b2tlbnMiLCJ0b2tlbmlzZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBZ0NnQkEsNERBQTREO2VBQTVEQTs7SUFkQUMsd0NBQXdDO2VBQXhDQTs7SUFPQUMsd0RBQXdEO2VBQXhEQTs7SUFkQUMsZ0NBQWdDO2VBQWhDQTs7O21DQVRnQjs2QkFFaUI7QUFFakQsSUFBTSxBQUFFQyx3Q0FBMENDLG9DQUFlLENBQXpERDtBQUVSLElBQU1FLHdCQUF3QkMsSUFBQUEsK0NBQWdDLEtBQ3hEQyxlQUFlSixzQ0FBc0NFO0FBRXBELFNBQVNILGlDQUFpQ00sY0FBYyxFQUFFQyxLQUFLO0lBQ3BFLElBQU1DLGtCQUFrQixBQUFDLEdBQWlCLE9BQWZGLGlCQUNyQkcsaUJBQWlCQywwQkFBMEJGLGlCQUFpQkQ7SUFFbEUsT0FBT0U7QUFDVDtBQUVPLFNBQVNYLHlDQUF5Q2Esa0JBQWtCLEVBQUVKLEtBQUs7SUFDaEYsSUFBTUssc0JBQXNCLEFBQUMsR0FBcUIsT0FBbkJELHFCQUN6QkUscUJBQXFCSCwwQkFBMEJFLHFCQUFxQkw7SUFFMUUsT0FBT007QUFDVDtBQUVPLFNBQVNkLHlEQUF5RGUsMEJBQTBCLEVBQUVQLEtBQUs7SUFDeEcsSUFBTVEsVUFBVUQsNEJBQ1ZFLDZCQUE2Qk4sMEJBQTBCSyxTQUFTUjtJQUV0RSxPQUFPUztBQUNUO0FBRU8sU0FBU25CLDZEQUE2RG9CLDRCQUE0QixFQUFFVixLQUFLO0lBQzlHLElBQU1RLFVBQVVFLDhCQUNWQywrQkFBK0JSLDBCQUEwQkssU0FBU1I7SUFFeEUsT0FBT1c7QUFDVDtBQUVBLFNBQVNSLDBCQUEwQkssT0FBTztRQUFFUixRQUFBQSxpRUFBUUY7SUFDbEQsSUFBTWMsU0FBU1osTUFBTWEsUUFBUSxDQUFDTDtJQUU5QixPQUFPSTtBQUNUIn0=