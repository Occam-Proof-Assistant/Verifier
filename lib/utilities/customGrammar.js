"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    customGrammarFromNameAndEntries: function() {
        return customGrammarFromNameAndEntries;
    },
    combinedCustomGrammarFromReleaseContexts: function() {
        return combinedCustomGrammarFromReleaseContexts;
    },
    default: function() {
        return _default;
    }
});
var _occamCustomGrammars = require("occam-custom-grammars");
function customGrammarFromNameAndEntries(name, entries) {
    var termBNF = entries.getTermBNF(), statementBNF = entries.getStatementBNF(), metastatementBNF = entries.getMetastatementBNF(), typePattern = entries.getTypePattern(), symbolPattern = entries.getSymbolPattern(), operatorPattern = entries.getOperatorPattern(), customGrammar = _occamCustomGrammars.CustomGrammar.fromNameTermBNFStatementBNFMetastatementBNFTypePatternSymbolPatternAndOperatorPattern(name, termBNF, statementBNF, metastatementBNF, typePattern, symbolPattern, operatorPattern);
    return customGrammar;
}
function combinedCustomGrammarFromReleaseContexts(releaseContexts) {
    var customGrammars = releaseContexts.map(function(releaseContext) {
        var customGrammar = releaseContext.getCustomGrammar();
        return customGrammar;
    }), combinedCustomGrammar = _occamCustomGrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
var _default = {
    customGrammarFromNameAndEntries: customGrammarFromNameAndEntries,
    combinedCustomGrammarFromReleaseContexts: combinedCustomGrammarFromReleaseContexts
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQ3VzdG9tR3JhbW1hciwgQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gZnJvbSBcIm9jY2FtLWN1c3RvbS1ncmFtbWFyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyhuYW1lLCBlbnRyaWVzKSB7XG4gIGNvbnN0IHRlcm1CTkYgPSBlbnRyaWVzLmdldFRlcm1CTkYoKSxcbiAgICAgICAgc3RhdGVtZW50Qk5GID0gZW50cmllcy5nZXRTdGF0ZW1lbnRCTkYoKSxcbiAgICAgICAgbWV0YXN0YXRlbWVudEJORiA9IGVudHJpZXMuZ2V0TWV0YXN0YXRlbWVudEJORigpLFxuICAgICAgICB0eXBlUGF0dGVybiA9IGVudHJpZXMuZ2V0VHlwZVBhdHRlcm4oKSxcbiAgICAgICAgc3ltYm9sUGF0dGVybiA9IGVudHJpZXMuZ2V0U3ltYm9sUGF0dGVybigpLFxuICAgICAgICBvcGVyYXRvclBhdHRlcm4gPSBlbnRyaWVzLmdldE9wZXJhdG9yUGF0dGVybigpLFxuICAgICAgICBjdXN0b21HcmFtbWFyID0gQ3VzdG9tR3JhbW1hci5mcm9tTmFtZVRlcm1CTkZTdGF0ZW1lbnRCTkZNZXRhc3RhdGVtZW50Qk5GVHlwZVBhdHRlcm5TeW1ib2xQYXR0ZXJuQW5kT3BlcmF0b3JQYXR0ZXJuKG5hbWUsIHRlcm1CTkYsIHN0YXRlbWVudEJORiwgbWV0YXN0YXRlbWVudEJORiwgdHlwZVBhdHRlcm4sIHN5bWJvbFBhdHRlcm4sIG9wZXJhdG9yUGF0dGVybik7XG5cbiAgcmV0dXJuIGN1c3RvbUdyYW1tYXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tUmVsZWFzZUNvbnRleHRzKHJlbGVhc2VDb250ZXh0cykge1xuICBjb25zdCBjdXN0b21HcmFtbWFycyA9IHJlbGVhc2VDb250ZXh0cy5tYXAoKHJlbGVhc2VDb250ZXh0KSA9PiB7XG4gICAgICAgICAgY29uc3QgY3VzdG9tR3JhbW1hciA9IHJlbGVhc2VDb250ZXh0LmdldEN1c3RvbUdyYW1tYXIoKTtcblxuICAgICAgICAgIHJldHVybiBjdXN0b21HcmFtbWFyO1xuICAgICAgICB9KSxcbiAgICAgICAgY29tYmluZWRDdXN0b21HcmFtbWFyID0gQ29tYmluZWRDdXN0b21HcmFtbWFyLmZyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycyk7XG5cbiAgcmV0dXJuIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjdXN0b21HcmFtbWFyRnJvbU5hbWVBbmRFbnRyaWVzLFxuICBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tUmVsZWFzZUNvbnRleHRzXG59O1xuIl0sIm5hbWVzIjpbImN1c3RvbUdyYW1tYXJGcm9tTmFtZUFuZEVudHJpZXMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tUmVsZWFzZUNvbnRleHRzIiwibmFtZSIsImVudHJpZXMiLCJ0ZXJtQk5GIiwiZ2V0VGVybUJORiIsInN0YXRlbWVudEJORiIsImdldFN0YXRlbWVudEJORiIsIm1ldGFzdGF0ZW1lbnRCTkYiLCJnZXRNZXRhc3RhdGVtZW50Qk5GIiwidHlwZVBhdHRlcm4iLCJnZXRUeXBlUGF0dGVybiIsInN5bWJvbFBhdHRlcm4iLCJnZXRTeW1ib2xQYXR0ZXJuIiwib3BlcmF0b3JQYXR0ZXJuIiwiZ2V0T3BlcmF0b3JQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hciIsIkN1c3RvbUdyYW1tYXIiLCJmcm9tTmFtZVRlcm1CTkZTdGF0ZW1lbnRCTkZNZXRhc3RhdGVtZW50Qk5GVHlwZVBhdHRlcm5TeW1ib2xQYXR0ZXJuQW5kT3BlcmF0b3JQYXR0ZXJuIiwicmVsZWFzZUNvbnRleHRzIiwiY3VzdG9tR3JhbW1hcnMiLCJtYXAiLCJyZWxlYXNlQ29udGV4dCIsImdldEN1c3RvbUdyYW1tYXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJmcm9tQ3VzdG9tR3JhbW1hcnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQUlnQkEsK0JBQStCO2VBQS9CQTs7SUFZQUMsd0NBQXdDO2VBQXhDQTs7SUFXaEIsT0FHRTtlQUhGOzs7bUNBekJxRDtBQUU5QyxTQUFTRCxnQ0FBZ0NFLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQzdELElBQU1DLFVBQVVELFFBQVFFLFVBQVUsSUFDNUJDLGVBQWVILFFBQVFJLGVBQWUsSUFDdENDLG1CQUFtQkwsUUFBUU0sbUJBQW1CLElBQzlDQyxjQUFjUCxRQUFRUSxjQUFjLElBQ3BDQyxnQkFBZ0JULFFBQVFVLGdCQUFnQixJQUN4Q0Msa0JBQWtCWCxRQUFRWSxrQkFBa0IsSUFDNUNDLGdCQUFnQkMsa0NBQWEsQ0FBQ0MscUZBQXFGLENBQUNoQixNQUFNRSxTQUFTRSxjQUFjRSxrQkFBa0JFLGFBQWFFLGVBQWVFO0lBRXJNLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTZix5Q0FBeUNrQixlQUFlLEVBQUU7SUFDeEUsSUFBTUMsaUJBQWlCRCxnQkFBZ0JFLEdBQUcsQ0FBQyxTQUFDQyxnQkFBbUI7UUFDdkQsSUFBTU4sZ0JBQWdCTSxlQUFlQyxnQkFBZ0I7UUFFckQsT0FBT1A7SUFDVCxJQUNBUSx3QkFBd0JDLDBDQUFxQixDQUFDQyxrQkFBa0IsQ0FBQ047SUFFdkUsT0FBT0k7QUFDVDtJQUVBLFdBQWU7SUFDYnhCLGlDQUFBQTtJQUNBQywwQ0FBQUE7QUFDRiJ9