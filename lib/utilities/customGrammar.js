"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    combinedCustomGrammarFromNothing: function() {
        return combinedCustomGrammarFromNothing;
    },
    combinedCustomGrammarFromReleaseContexts: function() {
        return combinedCustomGrammarFromReleaseContexts;
    },
    customGrammarFromNameAndEntries: function() {
        return customGrammarFromNameAndEntries;
    },
    default: function() {
        return _default;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
function customGrammarFromNameAndEntries(name, entries) {
    var typeBNF = entries.getTypeBNF(), termBNF = entries.getTermBNF(), statementBNF = entries.getStatementBNF(), typePattern = entries.getTypePattern(), symbolPattern = entries.getSymbolPattern(), customGrammar = _occamcustomgrammars.CustomGrammar.fromNameTypeBNFTermBNFStatementBNFTypePatternAndSymbolPattern(name, typeBNF, termBNF, statementBNF, typePattern, symbolPattern);
    return customGrammar;
}
function combinedCustomGrammarFromNothing() {
    var customGrammars = [], combinedCustomGrammar = _occamcustomgrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
function combinedCustomGrammarFromReleaseContexts(releaseContexts) {
    var customGrammars = releaseContexts.map(function(releaseContext) {
        var customGrammar = releaseContext.getCustomGrammar();
        return customGrammar;
    });
    customGrammars.reverse(); ///
    var combinedCustomGrammar = _occamcustomgrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
var _default = {
    customGrammarFromNameAndEntries: customGrammarFromNameAndEntries,
    combinedCustomGrammarFromNothing: combinedCustomGrammarFromNothing,
    combinedCustomGrammarFromReleaseContexts: combinedCustomGrammarFromReleaseContexts
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQ3VzdG9tR3JhbW1hciwgQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gZnJvbSBcIm9jY2FtLWN1c3RvbS1ncmFtbWFyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyhuYW1lLCBlbnRyaWVzKSB7XG4gIGNvbnN0IHR5cGVCTkYgPSBlbnRyaWVzLmdldFR5cGVCTkYoKSxcbiAgICAgICAgdGVybUJORiA9IGVudHJpZXMuZ2V0VGVybUJORigpLFxuICAgICAgICBzdGF0ZW1lbnRCTkYgPSBlbnRyaWVzLmdldFN0YXRlbWVudEJORigpLFxuICAgICAgICB0eXBlUGF0dGVybiA9IGVudHJpZXMuZ2V0VHlwZVBhdHRlcm4oKSxcbiAgICAgICAgc3ltYm9sUGF0dGVybiA9IGVudHJpZXMuZ2V0U3ltYm9sUGF0dGVybigpLFxuICAgICAgICBjdXN0b21HcmFtbWFyID0gQ3VzdG9tR3JhbW1hci5mcm9tTmFtZVR5cGVCTkZUZXJtQk5GU3RhdGVtZW50Qk5GVHlwZVBhdHRlcm5BbmRTeW1ib2xQYXR0ZXJuKG5hbWUsIHR5cGVCTkYsIHRlcm1CTkYsIHN0YXRlbWVudEJORiwgdHlwZVBhdHRlcm4sIHN5bWJvbFBhdHRlcm4pO1xuXG4gIHJldHVybiBjdXN0b21HcmFtbWFyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcoKSB7XG4gIGNvbnN0IGN1c3RvbUdyYW1tYXJzID0gW10sXG4gICAgICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hciA9IENvbWJpbmVkQ3VzdG9tR3JhbW1hci5mcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpO1xuXG4gIHJldHVybiBjb21iaW5lZEN1c3RvbUdyYW1tYXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tUmVsZWFzZUNvbnRleHRzKHJlbGVhc2VDb250ZXh0cykge1xuICBjb25zdCBjdXN0b21HcmFtbWFycyA9IHJlbGVhc2VDb250ZXh0cy5tYXAoKHJlbGVhc2VDb250ZXh0KSA9PiB7XG4gICAgICAgICAgY29uc3QgY3VzdG9tR3JhbW1hciA9IHJlbGVhc2VDb250ZXh0LmdldEN1c3RvbUdyYW1tYXIoKTtcblxuICAgICAgICAgIHJldHVybiBjdXN0b21HcmFtbWFyO1xuICAgICAgICB9KTtcblxuICBjdXN0b21HcmFtbWFycy5yZXZlcnNlKCk7IC8vL1xuXG4gIGNvbnN0IGNvbWJpbmVkQ3VzdG9tR3JhbW1hciA9IENvbWJpbmVkQ3VzdG9tR3JhbW1hci5mcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpO1xuXG4gIHJldHVybiBjb21iaW5lZEN1c3RvbUdyYW1tYXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyxcbiAgY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcsXG4gIGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21SZWxlYXNlQ29udGV4dHNcbn07XG4iXSwibmFtZXMiOlsiY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmciLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tUmVsZWFzZUNvbnRleHRzIiwiY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyIsIm5hbWUiLCJlbnRyaWVzIiwidHlwZUJORiIsImdldFR5cGVCTkYiLCJ0ZXJtQk5GIiwiZ2V0VGVybUJORiIsInN0YXRlbWVudEJORiIsImdldFN0YXRlbWVudEJORiIsInR5cGVQYXR0ZXJuIiwiZ2V0VHlwZVBhdHRlcm4iLCJzeW1ib2xQYXR0ZXJuIiwiZ2V0U3ltYm9sUGF0dGVybiIsImN1c3RvbUdyYW1tYXIiLCJDdXN0b21HcmFtbWFyIiwiZnJvbU5hbWVUeXBlQk5GVGVybUJORlN0YXRlbWVudEJORlR5cGVQYXR0ZXJuQW5kU3ltYm9sUGF0dGVybiIsImN1c3RvbUdyYW1tYXJzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiZnJvbUN1c3RvbUdyYW1tYXJzIiwicmVsZWFzZUNvbnRleHRzIiwibWFwIiwicmVsZWFzZUNvbnRleHQiLCJnZXRDdXN0b21HcmFtbWFyIiwicmV2ZXJzZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBZWdCQSxnQ0FBZ0M7ZUFBaENBOztJQU9BQyx3Q0FBd0M7ZUFBeENBOztJQWxCQUMsK0JBQStCO2VBQS9CQTs7SUFnQ2hCLE9BSUU7ZUFKRjs7O21DQWxDcUQ7QUFFOUMsU0FBU0EsZ0NBQWdDQyxJQUFJLEVBQUVDLE9BQU87SUFDM0QsSUFBTUMsVUFBVUQsUUFBUUUsVUFBVSxJQUM1QkMsVUFBVUgsUUFBUUksVUFBVSxJQUM1QkMsZUFBZUwsUUFBUU0sZUFBZSxJQUN0Q0MsY0FBY1AsUUFBUVEsY0FBYyxJQUNwQ0MsZ0JBQWdCVCxRQUFRVSxnQkFBZ0IsSUFDeENDLGdCQUFnQkMsa0NBQWEsQ0FBQ0MsNkRBQTZELENBQUNkLE1BQU1FLFNBQVNFLFNBQVNFLGNBQWNFLGFBQWFFO0lBRXJKLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTZjtJQUNkLElBQU1rQixpQkFBaUIsRUFBRSxFQUNuQkMsd0JBQXdCQywwQ0FBcUIsQ0FBQ0Msa0JBQWtCLENBQUNIO0lBRXZFLE9BQU9DO0FBQ1Q7QUFFTyxTQUFTbEIseUNBQXlDcUIsZUFBZTtJQUN0RSxJQUFNSixpQkFBaUJJLGdCQUFnQkMsR0FBRyxDQUFDLFNBQUNDO1FBQ3BDLElBQU1ULGdCQUFnQlMsZUFBZUMsZ0JBQWdCO1FBRXJELE9BQU9WO0lBQ1Q7SUFFTkcsZUFBZVEsT0FBTyxJQUFJLEdBQUc7SUFFN0IsSUFBTVAsd0JBQXdCQywwQ0FBcUIsQ0FBQ0Msa0JBQWtCLENBQUNIO0lBRXZFLE9BQU9DO0FBQ1Q7SUFFQSxXQUFlO0lBQ2JqQixpQ0FBQUE7SUFDQUYsa0NBQUFBO0lBQ0FDLDBDQUFBQTtBQUNGIn0=