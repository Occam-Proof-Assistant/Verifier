"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    combinedCustomGrammarFromNothing: function() {
        return combinedCustomGrammarFromNothing;
    },
    combinedCustomGrammarFromReleaseContexts: function() {
        return combinedCustomGrammarFromReleaseContexts;
    },
    customGrammarFromNameAndEntries: function() {
        return customGrammarFromNameAndEntries;
    },
    default: function() {
        return _default;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
function customGrammarFromNameAndEntries(name, entries) {
    var termBNF = entries.getTermBNF(), statementBNF = entries.getStatementBNF(), typePattern = entries.getTypePattern(), symbolPattern = entries.getSymbolPattern(), operatorPattern = entries.getOperatorPattern(), customGrammar = _occamcustomgrammars.CustomGrammar.fromNameTermBNFStatementBNFTypePatternSymbolPatternAndOperatorPattern(name, termBNF, statementBNF, typePattern, symbolPattern, operatorPattern);
    return customGrammar;
}
function combinedCustomGrammarFromNothing() {
    var customGrammars = [], combinedCustomGrammar = _occamcustomgrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
function combinedCustomGrammarFromReleaseContexts(releaseContexts) {
    var customGrammars = releaseContexts.map(function(releaseContext) {
        var customGrammar = releaseContext.getCustomGrammar();
        return customGrammar;
    });
    customGrammars.reverse(); ///
    var combinedCustomGrammar = _occamcustomgrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
var _default = {
    customGrammarFromNameAndEntries: customGrammarFromNameAndEntries,
    combinedCustomGrammarFromNothing: combinedCustomGrammarFromNothing,
    combinedCustomGrammarFromReleaseContexts: combinedCustomGrammarFromReleaseContexts
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQ3VzdG9tR3JhbW1hciwgQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gZnJvbSBcIm9jY2FtLWN1c3RvbS1ncmFtbWFyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyhuYW1lLCBlbnRyaWVzKSB7XG4gIGNvbnN0IHRlcm1CTkYgPSBlbnRyaWVzLmdldFRlcm1CTkYoKSxcbiAgICAgICAgc3RhdGVtZW50Qk5GID0gZW50cmllcy5nZXRTdGF0ZW1lbnRCTkYoKSxcbiAgICAgICAgdHlwZVBhdHRlcm4gPSBlbnRyaWVzLmdldFR5cGVQYXR0ZXJuKCksXG4gICAgICAgIHN5bWJvbFBhdHRlcm4gPSBlbnRyaWVzLmdldFN5bWJvbFBhdHRlcm4oKSxcbiAgICAgICAgb3BlcmF0b3JQYXR0ZXJuID0gZW50cmllcy5nZXRPcGVyYXRvclBhdHRlcm4oKSxcbiAgICAgICAgY3VzdG9tR3JhbW1hciA9IEN1c3RvbUdyYW1tYXIuZnJvbU5hbWVUZXJtQk5GU3RhdGVtZW50Qk5GVHlwZVBhdHRlcm5TeW1ib2xQYXR0ZXJuQW5kT3BlcmF0b3JQYXR0ZXJuKG5hbWUsIHRlcm1CTkYsIHN0YXRlbWVudEJORiwgdHlwZVBhdHRlcm4sIHN5bWJvbFBhdHRlcm4sIG9wZXJhdG9yUGF0dGVybik7XG5cbiAgcmV0dXJuIGN1c3RvbUdyYW1tYXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tTm90aGluZygpIHtcbiAgY29uc3QgY3VzdG9tR3JhbW1hcnMgPSBbXSxcbiAgICAgICAgY29tYmluZWRDdXN0b21HcmFtbWFyID0gQ29tYmluZWRDdXN0b21HcmFtbWFyLmZyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycyk7XG5cbiAgcmV0dXJuIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21SZWxlYXNlQ29udGV4dHMocmVsZWFzZUNvbnRleHRzKSB7XG4gIGNvbnN0IGN1c3RvbUdyYW1tYXJzID0gcmVsZWFzZUNvbnRleHRzLm1hcCgocmVsZWFzZUNvbnRleHQpID0+IHtcbiAgICAgICAgICBjb25zdCBjdXN0b21HcmFtbWFyID0gcmVsZWFzZUNvbnRleHQuZ2V0Q3VzdG9tR3JhbW1hcigpO1xuXG4gICAgICAgICAgcmV0dXJuIGN1c3RvbUdyYW1tYXI7XG4gICAgICAgIH0pO1xuXG4gIGN1c3RvbUdyYW1tYXJzLnJldmVyc2UoKTsgLy8vXG5cbiAgY29uc3QgY29tYmluZWRDdXN0b21HcmFtbWFyID0gQ29tYmluZWRDdXN0b21HcmFtbWFyLmZyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycyk7XG5cbiAgcmV0dXJuIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjdXN0b21HcmFtbWFyRnJvbU5hbWVBbmRFbnRyaWVzLFxuICBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tTm90aGluZyxcbiAgY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbVJlbGVhc2VDb250ZXh0c1xufTtcbiJdLCJuYW1lcyI6WyJjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tTm90aGluZyIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21SZWxlYXNlQ29udGV4dHMiLCJjdXN0b21HcmFtbWFyRnJvbU5hbWVBbmRFbnRyaWVzIiwibmFtZSIsImVudHJpZXMiLCJ0ZXJtQk5GIiwiZ2V0VGVybUJORiIsInN0YXRlbWVudEJORiIsImdldFN0YXRlbWVudEJORiIsInR5cGVQYXR0ZXJuIiwiZ2V0VHlwZVBhdHRlcm4iLCJzeW1ib2xQYXR0ZXJuIiwiZ2V0U3ltYm9sUGF0dGVybiIsIm9wZXJhdG9yUGF0dGVybiIsImdldE9wZXJhdG9yUGF0dGVybiIsImN1c3RvbUdyYW1tYXIiLCJDdXN0b21HcmFtbWFyIiwiZnJvbU5hbWVUZXJtQk5GU3RhdGVtZW50Qk5GVHlwZVBhdHRlcm5TeW1ib2xQYXR0ZXJuQW5kT3BlcmF0b3JQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hcnMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJmcm9tQ3VzdG9tR3JhbW1hcnMiLCJyZWxlYXNlQ29udGV4dHMiLCJtYXAiLCJyZWxlYXNlQ29udGV4dCIsImdldEN1c3RvbUdyYW1tYXIiLCJyZXZlcnNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFlZ0JBLGdDQUFnQztlQUFoQ0E7O0lBT0FDLHdDQUF3QztlQUF4Q0E7O0lBbEJBQywrQkFBK0I7ZUFBL0JBOztJQWdDaEIsT0FJRTtlQUpGOzs7bUNBbENxRDtBQUU5QyxTQUFTQSxnQ0FBZ0NDLElBQUksRUFBRUMsT0FBTztJQUMzRCxJQUFNQyxVQUFVRCxRQUFRRSxVQUFVLElBQzVCQyxlQUFlSCxRQUFRSSxlQUFlLElBQ3RDQyxjQUFjTCxRQUFRTSxjQUFjLElBQ3BDQyxnQkFBZ0JQLFFBQVFRLGdCQUFnQixJQUN4Q0Msa0JBQWtCVCxRQUFRVSxrQkFBa0IsSUFDNUNDLGdCQUFnQkMsa0NBQWEsQ0FBQ0MscUVBQXFFLENBQUNkLE1BQU1FLFNBQVNFLGNBQWNFLGFBQWFFLGVBQWVFO0lBRW5LLE9BQU9FO0FBQ1Q7QUFFTyxTQUFTZjtJQUNkLElBQU1rQixpQkFBaUIsRUFBRSxFQUNuQkMsd0JBQXdCQywwQ0FBcUIsQ0FBQ0Msa0JBQWtCLENBQUNIO0lBRXZFLE9BQU9DO0FBQ1Q7QUFFTyxTQUFTbEIseUNBQXlDcUIsZUFBZTtJQUN0RSxJQUFNSixpQkFBaUJJLGdCQUFnQkMsR0FBRyxDQUFDLFNBQUNDO1FBQ3BDLElBQU1ULGdCQUFnQlMsZUFBZUMsZ0JBQWdCO1FBRXJELE9BQU9WO0lBQ1Q7SUFFTkcsZUFBZVEsT0FBTyxJQUFJLEdBQUc7SUFFN0IsSUFBTVAsd0JBQXdCQywwQ0FBcUIsQ0FBQ0Msa0JBQWtCLENBQUNIO0lBRXZFLE9BQU9DO0FBQ1Q7SUFFQSxXQUFlO0lBQ2JqQixpQ0FBQUE7SUFDQUYsa0NBQUFBO0lBQ0FDLDBDQUFBQTtBQUNGIn0=