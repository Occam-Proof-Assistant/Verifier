"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    combinedCustomGrammarFromNothing: function() {
        return combinedCustomGrammarFromNothing;
    },
    combinedCustomGrammarFromReleaseContexts: function() {
        return combinedCustomGrammarFromReleaseContexts;
    },
    customGrammarFromNameAndEntries: function() {
        return customGrammarFromNameAndEntries;
    },
    default: function() {
        return _default;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
function customGrammarFromNameAndEntries(name, entries) {
    var termBNF = entries.getTermBNF(), statementBNF = entries.getStatementBNF(), typePattern = entries.getTypePattern(), symbolPattern = entries.getSymbolPattern(), propertyPattern = entries.getPropertyPattern(), operatorPattern = entries.getOperatorPattern(), customGrammar = _occamcustomgrammars.CustomGrammar.fromNameTermBNFStatementBNFTypePatternSymbolPatternPropertyPatternAndOperatorPattern(name, termBNF, statementBNF, typePattern, symbolPattern, propertyPattern, operatorPattern);
    return customGrammar;
}
function combinedCustomGrammarFromNothing() {
    var customGrammars = [], combinedCustomGrammar = _occamcustomgrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
function combinedCustomGrammarFromReleaseContexts(releaseContexts) {
    var customGrammars = releaseContexts.map(function(releaseContext) {
        var customGrammar = releaseContext.getCustomGrammar();
        return customGrammar;
    });
    customGrammars.reverse(); ///
    var combinedCustomGrammar = _occamcustomgrammars.CombinedCustomGrammar.fromCustomGrammars(customGrammars);
    return combinedCustomGrammar;
}
var _default = {
    customGrammarFromNameAndEntries: customGrammarFromNameAndEntries,
    combinedCustomGrammarFromNothing: combinedCustomGrammarFromNothing,
    combinedCustomGrammarFromReleaseContexts: combinedCustomGrammarFromReleaseContexts
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQ3VzdG9tR3JhbW1hciwgQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gZnJvbSBcIm9jY2FtLWN1c3RvbS1ncmFtbWFyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tR3JhbW1hckZyb21OYW1lQW5kRW50cmllcyhuYW1lLCBlbnRyaWVzKSB7XG4gIGNvbnN0IHRlcm1CTkYgPSBlbnRyaWVzLmdldFRlcm1CTkYoKSxcbiAgICAgICAgc3RhdGVtZW50Qk5GID0gZW50cmllcy5nZXRTdGF0ZW1lbnRCTkYoKSxcbiAgICAgICAgdHlwZVBhdHRlcm4gPSBlbnRyaWVzLmdldFR5cGVQYXR0ZXJuKCksXG4gICAgICAgIHN5bWJvbFBhdHRlcm4gPSBlbnRyaWVzLmdldFN5bWJvbFBhdHRlcm4oKSxcbiAgICAgICAgcHJvcGVydHlQYXR0ZXJuID0gZW50cmllcy5nZXRQcm9wZXJ0eVBhdHRlcm4oKSxcbiAgICAgICAgb3BlcmF0b3JQYXR0ZXJuID0gZW50cmllcy5nZXRPcGVyYXRvclBhdHRlcm4oKSxcbiAgICAgICAgY3VzdG9tR3JhbW1hciA9IEN1c3RvbUdyYW1tYXIuZnJvbU5hbWVUZXJtQk5GU3RhdGVtZW50Qk5GVHlwZVBhdHRlcm5TeW1ib2xQYXR0ZXJuUHJvcGVydHlQYXR0ZXJuQW5kT3BlcmF0b3JQYXR0ZXJuKG5hbWUsIHRlcm1CTkYsIHN0YXRlbWVudEJORiwgdHlwZVBhdHRlcm4sIHN5bWJvbFBhdHRlcm4sIHByb3BlcnR5UGF0dGVybiwgb3BlcmF0b3JQYXR0ZXJuKTtcblxuICByZXR1cm4gY3VzdG9tR3JhbW1hcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nKCkge1xuICBjb25zdCBjdXN0b21HcmFtbWFycyA9IFtdLFxuICAgICAgICBjb21iaW5lZEN1c3RvbUdyYW1tYXIgPSBDb21iaW5lZEN1c3RvbUdyYW1tYXIuZnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKTtcblxuICByZXR1cm4gY29tYmluZWRDdXN0b21HcmFtbWFyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbVJlbGVhc2VDb250ZXh0cyhyZWxlYXNlQ29udGV4dHMpIHtcbiAgY29uc3QgY3VzdG9tR3JhbW1hcnMgPSByZWxlYXNlQ29udGV4dHMubWFwKChyZWxlYXNlQ29udGV4dCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGN1c3RvbUdyYW1tYXIgPSByZWxlYXNlQ29udGV4dC5nZXRDdXN0b21HcmFtbWFyKCk7XG5cbiAgICAgICAgICByZXR1cm4gY3VzdG9tR3JhbW1hcjtcbiAgICAgICAgfSk7XG5cbiAgY3VzdG9tR3JhbW1hcnMucmV2ZXJzZSgpOyAvLy9cblxuICBjb25zdCBjb21iaW5lZEN1c3RvbUdyYW1tYXIgPSBDb21iaW5lZEN1c3RvbUdyYW1tYXIuZnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKTtcblxuICByZXR1cm4gY29tYmluZWRDdXN0b21HcmFtbWFyO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGN1c3RvbUdyYW1tYXJGcm9tTmFtZUFuZEVudHJpZXMsXG4gIGNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nLFxuICBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tUmVsZWFzZUNvbnRleHRzXG59O1xuIl0sIm5hbWVzIjpbImNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nIiwiY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbVJlbGVhc2VDb250ZXh0cyIsImN1c3RvbUdyYW1tYXJGcm9tTmFtZUFuZEVudHJpZXMiLCJuYW1lIiwiZW50cmllcyIsInRlcm1CTkYiLCJnZXRUZXJtQk5GIiwic3RhdGVtZW50Qk5GIiwiZ2V0U3RhdGVtZW50Qk5GIiwidHlwZVBhdHRlcm4iLCJnZXRUeXBlUGF0dGVybiIsInN5bWJvbFBhdHRlcm4iLCJnZXRTeW1ib2xQYXR0ZXJuIiwicHJvcGVydHlQYXR0ZXJuIiwiZ2V0UHJvcGVydHlQYXR0ZXJuIiwib3BlcmF0b3JQYXR0ZXJuIiwiZ2V0T3BlcmF0b3JQYXR0ZXJuIiwiY3VzdG9tR3JhbW1hciIsIkN1c3RvbUdyYW1tYXIiLCJmcm9tTmFtZVRlcm1CTkZTdGF0ZW1lbnRCTkZUeXBlUGF0dGVyblN5bWJvbFBhdHRlcm5Qcm9wZXJ0eVBhdHRlcm5BbmRPcGVyYXRvclBhdHRlcm4iLCJjdXN0b21HcmFtbWFycyIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hciIsIkNvbWJpbmVkQ3VzdG9tR3JhbW1hciIsImZyb21DdXN0b21HcmFtbWFycyIsInJlbGVhc2VDb250ZXh0cyIsIm1hcCIsInJlbGVhc2VDb250ZXh0IiwiZ2V0Q3VzdG9tR3JhbW1hciIsInJldmVyc2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQWdCZ0JBLGdDQUFnQztlQUFoQ0E7O0lBT0FDLHdDQUF3QztlQUF4Q0E7O0lBbkJBQywrQkFBK0I7ZUFBL0JBOztJQWlDaEIsT0FJRTtlQUpGOzs7bUNBbkNxRDtBQUU5QyxTQUFTQSxnQ0FBZ0NDLElBQUksRUFBRUMsT0FBTztJQUMzRCxJQUFNQyxVQUFVRCxRQUFRRSxVQUFVLElBQzVCQyxlQUFlSCxRQUFRSSxlQUFlLElBQ3RDQyxjQUFjTCxRQUFRTSxjQUFjLElBQ3BDQyxnQkFBZ0JQLFFBQVFRLGdCQUFnQixJQUN4Q0Msa0JBQWtCVCxRQUFRVSxrQkFBa0IsSUFDNUNDLGtCQUFrQlgsUUFBUVksa0JBQWtCLElBQzVDQyxnQkFBZ0JDLGtDQUFhLENBQUNDLG9GQUFvRixDQUFDaEIsTUFBTUUsU0FBU0UsY0FBY0UsYUFBYUUsZUFBZUUsaUJBQWlCRTtJQUVuTSxPQUFPRTtBQUNUO0FBRU8sU0FBU2pCO0lBQ2QsSUFBTW9CLGlCQUFpQixFQUFFLEVBQ25CQyx3QkFBd0JDLDBDQUFxQixDQUFDQyxrQkFBa0IsQ0FBQ0g7SUFFdkUsT0FBT0M7QUFDVDtBQUVPLFNBQVNwQix5Q0FBeUN1QixlQUFlO0lBQ3RFLElBQU1KLGlCQUFpQkksZ0JBQWdCQyxHQUFHLENBQUMsU0FBQ0M7UUFDcEMsSUFBTVQsZ0JBQWdCUyxlQUFlQyxnQkFBZ0I7UUFFckQsT0FBT1Y7SUFDVDtJQUVORyxlQUFlUSxPQUFPLElBQUksR0FBRztJQUU3QixJQUFNUCx3QkFBd0JDLDBDQUFxQixDQUFDQyxrQkFBa0IsQ0FBQ0g7SUFFdkUsT0FBT0M7QUFDVDtJQUVBLFdBQWU7SUFDYm5CLGlDQUFBQTtJQUNBRixrQ0FBQUE7SUFDQUMsMENBQUFBO0FBQ0YifQ==