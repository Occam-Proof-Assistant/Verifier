"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchNonTerminalNodeModuloBrackets: function() {
        return matchNonTerminalNodeModuloBrackets;
    },
    bracketedNonTerminalNodeFromNonTerminalNode: function() {
        return bracketedNonTerminalNodeFromNonTerminalNode;
    }
});
var _matcher = require("../matcher");
var _array = require("../utilities/array");
var _constants = require("../constants");
function matchNonTerminalNodeModuloBrackets(nonTerminalNodeA, nonTerminalNodeB, ruleName) {
    var nonTerminalNodeMatchesModuloBrackets = false;
    if (!nonTerminalNodeMatchesModuloBrackets) {
        var nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
        nonTerminalNodeMatchesModuloBrackets = nonTerminalNodeMatches; ///
    }
    if (!nonTerminalNodeMatchesModuloBrackets) {
        var bracketedNonTerminalNodeA = bracketedNonTerminalNodeFromNonTerminalNode(nonTerminalNodeA, ruleName);
        if (bracketedNonTerminalNodeA !== null) {
            var nodeA = bracketedNonTerminalNodeA, nodeB = nonTerminalNodeB, nodeMatches = _matcher.matcher.matchNode(nodeA, nodeB);
            nonTerminalNodeMatchesModuloBrackets = nodeMatches; ///
        }
    }
    if (!nonTerminalNodeMatchesModuloBrackets) {
        var bracketedNonTerminalNodeB = bracketedNonTerminalNodeFromNonTerminalNode(nonTerminalNodeB, ruleName);
        if (bracketedNonTerminalNodeB !== null) {
            var nodeB1 = bracketedNonTerminalNodeB, nodeA1 = nonTerminalNodeA, nodeMatches1 = _matcher.matcher.matchNode(nodeA1, nodeB1);
            nonTerminalNodeMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    return nonTerminalNodeMatchesModuloBrackets;
}
function bracketedNonTerminalNodeFromNonTerminalNode(nonTerminalNode, ruleName) {
    var bracketedNonTerminalNode = null;
    var childNodes = nonTerminalNode.getChildNodes(), childNodesLength = childNodes.length;
    if (childNodesLength === _constants.BRACKETED_CHILD_NODES_LENGTH) {
        var firstChildNode = (0, _array.first)(childNodes), thirdChildNode = (0, _array.third)(childNodes), secondChildNode = (0, _array.second)(childNodes), firstChildNodeTerminalNode = firstChildNode.isTerminalNode(), thirdChildNodeTerminalNode = thirdChildNode.isTerminalNode(), secondChildNodeNonTerminalNode = secondChildNode.isNonTerminalNode();
        if (firstChildNodeTerminalNode && secondChildNodeNonTerminalNode && thirdChildNodeTerminalNode) {
            var _$nonTerminalNode = secondChildNode, firstTerminalNode = firstChildNode, secondTerminalNode = thirdChildNode, nonTerminalNodeRuleName = _$nonTerminalNode.getRuleName(), firstTerminalNodeContent = firstTerminalNode.getContent(), secondTerminalNodeContent = secondTerminalNode.getContent(), nonTerminalNodeRuleNameRuleName = nonTerminalNodeRuleName === ruleName, firstTerminalNodeContentLeftBracket = firstTerminalNodeContent === _constants.LEFT_BRACKET, secondTerminalNodeContentRightBracket = secondTerminalNodeContent === _constants.RIGHT_BRACKET;
            if (nonTerminalNodeRuleNameRuleName && firstTerminalNodeContentLeftBracket && secondTerminalNodeContentRightBracket) {
                bracketedNonTerminalNode = _$nonTerminalNode; ///
            }
        }
    }
    return bracketedNonTerminalNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbm9uVGVybWluYWxOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBtYXRjaGVyIH0gZnJvbSBcIi4uL21hdGNoZXJcIjtcbmltcG9ydCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgQlJBQ0tFVEVEX0NISUxEX05PREVTX0xFTkdUSCwgTEVGVF9CUkFDS0VULCBSSUdIVF9CUkFDS0VUIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hOb25UZXJtaW5hbE5vZGVNb2R1bG9CcmFja2V0cyhub25UZXJtaW5hbE5vZGVBLCBub25UZXJtaW5hbE5vZGVCLCBydWxlTmFtZSkge1xuICBsZXQgbm9uVGVybWluYWxOb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gZmFsc2U7XG5cbiAgaWYgKCFub25UZXJtaW5hbE5vZGVNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vblRlcm1pbmFsTm9kZShub25UZXJtaW5hbE5vZGVBLCBub25UZXJtaW5hbE5vZGVCKTtcblxuICAgIG5vblRlcm1pbmFsTm9kZU1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vblRlcm1pbmFsTm9kZU1hdGNoZXM7ICAvLy9cbiAgfVxuXG4gIGlmICghbm9uVGVybWluYWxOb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQSA9IGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUZyb21Ob25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlQSwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUEgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVBID0gYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQSwgIC8vL1xuICAgICAgICAgICAgbm9kZUIgPSBub25UZXJtaW5hbE5vZGVCLCAvLy9cbiAgICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgICAgbm9uVGVybWluYWxOb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gbm9kZU1hdGNoZXM7IC8vL1xuICAgIH1cbiAgfVxuXG4gIGlmICghbm9uVGVybWluYWxOb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQiA9IGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUZyb21Ob25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlQiwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUIgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVCID0gYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQiwgIC8vL1xuICAgICAgICAgICAgbm9kZUEgPSBub25UZXJtaW5hbE5vZGVBLCAvLy9cbiAgICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgICAgbm9uVGVybWluYWxOb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gbm9kZU1hdGNoZXM7IC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub25UZXJtaW5hbE5vZGVNYXRjaGVzTW9kdWxvQnJhY2tldHM7XG59XG5cblxuLy8gcnVsZU5hbWUgPSBNRVRBU1RBVEVNRU5UX1JVTEVfTkFNRSwgTUVUQV9BUkdVTUVOVF9SVUxFX05BTUUsIFNUQVRFTUVOVF9SVUxFX05BTUVcblxuZXhwb3J0IGZ1bmN0aW9uIGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUZyb21Ob25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlLCBydWxlTmFtZSkge1xuICBsZXQgYnJhY2tldGVkTm9uVGVybWluYWxOb2RlID0gbnVsbDtcblxuICBjb25zdCBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKSxcbiAgICAgICAgY2hpbGROb2Rlc0xlbmd0aCA9IGNoaWxkTm9kZXMubGVuZ3RoO1xuXG4gIGlmIChjaGlsZE5vZGVzTGVuZ3RoID09PSBCUkFDS0VURURfQ0hJTERfTk9ERVNfTEVOR1RIKSB7XG4gICAgY29uc3QgZmlyc3RDaGlsZE5vZGUgPSBmaXJzdChjaGlsZE5vZGVzKSxcbiAgICAgICAgICB0aGlyZENoaWxkTm9kZSA9IHRoaXJkKGNoaWxkTm9kZXMpLFxuICAgICAgICAgIHNlY29uZENoaWxkTm9kZSA9IHNlY29uZChjaGlsZE5vZGVzKSxcbiAgICAgICAgICBmaXJzdENoaWxkTm9kZVRlcm1pbmFsTm9kZSA9IGZpcnN0Q2hpbGROb2RlLmlzVGVybWluYWxOb2RlKCksXG4gICAgICAgICAgdGhpcmRDaGlsZE5vZGVUZXJtaW5hbE5vZGUgPSB0aGlyZENoaWxkTm9kZS5pc1Rlcm1pbmFsTm9kZSgpLFxuICAgICAgICAgIHNlY29uZENoaWxkTm9kZU5vblRlcm1pbmFsTm9kZSA9IHNlY29uZENoaWxkTm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gICAgaWYgKGZpcnN0Q2hpbGROb2RlVGVybWluYWxOb2RlICYmIHNlY29uZENoaWxkTm9kZU5vblRlcm1pbmFsTm9kZSAmJiB0aGlyZENoaWxkTm9kZVRlcm1pbmFsTm9kZSkge1xuICAgICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gc2Vjb25kQ2hpbGROb2RlLCAgLy8vXG4gICAgICAgICAgICBmaXJzdFRlcm1pbmFsTm9kZSA9IGZpcnN0Q2hpbGROb2RlLCAvLy9cbiAgICAgICAgICAgIHNlY29uZFRlcm1pbmFsTm9kZSA9IHRoaXJkQ2hpbGROb2RlLCAgLy8vXG4gICAgICAgICAgICBub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgICAgZmlyc3RUZXJtaW5hbE5vZGVDb250ZW50ID0gZmlyc3RUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpLFxuICAgICAgICAgICAgc2Vjb25kVGVybWluYWxOb2RlQ29udGVudCA9IHNlY29uZFRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgICAgICBub25UZXJtaW5hbE5vZGVSdWxlTmFtZVJ1bGVOYW1lID0gKG5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lID09PSBydWxlTmFtZSksXG4gICAgICAgICAgICBmaXJzdFRlcm1pbmFsTm9kZUNvbnRlbnRMZWZ0QnJhY2tldCA9IChmaXJzdFRlcm1pbmFsTm9kZUNvbnRlbnQgPT09IExFRlRfQlJBQ0tFVCksXG4gICAgICAgICAgICBzZWNvbmRUZXJtaW5hbE5vZGVDb250ZW50UmlnaHRCcmFja2V0ID0gKHNlY29uZFRlcm1pbmFsTm9kZUNvbnRlbnQgPT09IFJJR0hUX0JSQUNLRVQpO1xuXG4gICAgICBpZiAobm9uVGVybWluYWxOb2RlUnVsZU5hbWVSdWxlTmFtZSAmJiBmaXJzdFRlcm1pbmFsTm9kZUNvbnRlbnRMZWZ0QnJhY2tldCAmJiBzZWNvbmRUZXJtaW5hbE5vZGVDb250ZW50UmlnaHRCcmFja2V0KSB7XG4gICAgICAgIGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZSA9IG5vblRlcm1pbmFsTm9kZTsgIC8vL1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBicmFja2V0ZWROb25UZXJtaW5hbE5vZGU7XG59XG5cbiJdLCJuYW1lcyI6WyJtYXRjaE5vblRlcm1pbmFsTm9kZU1vZHVsb0JyYWNrZXRzIiwiYnJhY2tldGVkTm9uVGVybWluYWxOb2RlRnJvbU5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZUEiLCJub25UZXJtaW5hbE5vZGVCIiwicnVsZU5hbWUiLCJub25UZXJtaW5hbE5vZGVNYXRjaGVzTW9kdWxvQnJhY2tldHMiLCJub25UZXJtaW5hbE5vZGVNYXRjaGVzIiwibWF0Y2hlciIsIm1hdGNoTm9uVGVybWluYWxOb2RlIiwiYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQSIsIm5vZGVBIiwibm9kZUIiLCJub2RlTWF0Y2hlcyIsIm1hdGNoTm9kZSIsImJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUIiLCJub25UZXJtaW5hbE5vZGUiLCJicmFja2V0ZWROb25UZXJtaW5hbE5vZGUiLCJjaGlsZE5vZGVzIiwiZ2V0Q2hpbGROb2RlcyIsImNoaWxkTm9kZXNMZW5ndGgiLCJsZW5ndGgiLCJCUkFDS0VURURfQ0hJTERfTk9ERVNfTEVOR1RIIiwiZmlyc3RDaGlsZE5vZGUiLCJmaXJzdCIsInRoaXJkQ2hpbGROb2RlIiwidGhpcmQiLCJzZWNvbmRDaGlsZE5vZGUiLCJzZWNvbmQiLCJmaXJzdENoaWxkTm9kZVRlcm1pbmFsTm9kZSIsImlzVGVybWluYWxOb2RlIiwidGhpcmRDaGlsZE5vZGVUZXJtaW5hbE5vZGUiLCJzZWNvbmRDaGlsZE5vZGVOb25UZXJtaW5hbE5vZGUiLCJpc05vblRlcm1pbmFsTm9kZSIsImZpcnN0VGVybWluYWxOb2RlIiwic2Vjb25kVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlUnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsImZpcnN0VGVybWluYWxOb2RlQ29udGVudCIsImdldENvbnRlbnQiLCJzZWNvbmRUZXJtaW5hbE5vZGVDb250ZW50Iiwibm9uVGVybWluYWxOb2RlUnVsZU5hbWVSdWxlTmFtZSIsImZpcnN0VGVybWluYWxOb2RlQ29udGVudExlZnRCcmFja2V0IiwiTEVGVF9CUkFDS0VUIiwic2Vjb25kVGVybWluYWxOb2RlQ29udGVudFJpZ2h0QnJhY2tldCIsIlJJR0hUX0JSQUNLRVQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQU1nQkEsa0NBQWtDO2VBQWxDQTs7SUF1Q0FDLDJDQUEyQztlQUEzQ0E7Ozt1QkEzQ1E7cUJBQ2E7eUJBQ3FDO0FBRW5FLFNBQVNELG1DQUFtQ0UsZ0JBQWdCLEVBQUVDLGdCQUFnQixFQUFFQyxRQUFRLEVBQUU7SUFDL0YsSUFBSUMsdUNBQXVDLEtBQUs7SUFFaEQsSUFBSSxDQUFDQSxzQ0FBc0M7UUFDekMsSUFBTUMseUJBQXlCQyxnQkFBTyxDQUFDQyxvQkFBb0IsQ0FBQ04sa0JBQWtCQztRQUU5RUUsdUNBQXVDQyx3QkFBeUIsR0FBRztJQUNyRSxDQUFDO0lBRUQsSUFBSSxDQUFDRCxzQ0FBc0M7UUFDekMsSUFBTUksNEJBQTRCUiw0Q0FBNENDLGtCQUFrQkU7UUFFaEcsSUFBSUssOEJBQThCLElBQUksRUFBRTtZQUN0QyxJQUFNQyxRQUFRRCwyQkFDUkUsUUFBUVIsa0JBQ1JTLGNBQWNMLGdCQUFPLENBQUNNLFNBQVMsQ0FBQ0gsT0FBT0M7WUFFN0NOLHVDQUF1Q08sYUFBYSxHQUFHO1FBQ3pELENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUFDUCxzQ0FBc0M7UUFDekMsSUFBTVMsNEJBQTRCYiw0Q0FBNENFLGtCQUFrQkM7UUFFaEcsSUFBSVUsOEJBQThCLElBQUksRUFBRTtZQUN0QyxJQUFNSCxTQUFRRywyQkFDUkosU0FBUVIsa0JBQ1JVLGVBQWNMLGdCQUFPLENBQUNNLFNBQVMsQ0FBQ0gsUUFBT0M7WUFFN0NOLHVDQUF1Q08sY0FBYSxHQUFHO1FBQ3pELENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBT1A7QUFDVDtBQUtPLFNBQVNKLDRDQUE0Q2MsZUFBZSxFQUFFWCxRQUFRLEVBQUU7SUFDckYsSUFBSVksMkJBQTJCLElBQUk7SUFFbkMsSUFBTUMsYUFBYUYsZ0JBQWdCRyxhQUFhLElBQzFDQyxtQkFBbUJGLFdBQVdHLE1BQU07SUFFMUMsSUFBSUQscUJBQXFCRSx1Q0FBNEIsRUFBRTtRQUNyRCxJQUFNQyxpQkFBaUJDLElBQUFBLFlBQUssRUFBQ04sYUFDdkJPLGlCQUFpQkMsSUFBQUEsWUFBSyxFQUFDUixhQUN2QlMsa0JBQWtCQyxJQUFBQSxhQUFNLEVBQUNWLGFBQ3pCVyw2QkFBNkJOLGVBQWVPLGNBQWMsSUFDMURDLDZCQUE2Qk4sZUFBZUssY0FBYyxJQUMxREUsaUNBQWlDTCxnQkFBZ0JNLGlCQUFpQjtRQUV4RSxJQUFJSiw4QkFBOEJHLGtDQUFrQ0QsNEJBQTRCO1lBQzlGLElBQU1mLG9CQUFrQlcsaUJBQ2xCTyxvQkFBb0JYLGdCQUNwQlkscUJBQXFCVixnQkFDckJXLDBCQUEwQnBCLGtCQUFnQnFCLFdBQVcsSUFDckRDLDJCQUEyQkosa0JBQWtCSyxVQUFVLElBQ3ZEQyw0QkFBNEJMLG1CQUFtQkksVUFBVSxJQUN6REUsa0NBQW1DTCw0QkFBNEIvQixVQUMvRHFDLHNDQUF1Q0osNkJBQTZCSyx1QkFBWSxFQUNoRkMsd0NBQXlDSiw4QkFBOEJLLHdCQUFhO1lBRTFGLElBQUlKLG1DQUFtQ0MsdUNBQXVDRSx1Q0FBdUM7Z0JBQ25IM0IsMkJBQTJCRCxtQkFBa0IsR0FBRztZQUNsRCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPQztBQUNUIn0=