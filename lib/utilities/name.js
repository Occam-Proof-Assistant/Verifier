"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    metaTypeNameFromMetaTypeNode: function() {
        return metaTypeNameFromMetaTypeNode;
    },
    metavariableNameFromMetavariableNode: function() {
        return metavariableNameFromMetavariableNode;
    },
    typeNameFromTypeNode: function() {
        return typeNameFromTypeNode;
    },
    variableNameFromVariableNode: function() {
        return variableNameFromVariableNode;
    }
});
var _query = require("../utilities/query");
var typeTerminalNodeQuery = (0, _query.nodeQuery)("/type/@type"), nameTerminalNodeQuery = (0, _query.nodeQuery)("/variable|metavariable/@name"), metaTypeTerminalNodeQuery = (0, _query.nodeQuery)("/metaType/@meta-type");
function typeNameFromTypeNode(typeNode) {
    var typeTerminalNode = typeTerminalNodeQuery(typeNode), typeTerminalNodeContent = typeTerminalNode.getContent(), typeName = typeTerminalNodeContent; ///
    return typeName;
}
function variableNameFromVariableNode(variableNode) {
    var nameTerminalNode = nameTerminalNodeQuery(variableNode), nameTerminalNodeContent = nameTerminalNode.getContent(), variableName = nameTerminalNodeContent; ///
    return variableName;
}
function metaTypeNameFromMetaTypeNode(metaTypeNode) {
    var metaTypeTerminalNode = metaTypeTerminalNodeQuery(metaTypeNode), metaTypeTerminalNodeContent = metaTypeTerminalNode.getContent(), metaTypeName = metaTypeTerminalNodeContent; ///
    return metaTypeName;
}
function metavariableNameFromMetavariableNode(metavariableNode) {
    var nameTerminalNode = nameTerminalNodeQuery(metavariableNode), nameTerminalNodeContent = nameTerminalNode.getContent(), metavariableName = nameTerminalNodeContent; ///
    return metavariableName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCB0eXBlVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdHlwZS9AdHlwZVwiKSxcbiAgICAgIG5hbWVUZXJtaW5hbE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi92YXJpYWJsZXxtZXRhdmFyaWFibGUvQG5hbWVcIiksXG4gICAgICBtZXRhVHlwZVRlcm1pbmFsTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL21ldGFUeXBlL0BtZXRhLXR5cGVcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiB0eXBlTmFtZUZyb21UeXBlTm9kZSh0eXBlTm9kZSkge1xuICBjb25zdCB0eXBlVGVybWluYWxOb2RlID0gdHlwZVRlcm1pbmFsTm9kZVF1ZXJ5KHR5cGVOb2RlKSxcbiAgICAgICAgdHlwZVRlcm1pbmFsTm9kZUNvbnRlbnQgPSB0eXBlVGVybWluYWxOb2RlLmdldENvbnRlbnQoKSxcbiAgICAgICAgdHlwZU5hbWUgPSB0eXBlVGVybWluYWxOb2RlQ29udGVudDsgLy8vXG5cbiAgcmV0dXJuIHR5cGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFyaWFibGVOYW1lRnJvbVZhcmlhYmxlTm9kZSh2YXJpYWJsZU5vZGUpIHtcbiAgY29uc3QgbmFtZVRlcm1pbmFsTm9kZSA9IG5hbWVUZXJtaW5hbE5vZGVRdWVyeSh2YXJpYWJsZU5vZGUpLFxuICAgICAgICBuYW1lVGVybWluYWxOb2RlQ29udGVudCA9IG5hbWVUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpLFxuICAgICAgICB2YXJpYWJsZU5hbWUgPSBuYW1lVGVybWluYWxOb2RlQ29udGVudDsgLy8vXG5cbiAgcmV0dXJuIHZhcmlhYmxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGFUeXBlTmFtZUZyb21NZXRhVHlwZU5vZGUobWV0YVR5cGVOb2RlKSB7XG4gICAgY29uc3QgbWV0YVR5cGVUZXJtaW5hbE5vZGUgPSBtZXRhVHlwZVRlcm1pbmFsTm9kZVF1ZXJ5KG1ldGFUeXBlTm9kZSksXG4gICAgICAgICAgbWV0YVR5cGVUZXJtaW5hbE5vZGVDb250ZW50ID0gbWV0YVR5cGVUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpLFxuICAgICAgICAgIG1ldGFUeXBlTmFtZSA9IG1ldGFUeXBlVGVybWluYWxOb2RlQ29udGVudDsgLy8vXG5cbiAgcmV0dXJuIG1ldGFUeXBlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGF2YXJpYWJsZU5hbWVGcm9tTWV0YXZhcmlhYmxlTm9kZShtZXRhdmFyaWFibGVOb2RlKSB7XG4gIGNvbnN0IG5hbWVUZXJtaW5hbE5vZGUgPSBuYW1lVGVybWluYWxOb2RlUXVlcnkobWV0YXZhcmlhYmxlTm9kZSksXG4gICAgICAgIG5hbWVUZXJtaW5hbE5vZGVDb250ZW50ID0gbmFtZVRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgIG1ldGF2YXJpYWJsZU5hbWUgPSBuYW1lVGVybWluYWxOb2RlQ29udGVudDsgLy8vXG5cbiAgcmV0dXJuIG1ldGF2YXJpYWJsZU5hbWU7XG59XG4iXSwibmFtZXMiOlsibWV0YVR5cGVOYW1lRnJvbU1ldGFUeXBlTm9kZSIsIm1ldGF2YXJpYWJsZU5hbWVGcm9tTWV0YXZhcmlhYmxlTm9kZSIsInR5cGVOYW1lRnJvbVR5cGVOb2RlIiwidmFyaWFibGVOYW1lRnJvbVZhcmlhYmxlTm9kZSIsInR5cGVUZXJtaW5hbE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsIm5hbWVUZXJtaW5hbE5vZGVRdWVyeSIsIm1ldGFUeXBlVGVybWluYWxOb2RlUXVlcnkiLCJ0eXBlTm9kZSIsInR5cGVUZXJtaW5hbE5vZGUiLCJ0eXBlVGVybWluYWxOb2RlQ29udGVudCIsImdldENvbnRlbnQiLCJ0eXBlTmFtZSIsInZhcmlhYmxlTm9kZSIsIm5hbWVUZXJtaW5hbE5vZGUiLCJuYW1lVGVybWluYWxOb2RlQ29udGVudCIsInZhcmlhYmxlTmFtZSIsIm1ldGFUeXBlTm9kZSIsIm1ldGFUeXBlVGVybWluYWxOb2RlIiwibWV0YVR5cGVUZXJtaW5hbE5vZGVDb250ZW50IiwibWV0YVR5cGVOYW1lIiwibWV0YXZhcmlhYmxlTm9kZSIsIm1ldGF2YXJpYWJsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXdCZ0JBLDRCQUE0QjtlQUE1QkE7O0lBUUFDLG9DQUFvQztlQUFwQ0E7O0lBeEJBQyxvQkFBb0I7ZUFBcEJBOztJQVFBQyw0QkFBNEI7ZUFBNUJBOzs7cUJBZFU7QUFFMUIsSUFBTUMsd0JBQXdCQyxJQUFBQSxnQkFBUyxFQUFDLGdCQUNsQ0Msd0JBQXdCRCxJQUFBQSxnQkFBUyxFQUFDLGlDQUNsQ0UsNEJBQTRCRixJQUFBQSxnQkFBUyxFQUFDO0FBRXJDLFNBQVNILHFCQUFxQk0sUUFBUTtJQUMzQyxJQUFNQyxtQkFBbUJMLHNCQUFzQkksV0FDekNFLDBCQUEwQkQsaUJBQWlCRSxVQUFVLElBQ3JEQyxXQUFXRix5QkFBeUIsR0FBRztJQUU3QyxPQUFPRTtBQUNUO0FBRU8sU0FBU1QsNkJBQTZCVSxZQUFZO0lBQ3ZELElBQU1DLG1CQUFtQlIsc0JBQXNCTyxlQUN6Q0UsMEJBQTBCRCxpQkFBaUJILFVBQVUsSUFDckRLLGVBQWVELHlCQUF5QixHQUFHO0lBRWpELE9BQU9DO0FBQ1Q7QUFFTyxTQUFTaEIsNkJBQTZCaUIsWUFBWTtJQUNyRCxJQUFNQyx1QkFBdUJYLDBCQUEwQlUsZUFDakRFLDhCQUE4QkQscUJBQXFCUCxVQUFVLElBQzdEUyxlQUFlRCw2QkFBNkIsR0FBRztJQUV2RCxPQUFPQztBQUNUO0FBRU8sU0FBU25CLHFDQUFxQ29CLGdCQUFnQjtJQUNuRSxJQUFNUCxtQkFBbUJSLHNCQUFzQmUsbUJBQ3pDTiwwQkFBMEJELGlCQUFpQkgsVUFBVSxJQUNyRFcsbUJBQW1CUCx5QkFBeUIsR0FBRztJQUVyRCxPQUFPTztBQUNUIn0=