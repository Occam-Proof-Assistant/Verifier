"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    labelNameFromLabelNode: function() {
        return labelNameFromLabelNode;
    },
    metaTypeNameFromMetaTypeNode: function() {
        return metaTypeNameFromMetaTypeNode;
    },
    referenceNameFromReferenceNode: function() {
        return referenceNameFromReferenceNode;
    },
    typeNameFromTypeNode: function() {
        return typeNameFromTypeNode;
    }
});
var _query = require("../utilities/query");
var typeTerminalNodeQuery = (0, _query.nodeQuery)("/type/@type"), metaTypeTerminalNodeQuery = (0, _query.nodeQuery)("/metaType/@meta-type"), labelNameTerminalNodeQuery = (0, _query.nodeQuery)("/label/@name"), referenceNameTerminalNodeQuery = (0, _query.nodeQuery)("/reference/@name");
function typeNameFromTypeNode(typeNode) {
    var typeName = null;
    if (typeNode !== null) {
        var typeTerminalNode = typeTerminalNodeQuery(typeNode), typeTerminalNodeContent = typeTerminalNode.getContent();
        typeName = typeTerminalNodeContent; ///
    }
    return typeName;
}
function labelNameFromLabelNode(labelNode) {
    var labelNameTerminalNode = labelNameTerminalNodeQuery(labelNode), labelNameTerminalNodeContent = labelNameTerminalNode.getContent(), labelName = labelNameTerminalNodeContent; ///
    return labelName;
}
function metaTypeNameFromMetaTypeNode(metaTypeNode) {
    var metaTypeName = null;
    if (metaTypeNode !== null) {
        var metaTypeTerminalNode = metaTypeTerminalNodeQuery(metaTypeNode), metaTypeTerminalNodeContent = metaTypeTerminalNode.getContent();
        metaTypeName = metaTypeTerminalNodeContent; ///
    }
    return metaTypeName;
}
function referenceNameFromReferenceNode(referenceNode) {
    var referenceNameTerminalNode = referenceNameTerminalNodeQuery(referenceNode), referenceNameTerminalNodeContent = referenceNameTerminalNode.getContent(), referenceName = referenceNameTerminalNodeContent; ///
    return referenceName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCB0eXBlVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdHlwZS9AdHlwZVwiKSxcbiAgICAgIG1ldGFUeXBlVGVybWluYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvbWV0YVR5cGUvQG1ldGEtdHlwZVwiKSxcbiAgICAgIGxhYmVsTmFtZVRlcm1pbmFsTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2xhYmVsL0BuYW1lXCIpLFxuICAgICAgcmVmZXJlbmNlTmFtZVRlcm1pbmFsTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3JlZmVyZW5jZS9AbmFtZVwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVOYW1lRnJvbVR5cGVOb2RlKHR5cGVOb2RlKSB7XG4gIGxldCB0eXBlTmFtZSA9IG51bGw7XG5cbiAgaWYgKHR5cGVOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHlwZVRlcm1pbmFsTm9kZSA9IHR5cGVUZXJtaW5hbE5vZGVRdWVyeSh0eXBlTm9kZSksXG4gICAgICAgICAgdHlwZVRlcm1pbmFsTm9kZUNvbnRlbnQgPSB0eXBlVGVybWluYWxOb2RlLmdldENvbnRlbnQoKTtcblxuICAgIHR5cGVOYW1lID0gdHlwZVRlcm1pbmFsTm9kZUNvbnRlbnQ7IC8vL1xuICB9XG5cbiAgcmV0dXJuIHR5cGVOYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGFiZWxOYW1lRnJvbUxhYmVsTm9kZShsYWJlbE5vZGUpIHtcbiAgY29uc3QgbGFiZWxOYW1lVGVybWluYWxOb2RlID0gbGFiZWxOYW1lVGVybWluYWxOb2RlUXVlcnkobGFiZWxOb2RlKSxcbiAgICAgICAgbGFiZWxOYW1lVGVybWluYWxOb2RlQ29udGVudCA9IGxhYmVsTmFtZVRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgIGxhYmVsTmFtZSA9IGxhYmVsTmFtZVRlcm1pbmFsTm9kZUNvbnRlbnQ7IC8vL1xuXG4gIHJldHVybiBsYWJlbE5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXRhVHlwZU5hbWVGcm9tTWV0YVR5cGVOb2RlKG1ldGFUeXBlTm9kZSkge1xuICBsZXQgbWV0YVR5cGVOYW1lID0gbnVsbDtcblxuICBpZiAobWV0YVR5cGVOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgbWV0YVR5cGVUZXJtaW5hbE5vZGUgPSBtZXRhVHlwZVRlcm1pbmFsTm9kZVF1ZXJ5KG1ldGFUeXBlTm9kZSksXG4gICAgICAgICAgbWV0YVR5cGVUZXJtaW5hbE5vZGVDb250ZW50ID0gbWV0YVR5cGVUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpO1xuXG4gICAgbWV0YVR5cGVOYW1lID0gbWV0YVR5cGVUZXJtaW5hbE5vZGVDb250ZW50OyAvLy9cbiAgfVxuXG4gIHJldHVybiBtZXRhVHlwZU5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZlcmVuY2VOYW1lRnJvbVJlZmVyZW5jZU5vZGUocmVmZXJlbmNlTm9kZSkge1xuICBjb25zdCByZWZlcmVuY2VOYW1lVGVybWluYWxOb2RlID0gcmVmZXJlbmNlTmFtZVRlcm1pbmFsTm9kZVF1ZXJ5KHJlZmVyZW5jZU5vZGUpLFxuICAgICAgICByZWZlcmVuY2VOYW1lVGVybWluYWxOb2RlQ29udGVudCA9IHJlZmVyZW5jZU5hbWVUZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpLFxuICAgICAgICByZWZlcmVuY2VOYW1lID0gcmVmZXJlbmNlTmFtZVRlcm1pbmFsTm9kZUNvbnRlbnQ7IC8vL1xuXG4gIHJldHVybiByZWZlcmVuY2VOYW1lO1xufVxuIl0sIm5hbWVzIjpbImxhYmVsTmFtZUZyb21MYWJlbE5vZGUiLCJtZXRhVHlwZU5hbWVGcm9tTWV0YVR5cGVOb2RlIiwicmVmZXJlbmNlTmFtZUZyb21SZWZlcmVuY2VOb2RlIiwidHlwZU5hbWVGcm9tVHlwZU5vZGUiLCJ0eXBlVGVybWluYWxOb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJtZXRhVHlwZVRlcm1pbmFsTm9kZVF1ZXJ5IiwibGFiZWxOYW1lVGVybWluYWxOb2RlUXVlcnkiLCJyZWZlcmVuY2VOYW1lVGVybWluYWxOb2RlUXVlcnkiLCJ0eXBlTm9kZSIsInR5cGVOYW1lIiwidHlwZVRlcm1pbmFsTm9kZSIsInR5cGVUZXJtaW5hbE5vZGVDb250ZW50IiwiZ2V0Q29udGVudCIsImxhYmVsTm9kZSIsImxhYmVsTmFtZVRlcm1pbmFsTm9kZSIsImxhYmVsTmFtZVRlcm1pbmFsTm9kZUNvbnRlbnQiLCJsYWJlbE5hbWUiLCJtZXRhVHlwZU5vZGUiLCJtZXRhVHlwZU5hbWUiLCJtZXRhVHlwZVRlcm1pbmFsTm9kZSIsIm1ldGFUeXBlVGVybWluYWxOb2RlQ29udGVudCIsInJlZmVyZW5jZU5vZGUiLCJyZWZlcmVuY2VOYW1lVGVybWluYWxOb2RlIiwicmVmZXJlbmNlTmFtZVRlcm1pbmFsTm9kZUNvbnRlbnQiLCJyZWZlcmVuY2VOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFzQmdCQSxzQkFBc0I7ZUFBdEJBOztJQVFBQyw0QkFBNEI7ZUFBNUJBOztJQWFBQyw4QkFBOEI7ZUFBOUJBOztJQWxDQUMsb0JBQW9CO2VBQXBCQTs7O3FCQVBVO0FBRTFCLElBQU1DLHdCQUF3QkMsSUFBQUEsZ0JBQVMsRUFBQyxnQkFDbENDLDRCQUE0QkQsSUFBQUEsZ0JBQVMsRUFBQyx5QkFDdENFLDZCQUE2QkYsSUFBQUEsZ0JBQVMsRUFBQyxpQkFDdkNHLGlDQUFpQ0gsSUFBQUEsZ0JBQVMsRUFBQztBQUUxQyxTQUFTRixxQkFBcUJNLFFBQVE7SUFDM0MsSUFBSUMsV0FBVztJQUVmLElBQUlELGFBQWEsTUFBTTtRQUNyQixJQUFNRSxtQkFBbUJQLHNCQUFzQkssV0FDekNHLDBCQUEwQkQsaUJBQWlCRSxVQUFVO1FBRTNESCxXQUFXRSx5QkFBeUIsR0FBRztJQUN6QztJQUVBLE9BQU9GO0FBQ1Q7QUFFTyxTQUFTVix1QkFBdUJjLFNBQVM7SUFDOUMsSUFBTUMsd0JBQXdCUiwyQkFBMkJPLFlBQ25ERSwrQkFBK0JELHNCQUFzQkYsVUFBVSxJQUMvREksWUFBWUQsOEJBQThCLEdBQUc7SUFFbkQsT0FBT0M7QUFDVDtBQUVPLFNBQVNoQiw2QkFBNkJpQixZQUFZO0lBQ3ZELElBQUlDLGVBQWU7SUFFbkIsSUFBSUQsaUJBQWlCLE1BQU07UUFDekIsSUFBTUUsdUJBQXVCZCwwQkFBMEJZLGVBQ2pERyw4QkFBOEJELHFCQUFxQlAsVUFBVTtRQUVuRU0sZUFBZUUsNkJBQTZCLEdBQUc7SUFDakQ7SUFFQSxPQUFPRjtBQUNUO0FBRU8sU0FBU2pCLCtCQUErQm9CLGFBQWE7SUFDMUQsSUFBTUMsNEJBQTRCZiwrQkFBK0JjLGdCQUMzREUsbUNBQW1DRCwwQkFBMEJWLFVBQVUsSUFDdkVZLGdCQUFnQkQsa0NBQWtDLEdBQUc7SUFFM0QsT0FBT0M7QUFDVCJ9