"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    bracketedStatementChildNodeFromStatementNode: function() {
        return bracketedStatementChildNodeFromStatementNode;
    },
    bracketedTermChildNodeFromTermNode: function() {
        return bracketedTermChildNodeFromTermNode;
    },
    stripBracketsFromStatementNode: function() {
        return stripBracketsFromStatementNode;
    },
    stripBracketsFromTermNode: function() {
        return stripBracketsFromTermNode;
    }
});
var _combinator = /*#__PURE__*/ _interop_require_default(require("../context/bracketed/combinator"));
var _constructor = /*#__PURE__*/ _interop_require_default(require("../context/bracketed/constructor"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedTermChildNodeQuery = (0, _query.nodeQuery)("/term/argument/term"), bracketedStatementChildNodeQuery = (0, _query.nodeQuery)("/statement/metaArgument/statement");
function stripBracketsFromTermNode(termNode) {
    var bracketedTermChildNode = bracketedTermChildNodeFromTermNode(termNode);
    if (bracketedTermChildNode !== null) {
        termNode = bracketedTermChildNode; ///
    }
    return termNode;
}
function stripBracketsFromStatementNode(statementNode) {
    var bracketedStatementChildNode = bracketedStatementChildNodeFromStatementNode(statementNode);
    if (bracketedStatementChildNode !== null) {
        statementNode = bracketedStatementChildNode; ///
    }
    return statementNode;
}
function bracketedTermChildNodeFromTermNode(termNode) {
    var bracketedTermChildNode = null;
    var depth = _constants.BRACKETED_TERM_DEPTH, bracketedTermNode = _constructor.default.getBracketedTermNode(), termNodeMatchBracketedTermNode = termNode.match(bracketedTermNode, depth);
    if (termNodeMatchBracketedTermNode) {
        bracketedTermChildNode = bracketedTermChildNodeQuery(termNode);
    }
    return bracketedTermChildNode;
}
function bracketedStatementChildNodeFromStatementNode(statementNode) {
    var bracketedStatementChildNode = null;
    var depth = _constants.BRACKETED_STATEMENT_DEPTH, bracketedStatementNode = _combinator.default.getBracketedStatementNode(), statementNodeMatchBracketedStatementNode = statementNode.match(bracketedStatementNode, depth);
    if (statementNodeMatchBracketedStatementNode) {
        bracketedStatementChildNode = bracketedStatementChildNodeQuery(statementNode);
    }
    return bracketedStatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYnJhY2tldHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBjb21iaW5hdG9yQnJhY2tldGVkQ29udGV4dCBmcm9tIFwiLi4vY29udGV4dC9icmFja2V0ZWQvY29tYmluYXRvclwiO1xuaW1wb3J0IGNvbnN0cnVjdG9yQnJhY2tldGVkQ29udGV4dCBmcm9tIFwiLi4vY29udGV4dC9icmFja2V0ZWQvY29uc3RydWN0b3JcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgQlJBQ0tFVEVEX1RFUk1fREVQVEgsIEJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEggfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IGJyYWNrZXRlZFRlcm1DaGlsZE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90ZXJtL2FyZ3VtZW50L3Rlcm1cIiksXG4gICAgICBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9zdGF0ZW1lbnQvbWV0YUFyZ3VtZW50L3N0YXRlbWVudFwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQnJhY2tldHNGcm9tVGVybU5vZGUodGVybU5vZGUpIHtcbiAgY29uc3QgYnJhY2tldGVkVGVybUNoaWxkTm9kZSA9IGJyYWNrZXRlZFRlcm1DaGlsZE5vZGVGcm9tVGVybU5vZGUodGVybU5vZGUpO1xuXG4gIGlmIChicmFja2V0ZWRUZXJtQ2hpbGROb2RlICE9PSBudWxsKSB7XG4gICAgdGVybU5vZGUgPSBicmFja2V0ZWRUZXJtQ2hpbGROb2RlOyAgLy8vXG4gIH1cblxuICByZXR1cm4gdGVybU5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEJyYWNrZXRzRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSkge1xuICBjb25zdCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGUgPSBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKTtcblxuICBpZiAoYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlICE9PSBudWxsKSB7XG4gICAgc3RhdGVtZW50Tm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZTsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlbWVudE5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicmFja2V0ZWRUZXJtQ2hpbGROb2RlRnJvbVRlcm1Ob2RlKHRlcm1Ob2RlKSB7XG4gIGxldCBicmFja2V0ZWRUZXJtQ2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBkZXB0aCA9IEJSQUNLRVRFRF9URVJNX0RFUFRILFxuICAgICAgICBicmFja2V0ZWRUZXJtTm9kZSA9IGNvbnN0cnVjdG9yQnJhY2tldGVkQ29udGV4dC5nZXRCcmFja2V0ZWRUZXJtTm9kZSgpLFxuICAgICAgICB0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUgPSB0ZXJtTm9kZS5tYXRjaChicmFja2V0ZWRUZXJtTm9kZSwgZGVwdGgpO1xuXG4gIGlmICh0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUpIHtcbiAgICBicmFja2V0ZWRUZXJtQ2hpbGROb2RlID0gYnJhY2tldGVkVGVybUNoaWxkTm9kZVF1ZXJ5KHRlcm1Ob2RlKTtcbiAgfVxuXG4gIHJldHVybiBicmFja2V0ZWRUZXJtQ2hpbGROb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSkge1xuICBsZXQgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBkZXB0aCA9IEJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEgsXG4gICAgICAgIGJyYWNrZXRlZFN0YXRlbWVudE5vZGUgPSBjb21iaW5hdG9yQnJhY2tldGVkQ29udGV4dC5nZXRCcmFja2V0ZWRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgIHN0YXRlbWVudE5vZGVNYXRjaEJyYWNrZXRlZFN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlLm1hdGNoKGJyYWNrZXRlZFN0YXRlbWVudE5vZGUsIGRlcHRoKTtcblxuICBpZiAoc3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSkge1xuICAgIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5KHN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZTtcbn1cbiJdLCJuYW1lcyI6WyJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZSIsImJyYWNrZXRlZFRlcm1DaGlsZE5vZGVGcm9tVGVybU5vZGUiLCJzdHJpcEJyYWNrZXRzRnJvbVN0YXRlbWVudE5vZGUiLCJzdHJpcEJyYWNrZXRzRnJvbVRlcm1Ob2RlIiwiYnJhY2tldGVkVGVybUNoaWxkTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlUXVlcnkiLCJ0ZXJtTm9kZSIsImJyYWNrZXRlZFRlcm1DaGlsZE5vZGUiLCJzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlIiwiZGVwdGgiLCJCUkFDS0VURURfVEVSTV9ERVBUSCIsImJyYWNrZXRlZFRlcm1Ob2RlIiwiY29uc3RydWN0b3JCcmFja2V0ZWRDb250ZXh0IiwiZ2V0QnJhY2tldGVkVGVybU5vZGUiLCJ0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUiLCJtYXRjaCIsIkJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEgiLCJicmFja2V0ZWRTdGF0ZW1lbnROb2RlIiwiY29tYmluYXRvckJyYWNrZXRlZENvbnRleHQiLCJnZXRCcmFja2V0ZWRTdGF0ZW1lbnROb2RlIiwic3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBNkNnQkEsNENBQTRDO2VBQTVDQTs7SUFkQUMsa0NBQWtDO2VBQWxDQTs7SUFWQUMsOEJBQThCO2VBQTlCQTs7SUFWQUMseUJBQXlCO2VBQXpCQTs7O2lFQVR1QjtrRUFDQztxQkFFZDt5QkFDc0M7Ozs7OztBQUVoRSxJQUFNQyw4QkFBOEJDLElBQUFBLGdCQUFTLEVBQUMsd0JBQ3hDQyxtQ0FBbUNELElBQUFBLGdCQUFTLEVBQUM7QUFFNUMsU0FBU0YsMEJBQTBCSSxRQUFRO0lBQ2hELElBQU1DLHlCQUF5QlAsbUNBQW1DTTtJQUVsRSxJQUFJQywyQkFBMkIsTUFBTTtRQUNuQ0QsV0FBV0Msd0JBQXlCLEdBQUc7SUFDekM7SUFFQSxPQUFPRDtBQUNUO0FBRU8sU0FBU0wsK0JBQStCTyxhQUFhO0lBQzFELElBQU1DLDhCQUE4QlYsNkNBQTZDUztJQUVqRixJQUFJQyxnQ0FBZ0MsTUFBTTtRQUN4Q0QsZ0JBQWdCQyw2QkFBOEIsR0FBRztJQUNuRDtJQUVBLE9BQU9EO0FBQ1Q7QUFFTyxTQUFTUixtQ0FBbUNNLFFBQVE7SUFDekQsSUFBSUMseUJBQXlCO0lBRTdCLElBQU1HLFFBQVFDLCtCQUFvQixFQUM1QkMsb0JBQW9CQyxvQkFBMkIsQ0FBQ0Msb0JBQW9CLElBQ3BFQyxpQ0FBaUNULFNBQVNVLEtBQUssQ0FBQ0osbUJBQW1CRjtJQUV6RSxJQUFJSyxnQ0FBZ0M7UUFDbENSLHlCQUF5QkosNEJBQTRCRztJQUN2RDtJQUVBLE9BQU9DO0FBQ1Q7QUFFTyxTQUFTUiw2Q0FBNkNTLGFBQWE7SUFDeEUsSUFBSUMsOEJBQThCO0lBRWxDLElBQU1DLFFBQVFPLG9DQUF5QixFQUNqQ0MseUJBQXlCQyxtQkFBMEIsQ0FBQ0MseUJBQXlCLElBQzdFQywyQ0FBMkNiLGNBQWNRLEtBQUssQ0FBQ0Usd0JBQXdCUjtJQUU3RixJQUFJVywwQ0FBMEM7UUFDNUNaLDhCQUE4QkosaUNBQWlDRztJQUNqRTtJQUVBLE9BQU9DO0FBQ1QifQ==