"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    stripBracketsFromFrame: function() {
        return stripBracketsFromFrame;
    },
    stripBracketsFromStatement: function() {
        return stripBracketsFromStatement;
    },
    stripBracketsFromTerm: function() {
        return stripBracketsFromTerm;
    }
});
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../node/term/bracketed"));
var _bracketed1 = /*#__PURE__*/ _interop_require_default(require("../node/frame/bracketed"));
var _bracketed2 = /*#__PURE__*/ _interop_require_default(require("../node/statement/bracketed"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedTermChildNodeQuery = (0, _query.nodeQuery)("/term/argument/term!"), bracketedStatementChildNodeQuery = (0, _query.nodeQuery)("/statement/metaArgument/statement!");
function stripBracketsFromTerm(statementNode) {
    var bracketedTermChildNode = bracketedTermChildNodeFromTermNode(statementNode);
    if (bracketedTermChildNode !== null) {
        statementNode = bracketedTermChildNode; ///
    }
    return statementNode;
}
function stripBracketsFromFrame(frameNode) {
    var bracketedFrameChildNode = bracketedFrameChildNodeFromFrameNode(frameNode);
    if (bracketedFrameChildNode !== null) {
        frameNode = bracketedFrameChildNode; ///
    }
    return frameNode;
}
function stripBracketsFromStatement(statementNode) {
    var bracketedStatementChildNode = bracketedStatementChildNodeFromStatementNode(statementNode);
    if (bracketedStatementChildNode !== null) {
        statementNode = bracketedStatementChildNode; ///
    }
    return statementNode;
}
function bracketedTermChildNodeFromTermNode(termNode) {
    var bracketedTermChildNode = null;
    var depth = _constants.BRACKETED_TERM_DEPTH, termNodeMatchBracketedTermNode = termNode.match(_bracketed.default, depth);
    if (termNodeMatchBracketedTermNode) {
        bracketedTermChildNode = bracketedTermChildNodeQuery(termNode);
    }
    return bracketedTermChildNode;
}
function bracketedFrameChildNodeFromFrameNode(frameNode) {
    var bracketedFrameChildNode = null;
    var depth = _constants.BRACKETED_FRAME_DEPTH, frameNodeMatchBracketedFrameNode = frameNode.match(_bracketed1.default, depth);
    if (frameNodeMatchBracketedFrameNode) {
        bracketedFrameChildNode = bracketedFrameChildNodeQuery(frameNode);
    }
    return bracketedFrameChildNode;
}
function bracketedStatementChildNodeFromStatementNode(statementNode) {
    var bracketedStatementChildNode = null;
    var depth = _constants.BRACKETED_STATEMENT_DEPTH, statementNodeMatchBracketedStatementNode = statementNode.match(_bracketed2.default, depth);
    if (statementNodeMatchBracketedStatementNode) {
        bracketedStatementChildNode = bracketedStatementChildNodeQuery(statementNode);
    }
    return bracketedStatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYnJhY2tldHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBicmFja2V0ZWRUZXJtTm9kZSBmcm9tIFwiLi4vbm9kZS90ZXJtL2JyYWNrZXRlZFwiO1xuaW1wb3J0IGJyYWNrZXRlZEZyYW1lTm9kZSBmcm9tIFwiLi4vbm9kZS9mcmFtZS9icmFja2V0ZWRcIjtcbmltcG9ydCBicmFja2V0ZWRTdGF0ZW1lbnROb2RlIGZyb20gXCIuLi9ub2RlL3N0YXRlbWVudC9icmFja2V0ZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgQlJBQ0tFVEVEX1RFUk1fREVQVEgsIEJSQUNLRVRFRF9GUkFNRV9ERVBUSCwgQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgYnJhY2tldGVkVGVybUNoaWxkTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Rlcm0vYXJndW1lbnQvdGVybSFcIiksXG4gICAgICBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9zdGF0ZW1lbnQvbWV0YUFyZ3VtZW50L3N0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEJyYWNrZXRzRnJvbVRlcm0oc3RhdGVtZW50Tm9kZSkge1xuICBjb25zdCBicmFja2V0ZWRUZXJtQ2hpbGROb2RlID0gYnJhY2tldGVkVGVybUNoaWxkTm9kZUZyb21UZXJtTm9kZShzdGF0ZW1lbnROb2RlKTtcblxuICBpZiAoYnJhY2tldGVkVGVybUNoaWxkTm9kZSAhPT0gbnVsbCkge1xuICAgIHN0YXRlbWVudE5vZGUgPSBicmFja2V0ZWRUZXJtQ2hpbGROb2RlOyAgLy8vXG4gIH1cblxuICByZXR1cm4gc3RhdGVtZW50Tm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQnJhY2tldHNGcm9tRnJhbWUoZnJhbWVOb2RlKSB7XG4gIGNvbnN0IGJyYWNrZXRlZEZyYW1lQ2hpbGROb2RlID0gYnJhY2tldGVkRnJhbWVDaGlsZE5vZGVGcm9tRnJhbWVOb2RlKGZyYW1lTm9kZSk7XG5cbiAgaWYgKGJyYWNrZXRlZEZyYW1lQ2hpbGROb2RlICE9PSBudWxsKSB7XG4gICAgZnJhbWVOb2RlID0gYnJhY2tldGVkRnJhbWVDaGlsZE5vZGU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBmcmFtZU5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEJyYWNrZXRzRnJvbVN0YXRlbWVudChzdGF0ZW1lbnROb2RlKSB7XG4gIGNvbnN0IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUpO1xuXG4gIGlmIChicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGUgIT09IG51bGwpIHtcbiAgICBzdGF0ZW1lbnROb2RlID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlOyAgLy8vXG4gIH1cblxuICByZXR1cm4gc3RhdGVtZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gYnJhY2tldGVkVGVybUNoaWxkTm9kZUZyb21UZXJtTm9kZSh0ZXJtTm9kZSkge1xuICBsZXQgYnJhY2tldGVkVGVybUNoaWxkTm9kZSA9IG51bGw7XG5cbiAgY29uc3QgZGVwdGggPSBCUkFDS0VURURfVEVSTV9ERVBUSCxcbiAgICAgICAgdGVybU5vZGVNYXRjaEJyYWNrZXRlZFRlcm1Ob2RlID0gdGVybU5vZGUubWF0Y2goYnJhY2tldGVkVGVybU5vZGUsIGRlcHRoKTtcblxuICBpZiAodGVybU5vZGVNYXRjaEJyYWNrZXRlZFRlcm1Ob2RlKSB7XG4gICAgYnJhY2tldGVkVGVybUNoaWxkTm9kZSA9IGJyYWNrZXRlZFRlcm1DaGlsZE5vZGVRdWVyeSh0ZXJtTm9kZSk7XG4gIH1cblxuICByZXR1cm4gYnJhY2tldGVkVGVybUNoaWxkTm9kZTtcbn1cblxuZnVuY3Rpb24gYnJhY2tldGVkRnJhbWVDaGlsZE5vZGVGcm9tRnJhbWVOb2RlKGZyYW1lTm9kZSkge1xuICBsZXQgYnJhY2tldGVkRnJhbWVDaGlsZE5vZGUgPSBudWxsO1xuXG4gIGNvbnN0IGRlcHRoID0gQlJBQ0tFVEVEX0ZSQU1FX0RFUFRILFxuICAgICAgICBmcmFtZU5vZGVNYXRjaEJyYWNrZXRlZEZyYW1lTm9kZSA9IGZyYW1lTm9kZS5tYXRjaChicmFja2V0ZWRGcmFtZU5vZGUsIGRlcHRoKTtcblxuICBpZiAoZnJhbWVOb2RlTWF0Y2hCcmFja2V0ZWRGcmFtZU5vZGUpIHtcbiAgICBicmFja2V0ZWRGcmFtZUNoaWxkTm9kZSA9IGJyYWNrZXRlZEZyYW1lQ2hpbGROb2RlUXVlcnkoZnJhbWVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBicmFja2V0ZWRGcmFtZUNoaWxkTm9kZTtcbn1cblxuZnVuY3Rpb24gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSkge1xuICBsZXQgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBkZXB0aCA9IEJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEgsXG4gICAgICAgIHN0YXRlbWVudE5vZGVNYXRjaEJyYWNrZXRlZFN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlLm1hdGNoKGJyYWNrZXRlZFN0YXRlbWVudE5vZGUsIGRlcHRoKTtcblxuICBpZiAoc3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSkge1xuICAgIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5KHN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZTtcbn1cbiJdLCJuYW1lcyI6WyJzdHJpcEJyYWNrZXRzRnJvbUZyYW1lIiwic3RyaXBCcmFja2V0c0Zyb21TdGF0ZW1lbnQiLCJzdHJpcEJyYWNrZXRzRnJvbVRlcm0iLCJicmFja2V0ZWRUZXJtQ2hpbGROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSIsInN0YXRlbWVudE5vZGUiLCJicmFja2V0ZWRUZXJtQ2hpbGROb2RlIiwiYnJhY2tldGVkVGVybUNoaWxkTm9kZUZyb21UZXJtTm9kZSIsImZyYW1lTm9kZSIsImJyYWNrZXRlZEZyYW1lQ2hpbGROb2RlIiwiYnJhY2tldGVkRnJhbWVDaGlsZE5vZGVGcm9tRnJhbWVOb2RlIiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlIiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUiLCJ0ZXJtTm9kZSIsImRlcHRoIiwiQlJBQ0tFVEVEX1RFUk1fREVQVEgiLCJ0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUiLCJtYXRjaCIsImJyYWNrZXRlZFRlcm1Ob2RlIiwiQlJBQ0tFVEVEX0ZSQU1FX0RFUFRIIiwiZnJhbWVOb2RlTWF0Y2hCcmFja2V0ZWRGcmFtZU5vZGUiLCJicmFja2V0ZWRGcmFtZU5vZGUiLCJicmFja2V0ZWRGcmFtZUNoaWxkTm9kZVF1ZXJ5IiwiQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCIsInN0YXRlbWVudE5vZGVNYXRjaEJyYWNrZXRlZFN0YXRlbWVudE5vZGUiLCJicmFja2V0ZWRTdGF0ZW1lbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFzQmdCQSxzQkFBc0I7ZUFBdEJBOztJQVVBQywwQkFBMEI7ZUFBMUJBOztJQXBCQUMscUJBQXFCO2VBQXJCQTs7O2dFQVZjO2lFQUNDO2lFQUNJO3FCQUVUO3lCQUM2RDs7Ozs7O0FBRXZGLElBQU1DLDhCQUE4QkMsSUFBQUEsZ0JBQVMsRUFBQyx5QkFDeENDLG1DQUFtQ0QsSUFBQUEsZ0JBQVMsRUFBQztBQUU1QyxTQUFTRixzQkFBc0JJLGFBQWE7SUFDakQsSUFBTUMseUJBQXlCQyxtQ0FBbUNGO0lBRWxFLElBQUlDLDJCQUEyQixNQUFNO1FBQ25DRCxnQkFBZ0JDLHdCQUF5QixHQUFHO0lBQzlDO0lBRUEsT0FBT0Q7QUFDVDtBQUVPLFNBQVNOLHVCQUF1QlMsU0FBUztJQUM5QyxJQUFNQywwQkFBMEJDLHFDQUFxQ0Y7SUFFckUsSUFBSUMsNEJBQTRCLE1BQU07UUFDcENELFlBQVlDLHlCQUEwQixHQUFHO0lBQzNDO0lBRUEsT0FBT0Q7QUFDVDtBQUVPLFNBQVNSLDJCQUEyQkssYUFBYTtJQUN0RCxJQUFNTSw4QkFBOEJDLDZDQUE2Q1A7SUFFakYsSUFBSU0sZ0NBQWdDLE1BQU07UUFDeENOLGdCQUFnQk0sNkJBQThCLEdBQUc7SUFDbkQ7SUFFQSxPQUFPTjtBQUNUO0FBRUEsU0FBU0UsbUNBQW1DTSxRQUFRO0lBQ2xELElBQUlQLHlCQUF5QjtJQUU3QixJQUFNUSxRQUFRQywrQkFBb0IsRUFDNUJDLGlDQUFpQ0gsU0FBU0ksS0FBSyxDQUFDQyxrQkFBaUIsRUFBRUo7SUFFekUsSUFBSUUsZ0NBQWdDO1FBQ2xDVix5QkFBeUJKLDRCQUE0Qlc7SUFDdkQ7SUFFQSxPQUFPUDtBQUNUO0FBRUEsU0FBU0kscUNBQXFDRixTQUFTO0lBQ3JELElBQUlDLDBCQUEwQjtJQUU5QixJQUFNSyxRQUFRSyxnQ0FBcUIsRUFDN0JDLG1DQUFtQ1osVUFBVVMsS0FBSyxDQUFDSSxtQkFBa0IsRUFBRVA7SUFFN0UsSUFBSU0sa0NBQWtDO1FBQ3BDWCwwQkFBMEJhLDZCQUE2QmQ7SUFDekQ7SUFFQSxPQUFPQztBQUNUO0FBRUEsU0FBU0csNkNBQTZDUCxhQUFhO0lBQ2pFLElBQUlNLDhCQUE4QjtJQUVsQyxJQUFNRyxRQUFRUyxvQ0FBeUIsRUFDakNDLDJDQUEyQ25CLGNBQWNZLEtBQUssQ0FBQ1EsbUJBQXNCLEVBQUVYO0lBRTdGLElBQUlVLDBDQUEwQztRQUM1Q2IsOEJBQThCUCxpQ0FBaUNDO0lBQ2pFO0lBRUEsT0FBT007QUFDVCJ9