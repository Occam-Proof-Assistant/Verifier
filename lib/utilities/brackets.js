"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    stripBracketsFromStatement: function() {
        return stripBracketsFromStatement;
    },
    stripBracketsFromTerm: function() {
        return stripBracketsFromTerm;
    }
});
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../node/term/bracketed"));
var _bracketed1 = /*#__PURE__*/ _interop_require_default(require("../node/statement/bracketed"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedTermChildNodeQuery = (0, _query.nodeQuery)("/term/argument/term!"), bracketedStatementChildNodeQuery = (0, _query.nodeQuery)("/statement/metaArgument/statement!");
function stripBracketsFromTerm(statementNode) {
    var bracketedTermChildNode = bracketedTermChildNodeFromTermNode(statementNode);
    if (bracketedTermChildNode !== null) {
        statementNode = bracketedTermChildNode; ///
    }
    return statementNode;
}
function stripBracketsFromStatement(statementNode) {
    var bracketedStatementChildNode = bracketedStatementChildNodeFromStatementNode(statementNode);
    if (bracketedStatementChildNode !== null) {
        statementNode = bracketedStatementChildNode; ///
    }
    return statementNode;
}
function bracketedTermChildNodeFromTermNode(termNode) {
    var bracketedTermChildNode = null;
    var depth = _constants.BRACKETED_TERM_DEPTH, termNodeMatchBracketedTermNode = termNode.match(_bracketed.default, depth);
    if (termNodeMatchBracketedTermNode) {
        bracketedTermChildNode = bracketedTermChildNodeQuery(termNode);
    }
    return bracketedTermChildNode;
}
function bracketedStatementChildNodeFromStatementNode(statementNode) {
    var bracketedStatementChildNode = null;
    var depth = _constants.BRACKETED_STATEMENT_DEPTH, statementNodeMatchBracketedStatementNode = statementNode.match(_bracketed1.default, depth);
    if (statementNodeMatchBracketedStatementNode) {
        bracketedStatementChildNode = bracketedStatementChildNodeQuery(statementNode);
    }
    return bracketedStatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYnJhY2tldHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBicmFja2V0ZWRUZXJtTm9kZSBmcm9tIFwiLi4vbm9kZS90ZXJtL2JyYWNrZXRlZFwiO1xuaW1wb3J0IGJyYWNrZXRlZFN0YXRlbWVudE5vZGUgZnJvbSBcIi4uL25vZGUvc3RhdGVtZW50L2JyYWNrZXRlZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5pbXBvcnQgeyBCUkFDS0VURURfVEVSTV9ERVBUSCwgQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgYnJhY2tldGVkVGVybUNoaWxkTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Rlcm0vYXJndW1lbnQvdGVybSFcIiksXG4gICAgICBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9zdGF0ZW1lbnQvbWV0YUFyZ3VtZW50L3N0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEJyYWNrZXRzRnJvbVRlcm0oc3RhdGVtZW50Tm9kZSkge1xuICBjb25zdCBicmFja2V0ZWRUZXJtQ2hpbGROb2RlID0gYnJhY2tldGVkVGVybUNoaWxkTm9kZUZyb21UZXJtTm9kZShzdGF0ZW1lbnROb2RlKTtcblxuICBpZiAoYnJhY2tldGVkVGVybUNoaWxkTm9kZSAhPT0gbnVsbCkge1xuICAgIHN0YXRlbWVudE5vZGUgPSBicmFja2V0ZWRUZXJtQ2hpbGROb2RlOyAgLy8vXG4gIH1cblxuICByZXR1cm4gc3RhdGVtZW50Tm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwQnJhY2tldHNGcm9tU3RhdGVtZW50KHN0YXRlbWVudE5vZGUpIHtcbiAgY29uc3QgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSk7XG5cbiAgaWYgKGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSAhPT0gbnVsbCkge1xuICAgIHN0YXRlbWVudE5vZGUgPSBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBzdGF0ZW1lbnROb2RlO1xufVxuXG5mdW5jdGlvbiBicmFja2V0ZWRUZXJtQ2hpbGROb2RlRnJvbVRlcm1Ob2RlKHRlcm1Ob2RlKSB7XG4gIGxldCBicmFja2V0ZWRUZXJtQ2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBkZXB0aCA9IEJSQUNLRVRFRF9URVJNX0RFUFRILFxuICAgICAgICB0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUgPSB0ZXJtTm9kZS5tYXRjaChicmFja2V0ZWRUZXJtTm9kZSwgZGVwdGgpO1xuXG4gIGlmICh0ZXJtTm9kZU1hdGNoQnJhY2tldGVkVGVybU5vZGUpIHtcbiAgICBicmFja2V0ZWRUZXJtQ2hpbGROb2RlID0gYnJhY2tldGVkVGVybUNoaWxkTm9kZVF1ZXJ5KHRlcm1Ob2RlKTtcbiAgfVxuXG4gIHJldHVybiBicmFja2V0ZWRUZXJtQ2hpbGROb2RlO1xufVxuXG5mdW5jdGlvbiBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKSB7XG4gIGxldCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGUgPSBudWxsO1xuXG4gIGNvbnN0IGRlcHRoID0gQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCxcbiAgICAgICAgc3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudE5vZGUubWF0Y2goYnJhY2tldGVkU3RhdGVtZW50Tm9kZSwgZGVwdGgpO1xuXG4gIGlmIChzdGF0ZW1lbnROb2RlTWF0Y2hCcmFja2V0ZWRTdGF0ZW1lbnROb2RlKSB7XG4gICAgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlUXVlcnkoc3RhdGVtZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlO1xufVxuIl0sIm5hbWVzIjpbInN0cmlwQnJhY2tldHNGcm9tU3RhdGVtZW50Iiwic3RyaXBCcmFja2V0c0Zyb21UZXJtIiwiYnJhY2tldGVkVGVybUNoaWxkTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlUXVlcnkiLCJzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkVGVybUNoaWxkTm9kZSIsImJyYWNrZXRlZFRlcm1DaGlsZE5vZGVGcm9tVGVybU5vZGUiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGUiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZSIsInRlcm1Ob2RlIiwiZGVwdGgiLCJCUkFDS0VURURfVEVSTV9ERVBUSCIsInRlcm1Ob2RlTWF0Y2hCcmFja2V0ZWRUZXJtTm9kZSIsIm1hdGNoIiwiYnJhY2tldGVkVGVybU5vZGUiLCJCUkFDS0VURURfU1RBVEVNRU5UX0RFUFRIIiwic3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSIsImJyYWNrZXRlZFN0YXRlbWVudE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXFCZ0JBLDBCQUEwQjtlQUExQkE7O0lBVkFDLHFCQUFxQjtlQUFyQkE7OztnRUFUYztpRUFDSztxQkFFVDt5QkFDc0M7Ozs7OztBQUVoRSxJQUFNQyw4QkFBOEJDLElBQUFBLGdCQUFTLEVBQUMseUJBQ3hDQyxtQ0FBbUNELElBQUFBLGdCQUFTLEVBQUM7QUFFNUMsU0FBU0Ysc0JBQXNCSSxhQUFhO0lBQ2pELElBQU1DLHlCQUF5QkMsbUNBQW1DRjtJQUVsRSxJQUFJQywyQkFBMkIsTUFBTTtRQUNuQ0QsZ0JBQWdCQyx3QkFBeUIsR0FBRztJQUM5QztJQUVBLE9BQU9EO0FBQ1Q7QUFFTyxTQUFTTCwyQkFBMkJLLGFBQWE7SUFDdEQsSUFBTUcsOEJBQThCQyw2Q0FBNkNKO0lBRWpGLElBQUlHLGdDQUFnQyxNQUFNO1FBQ3hDSCxnQkFBZ0JHLDZCQUE4QixHQUFHO0lBQ25EO0lBRUEsT0FBT0g7QUFDVDtBQUVBLFNBQVNFLG1DQUFtQ0csUUFBUTtJQUNsRCxJQUFJSix5QkFBeUI7SUFFN0IsSUFBTUssUUFBUUMsK0JBQW9CLEVBQzVCQyxpQ0FBaUNILFNBQVNJLEtBQUssQ0FBQ0Msa0JBQWlCLEVBQUVKO0lBRXpFLElBQUlFLGdDQUFnQztRQUNsQ1AseUJBQXlCSiw0QkFBNEJRO0lBQ3ZEO0lBRUEsT0FBT0o7QUFDVDtBQUVBLFNBQVNHLDZDQUE2Q0osYUFBYTtJQUNqRSxJQUFJRyw4QkFBOEI7SUFFbEMsSUFBTUcsUUFBUUssb0NBQXlCLEVBQ2pDQywyQ0FBMkNaLGNBQWNTLEtBQUssQ0FBQ0ksbUJBQXNCLEVBQUVQO0lBRTdGLElBQUlNLDBDQUEwQztRQUM1Q1QsOEJBQThCSixpQ0FBaUNDO0lBQ2pFO0lBRUEsT0FBT0c7QUFDVCJ9