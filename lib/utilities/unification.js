"use string";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    unifyEquality: function() {
        return unifyEquality;
    },
    unifyLabelWithReference: function() {
        return unifyLabelWithReference;
    },
    unifyMetavariable: function() {
        return unifyMetavariable;
    },
    unifyStatement: function() {
        return unifyStatement;
    },
    unifyStatementWithCombinator: function() {
        return unifyStatementWithCombinator;
    },
    unifySubstitution: function() {
        return unifySubstitution;
    },
    unifyTermWithConstructor: function() {
        return unifyTermWithConstructor;
    }
});
var _local = /*#__PURE__*/ _interop_require_default(require("../context/local"));
var _label = /*#__PURE__*/ _interop_require_default(require("../unifier/label"));
var _equality = /*#__PURE__*/ _interop_require_default(require("../unifier/equality"));
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../unifier/metaLevel"));
var _metavariable = /*#__PURE__*/ _interop_require_default(require("../unifier/metavariable"));
var _termWithConstructor = /*#__PURE__*/ _interop_require_default(require("../unifier/termWithConstructor"));
var _statementWithCombinator = /*#__PURE__*/ _interop_require_default(require("../unifier/statementWithCombinator"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyEquality(equality, context) {
    var equalityUnified;
    var leftTerm = equality.getLeftTerm(), rightTerm = equality.getRightTerm(), leftTermNode = leftTerm.getNode(), rightTermNode = rightTerm.getNode();
    equalityUnified = _equality.default.unify(leftTermNode, rightTermNode, context);
    return equalityUnified;
}
function unifyStatement(generalStatement, specificStatement, substitutions, generalContext, specificContext) {
    var statementUnified;
    var generalStatementNode = generalStatement.getNode(), specificStatementNode = specificStatement.getNode(), generalStatementTokens = generalStatement.getTokens(), specificStatementTokens = specificStatement.getTokens();
    var tokens, context, localContext;
    tokens = generalStatementTokens; ///
    context = generalContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    generalContext = localContext; ///
    tokens = specificStatementTokens; ///
    context = specificContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    specificContext = localContext; ///
    var generalNode = generalStatementNode, specificNode = specificStatementNode, unifiedAtMetaLevel = _metaLevel.default.unify(generalNode, specificNode, substitutions, generalContext, specificContext);
    statementUnified = unifiedAtMetaLevel; ///
    return statementUnified;
}
function unifySubstitution(generalSubstitution, specificSubstitution, substitutions, generalContext, specificContext) {
    var substitutionUnified;
    var generalSubstitutionNode = generalSubstitution.getNode(), specificSubstitutionNode = specificSubstitution.getNode(), generalSubstitutionTokens = generalSubstitution.getTokens(), specificSubstitutionTokens = specificSubstitution.getTokens();
    var tokens, context, localContext;
    tokens = generalSubstitutionTokens; ///
    context = generalContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    generalContext = localContext; ///
    tokens = specificSubstitutionTokens; ///
    context = specificContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    specificContext = localContext; ///
    var generalNode = generalSubstitutionNode, specificNode = specificSubstitutionNode, unifiedAtMetaLevel = _metaLevel.default.unify(generalNode, specificNode, substitutions, generalContext, specificContext);
    substitutionUnified = unifiedAtMetaLevel; ///
    return substitutionUnified;
}
function unifyMetavariable(generalMetavariable, specificMetavariable, generalContext, specificContext) {
    var metavariableUnified;
    var generalMetavariableNode = generalMetavariable.getNode(), specificMetavariableNode = specificMetavariable.getNode(), generalMetavariableTokens = generalMetavariable.getTokens();
    var tokens, context, localContext;
    tokens = generalMetavariableTokens; ///
    context = generalContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    generalContext = localContext; ///
    metavariableUnified = _metavariable.default.unify(generalMetavariableNode, specificMetavariableNode, generalContext, specificContext);
    return metavariableUnified;
}
function unifyLabelWithReference(label, reference, substitutions, generalContext, specificContext) {
    var labelUnifiedWithReference;
    var labelMetavariable = label.getMetavariable(), referenceMetavariable = reference.getMetavariable(), labelMetavariableNode = labelMetavariable.getNode(), labelMetavariableTokens = labelMetavariable.getTokens(), referenceMetavariableNode = referenceMetavariable.getNode(), referenceMetavariableTokens = referenceMetavariable.getTokens();
    var tokens, context, localContext;
    tokens = labelMetavariableTokens; ///
    context = generalContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    generalContext = localContext; ///
    tokens = referenceMetavariableTokens; ///
    context = specificContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    specificContext = localContext; ///
    var labelUnified = _label.default.unify(labelMetavariableNode, referenceMetavariableNode, substitutions, generalContext, specificContext);
    labelUnifiedWithReference = labelUnified; ///
    return labelUnifiedWithReference;
}
function unifyTermWithConstructor(term, constructor, context) {
    var termUnifiedWithConstructor;
    var termNode = term.getNode(), constructorTerm = constructor.getTerm(), constructorTermNode = constructorTerm.getNode();
    termUnifiedWithConstructor = _termWithConstructor.default.unify(constructorTermNode, termNode, context);
    return termUnifiedWithConstructor;
}
function unifyStatementWithCombinator(statement, combinator, assignments, stated, context) {
    var statementUnifiedWithCombinator;
    var statementNode = statement.getNode(), statementTokens = statement.getTokens(), combinatorStatement = combinator.getStatement(), combinatorStatementNode = combinatorStatement.getNode(), combinatorStatementTokens = combinatorStatement.getTokens();
    var tokens, localContext, generalContext = context, specificContext = context; ///
    tokens = combinatorStatementTokens; ///
    context = generalContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    generalContext = localContext; ///
    tokens = statementTokens; ///
    context = specificContext; ///
    localContext = _local.default.fromContextAndTokens(context, tokens);
    specificContext = localContext; ///
    statementUnifiedWithCombinator = _statementWithCombinator.default.unify(combinatorStatementNode, statementNode, assignments, stated, generalContext, specificContext);
    return statementUnifiedWithCombinator;
}

//# sourceMappingURL=data:application/json;base64,