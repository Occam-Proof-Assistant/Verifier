"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    metavariableFromFrameNode: function() {
        return metavariableFromFrameNode;
    },
    metavariableFromStatementNode: function() {
        return metavariableFromStatementNode;
    },
    variableFromTermNode: function() {
        return variableFromTermNode;
    }
});
var _query = require("../utilities/query");
var termVariableNodeQuery = (0, _query.nodeQuery)("/term/variable"), frameMetavariableNodeQuery = (0, _query.nodeQuery)("/frame/metavariable"), statementMetavariableNodeQuery = (0, _query.nodeQuery)("/statement/metavariable");
function variableFromTermNode(termNode, localContext) {
    var variable = null;
    var termVariableNode = termVariableNodeQuery(termNode);
    if (termVariableNode !== null) {
        var variableNode = termVariableNode; ///
        variable = localContext.findVariableByVariableNode(variableNode);
    }
    return variable;
}
function metavariableFromFrameNode(frameNode, localContext) {
    var metavariable = null;
    var frameMetavariableNode = frameMetavariableNodeQuery(frameNode);
    if (frameMetavariableNode !== null) {
        var metavariableNode = frameMetavariableNode; ///
        metavariable = localContext.findMetavariableByMetavariableName(metavariableName);
    }
    return metavariable;
}
function metavariableFromStatementNode(statementNode, localContext) {
    var metavariable = null;
    var statementMetavariableNode = statementMetavariableNodeQuery(statementNode);
    if (statementMetavariableNode !== null) {
        var metavariableNode = statementMetavariableNode; ///
        metavariable = localContext.findMetavariableByMetavariableName(metavariableName);
    }
    return metavariable;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdW5pZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgdGVybVZhcmlhYmxlTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Rlcm0vdmFyaWFibGVcIiksXG4gICAgICBmcmFtZU1ldGF2YXJpYWJsZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9mcmFtZS9tZXRhdmFyaWFibGVcIiksXG4gICAgICBzdGF0ZW1lbnRNZXRhdmFyaWFibGVOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvc3RhdGVtZW50L21ldGF2YXJpYWJsZVwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhYmxlRnJvbVRlcm1Ob2RlKHRlcm1Ob2RlLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IHZhcmlhYmxlID0gbnVsbDtcblxuICBjb25zdCB0ZXJtVmFyaWFibGVOb2RlID0gdGVybVZhcmlhYmxlTm9kZVF1ZXJ5KHRlcm1Ob2RlKTtcblxuICBpZiAodGVybVZhcmlhYmxlTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHZhcmlhYmxlTm9kZSA9IHRlcm1WYXJpYWJsZU5vZGU7ICAvLy9cblxuICAgIHZhcmlhYmxlID0gbG9jYWxDb250ZXh0LmZpbmRWYXJpYWJsZUJ5VmFyaWFibGVOb2RlKHZhcmlhYmxlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gdmFyaWFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXRhdmFyaWFibGVGcm9tRnJhbWVOb2RlKGZyYW1lTm9kZSwgbG9jYWxDb250ZXh0KSB7XG4gIGxldCBtZXRhdmFyaWFibGUgPSBudWxsO1xuXG4gIGNvbnN0IGZyYW1lTWV0YXZhcmlhYmxlTm9kZSA9IGZyYW1lTWV0YXZhcmlhYmxlTm9kZVF1ZXJ5KGZyYW1lTm9kZSlcblxuICBpZiAoZnJhbWVNZXRhdmFyaWFibGVOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgbWV0YXZhcmlhYmxlTm9kZSA9IGZyYW1lTWV0YXZhcmlhYmxlTm9kZTsgLy8vXG5cbiAgICBtZXRhdmFyaWFibGUgPSBsb2NhbENvbnRleHQuZmluZE1ldGF2YXJpYWJsZUJ5TWV0YXZhcmlhYmxlTmFtZShtZXRhdmFyaWFibGVOYW1lKTtcbiAgfVxuXG4gIHJldHVybiBtZXRhdmFyaWFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXRhdmFyaWFibGVGcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IG1ldGF2YXJpYWJsZSA9IG51bGw7XG5cbiAgY29uc3Qgc3RhdGVtZW50TWV0YXZhcmlhYmxlTm9kZSA9IHN0YXRlbWVudE1ldGF2YXJpYWJsZU5vZGVRdWVyeShzdGF0ZW1lbnROb2RlKVxuXG4gIGlmIChzdGF0ZW1lbnRNZXRhdmFyaWFibGVOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgbWV0YXZhcmlhYmxlTm9kZSA9IHN0YXRlbWVudE1ldGF2YXJpYWJsZU5vZGU7IC8vL1xuXG4gICAgbWV0YXZhcmlhYmxlID0gbG9jYWxDb250ZXh0LmZpbmRNZXRhdmFyaWFibGVCeU1ldGF2YXJpYWJsZU5hbWUobWV0YXZhcmlhYmxlTmFtZSk7XG4gIH1cblxuICByZXR1cm4gbWV0YXZhcmlhYmxlO1xufVxuIl0sIm5hbWVzIjpbIm1ldGF2YXJpYWJsZUZyb21GcmFtZU5vZGUiLCJtZXRhdmFyaWFibGVGcm9tU3RhdGVtZW50Tm9kZSIsInZhcmlhYmxlRnJvbVRlcm1Ob2RlIiwidGVybVZhcmlhYmxlTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiZnJhbWVNZXRhdmFyaWFibGVOb2RlUXVlcnkiLCJzdGF0ZW1lbnRNZXRhdmFyaWFibGVOb2RlUXVlcnkiLCJ0ZXJtTm9kZSIsImxvY2FsQ29udGV4dCIsInZhcmlhYmxlIiwidGVybVZhcmlhYmxlTm9kZSIsInZhcmlhYmxlTm9kZSIsImZpbmRWYXJpYWJsZUJ5VmFyaWFibGVOb2RlIiwiZnJhbWVOb2RlIiwibWV0YXZhcmlhYmxlIiwiZnJhbWVNZXRhdmFyaWFibGVOb2RlIiwibWV0YXZhcmlhYmxlTm9kZSIsImZpbmRNZXRhdmFyaWFibGVCeU1ldGF2YXJpYWJsZU5hbWUiLCJtZXRhdmFyaWFibGVOYW1lIiwic3RhdGVtZW50Tm9kZSIsInN0YXRlbWVudE1ldGF2YXJpYWJsZU5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXNCZ0JBLHlCQUF5QjtlQUF6QkE7O0lBY0FDLDZCQUE2QjtlQUE3QkE7O0lBNUJBQyxvQkFBb0I7ZUFBcEJBOzs7cUJBTlU7QUFFMUIsSUFBTUMsd0JBQXdCQyxJQUFBQSxnQkFBUyxFQUFDLG1CQUNsQ0MsNkJBQTZCRCxJQUFBQSxnQkFBUyxFQUFDLHdCQUN2Q0UsaUNBQWlDRixJQUFBQSxnQkFBUyxFQUFDO0FBRTFDLFNBQVNGLHFCQUFxQkssUUFBUSxFQUFFQyxZQUFZO0lBQ3pELElBQUlDLFdBQVc7SUFFZixJQUFNQyxtQkFBbUJQLHNCQUFzQkk7SUFFL0MsSUFBSUcscUJBQXFCLE1BQU07UUFDN0IsSUFBTUMsZUFBZUQsa0JBQW1CLEdBQUc7UUFFM0NELFdBQVdELGFBQWFJLDBCQUEwQixDQUFDRDtJQUNyRDtJQUVBLE9BQU9GO0FBQ1Q7QUFFTyxTQUFTVCwwQkFBMEJhLFNBQVMsRUFBRUwsWUFBWTtJQUMvRCxJQUFJTSxlQUFlO0lBRW5CLElBQU1DLHdCQUF3QlYsMkJBQTJCUTtJQUV6RCxJQUFJRSwwQkFBMEIsTUFBTTtRQUNsQyxJQUFNQyxtQkFBbUJELHVCQUF1QixHQUFHO1FBRW5ERCxlQUFlTixhQUFhUyxrQ0FBa0MsQ0FBQ0M7SUFDakU7SUFFQSxPQUFPSjtBQUNUO0FBRU8sU0FBU2IsOEJBQThCa0IsYUFBYSxFQUFFWCxZQUFZO0lBQ3ZFLElBQUlNLGVBQWU7SUFFbkIsSUFBTU0sNEJBQTRCZCwrQkFBK0JhO0lBRWpFLElBQUlDLDhCQUE4QixNQUFNO1FBQ3RDLElBQU1KLG1CQUFtQkksMkJBQTJCLEdBQUc7UUFFdkROLGVBQWVOLGFBQWFTLGtDQUFrQyxDQUFDQztJQUNqRTtJQUVBLE9BQU9KO0FBQ1QifQ==