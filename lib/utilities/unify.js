"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    metavariableFromFrameNode: function() {
        return metavariableFromFrameNode;
    },
    metavariableFromStatementNode: function() {
        return metavariableFromStatementNode;
    },
    variableFromTermNode: function() {
        return variableFromTermNode;
    }
});
var _query = require("../utilities/query");
var _name = require("../utilities/name");
var termVariableNodeQuery = (0, _query.nodeQuery)("/term/variable"), frameMetavariableNodeQuery = (0, _query.nodeQuery)("/frame/metavariable"), statementMetavariableNodeQuery = (0, _query.nodeQuery)("/statement/metavariable");
function variableFromTermNode(termNode, localContext) {
    var variable = null;
    var termVariableNode = termVariableNodeQuery(termNode);
    if (termVariableNode !== null) {
        var variableNode = termVariableNode; ///
        variable = localContext.findVariableByVariableNode(variableNode);
    }
    return variable;
}
function metavariableFromFrameNode(frameNode, localContext) {
    var metavariable = null;
    var frameMetavariableNode = frameMetavariableNodeQuery(frameNode);
    if (frameMetavariableNode !== null) {
        var metavariableNode = statementMetavariableNode, metavariableName = (0, _name.metavariableNameFromMetavariableNode)(metavariableNode);
        metavariable = localContext.findMetavariableByMetavariableName(metavariableName);
    }
    return metavariable;
}
function metavariableFromStatementNode(statementNode, localContext) {
    var metavariable = null;
    var statementMetavariableNode1 = statementMetavariableNodeQuery(statementNode);
    if (statementMetavariableNode1 !== null) {
        var metavariableNode = statementMetavariableNode1, metavariableName = (0, _name.metavariableNameFromMetavariableNode)(metavariableNode);
        metavariable = localContext.findMetavariableByMetavariableName(metavariableName);
    }
    return metavariable;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdW5pZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcbmltcG9ydCB7IG1ldGF2YXJpYWJsZU5hbWVGcm9tTWV0YXZhcmlhYmxlTm9kZX0gIGZyb20gXCIuLi91dGlsaXRpZXMvbmFtZVwiO1xuXG5jb25zdCB0ZXJtVmFyaWFibGVOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdGVybS92YXJpYWJsZVwiKSxcbiAgICAgIGZyYW1lTWV0YXZhcmlhYmxlTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2ZyYW1lL21ldGF2YXJpYWJsZVwiKSxcbiAgICAgIHN0YXRlbWVudE1ldGF2YXJpYWJsZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9zdGF0ZW1lbnQvbWV0YXZhcmlhYmxlXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFyaWFibGVGcm9tVGVybU5vZGUodGVybU5vZGUsIGxvY2FsQ29udGV4dCkge1xuICBsZXQgdmFyaWFibGUgPSBudWxsO1xuXG4gIGNvbnN0IHRlcm1WYXJpYWJsZU5vZGUgPSB0ZXJtVmFyaWFibGVOb2RlUXVlcnkodGVybU5vZGUpO1xuXG4gIGlmICh0ZXJtVmFyaWFibGVOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgdmFyaWFibGVOb2RlID0gdGVybVZhcmlhYmxlTm9kZTsgIC8vL1xuXG4gICAgdmFyaWFibGUgPSBsb2NhbENvbnRleHQuZmluZFZhcmlhYmxlQnlWYXJpYWJsZU5vZGUodmFyaWFibGVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiB2YXJpYWJsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGF2YXJpYWJsZUZyb21GcmFtZU5vZGUoZnJhbWVOb2RlLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IG1ldGF2YXJpYWJsZSA9IG51bGw7XG5cbiAgY29uc3QgZnJhbWVNZXRhdmFyaWFibGVOb2RlID0gZnJhbWVNZXRhdmFyaWFibGVOb2RlUXVlcnkoZnJhbWVOb2RlKVxuXG4gIGlmIChmcmFtZU1ldGF2YXJpYWJsZU5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBtZXRhdmFyaWFibGVOb2RlID0gc3RhdGVtZW50TWV0YXZhcmlhYmxlTm9kZSwgLy8vXG4gICAgICAgICAgbWV0YXZhcmlhYmxlTmFtZSA9IG1ldGF2YXJpYWJsZU5hbWVGcm9tTWV0YXZhcmlhYmxlTm9kZShtZXRhdmFyaWFibGVOb2RlKTtcblxuICAgIG1ldGF2YXJpYWJsZSA9IGxvY2FsQ29udGV4dC5maW5kTWV0YXZhcmlhYmxlQnlNZXRhdmFyaWFibGVOYW1lKG1ldGF2YXJpYWJsZU5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGF2YXJpYWJsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGF2YXJpYWJsZUZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUsIGxvY2FsQ29udGV4dCkge1xuICBsZXQgbWV0YXZhcmlhYmxlID0gbnVsbDtcblxuICBjb25zdCBzdGF0ZW1lbnRNZXRhdmFyaWFibGVOb2RlID0gc3RhdGVtZW50TWV0YXZhcmlhYmxlTm9kZVF1ZXJ5KHN0YXRlbWVudE5vZGUpXG5cbiAgaWYgKHN0YXRlbWVudE1ldGF2YXJpYWJsZU5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBtZXRhdmFyaWFibGVOb2RlID0gc3RhdGVtZW50TWV0YXZhcmlhYmxlTm9kZSwgLy8vXG4gICAgICAgICAgbWV0YXZhcmlhYmxlTmFtZSA9IG1ldGF2YXJpYWJsZU5hbWVGcm9tTWV0YXZhcmlhYmxlTm9kZShtZXRhdmFyaWFibGVOb2RlKTtcblxuICAgIG1ldGF2YXJpYWJsZSA9IGxvY2FsQ29udGV4dC5maW5kTWV0YXZhcmlhYmxlQnlNZXRhdmFyaWFibGVOYW1lKG1ldGF2YXJpYWJsZU5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGF2YXJpYWJsZTtcbn1cbiJdLCJuYW1lcyI6WyJtZXRhdmFyaWFibGVGcm9tRnJhbWVOb2RlIiwibWV0YXZhcmlhYmxlRnJvbVN0YXRlbWVudE5vZGUiLCJ2YXJpYWJsZUZyb21UZXJtTm9kZSIsInRlcm1WYXJpYWJsZU5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImZyYW1lTWV0YXZhcmlhYmxlTm9kZVF1ZXJ5Iiwic3RhdGVtZW50TWV0YXZhcmlhYmxlTm9kZVF1ZXJ5IiwidGVybU5vZGUiLCJsb2NhbENvbnRleHQiLCJ2YXJpYWJsZSIsInRlcm1WYXJpYWJsZU5vZGUiLCJ2YXJpYWJsZU5vZGUiLCJmaW5kVmFyaWFibGVCeVZhcmlhYmxlTm9kZSIsImZyYW1lTm9kZSIsIm1ldGF2YXJpYWJsZSIsImZyYW1lTWV0YXZhcmlhYmxlTm9kZSIsIm1ldGF2YXJpYWJsZU5vZGUiLCJzdGF0ZW1lbnRNZXRhdmFyaWFibGVOb2RlIiwibWV0YXZhcmlhYmxlTmFtZSIsIm1ldGF2YXJpYWJsZU5hbWVGcm9tTWV0YXZhcmlhYmxlTm9kZSIsImZpbmRNZXRhdmFyaWFibGVCeU1ldGF2YXJpYWJsZU5hbWUiLCJzdGF0ZW1lbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUF1QmdCQSx5QkFBeUI7ZUFBekJBOztJQWVBQyw2QkFBNkI7ZUFBN0JBOztJQTdCQUMsb0JBQW9CO2VBQXBCQTs7O3FCQVBVO29CQUMyQjtBQUVyRCxJQUFNQyx3QkFBd0JDLElBQUFBLGdCQUFTLEVBQUMsbUJBQ2xDQyw2QkFBNkJELElBQUFBLGdCQUFTLEVBQUMsd0JBQ3ZDRSxpQ0FBaUNGLElBQUFBLGdCQUFTLEVBQUM7QUFFMUMsU0FBU0YscUJBQXFCSyxRQUFRLEVBQUVDLFlBQVk7SUFDekQsSUFBSUMsV0FBVztJQUVmLElBQU1DLG1CQUFtQlAsc0JBQXNCSTtJQUUvQyxJQUFJRyxxQkFBcUIsTUFBTTtRQUM3QixJQUFNQyxlQUFlRCxrQkFBbUIsR0FBRztRQUUzQ0QsV0FBV0QsYUFBYUksMEJBQTBCLENBQUNEO0lBQ3JEO0lBRUEsT0FBT0Y7QUFDVDtBQUVPLFNBQVNULDBCQUEwQmEsU0FBUyxFQUFFTCxZQUFZO0lBQy9ELElBQUlNLGVBQWU7SUFFbkIsSUFBTUMsd0JBQXdCViwyQkFBMkJRO0lBRXpELElBQUlFLDBCQUEwQixNQUFNO1FBQ2xDLElBQU1DLG1CQUFtQkMsMkJBQ25CQyxtQkFBbUJDLElBQUFBLDBDQUFvQyxFQUFDSDtRQUU5REYsZUFBZU4sYUFBYVksa0NBQWtDLENBQUNGO0lBQ2pFO0lBRUEsT0FBT0o7QUFDVDtBQUVPLFNBQVNiLDhCQUE4Qm9CLGFBQWEsRUFBRWIsWUFBWTtJQUN2RSxJQUFJTSxlQUFlO0lBRW5CLElBQU1HLDZCQUE0QlgsK0JBQStCZTtJQUVqRSxJQUFJSiwrQkFBOEIsTUFBTTtRQUN0QyxJQUFNRCxtQkFBbUJDLDRCQUNuQkMsbUJBQW1CQyxJQUFBQSwwQ0FBb0MsRUFBQ0g7UUFFOURGLGVBQWVOLGFBQWFZLGtDQUFrQyxDQUFDRjtJQUNqRTtJQUVBLE9BQU9KO0FBQ1QifQ==