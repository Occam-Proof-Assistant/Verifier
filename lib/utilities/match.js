"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    bracketedStatementChildNodeFromStatementNode: function() {
        return bracketedStatementChildNodeFromStatementNode;
    },
    matchStatementModuloBrackets: function() {
        return matchStatementModuloBrackets;
    }
});
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../node/statement/bracketed"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedStatementChildNodeQuery = (0, _query.nodeQuery)("/statement/metaArgument/statement!");
function matchStatementModuloBrackets(statementNodeA, statementNodeB) {
    var statementMatches = false;
    if (!statementMatches) {
        var statementNodeMatches = statementNodeA.match(statementNodeB);
        statementMatches = statementNodeMatches; ///
    }
    if (!statementMatches) {
        var bracketedStatementChildNodeA = bracketedStatementChildNodeFromStatementNode(statementNodeA);
        if (bracketedStatementChildNodeA !== null) {
            var bracketedStatementChildNodeAMatchesStatementNodeB = bracketedStatementChildNodeA.match(statementNodeB);
            statementMatches = bracketedStatementChildNodeAMatchesStatementNodeB; ///
        }
    }
    if (!statementMatches) {
        var bracketedStatementChildNodeB = bracketedStatementChildNodeFromStatementNode(statementNodeB);
        if (bracketedStatementChildNodeB !== null) {
            var statementNodeAMatchesBracketedStatementChildNodeB = statementNodeA.match(bracketedStatementChildNodeB);
            statementMatches = statementNodeAMatchesBracketedStatementChildNodeB; ///
        }
    }
    return statementMatches;
}
function bracketedStatementChildNodeFromStatementNode(statementNode) {
    var bracketedStatementChildNode = null;
    var depth = _constants.BRACKETED_STATEMENT_DEPTH, statementNodeMatchBracketedStatementNode = statementNode.match(_bracketed.default, depth);
    if (statementNodeMatchBracketedStatementNode) {
        bracketedStatementChildNode = bracketedStatementChildNodeQuery(statementNode);
    }
    return bracketedStatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWF0Y2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBicmFja2V0ZWRTdGF0ZW1lbnROb2RlIGZyb20gXCIuLi9ub2RlL3N0YXRlbWVudC9icmFja2V0ZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvc3RhdGVtZW50L21ldGFBcmd1bWVudC9zdGF0ZW1lbnQhXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hTdGF0ZW1lbnRNb2R1bG9CcmFja2V0cyhzdGF0ZW1lbnROb2RlQSwgc3RhdGVtZW50Tm9kZUIpIHtcbiAgbGV0IHN0YXRlbWVudE1hdGNoZXMgPSBmYWxzZTtcblxuICBpZiAoIXN0YXRlbWVudE1hdGNoZXMpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnROb2RlTWF0Y2hlcyA9IHN0YXRlbWVudE5vZGVBLm1hdGNoKHN0YXRlbWVudE5vZGVCKTtcblxuICAgIHN0YXRlbWVudE1hdGNoZXMgPSBzdGF0ZW1lbnROb2RlTWF0Y2hlczsgIC8vL1xuICB9XG5cbiAgaWYgKCFzdGF0ZW1lbnRNYXRjaGVzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlQSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGVBKTtcblxuICAgIGlmIChicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVBICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVBTWF0Y2hlc1N0YXRlbWVudE5vZGVCID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlQS5tYXRjaChzdGF0ZW1lbnROb2RlQik7XG5cbiAgICAgIHN0YXRlbWVudE1hdGNoZXMgPSBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVBTWF0Y2hlc1N0YXRlbWVudE5vZGVCOyAvLy9cbiAgICB9XG4gIH1cblxuICBpZiAoIXN0YXRlbWVudE1hdGNoZXMpIHtcbiAgICBjb25zdCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVCID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZUIpO1xuXG4gICAgaWYgKGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUIgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHN0YXRlbWVudE5vZGVBTWF0Y2hlc0JyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUIgPSBzdGF0ZW1lbnROb2RlQS5tYXRjaChicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVCKTtcblxuICAgICAgc3RhdGVtZW50TWF0Y2hlcyA9IHN0YXRlbWVudE5vZGVBTWF0Y2hlc0JyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUI7IC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZW1lbnRNYXRjaGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSkge1xuICBsZXQgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBkZXB0aCA9IEJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEgsXG4gICAgICAgIHN0YXRlbWVudE5vZGVNYXRjaEJyYWNrZXRlZFN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlLm1hdGNoKGJyYWNrZXRlZFN0YXRlbWVudE5vZGUsIGRlcHRoKTtcblxuICBpZiAoc3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSkge1xuICAgIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5KHN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZTtcbn1cbiJdLCJuYW1lcyI6WyJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZSIsIm1hdGNoU3RhdGVtZW50TW9kdWxvQnJhY2tldHMiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInN0YXRlbWVudE5vZGVBIiwic3RhdGVtZW50Tm9kZUIiLCJzdGF0ZW1lbnRNYXRjaGVzIiwic3RhdGVtZW50Tm9kZU1hdGNoZXMiLCJtYXRjaCIsImJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUEiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVBTWF0Y2hlc1N0YXRlbWVudE5vZGVCIiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlQiIsInN0YXRlbWVudE5vZGVBTWF0Y2hlc0JyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUIiLCJzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlIiwiZGVwdGgiLCJCUkFDS0VURURfU1RBVEVNRU5UX0RFUFRIIiwic3RhdGVtZW50Tm9kZU1hdGNoQnJhY2tldGVkU3RhdGVtZW50Tm9kZSIsImJyYWNrZXRlZFN0YXRlbWVudE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXlDZ0JBLDRDQUE0QztlQUE1Q0E7O0lBaENBQyw0QkFBNEI7ZUFBNUJBOzs7Z0VBUG1CO3FCQUVUO3lCQUNnQjs7Ozs7O0FBRTFDLElBQU1DLG1DQUFtQ0MsSUFBQUEsZ0JBQVMsRUFBQztBQUU1QyxTQUFTRiw2QkFBNkJHLGNBQWMsRUFBRUMsY0FBYztJQUN6RSxJQUFJQyxtQkFBbUI7SUFFdkIsSUFBSSxDQUFDQSxrQkFBa0I7UUFDckIsSUFBTUMsdUJBQXVCSCxlQUFlSSxLQUFLLENBQUNIO1FBRWxEQyxtQkFBbUJDLHNCQUF1QixHQUFHO0lBQy9DO0lBRUEsSUFBSSxDQUFDRCxrQkFBa0I7UUFDckIsSUFBTUcsK0JBQStCVCw2Q0FBNkNJO1FBRWxGLElBQUlLLGlDQUFpQyxNQUFNO1lBQ3pDLElBQU1DLG9EQUFvREQsNkJBQTZCRCxLQUFLLENBQUNIO1lBRTdGQyxtQkFBbUJJLG1EQUFtRCxHQUFHO1FBQzNFO0lBQ0Y7SUFFQSxJQUFJLENBQUNKLGtCQUFrQjtRQUNyQixJQUFNSywrQkFBK0JYLDZDQUE2Q0s7UUFFbEYsSUFBSU0saUNBQWlDLE1BQU07WUFDekMsSUFBTUMsb0RBQW9EUixlQUFlSSxLQUFLLENBQUNHO1lBRS9FTCxtQkFBbUJNLG1EQUFtRCxHQUFHO1FBQzNFO0lBQ0Y7SUFFQSxPQUFPTjtBQUNUO0FBRU8sU0FBU04sNkNBQTZDYSxhQUFhO0lBQ3hFLElBQUlDLDhCQUE4QjtJQUVsQyxJQUFNQyxRQUFRQyxvQ0FBeUIsRUFDakNDLDJDQUEyQ0osY0FBY0wsS0FBSyxDQUFDVSxrQkFBc0IsRUFBRUg7SUFFN0YsSUFBSUUsMENBQTBDO1FBQzVDSCw4QkFBOEJaLGlDQUFpQ1c7SUFDakU7SUFFQSxPQUFPQztBQUNUIn0=