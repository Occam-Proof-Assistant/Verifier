"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchBracketedMetastatementChildNode: function() {
        return matchBracketedMetastatementChildNode;
    },
    matchTopmostMetaAssertionMetastatementNode: function() {
        return matchTopmostMetaAssertionMetastatementNode;
    },
    bracketedMetastatementChildNodeFromChildNodes: function() {
        return bracketedMetastatementChildNodeFromChildNodes;
    }
});
var _array = require("../utilities/array");
var _ruleNames = require("../ruleNames");
var _constants = require("../constants");
function matchBracketedMetastatementChildNode(childNodes, callback) {
    var bracketedMetastatementChildNodeMatches = false;
    var bracketedMetastatementChildNode = bracketedMetastatementChildNodeFromChildNodes(childNodes);
    if (bracketedMetastatementChildNode !== null) {
        bracketedMetastatementChildNodeMatches = callback(bracketedMetastatementChildNode);
    }
    return bracketedMetastatementChildNodeMatches;
}
function matchTopmostMetaAssertionMetastatementNode(topmostMetaAssertionMetastatementNode, topmostMetastatementNode) {
    var metaAssertionMetastatementNodeMatches;
    var metastatementNode = topmostMetastatementNode, metaAssertionMetastatementNode = topmostMetaAssertionMetastatementNode; ///
    metaAssertionMetastatementNodeMatches = matchMetaAssertionMetastatementNode(metaAssertionMetastatementNode, metastatementNode);
    if (!metaAssertionMetastatementNodeMatches) {
        var nonTerminalNode = metastatementNode, childNodes = nonTerminalNode, bracketedMetastatementChildNodeMatches = matchBracketedMetastatementChildNode(childNodes, function(bracketedMetastatementChildNode) {
            var metastatementNode = bracketedMetastatementChildNode, metaAssertionMetastatementNodeMatches = matchMetaAssertionMetastatementNode(metaAssertionMetastatementNode, metastatementNode), bracketedMetastatementChildNodeMatches = metaAssertionMetastatementNodeMatches;
            return bracketedMetastatementChildNodeMatches;
        });
        metaAssertionMetastatementNodeMatches = bracketedMetastatementChildNodeMatches; ///
    }
    if (!metaAssertionMetastatementNodeMatches) {
        var metaAssertionNonTerminalNode = metaAssertionMetastatementNode, metaAssertionChildNodes = metaAssertionNonTerminalNode.getChildNodes(), bracketedMetaAssertionMetastatementChildNodeMatches = matchBracketedMetastatementChildNode(metaAssertionChildNodes, function(bracketedMetaAssertionMetastatementChildNode) {
            var metaAssertionMetastatementNode = bracketedMetaAssertionMetastatementChildNode, metaAssertionMetastatementNodeMatches = matchMetaAssertionMetastatementNode(metaAssertionMetastatementNode, metastatementNode), bracketedMetaAssertionMetastatementChildNodeMatches = metaAssertionMetastatementNodeMatches;
            return bracketedMetaAssertionMetastatementChildNodeMatches;
        });
        metaAssertionMetastatementNodeMatches = bracketedMetaAssertionMetastatementChildNodeMatches; ///
    }
    var topmostMetaAssertionMetastatementNodeMatches = metaAssertionMetastatementNodeMatches; ///
    return topmostMetaAssertionMetastatementNodeMatches;
}
function bracketedMetastatementChildNodeFromChildNodes(childNodes) {
    var bracketedMetastatementChildNode = null;
    var childNodesLength = childNodes.length;
    if (childNodesLength === _constants.BRACKETED_METASTATEMENT_CHILD_NODES_LENGTH) {
        var firstChildNode = (0, _array.first)(childNodes), thirdChildNode = (0, _array.third)(childNodes), secondChildNode = (0, _array.second)(childNodes), firstChildNodeTerminalNode = firstChildNode.isTerminalNode(), thirdChildNodeTerminalNode = thirdChildNode.isTerminalNode(), secondChildNodeNonTerminalNode = secondChildNode.isNonTerminalNode();
        if (firstChildNodeTerminalNode && secondChildNodeNonTerminalNode && thirdChildNodeTerminalNode) {
            var nonTerminalNode = secondChildNode, firstTerminalNode = firstChildNode, secondTerminalNode = thirdChildNode, nonTerminalNodeRuleName = nonTerminalNode.getRuleName(), firstTerminalNodeContent = firstTerminalNode.getContent(), secondTerminalNodeContent = secondTerminalNode.getContent(), firstTerminalNodeContentLeftBracket = firstTerminalNodeContent === _constants.LEFT_BRACKET, secondTerminalNodeContentRightBracket = secondTerminalNodeContent === _constants.RIGHT_BRACKET, nonTerminalNodeRuleNameMetastatementRuleName = nonTerminalNodeRuleName === _ruleNames.METASTATEMENT_RULE_NAME;
            if (firstTerminalNodeContentLeftBracket && nonTerminalNodeRuleNameMetastatementRuleName && secondTerminalNodeContentRightBracket) {
                bracketedMetastatementChildNode = nonTerminalNode; ///
            }
        }
    }
    return bracketedMetastatementChildNode;
}
function matchMetaAssertionNode(metaAssertionNode, node) {
    var metaAssertionNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = metaAssertionNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, metaAssertionTerminalNode = metaAssertionNode, metaAssertionTerminalNodeMatches = matchMetaAssertionTerminalNode(metaAssertionTerminalNode, terminalNode);
            metaAssertionNodeMatches = metaAssertionTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, metaAssertionNonTerminalNode = metaAssertionNode, metaAssertionNonTerminalNodeMatches = matchMetaAssertionNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode);
            metaAssertionNodeMatches = metaAssertionNonTerminalNodeMatches; ///
        }
    }
    return metaAssertionNodeMatches;
}
function matchMetaAssertionNodes(metaAssertionNodes, nodes) {
    var metaAssertionNodesMatches = false;
    var nodesLength = nodes.length, metaAssertionNodesLength = metaAssertionNodes.length;
    if (nodesLength === metaAssertionNodesLength) {
        metaAssertionNodesMatches = nodes.every(function(node, index) {
            var metaAssertionNode = metaAssertionNodes[index], metaAssertionNodeMatches = matchMetaAssertionNode(metaAssertionNode, node);
            if (metaAssertionNodeMatches) {
                return true;
            }
        });
    }
    return metaAssertionNodesMatches;
}
function matchMetaAssertionTerminalNode(metaAssertionTerminalNode, terminalNode) {
    var metaAssertionTerminalNodeMatches = false;
    var matches = metaAssertionTerminalNode.match(terminalNode);
    if (matches) {
        metaAssertionTerminalNodeMatches = true;
    }
    return metaAssertionTerminalNodeMatches;
}
function matchMetaAssertionNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode) {
    var metaAssertionNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), metaAssertionRuleName = metaAssertionNonTerminalNode.getRuleName(); ///
    if (ruleName === metaAssertionRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), nodes = childNodes, metaAssertionChildNodes = metaAssertionNonTerminalNode.getChildNodes(), metaAssertionNodes = metaAssertionChildNodes, metaAssertionNodesMatches = matchMetaAssertionNodes(metaAssertionNodes, nodes);
        metaAssertionNonTerminalNodeMatches = metaAssertionNodesMatches; ///
    }
    return metaAssertionNonTerminalNodeMatches;
}
function matchMetaAssertionMetastatementNode(metaAssertionMetastatementNode, metastatementNode) {
    var nonTerminalNode = metastatementNode, metaAssertionNonTerminalNode = metaAssertionMetastatementNode, metaAssertionNonTerminalNodeMatches = matchMetaAssertionNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode), metaAssertionMetastatementNodeNatches = metaAssertionNonTerminalNodeMatches; ///
    return metaAssertionMetastatementNodeNatches;
}

//# sourceMappingURL=data:application/json;base64,