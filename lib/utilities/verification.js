"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    containedAssertionFromStatement: function() {
        return containedAssertionFromStatement;
    },
    definedAssertionFromStatement: function() {
        return definedAssertionFromStatement;
    },
    equalityFromStatement: function() {
        return equalityFromStatement;
    },
    judgementFromStatement: function() {
        return judgementFromStatement;
    },
    metavariableFromFrame: function() {
        return metavariableFromFrame;
    },
    metavariableFromStatement: function() {
        return metavariableFromStatement;
    },
    propertyAssertionFromStatement: function() {
        return propertyAssertionFromStatement;
    },
    subproofAssertionFromStatement: function() {
        return subproofAssertionFromStatement;
    },
    typeAssertionFromStatement: function() {
        return typeAssertionFromStatement;
    }
});
var _dom = /*#__PURE__*/ _interop_require_default(require("../dom"));
var _local = /*#__PURE__*/ _interop_require_default(require("../context/local"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function metavariableFromFrame(frame, context) {
    context = contextFromFrame(frame, context); ///
    var Metavariable = _dom.default.Metavariable, frameNode = frame.getNode(), metavariable = Metavariable.fromFrameNode(frameNode, context);
    return metavariable;
}
function equalityFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Equality = _dom.default.Equality, statementNode = statement.getNode(), equality = Equality.fromStatementNode(statementNode, context);
    return equality;
}
function judgementFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Judgement = _dom.default.Judgement, statementNode = statement.getNode(), judgement = Judgement.fromStatementNode(statementNode, context);
    return judgement;
}
function metavariableFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Metavariable = _dom.default.Metavariable, statementNode = statement.getNode(), metavariable = Metavariable.fromStatementNode(statementNode, context);
    return metavariable;
}
function typeAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var TypeAssertion = _dom.default.TypeAssertion, statementNode = statement.getNode(), typeAssertion = TypeAssertion.fromStatementNode(statementNode, context);
    return typeAssertion;
}
function definedAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var DefinedAssertion = _dom.default.DefinedAssertion, statementNode = statement.getNode(), definedAssertion = DefinedAssertion.fromStatementNode(statementNode, context);
    return definedAssertion;
}
function propertyAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var PropertyAssertion = _dom.default.PropertyAssertion, statementNode = statement.getNode(), propertyAssertion = PropertyAssertion.fromStatementNode(statementNode, context);
    return propertyAssertion;
}
function containedAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var ContainedAssertion = _dom.default.ContainedAssertion, statementNode = statement.getNode(), containedAssertion = ContainedAssertion.fromStatementNode(statementNode, context);
    return containedAssertion;
}
function subproofAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var SubproofAssertion = _dom.default.SubproofAssertion, statementNode = statement.getNode(), subproofAssertion = SubproofAssertion.fromStatementNode(statementNode, context);
    return subproofAssertion;
}
function contextFromFrame(frame, context) {
    var frameTokens = frame.getTokens(), tokens = frameTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}
function contextFromStatement(statement, context) {
    var statementTokens = statement.getTokens(), tokens = statementTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}

//# sourceMappingURL=data:application/json;base64,