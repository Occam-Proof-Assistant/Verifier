"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    containedAssertionFromStatement: function() {
        return containedAssertionFromStatement;
    },
    definedAssertionFromStatement: function() {
        return definedAssertionFromStatement;
    },
    equalityFromStatement: function() {
        return equalityFromStatement;
    },
    judgementFromStatement: function() {
        return judgementFromStatement;
    },
    metavariableFromFrame: function() {
        return metavariableFromFrame;
    },
    metavariableFromReference: function() {
        return metavariableFromReference;
    },
    metavariableFromStatement: function() {
        return metavariableFromStatement;
    },
    subproofAssertionFromStatement: function() {
        return subproofAssertionFromStatement;
    },
    typeAssertionFromStatement: function() {
        return typeAssertionFromStatement;
    }
});
var _dom = /*#__PURE__*/ _interop_require_default(require("../dom"));
var _local = /*#__PURE__*/ _interop_require_default(require("../context/local"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function metavariableFromFrame(frame, context) {
    context = contextFromFrame(frame, context); ///
    var Metavariable = _dom.default.Metavariable, frameNode = frame.getNode(), metavariable = Metavariable.fromFrameNode(frameNode, context);
    return metavariable;
}
function metavariableFromReference(reference, context) {
    context = contextFromReference(reference, context); ///
    var Metavariable = _dom.default.Metavariable, referenceNode = reference.getNode(), metavariable = Metavariable.fromReferenceNode(referenceNode, context);
    return metavariable;
}
function equalityFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Equality = _dom.default.Equality, statementNode = statement.getNode(), equality = Equality.fromStatementNode(statementNode, context);
    return equality;
}
function judgementFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Judgement = _dom.default.Judgement, statementNode = statement.getNode(), judgement = Judgement.fromStatementNode(statementNode, context);
    return judgement;
}
function metavariableFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Metavariable = _dom.default.Metavariable, statementNode = statement.getNode(), metavariable = Metavariable.fromStatementNode(statementNode, context);
    return metavariable;
}
function typeAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var TypeAssertion = _dom.default.TypeAssertion, statementNode = statement.getNode(), typeAssertion = TypeAssertion.fromStatementNode(statementNode, context);
    return typeAssertion;
}
function definedAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var DefinedAssertion = _dom.default.DefinedAssertion, statementNode = statement.getNode(), definedAssertion = DefinedAssertion.fromStatementNode(statementNode, context);
    return definedAssertion;
}
function subproofAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var SubproofAssertion = _dom.default.SubproofAssertion, statementNode = statement.getNode(), subproofAssertion = SubproofAssertion.fromStatementNode(statementNode, context);
    return subproofAssertion;
}
function containedAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var ContainedAssertion = _dom.default.ContainedAssertion, statementNode = statement.getNode(), containedAssertion = ContainedAssertion.fromStatementNode(statementNode, context);
    return containedAssertion;
}
function contextFromFrame(frame, context) {
    var frameTokens = frame.getTokens(), tokens = frameTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}
function contextFromReference(reference, context) {
    var referenceTokens = reference.getTokens(), tokens = referenceTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}
function contextFromStatement(statement, context) {
    var statementTokens = statement.getTokens(), tokens = statementTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdmVyaWZpY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgZG9tIGZyb20gXCIuLi9kb21cIjtcbmltcG9ydCBMb2NhbENvbnRleHQgZnJvbSBcIi4uL2NvbnRleHQvbG9jYWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGF2YXJpYWJsZUZyb21GcmFtZShmcmFtZSwgY29udGV4dCkge1xuICBjb250ZXh0ID0gY29udGV4dEZyb21GcmFtZShmcmFtZSwgY29udGV4dCk7IC8vL1xuXG4gIGNvbnN0IHsgTWV0YXZhcmlhYmxlIH0gPSBkb20sXG4gICAgICAgIGZyYW1lTm9kZSA9IGZyYW1lLmdldE5vZGUoKSxcbiAgICAgICAgbWV0YXZhcmlhYmxlID0gTWV0YXZhcmlhYmxlLmZyb21GcmFtZU5vZGUoZnJhbWVOb2RlLCBjb250ZXh0KTtcblxuICByZXR1cm4gbWV0YXZhcmlhYmxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWV0YXZhcmlhYmxlRnJvbVJlZmVyZW5jZShyZWZlcmVuY2UsIGNvbnRleHQpIHtcbiAgY29udGV4dCA9IGNvbnRleHRGcm9tUmVmZXJlbmNlKHJlZmVyZW5jZSwgY29udGV4dCk7IC8vL1xuXG4gIGNvbnN0IHsgTWV0YXZhcmlhYmxlIH0gPSBkb20sXG4gICAgcmVmZXJlbmNlTm9kZSA9IHJlZmVyZW5jZS5nZXROb2RlKCksXG4gICAgbWV0YXZhcmlhYmxlID0gTWV0YXZhcmlhYmxlLmZyb21SZWZlcmVuY2VOb2RlKHJlZmVyZW5jZU5vZGUsIGNvbnRleHQpO1xuXG4gIHJldHVybiBtZXRhdmFyaWFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbGl0eUZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0RnJvbVN0YXRlbWVudChzdGF0ZW1lbnQsIGNvbnRleHQpOyAvLy9cblxuICBjb25zdCB7IEVxdWFsaXR5IH0gPSBkb20sXG4gICAgICAgIHN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnQuZ2V0Tm9kZSgpLFxuICAgICAgICBlcXVhbGl0eSA9IEVxdWFsaXR5LmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUsIGNvbnRleHQpO1xuXG4gIHJldHVybiBlcXVhbGl0eTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGp1ZGdlbWVudEZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0RnJvbVN0YXRlbWVudChzdGF0ZW1lbnQsIGNvbnRleHQpOyAvLy9cblxuICBjb25zdCB7IEp1ZGdlbWVudCB9ID0gZG9tLFxuICAgICAgICBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50LmdldE5vZGUoKSxcbiAgICAgICAganVkZ2VtZW50ID0gSnVkZ2VtZW50LmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUsIGNvbnRleHQpO1xuXG4gIHJldHVybiBqdWRnZW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXRhdmFyaWFibGVGcm9tU3RhdGVtZW50KHN0YXRlbWVudCwgY29udGV4dCkge1xuICBjb250ZXh0ID0gY29udGV4dEZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KTsgLy8vXG5cbiAgY29uc3QgeyBNZXRhdmFyaWFibGUgfSA9IGRvbSxcbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudC5nZXROb2RlKCksXG4gICAgICAgIG1ldGF2YXJpYWJsZSA9IE1ldGF2YXJpYWJsZS5mcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlLCBjb250ZXh0KTtcblxuICByZXR1cm4gbWV0YXZhcmlhYmxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHlwZUFzc2VydGlvbkZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0RnJvbVN0YXRlbWVudChzdGF0ZW1lbnQsIGNvbnRleHQpOyAvLy9cblxuICBjb25zdCB7IFR5cGVBc3NlcnRpb24gfSA9IGRvbSxcbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudC5nZXROb2RlKCksXG4gICAgICAgIHR5cGVBc3NlcnRpb24gPSBUeXBlQXNzZXJ0aW9uLmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUsIGNvbnRleHQpO1xuXG4gIHJldHVybiB0eXBlQXNzZXJ0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lZEFzc2VydGlvbkZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0RnJvbVN0YXRlbWVudChzdGF0ZW1lbnQsIGNvbnRleHQpOyAvLy9cblxuICBjb25zdCB7IERlZmluZWRBc3NlcnRpb24gfSA9IGRvbSxcbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudC5nZXROb2RlKCksXG4gICAgICAgIGRlZmluZWRBc3NlcnRpb24gPSBEZWZpbmVkQXNzZXJ0aW9uLmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUsIGNvbnRleHQpO1xuXG4gIHJldHVybiBkZWZpbmVkQXNzZXJ0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvb2ZBc3NlcnRpb25Gcm9tU3RhdGVtZW50KHN0YXRlbWVudCwgY29udGV4dCkge1xuICBjb250ZXh0ID0gY29udGV4dEZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KTsgLy8vXG5cbiAgY29uc3QgeyBTdWJwcm9vZkFzc2VydGlvbiB9ID0gZG9tLFxuICAgICAgICBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50LmdldE5vZGUoKSxcbiAgICAgICAgc3VicHJvb2ZBc3NlcnRpb24gPSBTdWJwcm9vZkFzc2VydGlvbi5mcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlLCBjb250ZXh0KTtcblxuICByZXR1cm4gc3VicHJvb2ZBc3NlcnRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluZWRBc3NlcnRpb25Gcm9tU3RhdGVtZW50KHN0YXRlbWVudCwgY29udGV4dCkge1xuICBjb250ZXh0ID0gY29udGV4dEZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KTsgLy8vXG5cbiAgY29uc3QgeyBDb250YWluZWRBc3NlcnRpb24gfSA9IGRvbSxcbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudC5nZXROb2RlKCksXG4gICAgICAgIGNvbnRhaW5lZEFzc2VydGlvbiA9IENvbnRhaW5lZEFzc2VydGlvbi5mcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlLCBjb250ZXh0KTtcblxuICByZXR1cm4gY29udGFpbmVkQXNzZXJ0aW9uO1xufVxuXG5mdW5jdGlvbiBjb250ZXh0RnJvbUZyYW1lKGZyYW1lLCBjb250ZXh0KSB7XG4gIGNvbnN0IGZyYW1lVG9rZW5zID0gZnJhbWUuZ2V0VG9rZW5zKCksXG4gICAgICAgIHRva2VucyA9IGZyYW1lVG9rZW5zLCAvLy9cbiAgICAgICAgbG9jYWxDb250ZXh0ID0gTG9jYWxDb250ZXh0LmZyb21Db250ZXh0QW5kVG9rZW5zKGNvbnRleHQsIHRva2Vucyk7XG5cbiAgY29udGV4dCA9IGxvY2FsQ29udGV4dDsgLy8vXG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRGcm9tUmVmZXJlbmNlKHJlZmVyZW5jZSwgY29udGV4dCkge1xuICBjb25zdCByZWZlcmVuY2VUb2tlbnMgPSByZWZlcmVuY2UuZ2V0VG9rZW5zKCksXG4gICAgICAgIHRva2VucyA9IHJlZmVyZW5jZVRva2VucywgLy8vXG4gICAgICAgIGxvY2FsQ29udGV4dCA9IExvY2FsQ29udGV4dC5mcm9tQ29udGV4dEFuZFRva2Vucyhjb250ZXh0LCB0b2tlbnMpO1xuXG4gIGNvbnRleHQgPSBsb2NhbENvbnRleHQ7IC8vL1xuXG4gIHJldHVybiBjb250ZXh0O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0RnJvbVN0YXRlbWVudChzdGF0ZW1lbnQsIGNvbnRleHQpIHtcbiAgY29uc3Qgc3RhdGVtZW50VG9rZW5zID0gc3RhdGVtZW50LmdldFRva2VucygpLFxuICAgICAgICB0b2tlbnMgPSBzdGF0ZW1lbnRUb2tlbnMsIC8vL1xuICAgICAgICBsb2NhbENvbnRleHQgPSBMb2NhbENvbnRleHQuZnJvbUNvbnRleHRBbmRUb2tlbnMoY29udGV4dCwgdG9rZW5zKTtcblxuICBjb250ZXh0ID0gbG9jYWxDb250ZXh0OyAvLy9cblxuICByZXR1cm4gY29udGV4dDtcbn1cbiJdLCJuYW1lcyI6WyJjb250YWluZWRBc3NlcnRpb25Gcm9tU3RhdGVtZW50IiwiZGVmaW5lZEFzc2VydGlvbkZyb21TdGF0ZW1lbnQiLCJlcXVhbGl0eUZyb21TdGF0ZW1lbnQiLCJqdWRnZW1lbnRGcm9tU3RhdGVtZW50IiwibWV0YXZhcmlhYmxlRnJvbUZyYW1lIiwibWV0YXZhcmlhYmxlRnJvbVJlZmVyZW5jZSIsIm1ldGF2YXJpYWJsZUZyb21TdGF0ZW1lbnQiLCJzdWJwcm9vZkFzc2VydGlvbkZyb21TdGF0ZW1lbnQiLCJ0eXBlQXNzZXJ0aW9uRnJvbVN0YXRlbWVudCIsImZyYW1lIiwiY29udGV4dCIsImNvbnRleHRGcm9tRnJhbWUiLCJNZXRhdmFyaWFibGUiLCJkb20iLCJmcmFtZU5vZGUiLCJnZXROb2RlIiwibWV0YXZhcmlhYmxlIiwiZnJvbUZyYW1lTm9kZSIsInJlZmVyZW5jZSIsImNvbnRleHRGcm9tUmVmZXJlbmNlIiwicmVmZXJlbmNlTm9kZSIsImZyb21SZWZlcmVuY2VOb2RlIiwic3RhdGVtZW50IiwiY29udGV4dEZyb21TdGF0ZW1lbnQiLCJFcXVhbGl0eSIsInN0YXRlbWVudE5vZGUiLCJlcXVhbGl0eSIsImZyb21TdGF0ZW1lbnROb2RlIiwiSnVkZ2VtZW50IiwianVkZ2VtZW50IiwiVHlwZUFzc2VydGlvbiIsInR5cGVBc3NlcnRpb24iLCJEZWZpbmVkQXNzZXJ0aW9uIiwiZGVmaW5lZEFzc2VydGlvbiIsIlN1YnByb29mQXNzZXJ0aW9uIiwic3VicHJvb2ZBc3NlcnRpb24iLCJDb250YWluZWRBc3NlcnRpb24iLCJjb250YWluZWRBc3NlcnRpb24iLCJmcmFtZVRva2VucyIsImdldFRva2VucyIsInRva2VucyIsImxvY2FsQ29udGV4dCIsIkxvY2FsQ29udGV4dCIsImZyb21Db250ZXh0QW5kVG9rZW5zIiwicmVmZXJlbmNlVG9rZW5zIiwic3RhdGVtZW50VG9rZW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFxRmdCQSwrQkFBK0I7ZUFBL0JBOztJQXBCQUMsNkJBQTZCO2VBQTdCQTs7SUF4Q0FDLHFCQUFxQjtlQUFyQkE7O0lBVUFDLHNCQUFzQjtlQUF0QkE7O0lBOUJBQyxxQkFBcUI7ZUFBckJBOztJQVVBQyx5QkFBeUI7ZUFBekJBOztJQThCQUMseUJBQXlCO2VBQXpCQTs7SUE4QkFDLDhCQUE4QjtlQUE5QkE7O0lBcEJBQywwQkFBMEI7ZUFBMUJBOzs7MERBckRBOzREQUNTOzs7Ozs7QUFFbEIsU0FBU0osc0JBQXNCSyxLQUFLLEVBQUVDLE9BQU87SUFDbERBLFVBQVVDLGlCQUFpQkYsT0FBT0MsVUFBVSxHQUFHO0lBRS9DLElBQU0sQUFBRUUsZUFBaUJDLFlBQUcsQ0FBcEJELGNBQ0ZFLFlBQVlMLE1BQU1NLE9BQU8sSUFDekJDLGVBQWVKLGFBQWFLLGFBQWEsQ0FBQ0gsV0FBV0o7SUFFM0QsT0FBT007QUFDVDtBQUVPLFNBQVNYLDBCQUEwQmEsU0FBUyxFQUFFUixPQUFPO0lBQzFEQSxVQUFVUyxxQkFBcUJELFdBQVdSLFVBQVUsR0FBRztJQUV2RCxJQUFNLEFBQUVFLGVBQWlCQyxZQUFHLENBQXBCRCxjQUNOUSxnQkFBZ0JGLFVBQVVILE9BQU8sSUFDakNDLGVBQWVKLGFBQWFTLGlCQUFpQixDQUFDRCxlQUFlVjtJQUUvRCxPQUFPTTtBQUNUO0FBRU8sU0FBU2Qsc0JBQXNCb0IsU0FBUyxFQUFFWixPQUFPO0lBQ3REQSxVQUFVYSxxQkFBcUJELFdBQVdaLFVBQVUsR0FBRztJQUV2RCxJQUFNLEFBQUVjLFdBQWFYLFlBQUcs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