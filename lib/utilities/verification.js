"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    containedAssertionFromStatement: function() {
        return containedAssertionFromStatement;
    },
    definedAssertionFromStatement: function() {
        return definedAssertionFromStatement;
    },
    equalityFromStatement: function() {
        return equalityFromStatement;
    },
    judgementFromStatement: function() {
        return judgementFromStatement;
    },
    metavariableFromStatement: function() {
        return metavariableFromStatement;
    },
    stripBracketsFromStatement: function() {
        return stripBracketsFromStatement;
    },
    subproofAssertionFromStatement: function() {
        return subproofAssertionFromStatement;
    },
    typeAssertionFromStatement: function() {
        return typeAssertionFromStatement;
    }
});
var _shim = /*#__PURE__*/ _interop_require_default(require("../shim"));
var _local = /*#__PURE__*/ _interop_require_default(require("../context/local"));
var _type = /*#__PURE__*/ _interop_require_default(require("../assertion/type"));
var _defined = /*#__PURE__*/ _interop_require_default(require("../assertion/defined"));
var _subproof = /*#__PURE__*/ _interop_require_default(require("../assertion/subproof"));
var _contained = /*#__PURE__*/ _interop_require_default(require("../assertion/contained"));
var _brackets = require("../utilities/brackets");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function stripBracketsFromStatement(statement, context) {
    var statementNode = statement.getNode(), bracketedStatementChildNode = (0, _brackets.bracketedStatementChildNodeFromStatementNode)(statementNode);
    if (bracketedStatementChildNode !== null) {
        context = contextFromStatement(statement, context); ///
        var Statement = _shim.default.Statement, statementNode1 = bracketedStatementChildNode; ///
        statement = Statement.fromStatementNode(statementNode1, context);
    }
    return statement;
}
function equalityFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Equality = _shim.default.Equality, statementNode = statement.getNode(), equality = Equality.fromStatementNode(statementNode, context);
    return equality;
}
function judgementFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Judgement = _shim.default.Judgement, statementNode = statement.getNode(), judgement = Judgement.fromStatementNode(statementNode, context);
    return judgement;
}
function metavariableFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var Metavariable = _shim.default.Metavariable, statementNode = statement.getNode(), metavariable = Metavariable.fromStatementNode(statementNode, context);
    return metavariable;
}
function typeAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var statementNode = statement.getNode(), typeAssertion = _type.default.fromStatementNode(statementNode, context);
    return typeAssertion;
}
function definedAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var statementNode = statement.getNode(), definedAssertion = _defined.default.fromStatementNode(statementNode, context);
    return definedAssertion;
}
function subproofAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var statementNode = statement.getNode(), subproofAssertion = _subproof.default.fromStatementNode(statementNode, context);
    return subproofAssertion;
}
function containedAssertionFromStatement(statement, context) {
    context = contextFromStatement(statement, context); ///
    var statementNode = statement.getNode(), containedAssertion = _contained.default.fromStatementNode(statementNode, context);
    return containedAssertion;
}
function contextFromStatement(statement, context) {
    var statementTokens = statement.getTokens(), tokens = statementTokens, localContext = _local.default.fromContextAndTokens(context, tokens);
    context = localContext; ///
    return context;
}

//# sourceMappingURL=data:application/json;base64,