"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchStatementModuloBrackets: function() {
        return matchStatementModuloBrackets;
    },
    bracketedStatementNodeFromStatementNode: function() {
        return bracketedStatementNodeFromStatementNode;
    }
});
var _matcher = require("../matcher");
var _query = require("./query");
var _array = require("./array");
var _ruleNames = require("../ruleNames");
var _constants = require("../constants");
var statementNodeQuery = (0, _query.nodeQuery)("/metaArgument/statement!");
function matchStatementModuloBrackets(statementNodeA, statementNodeB) {
    var statementMatchesModuloBrackets = false;
    if (!statementMatchesModuloBrackets) {
        var nonTerminalNodeA = statementNodeA, nonTerminalNodeB = statementNodeB, nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
        statementMatchesModuloBrackets = nonTerminalNodeMatches; ///
    }
    if (!statementMatchesModuloBrackets) {
        var bracketedStatementNodeA = bracketedStatementNodeFromStatementNode(statementNodeA);
        if (bracketedStatementNodeA !== null) {
            var _$statementNodeA = bracketedStatementNodeA, nodeA = _$statementNodeA, nodeB = statementNodeB, nodeMatches = _matcher.matcher.matchNode(nodeA, nodeB);
            statementMatchesModuloBrackets = nodeMatches; ///
        }
    }
    if (!statementMatchesModuloBrackets) {
        var bracketedStatementNodeB = bracketedStatementNodeFromStatementNode(statementNodeB);
        if (bracketedStatementNodeB !== null) {
            var _$statementNodeB = bracketedStatementNodeB, nodeA1 = statementNodeA, nodeB1 = _$statementNodeB, nodeMatches1 = _matcher.matcher.matchNode(nodeA1, nodeB1);
            statementMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    return statementMatchesModuloBrackets;
}
function bracketedStatementNodeFromStatementNode(statementNode) {
    var bracketedStatementNode = null;
    var nonTerminalNode = statementNode, childNodes = nonTerminalNode.getChildNodes(), childNodesLength = childNodes.length;
    if (childNodesLength === _constants.BRACKETED_CHILD_NODES_LENGTH) {
        var firstChildNode = (0, _array.first)(childNodes), thirdChildNode = (0, _array.third)(childNodes), secondChildNode = (0, _array.second)(childNodes), firstChildNodeTerminalNode = firstChildNode.isTerminalNode(), thirdChildNodeTerminalNode = thirdChildNode.isTerminalNode(), secondChildNodeNonTerminalNode = secondChildNode.isNonTerminalNode();
        if (firstChildNodeTerminalNode && secondChildNodeNonTerminalNode && thirdChildNodeTerminalNode) {
            var nonTerminalNode1 = secondChildNode, firstTerminalNode = firstChildNode, secondTerminalNode = thirdChildNode, nonTerminalNodeRuleName = nonTerminalNode1.getRuleName(), firstTerminalNodeContent = firstTerminalNode.getContent(), secondTerminalNodeContent = secondTerminalNode.getContent(), firstTerminalNodeContentLeftBracket = firstTerminalNodeContent === _constants.LEFT_BRACKET, secondTerminalNodeContentRightBracket = secondTerminalNodeContent === _constants.RIGHT_BRACKET, nonTerminalNodeRuleNameMetaArgumentRuleName = nonTerminalNodeRuleName === _ruleNames.META_ARGUMENT_RULE_NAME;
            if (nonTerminalNodeRuleNameMetaArgumentRuleName && firstTerminalNodeContentLeftBracket && secondTerminalNodeContentRightBracket) {
                var metaArgumentNode = nonTerminalNode1, _$statementNode = statementNodeQuery(metaArgumentNode);
                if (_$statementNode !== null) {
                    bracketedStatementNode = _$statementNode; ///
                }
            }
        }
    }
    return bracketedStatementNode;
}

//# sourceMappingURL=data:application/json;base64,