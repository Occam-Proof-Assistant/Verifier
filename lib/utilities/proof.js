"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchStatementModuloBrackets: function() {
        return matchStatementModuloBrackets;
    },
    bracketedStatementChildNodeFromStatementNode: function() {
        return bracketedStatementChildNodeFromStatementNode;
    }
});
var _bracketed = /*#__PURE__*/ _interopRequireDefault(require("../node/statement/bracketed"));
var _matcher = require("../matcher");
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedStatementChildNodeQuery = (0, _query.nodeQuery)("/statement/metaArgument!/statement!");
function matchStatementModuloBrackets(statementNodeA, statementNodeB) {
    var statementMatchesModuloBrackets = false;
    if (!statementMatchesModuloBrackets) {
        var nonTerminalNodeA = statementNodeA, nonTerminalNodeB = statementNodeB, nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
        statementMatchesModuloBrackets = nonTerminalNodeMatches; ///
    }
    if (!statementMatchesModuloBrackets) {
        var bracketedStatementChildNodeA = bracketedStatementChildNodeFromStatementNode(statementNodeA);
        if (bracketedStatementChildNodeA !== null) {
            var nodeA = bracketedStatementChildNodeA, nodeB = statementNodeB, nodeMatches = _matcher.matcher.matchNode(nodeA, nodeB);
            statementMatchesModuloBrackets = nodeMatches; ///
        }
    }
    if (!statementMatchesModuloBrackets) {
        var bracketedStatementChildNodeB = bracketedStatementChildNodeFromStatementNode(statementNodeB);
        if (bracketedStatementChildNodeB !== null) {
            var nodeA1 = statementNodeA, nodeB1 = bracketedStatementChildNodeB, nodeMatches1 = _matcher.matcher.matchNode(nodeA1, nodeB1);
            statementMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    return statementMatchesModuloBrackets;
}
function bracketedStatementChildNodeFromStatementNode(statementNode) {
    var bracketedStatementChildNode = null;
    var depth = _constants.BRACKETED_STATEMENT_DEPTH, substitutions = null, nonTerminalNodeA = statementNode, nonTerminalNodeB = _bracketed.default, nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB, substitutions, depth);
    if (nonTerminalNodeMatches) {
        bracketedStatementChildNode = bracketedStatementChildNodeQuery(statementNode);
    }
    return bracketedStatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBicmFja2V0ZWRTdGF0ZW1lbnROb2RlIGZyb20gXCIuLi9ub2RlL3N0YXRlbWVudC9icmFja2V0ZWRcIjtcblxuaW1wb3J0IHsgbWF0Y2hlciB9IGZyb20gXCIuLi9tYXRjaGVyXCI7XG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5pbXBvcnQgeyBCUkFDS0VURURfU1RBVEVNRU5UX0RFUFRIIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSA9IG5vZGVRdWVyeSgnL3N0YXRlbWVudC9tZXRhQXJndW1lbnQhL3N0YXRlbWVudCEnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoU3RhdGVtZW50TW9kdWxvQnJhY2tldHMoc3RhdGVtZW50Tm9kZUEsIHN0YXRlbWVudE5vZGVCKSB7XG4gIGxldCBzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBmYWxzZTtcblxuICBpZiAoIXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cykge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZUEgPSBzdGF0ZW1lbnROb2RlQSwgIC8vL1xuICAgICAgICAgIG5vblRlcm1pbmFsTm9kZUIgPSBzdGF0ZW1lbnROb2RlQiwgIC8vL1xuICAgICAgICAgIG5vblRlcm1pbmFsTm9kZU1hdGNoZXMgPSBtYXRjaGVyLm1hdGNoTm9uVGVybWluYWxOb2RlKG5vblRlcm1pbmFsTm9kZUEsIG5vblRlcm1pbmFsTm9kZUIpO1xuXG4gICAgc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gbm9uVGVybWluYWxOb2RlTWF0Y2hlczsgIC8vL1xuICB9XG5cbiAgaWYgKCFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVBID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZUEpO1xuXG4gICAgaWYgKGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUEgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVBID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlQSwgIC8vL1xuICAgICAgICAgICAgbm9kZUIgPSBzdGF0ZW1lbnROb2RlQiwgLy8vXG4gICAgICAgICAgICBub2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb2RlKG5vZGVBLCBub2RlQik7XG5cbiAgICAgIHN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vZGVNYXRjaGVzOyAvLy9cbiAgICB9XG4gIH1cblxuICBpZiAoIXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cykge1xuICAgIGNvbnN0IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUIgPSBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlQik7XG5cbiAgICBpZiAoYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlQiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9kZUEgPSBzdGF0ZW1lbnROb2RlQSwgLy8vXG4gICAgICAgICAgICBub2RlQiA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUIsICAvLy9cbiAgICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgICAgc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gbm9kZU1hdGNoZXM7IC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKSB7XG4gIGxldCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGUgPSBudWxsO1xuXG4gIGNvbnN0IGRlcHRoID0gQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCxcbiAgICAgICAgc3Vic3RpdHV0aW9ucyA9IG51bGwsXG4gICAgICAgIG5vblRlcm1pbmFsTm9kZUEgPSBzdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgIG5vblRlcm1pbmFsTm9kZUIgPSBicmFja2V0ZWRTdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgIG5vblRlcm1pbmFsTm9kZU1hdGNoZXMgPSBtYXRjaGVyLm1hdGNoTm9uVGVybWluYWxOb2RlKG5vblRlcm1pbmFsTm9kZUEsIG5vblRlcm1pbmFsTm9kZUIsIHN1YnN0aXR1dGlvbnMsIGRlcHRoKTtcblxuICBpZiAobm9uVGVybWluYWxOb2RlTWF0Y2hlcykge1xuICAgIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5KHN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZTtcbn1cbiJdLCJuYW1lcyI6WyJtYXRjaFN0YXRlbWVudE1vZHVsb0JyYWNrZXRzIiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInN0YXRlbWVudE5vZGVBIiwic3RhdGVtZW50Tm9kZUIiLCJzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMiLCJub25UZXJtaW5hbE5vZGVBIiwibm9uVGVybWluYWxOb2RlQiIsIm5vblRlcm1pbmFsTm9kZU1hdGNoZXMiLCJtYXRjaGVyIiwibWF0Y2hOb25UZXJtaW5hbE5vZGUiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVBIiwibm9kZUEiLCJub2RlQiIsIm5vZGVNYXRjaGVzIiwibWF0Y2hOb2RlIiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlQiIsInN0YXRlbWVudE5vZGUiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGUiLCJkZXB0aCIsIkJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEgiLCJzdWJzdGl0dXRpb25zIiwiYnJhY2tldGVkU3RhdGVtZW50Tm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBVWdCQSw0QkFBNEI7ZUFBNUJBOztJQXNDQUMsNENBQTRDO2VBQTVDQTs7OzhEQTlDbUI7dUJBRVg7cUJBQ0U7eUJBQ2dCOzs7Ozs7QUFFMUMsSUFBTUMsbUNBQW1DQyxJQUFBQSxnQkFBUyxFQUFDO0FBRTVDLFNBQVNILDZCQUE2QkksY0FBYyxFQUFFQyxjQUFjLEVBQUU7SUFDM0UsSUFBSUMsaUNBQWlDLEtBQUs7SUFFMUMsSUFBSSxDQUFDQSxnQ0FBZ0M7UUFDbkMsSUFBTUMsbUJBQW1CSCxnQkFDbkJJLG1CQUFtQkgsZ0JBQ25CSSx5QkFBeUJDLGdCQUFPLENBQUNDLG9CQUFvQixDQUFDSixrQkFBa0JDO1FBRTlFRixpQ0FBaUNHLHdCQUF5QixHQUFHO0lBQy9ELENBQUM7SUFFRCxJQUFJLENBQUNILGdDQUFnQztRQUNuQyxJQUFNTSwrQkFBK0JYLDZDQUE2Q0c7UUFFbEYsSUFBSVEsaUNBQWlDLElBQUksRUFBRTtZQUN6QyxJQUFNQyxRQUFRRCw4QkFDUkUsUUFBUVQsZ0JBQ1JVLGNBQWNMLGdCQUFPLENBQUNNLFNBQVMsQ0FBQ0gsT0FBT0M7WUFFN0NSLGlDQUFpQ1MsYUFBYSxHQUFHO1FBQ25ELENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUFDVCxnQ0FBZ0M7UUFDbkMsSUFBTVcsK0JBQStCaEIsNkNBQTZDSTtRQUVsRixJQUFJWSxpQ0FBaUMsSUFBSSxFQUFFO1lBQ3pDLElBQU1KLFNBQVFULGdCQUNSVSxTQUFRRyw4QkFDUkYsZUFBY0wsZ0JBQU8sQ0FBQ00sU0FBUyxDQUFDSCxRQUFPQztZQUU3Q1IsaUNBQWlDUyxjQUFhLEdBQUc7UUFDbkQsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPVDtBQUNUO0FBRU8sU0FBU0wsNkNBQTZDaUIsYUFBYSxFQUFFO0lBQzFFLElBQUlDLDhCQUE4QixJQUFJO0lBRXRDLElBQU1DLFFBQVFDLG9DQUF5QixFQUNqQ0MsZ0JBQWdCLElBQUksRUFDcEJmLG1CQUFtQlcsZUFDbkJWLG1CQUFtQmUsa0JBQXNCLEVBQ3pDZCx5QkFBeUJDLGdCQUFPLENBQUNDLG9CQUFvQixDQUFDSixrQkFBa0JDLGtCQUFrQmMsZUFBZUY7SUFFL0csSUFBSVgsd0JBQXdCO1FBQzFCVSw4QkFBOEJqQixpQ0FBaUNnQjtJQUNqRSxDQUFDO0lBRUQsT0FBT0M7QUFDVCJ9