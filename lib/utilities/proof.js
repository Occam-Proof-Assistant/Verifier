"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchStatementModuloBrackets: function() {
        return matchStatementModuloBrackets;
    },
    bracketedStatementChildNodeFromStatementNode: function() {
        return bracketedStatementChildNodeFromStatementNode;
    }
});
var _matcher = /*#__PURE__*/ _interopRequireDefault(require("../matcher"));
var _bracketed = /*#__PURE__*/ _interopRequireDefault(require("../node/statement/bracketed"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedStatementChildNodeQuery = (0, _query.nodeQuery)("/statement/metaArgument!/statement!");
function matchStatementModuloBrackets(statementNodeA, statementNodeB) {
    var statementMatchesModuloBrackets = false;
    if (!statementMatchesModuloBrackets) {
        var nodeA = statementNodeA, nodeB = statementNodeB, nonTerminalNodeMatches = _matcher.default.matchNode(nodeA, nodeB);
        statementMatchesModuloBrackets = nonTerminalNodeMatches; ///
    }
    if (!statementMatchesModuloBrackets) {
        var bracketedStatementChildNodeA = bracketedStatementChildNodeFromStatementNode(statementNodeA);
        if (bracketedStatementChildNodeA !== null) {
            var nodeA1 = bracketedStatementChildNodeA, nodeB1 = statementNodeB, nodeMatches = _matcher.default.matchNode(nodeA1, nodeB1);
            statementMatchesModuloBrackets = nodeMatches; ///
        }
    }
    if (!statementMatchesModuloBrackets) {
        var bracketedStatementChildNodeB = bracketedStatementChildNodeFromStatementNode(statementNodeB);
        if (bracketedStatementChildNodeB !== null) {
            var nodeA2 = statementNodeA, nodeB2 = bracketedStatementChildNodeB, nodeMatches1 = _matcher.default.matchNode(nodeA2, nodeB2);
            statementMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    return statementMatchesModuloBrackets;
}
function bracketedStatementChildNodeFromStatementNode(statementNode) {
    var bracketedStatementChildNode = null;
    var nodeA = statementNode, nodeB = _bracketed.default, depth = _constants.BRACKETED_STATEMENT_DEPTH, nonTerminalNodeMatches = _matcher.default.matchNode(nodeA, nodeB, depth);
    if (nonTerminalNodeMatches) {
        bracketedStatementChildNode = bracketedStatementChildNodeQuery(statementNode);
    }
    return bracketedStatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5pbXBvcnQgYnJhY2tldGVkU3RhdGVtZW50Tm9kZSBmcm9tIFwiLi4vbm9kZS9zdGF0ZW1lbnQvYnJhY2tldGVkXCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcbmltcG9ydCB7IEJSQUNLRVRFRF9TVEFURU1FTlRfREVQVEggfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KCcvc3RhdGVtZW50L21ldGFBcmd1bWVudCEvc3RhdGVtZW50IScpO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hTdGF0ZW1lbnRNb2R1bG9CcmFja2V0cyhzdGF0ZW1lbnROb2RlQSwgc3RhdGVtZW50Tm9kZUIpIHtcbiAgbGV0IHN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IGZhbHNlO1xuXG4gIGlmICghc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3Qgbm9kZUEgPSBzdGF0ZW1lbnROb2RlQSwgIC8vL1xuICAgICAgICAgIG5vZGVCID0gc3RhdGVtZW50Tm9kZUIsICAvLy9cbiAgICAgICAgICBub25UZXJtaW5hbE5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgIHN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vblRlcm1pbmFsTm9kZU1hdGNoZXM7ICAvLy9cbiAgfVxuXG4gIGlmICghc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlQSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGVBKTtcblxuICAgIGlmIChicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVBICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBub2RlQSA9IGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUEsICAvLy9cbiAgICAgICAgICAgIG5vZGVCID0gc3RhdGVtZW50Tm9kZUIsIC8vL1xuICAgICAgICAgICAgbm9kZU1hdGNoZXMgPSBtYXRjaGVyLm1hdGNoTm9kZShub2RlQSwgbm9kZUIpO1xuXG4gICAgICBzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBub2RlTWF0Y2hlczsgLy8vXG4gICAgfVxuICB9XG5cbiAgaWYgKCFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVCID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZUIpO1xuXG4gICAgaWYgKGJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUIgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVBID0gc3RhdGVtZW50Tm9kZUEsIC8vL1xuICAgICAgICAgICAgbm9kZUIgPSBicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVCLCAgLy8vXG4gICAgICAgICAgICBub2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb2RlKG5vZGVBLCBub2RlQik7XG5cbiAgICAgIHN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vZGVNYXRjaGVzOyAvLy9cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlRnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSkge1xuICBsZXQgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBub2RlQSA9IHN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgbm9kZUIgPSBicmFja2V0ZWRTdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgIGRlcHRoID0gQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCxcbiAgICAgICAgbm9uVGVybWluYWxOb2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb2RlKG5vZGVBLCBub2RlQiwgZGVwdGgpO1xuXG4gIGlmIChub25UZXJtaW5hbE5vZGVNYXRjaGVzKSB7XG4gICAgYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlID0gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlUXVlcnkoc3RhdGVtZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlO1xufVxuIl0sIm5hbWVzIjpbIm1hdGNoU3RhdGVtZW50TW9kdWxvQnJhY2tldHMiLCJicmFja2V0ZWRTdGF0ZW1lbnRDaGlsZE5vZGVGcm9tU3RhdGVtZW50Tm9kZSIsImJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5Iiwic3RhdGVtZW50Tm9kZUEiLCJzdGF0ZW1lbnROb2RlQiIsInN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyIsIm5vZGVBIiwibm9kZUIiLCJub25UZXJtaW5hbE5vZGVNYXRjaGVzIiwibWF0Y2hlciIsIm1hdGNoTm9kZSIsImJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUEiLCJub2RlTWF0Y2hlcyIsImJyYWNrZXRlZFN0YXRlbWVudENoaWxkTm9kZUIiLCJzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkU3RhdGVtZW50Q2hpbGROb2RlIiwiYnJhY2tldGVkU3RhdGVtZW50Tm9kZSIsImRlcHRoIiwiQlJBQ0tFVEVEX1NUQVRFTUVOVF9ERVBUSCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBVWdCQSw0QkFBNEI7ZUFBNUJBOztJQXNDQUMsNENBQTRDO2VBQTVDQTs7OzREQTlDSTs4REFDZTtxQkFFVDt5QkFDZ0I7Ozs7OztBQUUxQyxJQUFNQyxtQ0FBbUNDLElBQUFBLGdCQUFTLEVBQUM7QUFFNUMsU0FBU0gsNkJBQTZCSSxjQUFjLEVBQUVDLGNBQWMsRUFBRTtJQUMzRSxJQUFJQyxpQ0FBaUMsS0FBSztJQUUxQyxJQUFJLENBQUNBLGdDQUFnQztRQUNuQyxJQUFNQyxRQUFRSCxnQkFDUkksUUFBUUgsZ0JBQ1JJLHlCQUF5QkMsZ0JBQU8sQ0FBQ0MsU0FBUyxDQUFDSixPQUFPQztRQUV4REYsaUNBQWlDRyx3QkFBeUIsR0FBRztJQUMvRCxDQUFDO0lBRUQsSUFBSSxDQUFDSCxnQ0FBZ0M7UUFDbkMsSUFBTU0sK0JBQStCWCw2Q0FBNkNHO1FBRWxGLElBQUlRLGlDQUFpQyxJQUFJLEVBQUU7WUFDekMsSUFBTUwsU0FBUUssOEJBQ1JKLFNBQVFILGdCQUNSUSxjQUFjSCxnQkFBTyxDQUFDQyxTQUFTLENBQUNKLFFBQU9DO1lBRTdDRixpQ0FBaUNPLGFBQWEsR0FBRztRQUNuRCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksQ0FBQ1AsZ0NBQWdDO1FBQ25DLElBQU1RLCtCQUErQmIsNkNBQTZDSTtRQUVsRixJQUFJUyxpQ0FBaUMsSUFBSSxFQUFFO1lBQ3pDLElBQU1QLFNBQVFILGdCQUNSSSxTQUFRTSw4QkFDUkQsZUFBY0gsZ0JBQU8sQ0FBQ0MsU0FBUyxDQUFDSixRQUFPQztZQUU3Q0YsaUNBQWlDTyxjQUFhLEdBQUc7UUFDbkQsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPUDtBQUNUO0FBRU8sU0FBU0wsNkNBQTZDYyxhQUFhLEVBQUU7SUFDMUUsSUFBSUMsOEJBQThCLElBQUk7SUFFdEMsSUFBTVQsUUFBUVEsZUFDUlAsUUFBUVMsa0JBQXNCLEVBQzlCQyxRQUFRQyxvQ0FBeUIsRUFDakNWLHlCQUF5QkMsZ0JBQU8sQ0FBQ0MsU0FBUyxDQUFDSixPQUFPQyxPQUFPVTtJQUUvRCxJQUFJVCx3QkFBd0I7UUFDMUJPLDhCQUE4QmQsaUNBQWlDYTtJQUNqRSxDQUFDO0lBRUQsT0FBT0M7QUFDVCJ9