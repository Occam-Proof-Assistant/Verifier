"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchMetastatementModuloBrackets: function() {
        return matchMetastatementModuloBrackets;
    },
    bracketedMetastatementNodeFromMetastatementNode: function() {
        return bracketedMetastatementNodeFromMetastatementNode;
    }
});
var _matcher = require("../matcher");
var _array = require("./array");
var _ruleNames = require("../ruleNames");
var _constants = require("../constants");
function matchMetastatementModuloBrackets(metastatementNodeA, metastatementNodeB) {
    var metastatementMatchesModuloBrackets = false;
    if (!metastatementMatchesModuloBrackets) {
        var _$nonTerminalNodeA = metastatementNodeA, _$nonTerminalNodeB = metastatementNodeB, nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(_$nonTerminalNodeA, _$nonTerminalNodeB);
        metastatementMatchesModuloBrackets = nonTerminalNodeMatches; ///
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedNonTerminalNodeA = bracketedMetastatementNodeFromMetastatementNode(metastatementNodeA);
        if (bracketedNonTerminalNodeA !== null) {
            var nodeA = bracketedNonTerminalNodeA, nodeB = nonTerminalNodeB, nodeMatches = _matcher.matcher.matchNode(nodeA, nodeB);
            metastatementMatchesModuloBrackets = nodeMatches; ///
        }
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedNonTerminalNodeB = bracketedMetastatementNodeFromMetastatementNode(metastatementNodeB);
        if (bracketedNonTerminalNodeB !== null) {
            var nodeB1 = bracketedNonTerminalNodeB, nodeA1 = nonTerminalNodeA, nodeMatches1 = _matcher.matcher.matchNode(nodeA1, nodeB1);
            metastatementMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    return metastatementMatchesModuloBrackets;
}
function bracketedMetastatementNodeFromMetastatementNode(metastatementNode) {
    var bracketedMetastatementNode = null;
    var nonTerminalNode = metastatementNode, childNodes = nonTerminalNode.getChildNodes(), childNodesLength = childNodes.length;
    if (childNodesLength === _constants.BRACKETED_CHILD_NODES_LENGTH) {
        var firstChildNode = (0, _array.first)(childNodes), thirdChildNode = (0, _array.third)(childNodes), secondChildNode = (0, _array.second)(childNodes), firstChildNodeTerminalNode = firstChildNode.isTerminalNode(), thirdChildNodeTerminalNode = thirdChildNode.isTerminalNode(), secondChildNodeNonTerminalNode = secondChildNode.isNonTerminalNode();
        if (firstChildNodeTerminalNode && secondChildNodeNonTerminalNode && thirdChildNodeTerminalNode) {
            var nonTerminalNode1 = secondChildNode, firstTerminalNode = firstChildNode, secondTerminalNode = thirdChildNode, nonTerminalNodeRuleName = nonTerminalNode1.getRuleName(), firstTerminalNodeContent = firstTerminalNode.getContent(), secondTerminalNodeContent = secondTerminalNode.getContent(), firstTerminalNodeContentLeftBracket = firstTerminalNodeContent === _constants.LEFT_BRACKET, secondTerminalNodeContentRightBracket = secondTerminalNodeContent === _constants.RIGHT_BRACKET, nonTerminalNodeRuleNameMetastatementRuleName = nonTerminalNodeRuleName === _ruleNames.METASTATEMENT_RULE_NAME;
            if (nonTerminalNodeRuleNameMetastatementRuleName && firstTerminalNodeContentLeftBracket && secondTerminalNodeContentRightBracket) {
                bracketedMetastatementNode = nonTerminalNode1; ///
            }
        }
    }
    return bracketedMetastatementNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YXByb29mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBtYXRjaGVyIH0gZnJvbSBcIi4uL21hdGNoZXJcIjtcbmltcG9ydCB7IGZpcnN0LCBzZWNvbmQsIHRoaXJkIH0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7IE1FVEFTVEFURU1FTlRfUlVMRV9OQU1FIH0gZnJvbSBcIi4uL3J1bGVOYW1lc1wiO1xuaW1wb3J0IHsgTEVGVF9CUkFDS0VULCBSSUdIVF9CUkFDS0VULCBCUkFDS0VURURfQ0hJTERfTk9ERVNfTEVOR1RIIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hNZXRhc3RhdGVtZW50TW9kdWxvQnJhY2tldHMobWV0YXN0YXRlbWVudE5vZGVBLCBtZXRhc3RhdGVtZW50Tm9kZUIpIHtcbiAgbGV0IG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBmYWxzZTtcblxuICBpZiAoIW1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGVBID0gbWV0YXN0YXRlbWVudE5vZGVBLCAgLy8vXG4gICAgICAgICAgbm9uVGVybWluYWxOb2RlQiA9IG1ldGFzdGF0ZW1lbnROb2RlQiwgIC8vL1xuICAgICAgICAgIG5vblRlcm1pbmFsTm9kZU1hdGNoZXMgPSBtYXRjaGVyLm1hdGNoTm9uVGVybWluYWxOb2RlKG5vblRlcm1pbmFsTm9kZUEsIG5vblRlcm1pbmFsTm9kZUIpO1xuXG4gICAgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vblRlcm1pbmFsTm9kZU1hdGNoZXM7ICAvLy9cbiAgfVxuXG4gIGlmICghbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cykge1xuICAgIGNvbnN0IGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUEgPSBicmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZUZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZUEpO1xuXG4gICAgaWYgKGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUEgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVBID0gYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQSwgIC8vL1xuICAgICAgICAgICAgbm9kZUIgPSBub25UZXJtaW5hbE5vZGVCLCAvLy9cbiAgICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgICAgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vZGVNYXRjaGVzOyAvLy9cbiAgICB9XG4gIH1cblxuICBpZiAoIW1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBicmFja2V0ZWROb25UZXJtaW5hbE5vZGVCID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudE5vZGVGcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGVCKTtcblxuICAgIGlmIChicmFja2V0ZWROb25UZXJtaW5hbE5vZGVCICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBub2RlQiA9IGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUIsICAvLy9cbiAgICAgICAgICAgIG5vZGVBID0gbm9uVGVybWluYWxOb2RlQSwgLy8vXG4gICAgICAgICAgICBub2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb2RlKG5vZGVBLCBub2RlQik7XG5cbiAgICAgIG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBub2RlTWF0Y2hlczsgLy8vXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZUZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZSkge1xuICBsZXQgYnJhY2tldGVkTWV0YXN0YXRlbWVudE5vZGUgPSBudWxsO1xuXG4gIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG1ldGFzdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgIGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpLFxuICAgICAgICBjaGlsZE5vZGVzTGVuZ3RoID0gY2hpbGROb2Rlcy5sZW5ndGg7XG5cbiAgaWYgKGNoaWxkTm9kZXNMZW5ndGggPT09IEJSQUNLRVRFRF9DSElMRF9OT0RFU19MRU5HVEgpIHtcbiAgICBjb25zdCBmaXJzdENoaWxkTm9kZSA9IGZpcnN0KGNoaWxkTm9kZXMpLFxuICAgICAgICAgIHRoaXJkQ2hpbGROb2RlID0gdGhpcmQoY2hpbGROb2RlcyksXG4gICAgICAgICAgc2Vjb25kQ2hpbGROb2RlID0gc2Vjb25kKGNoaWxkTm9kZXMpLFxuICAgICAgICAgIGZpcnN0Q2hpbGROb2RlVGVybWluYWxOb2RlID0gZmlyc3RDaGlsZE5vZGUuaXNUZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgICB0aGlyZENoaWxkTm9kZVRlcm1pbmFsTm9kZSA9IHRoaXJkQ2hpbGROb2RlLmlzVGVybWluYWxOb2RlKCksXG4gICAgICAgICAgc2Vjb25kQ2hpbGROb2RlTm9uVGVybWluYWxOb2RlID0gc2Vjb25kQ2hpbGROb2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgICBpZiAoZmlyc3RDaGlsZE5vZGVUZXJtaW5hbE5vZGUgJiYgc2Vjb25kQ2hpbGROb2RlTm9uVGVybWluYWxOb2RlICYmIHRoaXJkQ2hpbGROb2RlVGVybWluYWxOb2RlKSB7XG4gICAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBzZWNvbmRDaGlsZE5vZGUsICAvLy9cbiAgICAgICAgICAgIGZpcnN0VGVybWluYWxOb2RlID0gZmlyc3RDaGlsZE5vZGUsIC8vL1xuICAgICAgICAgICAgc2Vjb25kVGVybWluYWxOb2RlID0gdGhpcmRDaGlsZE5vZGUsICAvLy9cbiAgICAgICAgICAgIG5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgICBmaXJzdFRlcm1pbmFsTm9kZUNvbnRlbnQgPSBmaXJzdFRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCksXG4gICAgICAgICAgICBzZWNvbmRUZXJtaW5hbE5vZGVDb250ZW50ID0gc2Vjb25kVGVybWluYWxOb2RlLmdldENvbnRlbnQoKSxcbiAgICAgICAgICAgIGZpcnN0VGVybWluYWxOb2RlQ29udGVudExlZnRCcmFja2V0ID0gKGZpcnN0VGVybWluYWxOb2RlQ29udGVudCA9PT0gTEVGVF9CUkFDS0VUKSxcbiAgICAgICAgICAgIHNlY29uZFRlcm1pbmFsTm9kZUNvbnRlbnRSaWdodEJyYWNrZXQgPSAoc2Vjb25kVGVybWluYWxOb2RlQ29udGVudCA9PT0gUklHSFRfQlJBQ0tFVCksXG4gICAgICAgICAgICBub25UZXJtaW5hbE5vZGVSdWxlTmFtZU1ldGFzdGF0ZW1lbnRSdWxlTmFtZSA9IChub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9PT0gTUVUQVNUQVRFTUVOVF9SVUxFX05BTUUpO1xuXG4gICAgICBpZiAobm9uVGVybWluYWxOb2RlUnVsZU5hbWVNZXRhc3RhdGVtZW50UnVsZU5hbWUgJiYgZmlyc3RUZXJtaW5hbE5vZGVDb250ZW50TGVmdEJyYWNrZXQgJiYgc2Vjb25kVGVybWluYWxOb2RlQ29udGVudFJpZ2h0QnJhY2tldCkge1xuICAgICAgICBicmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZSA9IG5vblRlcm1pbmFsTm9kZTsgIC8vL1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBicmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZTtcbn1cbiJdLCJuYW1lcyI6WyJtYXRjaE1ldGFzdGF0ZW1lbnRNb2R1bG9CcmFja2V0cyIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlRnJvbU1ldGFzdGF0ZW1lbnROb2RlIiwibWV0YXN0YXRlbWVudE5vZGVBIiwibWV0YXN0YXRlbWVudE5vZGVCIiwibWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyIsIm5vblRlcm1pbmFsTm9kZUEiLCJub25UZXJtaW5hbE5vZGVCIiwibm9uVGVybWluYWxOb2RlTWF0Y2hlcyIsIm1hdGNoZXIiLCJtYXRjaE5vblRlcm1pbmFsTm9kZSIsImJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUEiLCJub2RlQSIsIm5vZGVCIiwibm9kZU1hdGNoZXMiLCJtYXRjaE5vZGUiLCJicmFja2V0ZWROb25UZXJtaW5hbE5vZGVCIiwibWV0YXN0YXRlbWVudE5vZGUiLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZSIsIm5vblRlcm1pbmFsTm9kZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwiY2hpbGROb2Rlc0xlbmd0aCIsImxlbmd0aCIsIkJSQUNLRVRFRF9DSElMRF9OT0RFU19MRU5HVEgiLCJmaXJzdENoaWxkTm9kZSIsImZpcnN0IiwidGhpcmRDaGlsZE5vZGUiLCJ0aGlyZCIsInNlY29uZENoaWxkTm9kZSIsInNlY29uZCIsImZpcnN0Q2hpbGROb2RlVGVybWluYWxOb2RlIiwiaXNUZXJtaW5hbE5vZGUiLCJ0aGlyZENoaWxkTm9kZVRlcm1pbmFsTm9kZSIsInNlY29uZENoaWxkTm9kZU5vblRlcm1pbmFsTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwiZmlyc3RUZXJtaW5hbE5vZGUiLCJzZWNvbmRUZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGVSdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwiZmlyc3RUZXJtaW5hbE5vZGVDb250ZW50IiwiZ2V0Q29udGVudCIsInNlY29uZFRlcm1pbmFsTm9kZUNvbnRlbnQiLCJmaXJzdFRlcm1pbmFsTm9kZUNvbnRlbnRMZWZ0QnJhY2tldCIsIkxFRlRfQlJBQ0tFVCIsInNlY29uZFRlcm1pbmFsTm9kZUNvbnRlbnRSaWdodEJyYWNrZXQiLCJSSUdIVF9CUkFDS0VUIiwibm9uVGVybWluYWxOb2RlUnVsZU5hbWVNZXRhc3RhdGVtZW50UnVsZU5hbWUiLCJNRVRBU1RBVEVNRU5UX1JVTEVfTkFNRSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBT2dCQSxnQ0FBZ0M7ZUFBaENBOztJQXNDQUMsK0NBQStDO2VBQS9DQTs7O3VCQTNDUTtxQkFDYTt5QkFDRzt5QkFDa0M7QUFFbkUsU0FBU0QsaUNBQWlDRSxrQkFBa0IsRUFBRUMsa0JBQWtCLEVBQUU7SUFDdkYsSUFBSUMscUNBQXFDLEtBQUs7SUFFOUMsSUFBSSxDQUFDQSxvQ0FBb0M7UUFDdkMsSUFBTUMscUJBQW1CSCxvQkFDbkJJLHFCQUFtQkgsb0JBQ25CSSx5QkFBeUJDLGdCQUFPLENBQUNDLG9CQUFvQixDQUFDSixvQkFBa0JDO1FBRTlFRixxQ0FBcUNHLHdCQUF5QixHQUFHO0lBQ25FLENBQUM7SUFFRCxJQUFJLENBQUNILG9DQUFvQztRQUN2QyxJQUFNTSw0QkFBNEJULGdEQUFnREM7UUFFbEYsSUFBSVEsOEJBQThCLElBQUksRUFBRTtZQUN0QyxJQUFNQyxRQUFRRCwyQkFDUkUsUUFBUU4sa0JBQ1JPLGNBQWNMLGdCQUFPLENBQUNNLFNBQVMsQ0FBQ0gsT0FBT0M7WUFFN0NSLHFDQUFxQ1MsYUFBYSxHQUFHO1FBQ3ZELENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUFDVCxvQ0FBb0M7UUFDdkMsSUFBTVcsNEJBQTRCZCxnREFBZ0RFO1FBRWxGLElBQUlZLDhCQUE4QixJQUFJLEVBQUU7WUFDdEMsSUFBTUgsU0FBUUcsMkJBQ1JKLFNBQVFOLGtCQUNSUSxlQUFjTCxnQkFBTyxDQUFDTSxTQUFTLENBQUNILFFBQU9DO1lBRTdDUixxQ0FBcUNTLGNBQWEsR0FBRztRQUN2RCxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU9UO0FBQ1Q7QUFFTyxTQUFTSCxnREFBZ0RlLGlCQUFpQixFQUFFO0lBQ2pGLElBQUlDLDZCQUE2QixJQUFJO0lBRXJDLElBQU1DLGtCQUFrQkYsbUJBQ2xCRyxhQUFhRCxnQkFBZ0JFLGFBQWEsSUFDMUNDLG1CQUFtQkYsV0FBV0csTUFBTTtJQUUxQyxJQUFJRCxxQkFBcUJFLHVDQUE0QixFQUFFO1FBQ3JELElBQU1DLGlCQUFpQkMsSUFBQUEsWUFBSyxFQUFDTixhQUN2Qk8saUJBQWlCQyxJQUFBQSxZQUFLLEVBQUNSLGFBQ3ZCUyxrQkFBa0JDLElBQUFBLGFBQU0sRUFBQ1YsYUFDekJXLDZCQUE2Qk4sZUFBZU8sY0FBYyxJQUMxREMsNkJBQTZCTixlQUFlSyxjQUFjLElBQzFERSxpQ0FBaUNMLGdCQUFnQk0saUJBQWlCO1FBRXhFLElBQUlKLDhCQUE4Qkcsa0NBQWtDRCw0QkFBNEI7WUFDOUYsSUFBTWQsbUJBQWtCVSxpQkFDbEJPLG9CQUFvQlgsZ0JBQ3BCWSxxQkFBcUJWLGdCQUNyQlcsMEJBQTBCbkIsaUJBQWdCb0IsV0FBVyxJQUNyREMsMkJBQTJCSixrQkFBa0JLLFVBQVUsSUFDdkRDLDRCQUE0QkwsbUJBQW1CSSxVQUFVLElBQ3pERSxzQ0FBdUNILDZCQUE2QkksdUJBQVksRUFDaEZDLHdDQUF5Q0gsOEJBQThCSSx3QkFBYSxFQUNwRkMsK0NBQWdEVCw0QkFBNEJVLGtDQUF1QjtZQUV6RyxJQUFJRCxnREFBZ0RKLHVDQUF1Q0UsdUNBQXVDO2dCQUNoSTNCLDZCQUE2QkMsa0JBQWtCLEdBQUc7WUFDcEQsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBT0Q7QUFDVCJ9