"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchMetastatementModuloBrackets: function() {
        return matchMetastatementModuloBrackets;
    },
    bracketedMetastatementChildNodeFromMetastatementNode: function() {
        return bracketedMetastatementChildNodeFromMetastatementNode;
    }
});
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../node/metastatement/bracketed"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedMetastatementChildNodeQuery = (0, _query.nodeQuery)("/metastatement/metastatement!");
function matchMetastatementModuloBrackets(metastatementNodeA, metastatementNodeB) {
    var metastatementMatchesModuloBrackets = false;
    if (!metastatementMatchesModuloBrackets) {
        var metastatementNodeMatches = metastatementNodeA.match(metastatementNodeB);
        metastatementMatchesModuloBrackets = metastatementNodeMatches; ///
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedMetastatementChildNodeA = bracketedMetastatementChildNodeFromMetastatementNode(metastatementNodeA);
        if (bracketedMetastatementChildNodeA !== null) {
            var bracketedMetastatementChildNodeAMatchesMetastatementNodeB = bracketedMetastatementChildNodeA.match(metastatementNodeB);
            metastatementMatchesModuloBrackets = bracketedMetastatementChildNodeAMatchesMetastatementNodeB; ///
        }
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedMetastatementChildNodeB = bracketedMetastatementChildNodeFromMetastatementNode(metastatementNodeB);
        if (bracketedMetastatementChildNodeB !== null) {
            var metastatementNodeAMatchesBracketedMetastatementChildNodeB = metastatementNodeA.match(bracketedMetastatementChildNodeB);
            metastatementMatchesModuloBrackets = metastatementNodeAMatchesBracketedMetastatementChildNodeB; ///
        }
    }
    return metastatementMatchesModuloBrackets;
}
function bracketedMetastatementChildNodeFromMetastatementNode(metastatementNode) {
    var bracketedMetastatementChildNode = null;
    var depth = _constants.BRACKETED_METASTATEMENT_DEPTH, metastatementNodeMatchesBracketedMetastatementNode = metastatementNode.match(_bracketed.default, depth);
    if (metastatementNodeMatchesBracketedMetastatementNode) {
        bracketedMetastatementChildNode = bracketedMetastatementChildNodeQuery(metastatementNode);
    }
    return bracketedMetastatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YXByb29mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgYnJhY2tldGVkTWV0YXN0YXRlbWVudE5vZGUgZnJvbSBcIi4uL25vZGUvbWV0YXN0YXRlbWVudC9icmFja2V0ZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgQlJBQ0tFVEVEX01FVEFTVEFURU1FTlRfREVQVEggfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSA9IG5vZGVRdWVyeSgnL21ldGFzdGF0ZW1lbnQvbWV0YXN0YXRlbWVudCEnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTWV0YXN0YXRlbWVudE1vZHVsb0JyYWNrZXRzKG1ldGFzdGF0ZW1lbnROb2RlQSwgbWV0YXN0YXRlbWVudE5vZGVCKSB7XG4gIGxldCBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gZmFsc2U7XG5cbiAgaWYgKCFtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgbWV0YXN0YXRlbWVudE5vZGVNYXRjaGVzID0gbWV0YXN0YXRlbWVudE5vZGVBLm1hdGNoKG1ldGFzdGF0ZW1lbnROb2RlQik7XG5cbiAgICBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gbWV0YXN0YXRlbWVudE5vZGVNYXRjaGVzOyAgLy8vXG4gIH1cblxuICBpZiAoIW1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQSA9IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVGcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGVBKTtcblxuICAgIGlmIChicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUFNYXRjaGVzTWV0YXN0YXRlbWVudE5vZGVCID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUEubWF0Y2gobWV0YXN0YXRlbWVudE5vZGVCKTtcblxuICAgICAgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBTWF0Y2hlc01ldGFzdGF0ZW1lbnROb2RlQjsgLy8vXG4gICAgfVxuICB9XG5cbiAgaWYgKCFtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIgPSBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlRnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlQik7XG5cbiAgICBpZiAoYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlQU1hdGNoZXNCcmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQiA9IG1ldGFzdGF0ZW1lbnROb2RlQS5tYXRjaChicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQik7XG5cbiAgICAgIG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBtZXRhc3RhdGVtZW50Tm9kZUFNYXRjaGVzQnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUI7IC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZSkge1xuICBsZXQgYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZSA9IG51bGw7XG5cbiAgY29uc3QgZGVwdGggPSBCUkFDS0VURURfTUVUQVNUQVRFTUVOVF9ERVBUSCxcbiAgICAgICAgbWV0YXN0YXRlbWVudE5vZGVNYXRjaGVzQnJhY2tldGVkTWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhc3RhdGVtZW50Tm9kZS5tYXRjaChicmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZSwgZGVwdGgpO1xuXG4gIGlmIChtZXRhc3RhdGVtZW50Tm9kZU1hdGNoZXNCcmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZSkge1xuICAgIGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGUgPSBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlUXVlcnkobWV0YXN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGU7XG59XG4iXSwibmFtZXMiOlsibWF0Y2hNZXRhc3RhdGVtZW50TW9kdWxvQnJhY2tldHMiLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlRnJvbU1ldGFzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwibWV0YXN0YXRlbWVudE5vZGVBIiwibWV0YXN0YXRlbWVudE5vZGVCIiwibWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyIsIm1ldGFzdGF0ZW1lbnROb2RlTWF0Y2hlcyIsIm1hdGNoIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUEiLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQU1hdGNoZXNNZXRhc3RhdGVtZW50Tm9kZUIiLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQiIsIm1ldGFzdGF0ZW1lbnROb2RlQU1hdGNoZXNCcmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQiIsIm1ldGFzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZSIsImRlcHRoIiwiQlJBQ0tFVEVEX01FVEFTVEFURU1FTlRfREVQVEgiLCJtZXRhc3RhdGVtZW50Tm9kZU1hdGNoZXNCcmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZSIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFTZ0JBLGdDQUFnQztlQUFoQ0E7O0lBZ0NBQyxvREFBb0Q7ZUFBcERBOzs7Z0VBdkN1QjtxQkFFYjt5QkFDb0I7Ozs7OztBQUU5QyxJQUFNQyx1Q0FBdUNDLElBQUFBLGdCQUFTLEVBQUM7QUFFaEQsU0FBU0gsaUNBQWlDSSxrQkFBa0IsRUFBRUMsa0JBQWtCO0lBQ3JGLElBQUlDLHFDQUFxQztJQUV6QyxJQUFJLENBQUNBLG9DQUFvQztRQUN2QyxJQUFNQywyQkFBMkJILG1CQUFtQkksS0FBSyxDQUFDSDtRQUUxREMscUNBQXFDQywwQkFBMkIsR0FBRztJQUNyRTtJQUVBLElBQUksQ0FBQ0Qsb0NBQW9DO1FBQ3ZDLElBQU1HLG1DQUFtQ1IscURBQXFERztRQUU5RixJQUFJSyxxQ0FBcUMsTUFBTTtZQUM3QyxJQUFNQyw0REFBNERELGlDQUFpQ0QsS0FBSyxDQUFDSDtZQUV6R0MscUNBQXFDSSwyREFBMkQsR0FBRztRQUNyRztJQUNGO0lBRUEsSUFBSSxDQUFDSixvQ0FBb0M7UUFDdkMsSUFBTUssbUNBQW1DVixxREFBcURJO1FBRTlGLElBQUlNLHFDQUFxQyxNQUFNO1lBQzdDLElBQU1DLDREQUE0RFIsbUJBQW1CSSxLQUFLLENBQUNHO1lBRTNGTCxxQ0FBcUNNLDJEQUEyRCxHQUFHO1FBQ3JHO0lBQ0Y7SUFFQSxPQUFPTjtBQUNUO0FBRU8sU0FBU0wscURBQXFEWSxpQkFBaUI7SUFDcEYsSUFBSUMsa0NBQWtDO0lBRXRDLElBQU1DLFFBQVFDLHdDQUE2QixFQUNyQ0MscURBQXFESixrQkFBa0JMLEtBQUssQ0FBQ1Usa0JBQTBCLEVBQUVIO0lBRS9HLElBQUlFLG9EQUFvRDtRQUN0REgsa0NBQWtDWixxQ0FBcUNXO0lBQ3pFO0lBRUEsT0FBT0M7QUFDVCJ9