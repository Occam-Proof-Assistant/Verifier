"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    bracketedMetastatementChildNodeFromMetastatementNode: function() {
        return bracketedMetastatementChildNodeFromMetastatementNode;
    },
    matchMetastatementModuloBrackets: function() {
        return matchMetastatementModuloBrackets;
    }
});
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../node/metastatement/bracketed"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedMetastatementChildNodeQuery = (0, _query.nodeQuery)("/metastatement/metastatement!");
function matchMetastatementModuloBrackets(metastatementNodeA, metastatementNodeB) {
    var metastatementMatchesModuloBrackets = false;
    if (!metastatementMatchesModuloBrackets) {
        var metastatementNodeMatches = metastatementNodeA.match(metastatementNodeB);
        metastatementMatchesModuloBrackets = metastatementNodeMatches; ///
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedMetastatementChildNodeA = bracketedMetastatementChildNodeFromMetastatementNode(metastatementNodeA);
        if (bracketedMetastatementChildNodeA !== null) {
            var bracketedMetastatementChildNodeAMatchesMetastatementNodeB = bracketedMetastatementChildNodeA.match(metastatementNodeB);
            metastatementMatchesModuloBrackets = bracketedMetastatementChildNodeAMatchesMetastatementNodeB; ///
        }
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedMetastatementChildNodeB = bracketedMetastatementChildNodeFromMetastatementNode(metastatementNodeB);
        if (bracketedMetastatementChildNodeB !== null) {
            var metastatementNodeAMatchesBracketedMetastatementChildNodeB = metastatementNodeA.match(bracketedMetastatementChildNodeB);
            metastatementMatchesModuloBrackets = metastatementNodeAMatchesBracketedMetastatementChildNodeB; ///
        }
    }
    return metastatementMatchesModuloBrackets;
}
function bracketedMetastatementChildNodeFromMetastatementNode(metastatementNode) {
    var bracketedMetastatementChildNode = null;
    var depth = _constants.BRACKETED_METASTATEMENT_DEPTH, metastatementNodeMatchesBracketedMetastatementNode = metastatementNode.match(_bracketed.default, depth);
    if (metastatementNodeMatchesBracketedMetastatementNode) {
        bracketedMetastatementChildNode = bracketedMetastatementChildNodeQuery(metastatementNode);
    }
    return bracketedMetastatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YXByb29mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgYnJhY2tldGVkTWV0YXN0YXRlbWVudE5vZGUgZnJvbSBcIi4uL25vZGUvbWV0YXN0YXRlbWVudC9icmFja2V0ZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgQlJBQ0tFVEVEX01FVEFTVEFURU1FTlRfREVQVEggfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9tZXRhc3RhdGVtZW50L21ldGFzdGF0ZW1lbnQhXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hNZXRhc3RhdGVtZW50TW9kdWxvQnJhY2tldHMobWV0YXN0YXRlbWVudE5vZGVBLCBtZXRhc3RhdGVtZW50Tm9kZUIpIHtcbiAgbGV0IG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBmYWxzZTtcblxuICBpZiAoIW1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBtZXRhc3RhdGVtZW50Tm9kZU1hdGNoZXMgPSBtZXRhc3RhdGVtZW50Tm9kZUEubWF0Y2gobWV0YXN0YXRlbWVudE5vZGVCKTtcblxuICAgIG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBtZXRhc3RhdGVtZW50Tm9kZU1hdGNoZXM7ICAvLy9cbiAgfVxuXG4gIGlmICghbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cykge1xuICAgIGNvbnN0IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZUEpO1xuXG4gICAgaWYgKGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQU1hdGNoZXNNZXRhc3RhdGVtZW50Tm9kZUIgPSBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQS5tYXRjaChtZXRhc3RhdGVtZW50Tm9kZUIpO1xuXG4gICAgICBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUFNYXRjaGVzTWV0YXN0YXRlbWVudE5vZGVCOyAvLy9cbiAgICB9XG4gIH1cblxuICBpZiAoIW1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQiA9IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVGcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGVCKTtcblxuICAgIGlmIChicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQiAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgbWV0YXN0YXRlbWVudE5vZGVBTWF0Y2hlc0JyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVCID0gbWV0YXN0YXRlbWVudE5vZGVBLm1hdGNoKGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVCKTtcblxuICAgICAgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG1ldGFzdGF0ZW1lbnROb2RlQU1hdGNoZXNCcmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQjsgLy8vXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlRnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlKSB7XG4gIGxldCBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlID0gbnVsbDtcblxuICBjb25zdCBkZXB0aCA9IEJSQUNLRVRFRF9NRVRBU1RBVEVNRU5UX0RFUFRILFxuICAgICAgICBtZXRhc3RhdGVtZW50Tm9kZU1hdGNoZXNCcmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZSA9IG1ldGFzdGF0ZW1lbnROb2RlLm1hdGNoKGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlLCBkZXB0aCk7XG5cbiAgaWYgKG1ldGFzdGF0ZW1lbnROb2RlTWF0Y2hlc0JyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlKSB7XG4gICAgYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZSA9IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeShtZXRhc3RhdGVtZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZTtcbn1cbiJdLCJuYW1lcyI6WyJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlRnJvbU1ldGFzdGF0ZW1lbnROb2RlIiwibWF0Y2hNZXRhc3RhdGVtZW50TW9kdWxvQnJhY2tldHMiLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJtZXRhc3RhdGVtZW50Tm9kZUEiLCJtZXRhc3RhdGVtZW50Tm9kZUIiLCJtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzIiwibWV0YXN0YXRlbWVudE5vZGVNYXRjaGVzIiwibWF0Y2giLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQSIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBTWF0Y2hlc01ldGFzdGF0ZW1lbnROb2RlQiIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVCIiwibWV0YXN0YXRlbWVudE5vZGVBTWF0Y2hlc0JyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVCIiwibWV0YXN0YXRlbWVudE5vZGUiLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlIiwiZGVwdGgiLCJCUkFDS0VURURfTUVUQVNUQVRFTUVOVF9ERVBUSCIsIm1ldGFzdGF0ZW1lbnROb2RlTWF0Y2hlc0JyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQXlDZ0JBLG9EQUFvRDtlQUFwREE7O0lBaENBQyxnQ0FBZ0M7ZUFBaENBOzs7Z0VBUHVCO3FCQUViO3lCQUNvQjs7Ozs7O0FBRTlDLElBQU1DLHVDQUF1Q0MsSUFBQUEsZ0JBQVMsRUFBQztBQUVoRCxTQUFTRixpQ0FBaUNHLGtCQUFrQixFQUFFQyxrQkFBa0I7SUFDckYsSUFBSUMscUNBQXFDO0lBRXpDLElBQUksQ0FBQ0Esb0NBQW9DO1FBQ3ZDLElBQU1DLDJCQUEyQkgsbUJBQW1CSSxLQUFLLENBQUNIO1FBRTFEQyxxQ0FBcUNDLDBCQUEyQixHQUFHO0lBQ3JFO0lBRUEsSUFBSSxDQUFDRCxvQ0FBb0M7UUFDdkMsSUFBTUcsbUNBQW1DVCxxREFBcURJO1FBRTlGLElBQUlLLHFDQUFxQyxNQUFNO1lBQzdDLElBQU1DLDREQUE0REQsaUNBQWlDRCxLQUFLLENBQUNIO1lBRXpHQyxxQ0FBcUNJLDJEQUEyRCxHQUFHO1FBQ3JHO0lBQ0Y7SUFFQSxJQUFJLENBQUNKLG9DQUFvQztRQUN2QyxJQUFNSyxtQ0FBbUNYLHFEQUFxREs7UUFFOUYsSUFBSU0scUNBQXFDLE1BQU07WUFDN0MsSUFBTUMsNERBQTREUixtQkFBbUJJLEtBQUssQ0FBQ0c7WUFFM0ZMLHFDQUFxQ00sMkRBQTJELEdBQUc7UUFDckc7SUFDRjtJQUVBLE9BQU9OO0FBQ1Q7QUFFTyxTQUFTTixxREFBcURhLGlCQUFpQjtJQUNwRixJQUFJQyxrQ0FBa0M7SUFFdEMsSUFBTUMsUUFBUUMsd0NBQTZCLEVBQ3JDQyxxREFBcURKLGtCQUFrQkwsS0FBSyxDQUFDVSxrQkFBMEIsRUFBRUg7SUFFL0csSUFBSUUsb0RBQW9EO1FBQ3RESCxrQ0FBa0NaLHFDQUFxQ1c7SUFDekU7SUFFQSxPQUFPQztBQUNUIn0=