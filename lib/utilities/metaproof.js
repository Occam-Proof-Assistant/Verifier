"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "matchMetastatementModuloBrackets", {
    enumerable: true,
    get: function() {
        return matchMetastatementModuloBrackets;
    }
});
var _matcher = require("../matcher");
var _ruleNames = require("../ruleNames");
var _nonTerminalNode = require("../utilities/nonTerminalNode");
function matchMetastatementModuloBrackets(metastatementNodeA, metastatementNodeB) {
    var metastatementMatchesModuloBrackets = false;
    var ruleName = _ruleNames.METASTATEMENT_RULE_NAME, nonTerminalNodeA = metastatementNodeA, nonTerminalNodeB = metastatementNodeB; ///
    if (!metastatementMatchesModuloBrackets) {
        var nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
        metastatementMatchesModuloBrackets = nonTerminalNodeMatches; ///
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedNonTerminalNodeA = (0, _nonTerminalNode.bracketedNonTerminalNodeFromNonTerminalNode)(nonTerminalNodeA, ruleName);
        if (bracketedNonTerminalNodeA !== null) {
            var nodeA = bracketedNonTerminalNodeA, nodeB = nonTerminalNodeB, nodeMatches = _matcher.matcher.matchNode(nodeA, nodeB);
            metastatementMatchesModuloBrackets = nodeMatches; ///
        }
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedNonTerminalNodeB = (0, _nonTerminalNode.bracketedNonTerminalNodeFromNonTerminalNode)(nonTerminalNodeB, ruleName);
        if (bracketedNonTerminalNodeB !== null) {
            var nodeB1 = bracketedNonTerminalNodeB, nodeA1 = nonTerminalNodeA, nodeMatches1 = _matcher.matcher.matchNode(nodeA1, nodeB1);
            metastatementMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    return metastatementMatchesModuloBrackets;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YXByb29mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBtYXRjaGVyIH0gZnJvbSBcIi4uL21hdGNoZXJcIjtcbmltcG9ydCB7IE1FVEFTVEFURU1FTlRfUlVMRV9OQU1FIH0gZnJvbSBcIi4uL3J1bGVOYW1lc1wiO1xuaW1wb3J0IHsgYnJhY2tldGVkTm9uVGVybWluYWxOb2RlRnJvbU5vblRlcm1pbmFsTm9kZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvbm9uVGVybWluYWxOb2RlXCJcblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTWV0YXN0YXRlbWVudE1vZHVsb0JyYWNrZXRzKG1ldGFzdGF0ZW1lbnROb2RlQSwgbWV0YXN0YXRlbWVudE5vZGVCKSB7XG4gIGxldCBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gZmFsc2U7XG5cbiAgY29uc3QgcnVsZU5hbWUgPSBNRVRBU1RBVEVNRU5UX1JVTEVfTkFNRSxcbiAgICAgICAgbm9uVGVybWluYWxOb2RlQSA9IG1ldGFzdGF0ZW1lbnROb2RlQSwgIC8vL1xuICAgICAgICBub25UZXJtaW5hbE5vZGVCID0gbWV0YXN0YXRlbWVudE5vZGVCOyAgLy8vXG5cbiAgaWYgKCFtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlQSwgbm9uVGVybWluYWxOb2RlQik7XG5cbiAgICBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gbm9uVGVybWluYWxOb2RlTWF0Y2hlczsgIC8vL1xuICB9XG5cbiAgaWYgKCFtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQSA9IGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUZyb21Ob25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlQSwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUEgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVBID0gYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQSwgIC8vL1xuICAgICAgICAgICAgbm9kZUIgPSBub25UZXJtaW5hbE5vZGVCLCAvLy9cbiAgICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgICAgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vZGVNYXRjaGVzOyAvLy9cbiAgICB9XG4gIH1cblxuICBpZiAoIW1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBicmFja2V0ZWROb25UZXJtaW5hbE5vZGVCID0gYnJhY2tldGVkTm9uVGVybWluYWxOb2RlRnJvbU5vblRlcm1pbmFsTm9kZShub25UZXJtaW5hbE5vZGVCLCBydWxlTmFtZSk7XG5cbiAgICBpZiAoYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9kZUIgPSBicmFja2V0ZWROb25UZXJtaW5hbE5vZGVCLCAgLy8vXG4gICAgICAgICAgICBub2RlQSA9IG5vblRlcm1pbmFsTm9kZUEsIC8vL1xuICAgICAgICAgICAgbm9kZU1hdGNoZXMgPSBtYXRjaGVyLm1hdGNoTm9kZShub2RlQSwgbm9kZUIpO1xuXG4gICAgICBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gbm9kZU1hdGNoZXM7IC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzO1xufVxuIl0sIm5hbWVzIjpbIm1hdGNoTWV0YXN0YXRlbWVudE1vZHVsb0JyYWNrZXRzIiwibWV0YXN0YXRlbWVudE5vZGVBIiwibWV0YXN0YXRlbWVudE5vZGVCIiwibWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyIsInJ1bGVOYW1lIiwiTUVUQVNUQVRFTUVOVF9SVUxFX05BTUUiLCJub25UZXJtaW5hbE5vZGVBIiwibm9uVGVybWluYWxOb2RlQiIsIm5vblRlcm1pbmFsTm9kZU1hdGNoZXMiLCJtYXRjaGVyIiwibWF0Y2hOb25UZXJtaW5hbE5vZGUiLCJicmFja2V0ZWROb25UZXJtaW5hbE5vZGVBIiwiYnJhY2tldGVkTm9uVGVybWluYWxOb2RlRnJvbU5vblRlcm1pbmFsTm9kZSIsIm5vZGVBIiwibm9kZUIiLCJub2RlTWF0Y2hlcyIsIm1hdGNoTm9kZSIsImJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUIiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQU1nQkE7OztlQUFBQTs7O3VCQUpRO3lCQUNnQjsrQkFDb0I7QUFFckQsU0FBU0EsaUNBQWlDQyxrQkFBa0IsRUFBRUMsa0JBQWtCLEVBQUU7SUFDdkYsSUFBSUMscUNBQXFDLEtBQUs7SUFFOUMsSUFBTUMsV0FBV0Msa0NBQXVCLEVBQ2xDQyxtQkFBbUJMLG9CQUNuQk0sbUJBQW1CTCxvQkFBcUIsR0FBRztJQUVqRCxJQUFJLENBQUNDLG9DQUFvQztRQUN2QyxJQUFNSyx5QkFBeUJDLGdCQUFPLENBQUNDLG9CQUFvQixDQUFDSixrQkFBa0JDO1FBRTlFSixxQ0FBcUNLLHdCQUF5QixHQUFHO0lBQ25FLENBQUM7SUFFRCxJQUFJLENBQUNMLG9DQUFvQztRQUN2QyxJQUFNUSw0QkFBNEJDLElBQUFBLDREQUEyQyxFQUFDTixrQkFBa0JGO1FBRWhHLElBQUlPLDhCQUE4QixJQUFJLEVBQUU7WUFDdEMsSUFBTUUsUUFBUUYsMkJBQ1JHLFFBQVFQLGtCQUNSUSxjQUFjTixnQkFBTyxDQUFDTyxTQUFTLENBQUNILE9BQU9DO1lBRTdDWCxxQ0FBcUNZLGFBQWEsR0FBRztRQUN2RCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksQ0FBQ1osb0NBQW9DO1FBQ3ZDLElBQU1jLDRCQUE0QkwsSUFBQUEsNERBQTJDLEVBQUNMLGtCQUFrQkg7UUFFaEcsSUFBSWEsOEJBQThCLElBQUksRUFBRTtZQUN0QyxJQUFNSCxTQUFRRywyQkFDUkosU0FBUVAsa0JBQ1JTLGVBQWNOLGdCQUFPLENBQUNPLFNBQVMsQ0FBQ0gsUUFBT0M7WUFFN0NYLHFDQUFxQ1ksY0FBYSxHQUFHO1FBQ3ZELENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBT1o7QUFDVCJ9