"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchMetastatementModuloBrackets: function() {
        return matchMetastatementModuloBrackets;
    },
    bracketedMetastatementChildNodeFromMetastatementNode: function() {
        return bracketedMetastatementChildNodeFromMetastatementNode;
    }
});
var _matcher = /*#__PURE__*/ _interopRequireDefault(require("../matcher"));
var _bracketed = /*#__PURE__*/ _interopRequireDefault(require("../node/metastatement/bracketed"));
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedMetastatementChildNodeQuery = (0, _query.nodeQuery)("/metastatement/metastatement!");
function matchMetastatementModuloBrackets(metastatementNodeA, metastatementNodeB) {
    var metastatementMatchesModuloBrackets = false;
    if (!metastatementMatchesModuloBrackets) {
        var nodeA = metastatementNodeA, nodeB = metastatementNodeB, nodeMatches = _matcher.default.matchNode(nodeA, nodeB);
        metastatementMatchesModuloBrackets = nodeMatches; ///
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedMetastatementChildNodeA = bracketedMetastatementChildNodeFromMetastatementNode(metastatementNodeA);
        if (bracketedMetastatementChildNodeA !== null) {
            var nodeA1 = bracketedMetastatementChildNodeA, nodeB1 = metastatementNodeB, nodeMatches1 = _matcher.default.matchNode(nodeA1, nodeB1);
            metastatementMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedMetastatementChildNodeB = bracketedMetastatementChildNodeFromMetastatementNode(metastatementNodeB);
        if (bracketedMetastatementChildNodeB !== null) {
            var nodeA2 = metastatementNodeA, nodeB2 = bracketedMetastatementChildNodeB, nodeMatches2 = _matcher.default.matchNode(nodeA2, nodeB2);
            metastatementMatchesModuloBrackets = nodeMatches2; ///
        }
    }
    return metastatementMatchesModuloBrackets;
}
function bracketedMetastatementChildNodeFromMetastatementNode(metastatementNode) {
    var bracketedMetastatementChildNode = null;
    var nodeA = metastatementNode, nodeB = _bracketed.default, depth = _constants.BRACKETED_METASTATEMENT_DEPTH, nonTerminalNodeMatches = _matcher.default.matchNode(nodeA, nodeB, depth);
    if (nonTerminalNodeMatches) {
        bracketedMetastatementChildNode = bracketedMetastatementChildNodeQuery(metastatementNode);
    }
    return bracketedMetastatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YXByb29mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlclwiO1xuaW1wb3J0IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlIGZyb20gXCIuLi9ub2RlL21ldGFzdGF0ZW1lbnQvYnJhY2tldGVkXCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcbmltcG9ydCB7IEJSQUNLRVRFRF9NRVRBU1RBVEVNRU5UX0RFUFRIIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlUXVlcnkgPSBub2RlUXVlcnkoJy9tZXRhc3RhdGVtZW50L21ldGFzdGF0ZW1lbnQhJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaE1ldGFzdGF0ZW1lbnRNb2R1bG9CcmFja2V0cyhtZXRhc3RhdGVtZW50Tm9kZUEsIG1ldGFzdGF0ZW1lbnROb2RlQikge1xuICBsZXQgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IGZhbHNlO1xuXG4gIGlmICghbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cykge1xuICAgIGNvbnN0IG5vZGVBID0gbWV0YXN0YXRlbWVudE5vZGVBLCAgLy8vXG4gICAgICAgICAgbm9kZUIgPSBtZXRhc3RhdGVtZW50Tm9kZUIsICAvLy9cbiAgICAgICAgICBub2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb2RlKG5vZGVBLCBub2RlQik7XG5cbiAgICBtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzID0gbm9kZU1hdGNoZXM7ICAvLy9cbiAgfVxuXG4gIGlmICghbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cykge1xuICAgIGNvbnN0IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZUEpO1xuXG4gICAgaWYgKGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBub2RlQSA9IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBLCAgLy8vXG4gICAgICAgICAgICBub2RlQiA9IG1ldGFzdGF0ZW1lbnROb2RlQiwgLy8vXG4gICAgICAgICAgICBub2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb2RlKG5vZGVBLCBub2RlQik7XG5cbiAgICAgIG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBub2RlTWF0Y2hlczsgLy8vXG4gICAgfVxuICB9XG5cbiAgaWYgKCFtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIgPSBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlRnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlQik7XG5cbiAgICBpZiAoYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVBID0gbWV0YXN0YXRlbWVudE5vZGVBLCAvLy9cbiAgICAgICAgICAgIG5vZGVCID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIsICAvLy9cbiAgICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgICAgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vZGVNYXRjaGVzOyAvLy9cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVGcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGUpIHtcbiAgbGV0IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGUgPSBudWxsO1xuXG4gIGNvbnN0IG5vZGVBID0gbWV0YXN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgbm9kZUIgPSBicmFja2V0ZWRNZXRhc3RhdGVtZW50Tm9kZSwgIC8vL1xuICAgICAgICBkZXB0aCA9IEJSQUNLRVRFRF9NRVRBU1RBVEVNRU5UX0RFUFRILFxuICAgICAgICBub25UZXJtaW5hbE5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCLCBkZXB0aCk7XG5cbiAgaWYgKG5vblRlcm1pbmFsTm9kZU1hdGNoZXMpIHtcbiAgICBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5KG1ldGFzdGF0ZW1lbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlO1xufVxuIl0sIm5hbWVzIjpbIm1hdGNoTWV0YXN0YXRlbWVudE1vZHVsb0JyYWNrZXRzIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUZyb21NZXRhc3RhdGVtZW50Tm9kZSIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsIm1ldGFzdGF0ZW1lbnROb2RlQSIsIm1ldGFzdGF0ZW1lbnROb2RlQiIsIm1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMiLCJub2RlQSIsIm5vZGVCIiwibm9kZU1hdGNoZXMiLCJtYXRjaGVyIiwibWF0Y2hOb2RlIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUEiLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlQiIsIm1ldGFzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZSIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlIiwiZGVwdGgiLCJCUkFDS0VURURfTUVUQVNUQVRFTUVOVF9ERVBUSCIsIm5vblRlcm1pbmFsTm9kZU1hdGNoZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQVVnQkEsZ0NBQWdDO2VBQWhDQTs7SUFzQ0FDLG9EQUFvRDtlQUFwREE7Ozs0REE5Q0k7OERBQ21CO3FCQUViO3lCQUNvQjs7Ozs7O0FBRTlDLElBQU1DLHVDQUF1Q0MsSUFBQUEsZ0JBQVMsRUFBQztBQUVoRCxTQUFTSCxpQ0FBaUNJLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRTtJQUN2RixJQUFJQyxxQ0FBcUMsS0FBSztJQUU5QyxJQUFJLENBQUNBLG9DQUFvQztRQUN2QyxJQUFNQyxRQUFRSCxvQkFDUkksUUFBUUgsb0JBQ1JJLGNBQWNDLGdCQUFPLENBQUNDLFNBQVMsQ0FBQ0osT0FBT0M7UUFFN0NGLHFDQUFxQ0csYUFBYyxHQUFHO0lBQ3hELENBQUM7SUFFRCxJQUFJLENBQUNILG9DQUFvQztRQUN2QyxJQUFNTSxtQ0FBbUNYLHFEQUFxREc7UUFFOUYsSUFBSVEscUNBQXFDLElBQUksRUFBRTtZQUM3QyxJQUFNTCxTQUFRSyxrQ0FDUkosU0FBUUgsb0JBQ1JJLGVBQWNDLGdCQUFPLENBQUNDLFNBQVMsQ0FBQ0osUUFBT0M7WUFFN0NGLHFDQUFxQ0csY0FBYSxHQUFHO1FBQ3ZELENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUFDSCxvQ0FBb0M7UUFDdkMsSUFBTU8sbUNBQW1DWixxREFBcURJO1FBRTlGLElBQUlRLHFDQUFxQyxJQUFJLEVBQUU7WUFDN0MsSUFBTU4sU0FBUUgsb0JBQ1JJLFNBQVFLLGtDQUNSSixlQUFjQyxnQkFBTyxDQUFDQyxTQUFTLENBQUNKLFFBQU9DO1lBRTdDRixxQ0FBcUNHLGNBQWEsR0FBRztRQUN2RCxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU9IO0FBQ1Q7QUFFTyxTQUFTTCxxREFBcURhLGlCQUFpQixFQUFFO0lBQ3RGLElBQUlDLGtDQUFrQyxJQUFJO0lBRTFDLElBQU1SLFFBQVFPLG1CQUNSTixRQUFRUSxrQkFBMEIsRUFDbENDLFFBQVFDLHdDQUE2QixFQUNyQ0MseUJBQXlCVCxnQkFBTyxDQUFDQyxTQUFTLENBQUNKLE9BQU9DLE9BQU9TO0lBRS9ELElBQUlFLHdCQUF3QjtRQUMxQkosa0NBQWtDYixxQ0FBcUNZO0lBQ3pFLENBQUM7SUFFRCxPQUFPQztBQUNUIn0=