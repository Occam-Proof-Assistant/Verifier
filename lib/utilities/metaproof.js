"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "matchMetastatementNodeModuloBrackets", {
    enumerable: true,
    get: function() {
        return matchMetastatementNodeModuloBrackets;
    }
});
var _matcher = require("../matcher");
var _ruleNames = require("../ruleNames");
var _nonTerminalNode = require("../utilities/nonTerminalNode");
function matchMetastatementNodeModuloBrackets(metastatementNodeA, metastatementNodeB) {
    var metastatementNodeMatchesModuloBrackets = false;
    var ruleName = _ruleNames.METASTATEMENT_RULE_NAME, nonTerminalNodeA = metastatementNodeA, nonTerminalNodeB = metastatementNodeB; ///
    if (!metastatementNodeMatchesModuloBrackets) {
        var nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
        metastatementNodeMatchesModuloBrackets = nonTerminalNodeMatches; ///
    }
    if (!metastatementNodeMatchesModuloBrackets) {
        var bracketedNonTerminalNodeA = (0, _nonTerminalNode.bracketedNonTerminalNodeFromNonTerminalNode)(nonTerminalNodeA, ruleName);
        if (bracketedNonTerminalNodeA !== null) {
            var nodeA = bracketedNonTerminalNodeA, nodeB = nonTerminalNodeB, nodeMatches = _matcher.matcher.matchNode(nodeA, nodeB);
            metastatementNodeMatchesModuloBrackets = nodeMatches; ///
        }
    }
    if (!metastatementNodeMatchesModuloBrackets) {
        var bracketedNonTerminalNodeB = (0, _nonTerminalNode.bracketedNonTerminalNodeFromNonTerminalNode)(nonTerminalNodeB, ruleName);
        if (bracketedNonTerminalNodeB !== null) {
            var nodeB1 = bracketedNonTerminalNodeB, nodeA1 = nonTerminalNodeA, nodeMatches1 = _matcher.matcher.matchNode(nodeA1, nodeB1);
            metastatementNodeMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    return metastatementNodeMatchesModuloBrackets;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YXByb29mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBtYXRjaGVyIH0gZnJvbSBcIi4uL21hdGNoZXJcIjtcbmltcG9ydCB7IE1FVEFTVEFURU1FTlRfUlVMRV9OQU1FIH0gZnJvbSBcIi4uL3J1bGVOYW1lc1wiO1xuaW1wb3J0IHsgYnJhY2tldGVkTm9uVGVybWluYWxOb2RlRnJvbU5vblRlcm1pbmFsTm9kZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvbm9uVGVybWluYWxOb2RlXCJcblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTWV0YXN0YXRlbWVudE5vZGVNb2R1bG9CcmFja2V0cyhtZXRhc3RhdGVtZW50Tm9kZUEsIG1ldGFzdGF0ZW1lbnROb2RlQikge1xuICBsZXQgbWV0YXN0YXRlbWVudE5vZGVNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBmYWxzZTtcblxuICBjb25zdCBydWxlTmFtZSA9IE1FVEFTVEFURU1FTlRfUlVMRV9OQU1FLFxuICAgICAgICBub25UZXJtaW5hbE5vZGVBID0gbWV0YXN0YXRlbWVudE5vZGVBLCAgLy8vXG4gICAgICAgIG5vblRlcm1pbmFsTm9kZUIgPSBtZXRhc3RhdGVtZW50Tm9kZUI7ICAvLy9cblxuICBpZiAoIW1ldGFzdGF0ZW1lbnROb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlQSwgbm9uVGVybWluYWxOb2RlQik7XG5cbiAgICBtZXRhc3RhdGVtZW50Tm9kZU1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vblRlcm1pbmFsTm9kZU1hdGNoZXM7ICAvLy9cbiAgfVxuXG4gIGlmICghbWV0YXN0YXRlbWVudE5vZGVNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBicmFja2V0ZWROb25UZXJtaW5hbE5vZGVBID0gYnJhY2tldGVkTm9uVGVybWluYWxOb2RlRnJvbU5vblRlcm1pbmFsTm9kZShub25UZXJtaW5hbE5vZGVBLCBydWxlTmFtZSk7XG5cbiAgICBpZiAoYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQSAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgbm9kZUEgPSBicmFja2V0ZWROb25UZXJtaW5hbE5vZGVBLCAgLy8vXG4gICAgICAgICAgICBub2RlQiA9IG5vblRlcm1pbmFsTm9kZUIsIC8vL1xuICAgICAgICAgICAgbm9kZU1hdGNoZXMgPSBtYXRjaGVyLm1hdGNoTm9kZShub2RlQSwgbm9kZUIpO1xuXG4gICAgICBtZXRhc3RhdGVtZW50Tm9kZU1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vZGVNYXRjaGVzOyAvLy9cbiAgICB9XG4gIH1cblxuICBpZiAoIW1ldGFzdGF0ZW1lbnROb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQiA9IGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUZyb21Ob25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlQiwgcnVsZU5hbWUpO1xuXG4gICAgaWYgKGJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUIgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVCID0gYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQiwgIC8vL1xuICAgICAgICAgICAgbm9kZUEgPSBub25UZXJtaW5hbE5vZGVBLCAvLy9cbiAgICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgICAgbWV0YXN0YXRlbWVudE5vZGVNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBub2RlTWF0Y2hlczsgLy8vXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ldGFzdGF0ZW1lbnROb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzO1xufVxuIl0sIm5hbWVzIjpbIm1hdGNoTWV0YXN0YXRlbWVudE5vZGVNb2R1bG9CcmFja2V0cyIsIm1ldGFzdGF0ZW1lbnROb2RlQSIsIm1ldGFzdGF0ZW1lbnROb2RlQiIsIm1ldGFzdGF0ZW1lbnROb2RlTWF0Y2hlc01vZHVsb0JyYWNrZXRzIiwicnVsZU5hbWUiLCJNRVRBU1RBVEVNRU5UX1JVTEVfTkFNRSIsIm5vblRlcm1pbmFsTm9kZUEiLCJub25UZXJtaW5hbE5vZGVCIiwibm9uVGVybWluYWxOb2RlTWF0Y2hlcyIsIm1hdGNoZXIiLCJtYXRjaE5vblRlcm1pbmFsTm9kZSIsImJyYWNrZXRlZE5vblRlcm1pbmFsTm9kZUEiLCJicmFja2V0ZWROb25UZXJtaW5hbE5vZGVGcm9tTm9uVGVybWluYWxOb2RlIiwibm9kZUEiLCJub2RlQiIsIm5vZGVNYXRjaGVzIiwibWF0Y2hOb2RlIiwiYnJhY2tldGVkTm9uVGVybWluYWxOb2RlQiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBTWdCQTs7O2VBQUFBOzs7dUJBSlE7eUJBQ2dCOytCQUNvQjtBQUVyRCxTQUFTQSxxQ0FBcUNDLGtCQUFrQixFQUFFQyxrQkFBa0IsRUFBRTtJQUMzRixJQUFJQyx5Q0FBeUMsS0FBSztJQUVsRCxJQUFNQyxXQUFXQyxrQ0FBdUIsRUFDbENDLG1CQUFtQkwsb0JBQ25CTSxtQkFBbUJMLG9CQUFxQixHQUFHO0lBRWpELElBQUksQ0FBQ0Msd0NBQXdDO1FBQzNDLElBQU1LLHlCQUF5QkMsZ0JBQU8sQ0FBQ0Msb0JBQW9CLENBQUNKLGtCQUFrQkM7UUFFOUVKLHlDQUF5Q0ssd0JBQXlCLEdBQUc7SUFDdkUsQ0FBQztJQUVELElBQUksQ0FBQ0wsd0NBQXdDO1FBQzNDLElBQU1RLDRCQUE0QkMsSUFBQUEsNERBQTJDLEVBQUNOLGtCQUFrQkY7UUFFaEcsSUFBSU8sOEJBQThCLElBQUksRUFBRTtZQUN0QyxJQUFNRSxRQUFRRiwyQkFDUkcsUUFBUVAsa0JBQ1JRLGNBQWNOLGdCQUFPLENBQUNPLFNBQVMsQ0FBQ0gsT0FBT0M7WUFFN0NYLHlDQUF5Q1ksYUFBYSxHQUFHO1FBQzNELENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUFDWix3Q0FBd0M7UUFDM0MsSUFBTWMsNEJBQTRCTCxJQUFBQSw0REFBMkMsRUFBQ0wsa0JBQWtCSDtRQUVoRyxJQUFJYSw4QkFBOEIsSUFBSSxFQUFFO1lBQ3RDLElBQU1ILFNBQVFHLDJCQUNSSixTQUFRUCxrQkFDUlMsZUFBY04sZ0JBQU8sQ0FBQ08sU0FBUyxDQUFDSCxRQUFPQztZQUU3Q1gseUNBQXlDWSxjQUFhLEdBQUc7UUFDM0QsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPWjtBQUNUIn0=