"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchMetastatementModuloBrackets: function() {
        return matchMetastatementModuloBrackets;
    },
    bracketedMetastatementChildNodeFromMetastatementNode: function() {
        return bracketedMetastatementChildNodeFromMetastatementNode;
    }
});
var _bracketed = /*#__PURE__*/ _interopRequireDefault(require("../node/metastatement/bracketed"));
var _matcher = require("../matcher");
var _query = require("../utilities/query");
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var bracketedMetastatementChildNodeQuery = (0, _query.nodeQuery)("/metastatement/metastatement!");
function matchMetastatementModuloBrackets(metastatementNodeA, metastatementNodeB) {
    var metastatementMatchesModuloBrackets = false;
    if (!metastatementMatchesModuloBrackets) {
        var nonTerminalNodeA = metastatementNodeA, nonTerminalNodeB = metastatementNodeB, nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
        metastatementMatchesModuloBrackets = nonTerminalNodeMatches; ///
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedMetastatementChildNodeA = bracketedMetastatementChildNodeFromMetastatementNode(metastatementNodeA);
        if (bracketedMetastatementChildNodeA !== null) {
            var nodeA = bracketedMetastatementChildNodeA, nodeB = metastatementNodeB, nodeMatches = _matcher.matcher.matchNode(nodeA, nodeB);
            metastatementMatchesModuloBrackets = nodeMatches; ///
        }
    }
    if (!metastatementMatchesModuloBrackets) {
        var bracketedMetastatementChildNodeB = bracketedMetastatementChildNodeFromMetastatementNode(metastatementNodeB);
        if (bracketedMetastatementChildNodeB !== null) {
            var nodeA1 = metastatementNodeA, nodeB1 = bracketedMetastatementChildNodeB, nodeMatches1 = _matcher.matcher.matchNode(nodeA1, nodeB1);
            metastatementMatchesModuloBrackets = nodeMatches1; ///
        }
    }
    return metastatementMatchesModuloBrackets;
}
function bracketedMetastatementChildNodeFromMetastatementNode(metastatementNode) {
    var bracketedMetastatementChildNode = null;
    var depth = _constants.BRACKETED_METASTATEMENT_DEPTH, substitutions = null, nonTerminalNodeA = metastatementNode, nonTerminalNodeB = _bracketed.default, nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB, substitutions, depth);
    if (nonTerminalNodeMatches) {
        bracketedMetastatementChildNode = bracketedMetastatementChildNodeQuery(metastatementNode);
    }
    return bracketedMetastatementChildNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbWV0YXByb29mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgYnJhY2tldGVkTWV0YXN0YXRlbWVudE5vZGUgZnJvbSBcIi4uL25vZGUvbWV0YXN0YXRlbWVudC9icmFja2V0ZWRcIjtcblxuaW1wb3J0IHsgbWF0Y2hlciB9IGZyb20gXCIuLi9tYXRjaGVyXCI7XG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5pbXBvcnQgeyBCUkFDS0VURURfTUVUQVNUQVRFTUVOVF9ERVBUSCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KCcvbWV0YXN0YXRlbWVudC9tZXRhc3RhdGVtZW50IScpO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hNZXRhc3RhdGVtZW50TW9kdWxvQnJhY2tldHMobWV0YXN0YXRlbWVudE5vZGVBLCBtZXRhc3RhdGVtZW50Tm9kZUIpIHtcbiAgbGV0IG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBmYWxzZTtcblxuICBpZiAoIW1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGVBID0gbWV0YXN0YXRlbWVudE5vZGVBLCAgLy8vXG4gICAgICAgICAgbm9uVGVybWluYWxOb2RlQiA9IG1ldGFzdGF0ZW1lbnROb2RlQiwgIC8vL1xuICAgICAgICAgIG5vblRlcm1pbmFsTm9kZU1hdGNoZXMgPSBtYXRjaGVyLm1hdGNoTm9uVGVybWluYWxOb2RlKG5vblRlcm1pbmFsTm9kZUEsIG5vblRlcm1pbmFsTm9kZUIpO1xuXG4gICAgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vblRlcm1pbmFsTm9kZU1hdGNoZXM7ICAvLy9cbiAgfVxuXG4gIGlmICghbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cykge1xuICAgIGNvbnN0IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZUEpO1xuXG4gICAgaWYgKGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBub2RlQSA9IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBLCAgLy8vXG4gICAgICAgICAgICBub2RlQiA9IG1ldGFzdGF0ZW1lbnROb2RlQiwgLy8vXG4gICAgICAgICAgICBub2RlTWF0Y2hlcyA9IG1hdGNoZXIubWF0Y2hOb2RlKG5vZGVBLCBub2RlQik7XG5cbiAgICAgIG1ldGFzdGF0ZW1lbnRNYXRjaGVzTW9kdWxvQnJhY2tldHMgPSBub2RlTWF0Y2hlczsgLy8vXG4gICAgfVxuICB9XG5cbiAgaWYgKCFtZXRhc3RhdGVtZW50TWF0Y2hlc01vZHVsb0JyYWNrZXRzKSB7XG4gICAgY29uc3QgYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIgPSBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlRnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlQik7XG5cbiAgICBpZiAoYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVBID0gbWV0YXN0YXRlbWVudE5vZGVBLCAvLy9cbiAgICAgICAgICAgIG5vZGVCID0gYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIsICAvLy9cbiAgICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hlci5tYXRjaE5vZGUobm9kZUEsIG5vZGVCKTtcblxuICAgICAgbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyA9IG5vZGVNYXRjaGVzOyAvLy9cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVGcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGUpIHtcbiAgbGV0IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGUgPSBudWxsO1xuXG4gIGNvbnN0IGRlcHRoID0gQlJBQ0tFVEVEX01FVEFTVEFURU1FTlRfREVQVEgsXG4gICAgICAgIHN1YnN0aXR1dGlvbnMgPSBudWxsLFxuICAgICAgICBub25UZXJtaW5hbE5vZGVBID0gbWV0YXN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgbm9uVGVybWluYWxOb2RlQiA9IGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgIG5vblRlcm1pbmFsTm9kZU1hdGNoZXMgPSBtYXRjaGVyLm1hdGNoTm9uVGVybWluYWxOb2RlKG5vblRlcm1pbmFsTm9kZUEsIG5vblRlcm1pbmFsTm9kZUIsIHN1YnN0aXR1dGlvbnMsIGRlcHRoKTtcblxuICBpZiAobm9uVGVybWluYWxOb2RlTWF0Y2hlcykge1xuICAgIGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGUgPSBicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlUXVlcnkobWV0YXN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGU7XG59XG4iXSwibmFtZXMiOlsibWF0Y2hNZXRhc3RhdGVtZW50TW9kdWxvQnJhY2tldHMiLCJicmFja2V0ZWRNZXRhc3RhdGVtZW50Q2hpbGROb2RlRnJvbU1ldGFzdGF0ZW1lbnROb2RlIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwibWV0YXN0YXRlbWVudE5vZGVBIiwibWV0YXN0YXRlbWVudE5vZGVCIiwibWV0YXN0YXRlbWVudE1hdGNoZXNNb2R1bG9CcmFja2V0cyIsIm5vblRlcm1pbmFsTm9kZUEiLCJub25UZXJtaW5hbE5vZGVCIiwibm9uVGVybWluYWxOb2RlTWF0Y2hlcyIsIm1hdGNoZXIiLCJtYXRjaE5vblRlcm1pbmFsTm9kZSIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGVBIiwibm9kZUEiLCJub2RlQiIsIm5vZGVNYXRjaGVzIiwibWF0Y2hOb2RlIiwiYnJhY2tldGVkTWV0YXN0YXRlbWVudENoaWxkTm9kZUIiLCJtZXRhc3RhdGVtZW50Tm9kZSIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnRDaGlsZE5vZGUiLCJkZXB0aCIsIkJSQUNLRVRFRF9NRVRBU1RBVEVNRU5UX0RFUFRIIiwic3Vic3RpdHV0aW9ucyIsImJyYWNrZXRlZE1ldGFzdGF0ZW1lbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFVZ0JBLGdDQUFnQztlQUFoQ0E7O0lBc0NBQyxvREFBb0Q7ZUFBcERBOzs7OERBOUN1Qjt1QkFFZjtxQkFDRTt5QkFDb0I7Ozs7OztBQUU5QyxJQUFNQyx1Q0FBdUNDLElBQUFBLGdCQUFTLEVBQUM7QUFFaEQsU0FBU0gsaUNBQWlDSSxrQkFBa0IsRUFBRUMsa0JBQWtCLEVBQUU7SUFDdkYsSUFBSUMscUNBQXFDLEtBQUs7SUFFOUMsSUFBSSxDQUFDQSxvQ0FBb0M7UUFDdkMsSUFBTUMsbUJBQW1CSCxvQkFDbkJJLG1CQUFtQkgsb0JBQ25CSSx5QkFBeUJDLGdCQUFPLENBQUNDLG9CQUFvQixDQUFDSixrQkFBa0JDO1FBRTlFRixxQ0FBcUNHLHdCQUF5QixHQUFHO0lBQ25FLENBQUM7SUFFRCxJQUFJLENBQUNILG9DQUFvQztRQUN2QyxJQUFNTSxtQ0FBbUNYLHFEQUFxREc7UUFFOUYsSUFBSVEscUNBQXFDLElBQUksRUFBRTtZQUM3QyxJQUFNQyxRQUFRRCxrQ0FDUkUsUUFBUVQsb0JBQ1JVLGNBQWNMLGdCQUFPLENBQUNNLFNBQVMsQ0FBQ0gsT0FBT0M7WUFFN0NSLHFDQUFxQ1MsYUFBYSxHQUFHO1FBQ3ZELENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxDQUFDVCxvQ0FBb0M7UUFDdkMsSUFBTVcsbUNBQW1DaEIscURBQXFESTtRQUU5RixJQUFJWSxxQ0FBcUMsSUFBSSxFQUFFO1lBQzdDLElBQU1KLFNBQVFULG9CQUNSVSxTQUFRRyxrQ0FDUkYsZUFBY0wsZ0JBQU8sQ0FBQ00sU0FBUyxDQUFDSCxRQUFPQztZQUU3Q1IscUNBQXFDUyxjQUFhLEdBQUc7UUFDdkQsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPVDtBQUNUO0FBRU8sU0FBU0wscURBQXFEaUIsaUJBQWlCLEVBQUU7SUFDdEYsSUFBSUMsa0NBQWtDLElBQUk7SUFFMUMsSUFBTUMsUUFBUUMsd0NBQTZCLEVBQ3JDQyxnQkFBZ0IsSUFBSSxFQUNwQmYsbUJBQW1CVyxtQkFDbkJWLG1CQUFtQmUsa0JBQTBCLEVBQzdDZCx5QkFBeUJDLGdCQUFPLENBQUNDLG9CQUFvQixDQUFDSixrQkFBa0JDLGtCQUFrQmMsZUFBZUY7SUFFL0csSUFBSVgsd0JBQXdCO1FBQzFCVSxrQ0FBa0NqQixxQ0FBcUNnQjtJQUN6RSxDQUFDO0lBRUQsT0FBT0M7QUFDVCJ9