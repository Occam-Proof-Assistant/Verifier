"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchBracketedNonTerminalNode: function() {
        return matchBracketedNonTerminalNode;
    },
    bracketedNonTerminalChildNodeFromChildNodes: function() {
        return bracketedNonTerminalChildNodeFromChildNodes;
    }
});
var _matcher = require("../matcher");
var _array = require("../utilities/array");
var _ruleNames = require("../ruleNames");
var _constants = require("../constants");
function matchBracketedNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB) {
    var bracketedNodeMatches = false;
    if (!bracketedNodeMatches) {
        var nonTerminalNodeMatches = _matcher.matcher.matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
        bracketedNodeMatches = nonTerminalNodeMatches; ///
    }
    if (!bracketedNodeMatches) {
        var nonTerminalNodeAChildNodes = nonTerminalNodeA.getChildNodes(), childNodesA = nonTerminalNodeAChildNodes, ruleName = _ruleNames.METASTATEMENT_RULE_NAME, bracketedNonTerminalChildNodeA = bracketedNonTerminalChildNodeFromChildNodes(childNodesA, ruleName);
        if (bracketedNonTerminalChildNodeA !== null) {
            var nodeA = bracketedNonTerminalChildNodeA, nodeB = nonTerminalNodeB, nodeMatches = _matcher.matcher.matchNode(nodeA, nodeB);
            bracketedNodeMatches = nodeMatches; ///
        }
    }
    if (!bracketedNodeMatches) {
        var nonTerminalNodeBChildNodes = nonTerminalNodeB.getChildNodes(), childNodesB = nonTerminalNodeBChildNodes, ruleName1 = _ruleNames.METASTATEMENT_RULE_NAME, bracketedNonTerminalChildNodeB = bracketedNonTerminalChildNodeFromChildNodes(childNodesB, ruleName1);
        if (bracketedNonTerminalChildNodeB !== null) {
            var nodeB1 = bracketedNonTerminalChildNodeB, nodeA1 = nonTerminalNodeA, nodeMatches1 = matchNode(nodeA1, nodeB1);
            bracketedNodeMatches = nodeMatches1; ///
        }
    }
    return bracketedNodeMatches;
}
function bracketedNonTerminalChildNodeFromChildNodes(childNodes, ruleName) {
    var bracketedNonTerminalChildNode = null;
    var childNodesLength = childNodes.length;
    if (childNodesLength === _constants.BRACKETED_CHILD_NODES_LENGTH) {
        var firstChildNode = (0, _array.first)(childNodes), thirdChildNode = (0, _array.third)(childNodes), secondChildNode = (0, _array.second)(childNodes), firstChildNodeTerminalNode = firstChildNode.isTerminalNode(), thirdChildNodeTerminalNode = thirdChildNode.isTerminalNode(), secondChildNodeNonTerminalNode = secondChildNode.isNonTerminalNode();
        if (firstChildNodeTerminalNode && secondChildNodeNonTerminalNode && thirdChildNodeTerminalNode) {
            var nonTerminalNode = secondChildNode, firstTerminalNode = firstChildNode, secondTerminalNode = thirdChildNode, nonTerminalNodeRuleName = nonTerminalNode.getRuleName(), firstTerminalNodeContent = firstTerminalNode.getContent(), secondTerminalNodeContent = secondTerminalNode.getContent(), nonTerminalNodeRuleNameRuleName = nonTerminalNodeRuleName === ruleName, firstTerminalNodeContentLeftBracket = firstTerminalNodeContent === _constants.LEFT_BRACKET, secondTerminalNodeContentRightBracket = secondTerminalNodeContent === _constants.RIGHT_BRACKET;
            if (nonTerminalNodeRuleNameRuleName && firstTerminalNodeContentLeftBracket && secondTerminalNodeContentRightBracket) {
                bracketedNonTerminalChildNode = nonTerminalNode; ///
            }
        }
    }
    return bracketedNonTerminalChildNode;
}

//# sourceMappingURL=data:application/json;base64,