"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchNode: function() {
        return matchNode;
    },
    matchNodes: function() {
        return matchNodes;
    },
    matchBracketedNonTerminalNode: function() {
        return matchBracketedNonTerminalNode;
    },
    bracketedChildNodeFromChildNodes: function() {
        return bracketedChildNodeFromChildNodes;
    }
});
var _array = require("./array");
var _ruleNames = require("../ruleNames");
var _constants = require("../constants");
function matchNode(nodeA, nodeB) {
    var nodeMatches = false;
    var nodeATerminalNode = nodeA.isTerminalNode(), nodeBTerminalNode = nodeB.isTerminalNode();
    if (nodeATerminalNode === nodeBTerminalNode) {
        if (nodeATerminalNode) {
            var terminalNodeA = nodeA, terminalNodeB = nodeB, terminalNodeMatches = matchTerminalNode(terminalNodeA, terminalNodeB);
            nodeMatches = terminalNodeMatches; ///
        } else {
            var nonTerminalNodeA = nodeA, nonTerminalNodeB = nodeB, nonTerminalNodeMatches = matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
            nodeMatches = nonTerminalNodeMatches; ///
        }
    }
    return nodeMatches;
}
function matchNodes(nodesA, nodesB) {
    var nodesMatch = false;
    var nodesALength = nodesA.length, nodesBLength = nodesB.length;
    if (nodesALength === nodesBLength) {
        nodesMatch = nodesA.every(function(nodeA, index) {
            var nodeB = nodesB[index], nodeMatches = matchNode(nodeA, nodeB);
            if (nodeMatches) {
                return true;
            }
        });
    }
    return nodesMatch;
}
function matchBracketedNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB) {
    var bracketedNodeMatches = false;
    if (!bracketedNodeMatches) {
        var nonTerminalNodeMatches = matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB);
        bracketedNodeMatches = nonTerminalNodeMatches; ///
    }
    if (!bracketedNodeMatches) {
        var nonTerminalNodeAChildNodes = nonTerminalNodeA.getChildNodes(), childNodesA = nonTerminalNodeAChildNodes, bracketedChildNodeA = bracketedChildNodeFromChildNodes(childNodesA);
        if (bracketedChildNodeA !== null) {
            var nodeA = bracketedChildNodeA, nodeB = nonTerminalNodeB, nodeMatches = matchNode(nodeA, nodeB);
            bracketedNodeMatches = nodeMatches; ///
        }
    }
    if (!bracketedNodeMatches) {
        var nonTerminalNodeBChildNodes = nonTerminalNodeB.getChildNodes(), childNodesB = nonTerminalNodeBChildNodes, bracketedChildNodeB = bracketedChildNodeFromChildNodes(childNodesB);
        if (bracketedChildNodeB !== null) {
            var nodeB1 = bracketedChildNodeB, nodeA1 = nonTerminalNodeA, nodeMatches1 = matchNode(nodeA1, nodeB1);
            bracketedNodeMatches = nodeMatches1; ///
        }
    }
    return bracketedNodeMatches;
}
function bracketedChildNodeFromChildNodes(childNodes) {
    var bracketedChildNode = null;
    var childNodesLength = childNodes.length;
    if (childNodesLength === _constants.BRACKETED_CHILD_NODES_LENGTH) {
        var firstChildNode = (0, _array.first)(childNodes), thirdChildNode = (0, _array.third)(childNodes), secondChildNode = (0, _array.second)(childNodes), firstChildNodeTerminalNode = firstChildNode.isTerminalNode(), thirdChildNodeTerminalNode = thirdChildNode.isTerminalNode(), secondChildNodeNonTerminalNode = secondChildNode.isNonTerminalNode();
        if (firstChildNodeTerminalNode && secondChildNodeNonTerminalNode && thirdChildNodeTerminalNode) {
            var nonTerminalNode = secondChildNode, firstTerminalNode = firstChildNode, secondTerminalNode = thirdChildNode, nonTerminalNodeRuleName = nonTerminalNode.getRuleName(), firstTerminalNodeContent = firstTerminalNode.getContent(), secondTerminalNodeContent = secondTerminalNode.getContent(), firstTerminalNodeContentLeftBracket = firstTerminalNodeContent === _constants.LEFT_BRACKET, secondTerminalNodeContentRightBracket = secondTerminalNodeContent === _constants.RIGHT_BRACKET, nonTerminalNodeRuleNameMetastatementRuleName = nonTerminalNodeRuleName === _ruleNames.METASTATEMENT_RULE_NAME;
            if (firstTerminalNodeContentLeftBracket && nonTerminalNodeRuleNameMetastatementRuleName && secondTerminalNodeContentRightBracket) {
                bracketedChildNode = nonTerminalNode; ///
            }
        }
    }
    return bracketedChildNode;
}
function matchTerminalNode(terminalNodeA, terminalNodeB) {
    var matches = terminalNodeA.match(terminalNodeB), terminalNodeMatches = matches; ///
    return terminalNodeMatches;
}
function matchNonTerminalNode(nonTerminalNodeA, nonTerminalNodeB) {
    var nonTerminalNodeMatches = false;
    var nonTerminalNodeARuleName = nonTerminalNodeA.getRuleName(), nonTerminalNodeBRuleName = nonTerminalNodeB.getRuleName(); ///
    if (nonTerminalNodeARuleName === nonTerminalNodeBRuleName) {
        var nonTerminalNodeAChildNodes = nonTerminalNodeA.getChildNodes(), nonTerminalNodeBChildNodes = nonTerminalNodeB.getChildNodes(), nodesA = nonTerminalNodeAChildNodes, nodesB = nonTerminalNodeBChildNodes, nodesMatch = matchNodes(nodesA, nodesB);
        nonTerminalNodeMatches = nodesMatch; ///
    }
    return nonTerminalNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,