"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    termNodeFromTermString: function() {
        return termNodeFromTermString;
    },
    labelNodeFromLabelString: function() {
        return labelNodeFromLabelString;
    },
    typeNodeFromVariableString: function() {
        return typeNodeFromVariableString;
    },
    variableNodeFromVariableString: function() {
        return variableNodeFromVariableString;
    },
    statementNodeFromStatementString: function() {
        return statementNodeFromStatementString;
    },
    metaTypeNodeFromMetavariableString: function() {
        return metaTypeNodeFromMetavariableString;
    },
    metavariableNodeFromMetavariableString: function() {
        return metavariableNodeFromMetavariableString;
    },
    metastatementNodeFromMetastatementString: function() {
        return metastatementNodeFromMetastatementString;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
var _customGrammar = require("./customGrammar");
var florenceLexerFromCombinedCustomGrammar = _occamcustomgrammars.lexersUtilities.florenceLexerFromCombinedCustomGrammar, florenceParserFromCombinedCustomGrammar = _occamcustomgrammars.parsersUtilities.florenceParserFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), florenceLexer = florenceLexerFromCombinedCustomGrammar(combinedCustomGrammar), florenceParser = florenceParserFromCombinedCustomGrammar(combinedCustomGrammar);
var termNodeQuery = (0, _query.nodeQuery)("/constructorDeclaration/term!"), typeNodeQuery = (0, _query.nodeQuery)("/variableDeclaration/type!"), variableNodeQuery = (0, _query.nodeQuery)("/variableDeclaration/variable!"), metaTypeNodeQuery = (0, _query.nodeQuery)("/metavariableDeclaration/metaType!"), statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), metavariableNodeQuery = (0, _query.nodeQuery)("/metavariableDeclaration/metavariable!"), metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!");
function termNodeFromTermString(termString, lexer, parser) {
    var ruleName = _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME, content = "Constructor ".concat(termString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), constructorDeclarationNode = node, termNode = termNodeQuery(constructorDeclarationNode);
    return termNode;
}
function labelNodeFromLabelString(labelString, lexer, parser) {
    var content = labelString, ruleName = _ruleNames.LABEL_RULE_NAME, node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), labelNode = node; ///
    return labelNode;
}
function typeNodeFromVariableString(variableString, lexer, parser) {
    var ruleName = _ruleNames.TYPE_RULE_NAME, content = "Variable ".concat(variableString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), typeDeclarationNode = node, typeNode = typeNodeQuery(typeDeclarationNode);
    return typeNode;
}
function variableNodeFromVariableString(variableString, lexer, parser) {
    var ruleName = _ruleNames.VARIABLE_RULE_NAME, content = "Variable ".concat(variableString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), variableDeclarationNode = node, variableNode = variableNodeQuery(variableDeclarationNode);
    return variableNode;
}
function statementNodeFromStatementString(statementString, lexer, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, content = "".concat(statementString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), unqualifiedStatementNode = node, statementNode = statementNodeQuery(unqualifiedStatementNode);
    return statementNode;
}
function metaTypeNodeFromMetavariableString(metavariableString, lexer, parser) {
    var ruleName = _ruleNames.META_TYPE_RULE_NAME, content = "Metavariable ".concat(metavariableString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), metaTypeDeclarationNode = node, metaTypeNode = metaTypeNodeQuery(metaTypeDeclarationNode);
    return metaTypeNode;
}
function metavariableNodeFromMetavariableString(metavariableString, lexer, parser) {
    var ruleName = _ruleNames.METAVARIABLE_RULE_NAME, content = "Metavariable ".concat(metavariableString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), metavariableDeclarationNode = node, metavariableNode = metavariableNodeQuery(metavariableDeclarationNode);
    return metavariableNode;
}
function metastatementNodeFromMetastatementString(metastatementString, lexer, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME, content = "".concat(metastatementString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), unqualifiedMetastatementNode = node, metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode);
    return metastatementNode;
}
function nodeFromContentAndRuleName(content, ruleName) {
    var lexer = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : florenceLexer, parser = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : florenceParser;
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], tokens = lexer.tokenise(content), node = parser.parse(tokens, rule);
    return node;
}

//# sourceMappingURL=data:application/json;base64,