"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationTokensFromTermString: function() {
        return constructorDeclarationTokensFromTermString;
    },
    labelNodeFromLabelString: function() {
        return labelNodeFromLabelString;
    },
    labelTokensFromLabelString: function() {
        return labelTokensFromLabelString;
    },
    metaTypeNodeFromMetavariableString: function() {
        return metaTypeNodeFromMetavariableString;
    },
    metastatementNodeFromMetastatementString: function() {
        return metastatementNodeFromMetastatementString;
    },
    metavariableDeclarationTokensFromMetavariableString: function() {
        return metavariableDeclarationTokensFromMetavariableString;
    },
    metavariableNodeFromMetavariableString: function() {
        return metavariableNodeFromMetavariableString;
    },
    statementNodeFromStatementString: function() {
        return statementNodeFromStatementString;
    },
    termNodeFromTermString: function() {
        return termNodeFromTermString;
    },
    typeNodeFromVariableString: function() {
        return typeNodeFromVariableString;
    },
    unqualifiedMetastatementTokensFromMetastatementString: function() {
        return unqualifiedMetastatementTokensFromMetastatementString;
    },
    unqualifiedStatementTokensFromStatementString: function() {
        return unqualifiedStatementTokensFromStatementString;
    },
    variableDeclarationTokensFromVariableString: function() {
        return variableDeclarationTokensFromVariableString;
    },
    variableNodeFromVariableString: function() {
        return variableNodeFromVariableString;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
var _customGrammar = require("./customGrammar");
var florenceLexerFromCombinedCustomGrammar = _occamcustomgrammars.lexersUtilities.florenceLexerFromCombinedCustomGrammar, florenceParserFromCombinedCustomGrammar = _occamcustomgrammars.parsersUtilities.florenceParserFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), florenceLexer = florenceLexerFromCombinedCustomGrammar(combinedCustomGrammar), florenceParser = florenceParserFromCombinedCustomGrammar(combinedCustomGrammar);
var termNodeQuery = (0, _query.nodeQuery)("/constructorDeclaration/term!"), typeNodeQuery = (0, _query.nodeQuery)("/variableDeclaration/type!"), variableNodeQuery = (0, _query.nodeQuery)("/variableDeclaration/variable!"), metaTypeNodeQuery = (0, _query.nodeQuery)("/metavariableDeclaration/metaType!"), statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), metavariableNodeQuery = (0, _query.nodeQuery)("/metavariableDeclaration/metavariable!"), metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!");
function labelTokensFromLabelString(labelString, lexer) {
    var labelContent = "".concat(labelString), labelTokens = tokensFromContentAndLexer(labelContent, lexer);
    return labelTokens;
}
function constructorDeclarationTokensFromTermString(termString, lexer) {
    var constructorDeclarationContent = "Constructor ".concat(termString, "\n"), constructorDeclarationTokens = tokensFromContentAndLexer(constructorDeclarationContent, lexer);
    return constructorDeclarationTokens;
}
function variableDeclarationTokensFromVariableString(variableString, lexer) {
    var variableDeclarationContent = "Variable ".concat(variableString, "\n"), variableDeclarationTokens = tokensFromContentAndLexer(variableDeclarationContent, lexer);
    return variableDeclarationTokens;
}
function unqualifiedStatementTokensFromStatementString(statementString, lexer) {
    var unqualifiedStatementContent = "".concat(statementString, "\n"), unqualifiedStatementTokens = tokensFromContentAndLexer(unqualifiedStatementContent, lexer);
    return unqualifiedStatementTokens;
}
function metavariableDeclarationTokensFromMetavariableString(metavariableString, lexer) {
    var metavariableDeclarationContent = "Metavariable ".concat(metavariableString, "\n"), metavariableDeclarationTokens = tokensFromContentAndLexer(metavariableDeclarationContent, lexer);
    return metavariableDeclarationTokens;
}
function unqualifiedMetastatementTokensFromMetastatementString(metastatementString, lexer) {
    var unqualifiedMetastatementContent = "".concat(metastatementString, "\n"), unqualifiedMetastatementTokens = tokensFromContentAndLexer(unqualifiedMetastatementContent, lexer);
    return unqualifiedMetastatementTokens;
}
function termNodeFromTermString(termString, lexer, parser) {
    var ruleName = _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME, constructorDeclarationTokens = constructorDeclarationTokensFromTermString(termString, lexer, parser), constructorDeclarationNode = nodeFromTokensRuleNameAndParser(constructorDeclarationTokens, ruleName, parser), termNode = termNodeQuery(constructorDeclarationNode);
    return termNode;
}
function labelNodeFromLabelString(labelString, lexer, parser) {
    var ruleName = _ruleNames.LABEL_RULE_NAME, labelTokens = labelTokensFromLabelString(labelString, lexer), labelNode = nodeFromTokensRuleNameAndParser(labelTokens, ruleName, parser);
    return labelNode;
}
function typeNodeFromVariableString(variableString, lexer, parser) {
    var ruleName = _ruleNames.TYPE_RULE_NAME, variableDeclarationTokens = variableDeclarationTokensFromVariableString(variableString, lexer), typeDeclarationNode = nodeFromTokensRuleNameAndParser(variableDeclarationTokens, ruleName, parser), typeNode = typeNodeQuery(typeDeclarationNode);
    return typeNode;
}
function variableNodeFromVariableString(variableString, lexer, parser) {
    var ruleName = _ruleNames.VARIABLE_RULE_NAME, variableTDeclarationTokens = variableDeclarationTokensFromVariableString(variableString, lexer), variableDeclarationNode = nodeFromTokensRuleNameAndParser(variableTDeclarationTokens, ruleName, parser), variableNode = variableNodeQuery(variableDeclarationNode);
    return variableNode;
}
function statementNodeFromStatementString(statementString, lexer, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, unqualifiedStatementTokens = unqualifiedStatementTokensFromStatementString(statementString, lexer), unqualifiedStatementNode = nodeFromTokensRuleNameAndParser(unqualifiedStatementTokens, ruleName, parser), statementNode = statementNodeQuery(unqualifiedStatementNode);
    return statementNode;
}
function metaTypeNodeFromMetavariableString(metavariableString, lexer, parser) {
    var ruleName = _ruleNames.META_TYPE_RULE_NAME, metavariableDeclarationTokens = metavariableDeclarationTokensFromMetavariableString(metavariableString, lexer), metaTypeDeclarationNode = nodeFromTokensRuleNameAndParser(metavariableDeclarationTokens, ruleName, parser), metaTypeNode = metaTypeNodeQuery(metaTypeDeclarationNode);
    return metaTypeNode;
}
function metavariableNodeFromMetavariableString(metavariableString, lexer, parser) {
    var ruleName = _ruleNames.METAVARIABLE_RULE_NAME, metavariableDeclarationTokens = metavariableDeclarationTokensFromMetavariableString(metavariableString, lexer), metavariableDeclarationNode = nodeFromTokensRuleNameAndParser(metavariableDeclarationTokens, ruleName, parser), metavariableNode = metavariableNodeQuery(metavariableDeclarationNode);
    return metavariableNode;
}
function metastatementNodeFromMetastatementString(metastatementString, lexer, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME, unqualifiedMetastatementTokens = unqualifiedMetastatementTokensFromMetastatementString(metastatementString, lexer), unqualifiedMetastatementNode = nodeFromTokensRuleNameAndParser(unqualifiedMetastatementTokens, ruleName, parser), metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode);
    return metastatementNode;
}
function tokensFromContentAndLexer(content) {
    var lexer = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : florenceLexer;
    var tokens = lexer.tokenise(content);
    return tokens;
}
function nodeFromTokensRuleNameAndParser(tokens, ruleName) {
    var parser = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : florenceParser;
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], node = parser.parse(tokens, rule);
    return node;
}

//# sourceMappingURL=data:application/json;base64,