"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationNodeFromConstructorDeclarationTokens: function() {
        return constructorDeclarationNodeFromConstructorDeclarationTokens;
    },
    constructorDeclarationStringFromTermString: function() {
        return constructorDeclarationStringFromTermString;
    },
    metavariableNodeFromMetavariableString: function() {
        return metavariableNodeFromMetavariableString;
    },
    metavariableNodeFromMetavariableTokens: function() {
        return metavariableNodeFromMetavariableTokens;
    },
    statementNodeFromUnqualifiedStatementNode: function() {
        return statementNodeFromUnqualifiedStatementNode;
    },
    substitutionNodeFromUnqualifiedStatementNode: function() {
        return substitutionNodeFromUnqualifiedStatementNode;
    },
    termNodeFromConstructorDeclarationNode: function() {
        return termNodeFromConstructorDeclarationNode;
    },
    termNodeFromTermString: function() {
        return termNodeFromTermString;
    },
    unqualifiedStatementNodeFromUnqualifiedStatementTokens: function() {
        return unqualifiedStatementNodeFromUnqualifiedStatementTokens;
    },
    unqualifiedStatementStringFromStatementString: function() {
        return unqualifiedStatementStringFromStatementString;
    },
    unqualifiedStatementStringFromSubstitutionString: function() {
        return unqualifiedStatementStringFromSubstitutionString;
    },
    variableNodeFromVariableString: function() {
        return variableNodeFromVariableString;
    },
    variableNodeFromVariableTokens: function() {
        return variableNodeFromVariableTokens;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _query = require("../utilities/query");
var _customGrammar = require("./customGrammar");
var _ruleNames = require("../ruleNames");
var _tokens = require("../utilities/tokens");
var nominalParserFromCombinedCustomGrammar = _occamcustomgrammars.parsersUtilities.nominalParserFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), nominalParser = nominalParserFromCombinedCustomGrammar(combinedCustomGrammar);
var termNodeQuery = (0, _query.nodeQuery)("/constructorDeclaration/term"), statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement"), substitutionNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement/substitution");
function termNodeFromTermString(termString, lexer, parser) {
    var constructorDeclarationString = constructorDeclarationStringFromTermString(termString), constructorDeclarationTokens = (0, _tokens.constructorDeclarationTokensFromConstructorDeclarationString)(constructorDeclarationString, lexer), constructorDeclarationNode = constructorDeclarationNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser), termNode = termNodeFromConstructorDeclarationNode(constructorDeclarationNode);
    return termNode;
}
function variableNodeFromVariableString(variableString, lexer, parser) {
    var variableTokens = (0, _tokens.variableTokensFromVariableString)(variableString, lexer), variableNode = variableNodeFromVariableTokens(variableTokens, parser);
    return variableNode;
}
function metavariableNodeFromMetavariableString(metavariableString, lexer, parser) {
    var metavariableTokens = (0, _tokens.metavariableTokensFromMetavariableString)(metavariableString, lexer), metavariableNode = metavariableNodeFromMetavariableTokens(metavariableTokens, parser);
    return metavariableNode;
}
function constructorDeclarationStringFromTermString(termString) {
    var constructorDeclarationString = "Constructor ".concat(termString, "\n");
    return constructorDeclarationString;
}
function unqualifiedStatementStringFromStatementString(statementString) {
    var unqualifiedStatementString = "".concat(statementString, "\n");
    return unqualifiedStatementString;
}
function unqualifiedStatementStringFromSubstitutionString(substitutionString) {
    var unqualifiedStatementString = "a ".concat(substitutionString, "\n"); ///
    return unqualifiedStatementString;
}
function termNodeFromConstructorDeclarationNode(constructorDeclarationNode) {
    var termNode = termNodeQuery(constructorDeclarationNode, constructorDeclarationNode);
    return termNode;
}
function statementNodeFromUnqualifiedStatementNode(unqualifiedStatementNode) {
    var statementNode = statementNodeQuery(unqualifiedStatementNode);
    return statementNode;
}
function substitutionNodeFromUnqualifiedStatementNode(unqualifiedStatementNode) {
    var substitutionNode = substitutionNodeQuery(unqualifiedStatementNode);
    return substitutionNode;
}
function variableNodeFromVariableTokens(variableTokens, parser) {
    var ruleName = _ruleNames.VARIABLE_RULE_NAME, variableNode = nodeFromTokensRuleNameAndParser(variableTokens, ruleName, parser);
    return variableNode;
}
function metavariableNodeFromMetavariableTokens(metavariableTokens, parser) {
    var ruleName = _ruleNames.METAVARIABLE_RULE_NAME, metavariableNode = nodeFromTokensRuleNameAndParser(metavariableTokens, ruleName, parser);
    return metavariableNode;
}
function unqualifiedStatementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser) {
    var tokens = unqualifiedStatementTokens, ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, unqualifiedStatementNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return unqualifiedStatementNode;
}
function constructorDeclarationNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser) {
    var tokens = constructorDeclarationTokens, ruleName = _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME, constructorDeclarationNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return constructorDeclarationNode;
}
function nodeFromTokensRuleNameAndParser(tokens, ruleName) {
    var parser = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : nominalParser;
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], node = parser.parse(tokens, rule);
    return node;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGFyc2Vyc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1jdXN0b20tZ3JhbW1hcnNcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcgfSBmcm9tIFwiLi9jdXN0b21HcmFtbWFyXCI7XG5pbXBvcnQgeyBWQVJJQUJMRV9SVUxFX05BTUUsXG4gICAgICAgICBNRVRBVkFSSUFCTEVfUlVMRV9OQU1FLFxuICAgICAgICAgVU5RVUFMSUZJRURfU1RBVEVNRU5UX1JVTEVfTkFNRSxcbiAgICAgICAgIENPTlNUUlVDVE9SX0RFQ0xBUkFUSU9OX1JVTEVfTkFNRSB9IGZyb20gXCIuLi9ydWxlTmFtZXNcIjtcbmltcG9ydCB7IHZhcmlhYmxlVG9rZW5zRnJvbVZhcmlhYmxlU3RyaW5nLFxuICAgICAgICAgbWV0YXZhcmlhYmxlVG9rZW5zRnJvbU1ldGF2YXJpYWJsZVN0cmluZyxcbiAgICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nLFxuICAgICAgICAgY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vuc0Zyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxpdGllcy90b2tlbnNcIjtcblxuY29uc3QgeyBub21pbmFsUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hciB9ID0gcGFyc2Vyc1V0aWxpdGllcztcblxuY29uc3QgY29tYmluZWRDdXN0b21HcmFtbWFyID0gY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcoKSxcbiAgICAgIG5vbWluYWxQYXJzZXIgPSBub21pbmFsUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hcihjb21iaW5lZEN1c3RvbUdyYW1tYXIpO1xuXG5jb25zdCB0ZXJtTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2NvbnN0cnVjdG9yRGVjbGFyYXRpb24vdGVybVwiKSxcbiAgICAgIHN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZFN0YXRlbWVudC9zdGF0ZW1lbnRcIiksXG4gICAgICBzdWJzdGl0dXRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdW5xdWFsaWZpZWRTdGF0ZW1lbnQvc3RhdGVtZW50L3N1YnN0aXR1dGlvblwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRlcm1Ob2RlRnJvbVRlcm1TdHJpbmcodGVybVN0cmluZywgbGV4ZXIsIHBhcnNlcikge1xuICBjb25zdCBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nID0gY29uc3RydWN0b3JEZWNsYXJhdGlvblN0cmluZ0Zyb21UZXJtU3RyaW5nKHRlcm1TdHJpbmcpLFxuICAgICAgICBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zID0gY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vuc0Zyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nKGNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmcsIGxleGVyKSxcbiAgICAgICAgY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZUZyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zKGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMsIHBhcnNlciksXG4gICAgICAgIHRlcm1Ob2RlID0gdGVybU5vZGVGcm9tQ29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUoY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUpO1xuXG4gIHJldHVybiB0ZXJtTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhYmxlTm9kZUZyb21WYXJpYWJsZVN0cmluZyh2YXJpYWJsZVN0cmluZywgbGV4ZXIsIHBhcnNlcikge1xuICBjb25zdCB2YXJpYWJsZVRva2VucyA9IHZhcmlhYmxlVG9rZW5zRnJvbVZhcmlhYmxlU3RyaW5nKHZhcmlhYmxlU3RyaW5nLCBsZXhlciksXG4gICAgICAgIHZhcmlhYmxlTm9kZSA9IHZhcmlhYmxlTm9kZUZyb21WYXJpYWJsZVRva2Vucyh2YXJpYWJsZVRva2VucywgcGFyc2VyKTtcblxuICByZXR1cm4gdmFyaWFibGVOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWV0YXZhcmlhYmxlTm9kZUZyb21NZXRhdmFyaWFibGVTdHJpbmcobWV0YXZhcmlhYmxlU3RyaW5nLCBsZXhlciwgcGFyc2VyKSB7XG4gIGNvbnN0IG1ldGF2YXJpYWJsZVRva2VucyA9IG1ldGF2YXJpYWJsZVRva2Vuc0Zyb21NZXRhdmFyaWFibGVTdHJpbmcobWV0YXZhcmlhYmxlU3RyaW5nLCBsZXhlciksXG4gICAgICAgIG1ldGF2YXJpYWJsZU5vZGUgPSBtZXRhdmFyaWFibGVOb2RlRnJvbU1ldGF2YXJpYWJsZVRva2VucyhtZXRhdmFyaWFibGVUb2tlbnMsIHBhcnNlcik7XG5cbiAgcmV0dXJuIG1ldGF2YXJpYWJsZU5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nRnJvbVRlcm1TdHJpbmcodGVybVN0cmluZykge1xuICBjb25zdCBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nID0gYENvbnN0cnVjdG9yICR7dGVybVN0cmluZ31cbmA7XG5cbiAgcmV0dXJuIGNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnF1YWxpZmllZFN0YXRlbWVudFN0cmluZ0Zyb21TdGF0ZW1lbnRTdHJpbmcoc3RhdGVtZW50U3RyaW5nKSB7XG4gIGNvbnN0IHVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nID0gYCR7c3RhdGVtZW50U3RyaW5nfVxuYDtcblxuICByZXR1cm4gdW5xdWFsaWZpZWRTdGF0ZW1lbnRTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnF1YWxpZmllZFN0YXRlbWVudFN0cmluZ0Zyb21TdWJzdGl0dXRpb25TdHJpbmcoc3Vic3RpdHV0aW9uU3RyaW5nKSB7XG4gIGNvbnN0IHVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nID0gYGEgJHtzdWJzdGl0dXRpb25TdHJpbmd9XG5gOyAgLy8vXG5cbiAgcmV0dXJuIHVucXVhbGlmaWVkU3RhdGVtZW50U3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVybU5vZGVGcm9tQ29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUoY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUpIHtcbiAgY29uc3QgdGVybU5vZGUgPSB0ZXJtTm9kZVF1ZXJ5KGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlLCBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZSk7XG5cbiAgcmV0dXJuIHRlcm1Ob2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVtZW50Tm9kZUZyb21VbnF1YWxpZmllZFN0YXRlbWVudE5vZGUodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlKSB7XG4gIGNvbnN0IHN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlUXVlcnkodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlKTtcblxuICByZXR1cm4gc3RhdGVtZW50Tm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnN0aXR1dGlvbk5vZGVGcm9tVW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlKHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSkge1xuICBjb25zdCBzdWJzdGl0dXRpb25Ob2RlID0gc3Vic3RpdHV0aW9uTm9kZVF1ZXJ5KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSk7XG5cbiAgcmV0dXJuIHN1YnN0aXR1dGlvbk5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YXJpYWJsZU5vZGVGcm9tVmFyaWFibGVUb2tlbnModmFyaWFibGVUb2tlbnMsIHBhcnNlcikge1xuICBjb25zdCBydWxlTmFtZSA9IFZBUklBQkxFX1JVTEVfTkFNRSxcbiAgICAgICAgdmFyaWFibGVOb2RlID0gbm9kZUZyb21Ub2tlbnNSdWxlTmFtZUFuZFBhcnNlcih2YXJpYWJsZVRva2VucywgcnVsZU5hbWUsIHBhcnNlcik7XG5cbiAgcmV0dXJuIHZhcmlhYmxlTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGF2YXJpYWJsZU5vZGVGcm9tTWV0YXZhcmlhYmxlVG9rZW5zKG1ldGF2YXJpYWJsZVRva2VucywgcGFyc2VyKSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gTUVUQVZBUklBQkxFX1JVTEVfTkFNRSxcbiAgICAgICAgbWV0YXZhcmlhYmxlTm9kZSA9IG5vZGVGcm9tVG9rZW5zUnVsZU5hbWVBbmRQYXJzZXIobWV0YXZhcmlhYmxlVG9rZW5zLCBydWxlTmFtZSwgcGFyc2VyKTtcblxuICByZXR1cm4gbWV0YXZhcmlhYmxlTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZUZyb21VbnF1YWxpZmllZFN0YXRlbWVudFRva2Vucyh1bnF1YWxpZmllZFN0YXRlbWVudFRva2VucywgcGFyc2VyKSB7XG4gIGNvbnN0IHRva2VucyA9IHVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zLCAgLy8vXG4gICAgICAgIHJ1bGVOYW1lID0gVU5RVUFMSUZJRURfU1RBVEVNRU5UX1JVTEVfTkFNRSxcbiAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlID0gbm9kZUZyb21Ub2tlbnNSdWxlTmFtZUFuZFBhcnNlcih0b2tlbnMsIHJ1bGVOYW1lLCBwYXJzZXIpO1xuXG4gIHJldHVybiB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZUZyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zKGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ub2tlbnMsIHBhcnNlcikge1xuICBjb25zdCB0b2tlbnMgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zLCAgLy8vXG4gICAgICAgIHJ1bGVOYW1lID0gQ09OU1RSVUNUT1JfREVDTEFSQVRJT05fUlVMRV9OQU1FLFxuICAgICAgICBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZSA9IG5vZGVGcm9tVG9rZW5zUnVsZU5hbWVBbmRQYXJzZXIodG9rZW5zLCBydWxlTmFtZSwgcGFyc2VyKTtcblxuICByZXR1cm4gY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGU7XG59XG5cbmZ1bmN0aW9uIG5vZGVGcm9tVG9rZW5zUnVsZU5hbWVBbmRQYXJzZXIodG9rZW5zLCBydWxlTmFtZSwgcGFyc2VyID0gbm9taW5hbFBhcnNlcikge1xuICBjb25zdCBydWxlTWFwID0gcGFyc2VyLmdldFJ1bGVNYXAoKSxcbiAgICAgICAgcnVsZSA9IHJ1bGVNYXBbcnVsZU5hbWVdLFxuICAgICAgICBub2RlID0gcGFyc2VyLnBhcnNlKHRva2VucywgcnVsZSk7XG5cbiAgcmV0dXJuIG5vZGU7XG59XG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGVGcm9tQ29uc3RydWN0b3JEZWNsYXJhdGlvblRva2VucyIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmdGcm9tVGVybVN0cmluZyIsIm1ldGF2YXJpYWJsZU5vZGVGcm9tTWV0YXZhcmlhYmxlU3RyaW5nIiwibWV0YXZhcmlhYmxlTm9kZUZyb21NZXRhdmFyaWFibGVUb2tlbnMiLCJzdGF0ZW1lbnROb2RlRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSIsInN1YnN0aXR1dGlvbk5vZGVGcm9tVW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlIiwidGVybU5vZGVGcm9tQ29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUiLCJ0ZXJtTm9kZUZyb21UZXJtU3RyaW5nIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlRnJvbVVucXVhbGlmaWVkU3RhdGVtZW50VG9rZW5zIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRTdHJpbmdGcm9tU3RhdGVtZW50U3RyaW5nIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRTdHJpbmdGcm9tU3Vic3RpdHV0aW9uU3RyaW5nIiwidmFyaWFibGVOb2RlRnJvbVZhcmlhYmxlU3RyaW5nIiwidmFyaWFibGVOb2RlRnJvbVZhcmlhYmxlVG9rZW5zIiwibm9taW5hbFBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIiLCJwYXJzZXJzVXRpbGl0aWVzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmciLCJub21pbmFsUGFyc2VyIiwidGVybU5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInN0YXRlbWVudE5vZGVRdWVyeSIsInN1YnN0aXR1dGlvbk5vZGVRdWVyeSIsInRlcm1TdHJpbmciLCJsZXhlciIsInBhcnNlciIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25TdHJpbmciLCJjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVG9rZW5zIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvblRva2Vuc0Zyb21Db25zdHJ1Y3RvckRlY2xhcmF0aW9uU3RyaW5nIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUiLCJ0ZXJtTm9kZSIsInZhcmlhYmxlU3RyaW5nIiwidmFyaWFibGVUb2tlbnMiLCJ2YXJpYWJsZVRva2Vuc0Zyb21WYXJpYWJsZVN0cmluZyIsInZhcmlhYmxlTm9kZSIsIm1ldGF2YXJpYWJsZVN0cmluZyIsIm1ldGF2YXJpYWJsZVRva2VucyIsIm1ldGF2YXJpYWJsZVRva2Vuc0Zyb21NZXRhdmFyaWFibGVTdHJpbmciLCJtZXRhdmFyaWFibGVOb2RlIiwic3RhdGVtZW50U3RyaW5nIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRTdHJpbmciLCJzdWJzdGl0dXRpb25TdHJpbmciLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUiLCJzdGF0ZW1lbnROb2RlIiwic3Vic3RpdHV0aW9uTm9kZSIsInJ1bGVOYW1lIiwiVkFSSUFCTEVfUlVMRV9OQU1FIiwibm9kZUZyb21Ub2tlbnNSdWxlTmFtZUFuZFBhcnNlciIsIk1FVEFWQVJJQUJMRV9SVUxFX05BTUUiLCJ1bnF1YWxpZmllZFN0YXRlbWVudFRva2VucyIsInRva2VucyIsIlVOUVVBTElGSUVEX1NUQVRFTUVOVF9SVUxFX05BTUUiLCJDT05TVFJVQ1RPUl9ERUNMQVJBVElPTl9SVUxFX05BTUUiLCJydWxlTWFwIiwiZ2V0UnVsZU1hcCIsInJ1bGUiLCJub2RlIiwicGFyc2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQTRHZ0JBLDBEQUEwRDtlQUExREE7O0lBN0RBQywwQ0FBMEM7ZUFBMUNBOztJQVBBQyxzQ0FBc0M7ZUFBdENBOztJQXFEQUMsc0NBQXNDO2VBQXRDQTs7SUFuQkFDLHlDQUF5QztlQUF6Q0E7O0lBTUFDLDRDQUE0QztlQUE1Q0E7O0lBWkFDLHNDQUFzQztlQUF0Q0E7O0lBNUNBQyxzQkFBc0I7ZUFBdEJBOztJQTRFQUMsc0RBQXNEO2VBQXREQTs7SUE5Q0FDLDZDQUE2QztlQUE3Q0E7O0lBT0FDLGdEQUFnRDtlQUFoREE7O0lBNUJBQyw4QkFBOEI7ZUFBOUJBOztJQXFEQUMsOEJBQThCO2VBQTlCQTs7O21DQXBGaUI7cUJBRVA7NkJBQ3VCO3lCQUlDO3NCQUkyQjtBQUU3RSxJQUFNLEFBQUVDLHlDQUEyQ0MscUNBQWdCLENBQTNERDtBQUVSLElBQU1FLHdCQUF3QkMsSUFBQUEsK0NBQWdDLEtBQ3hEQyxnQkFBZ0JKLHVDQUF1Q0U7QUFFN0QsSUFBTUcsZ0JBQWdCQyxJQUFBQSxnQkFBUyxFQUFDLGlDQUMxQkMscUJBQXFCRCxJQUFBQSxnQkFBUyxFQUFDLG9DQUMvQkUsd0JBQXdCRixJQUFBQSxnQkFBUyxFQUFDO0FBRWpDLFNBQVNaLHVCQUF1QmUsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDOUQsSUFBTUMsK0JBQStCeEIsMkNBQTJDcUIsYUFDMUVJLCtCQUErQkMsSUFBQUEsb0VBQTRELEVBQUNGLDhCQUE4QkYsUUFDMUhLLDZCQUE2QjVCLDJEQUEyRDBCLDhC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