"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationNodeFromConstructorDeclarationTokens: function() {
        return constructorDeclarationNodeFromConstructorDeclarationTokens;
    },
    metavariableNodeFromMetavariableString: function() {
        return metavariableNodeFromMetavariableString;
    },
    metavariableNodeFromMetavariableTokens: function() {
        return metavariableNodeFromMetavariableTokens;
    },
    statementNodeFromStatementString: function() {
        return statementNodeFromStatementString;
    },
    statementNodeFromUnqualifiedStatementTokens: function() {
        return statementNodeFromUnqualifiedStatementTokens;
    },
    termNodeFromConstructorDeclarationTokens: function() {
        return termNodeFromConstructorDeclarationTokens;
    },
    unqualifiedStatementNodeFromUnqualifiedStatementTokens: function() {
        return unqualifiedStatementNodeFromUnqualifiedStatementTokens;
    },
    variableDeclarationNodeFromVariableTDeclarationTokens: function() {
        return variableDeclarationNodeFromVariableTDeclarationTokens;
    },
    variableNodeFromVariableString: function() {
        return variableNodeFromVariableString;
    },
    variableNodeFromVariableVariableTDeclarationTokens: function() {
        return variableNodeFromVariableVariableTDeclarationTokens;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _query = require("../utilities/query");
var _customGrammar = require("./customGrammar");
var _ruleNames = require("../ruleNames");
var _tokens = require("../utilities/tokens");
var florenceParserFromCombinedCustomGrammar = _occamcustomgrammars.parsersUtilities.florenceParserFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), florenceParser = florenceParserFromCombinedCustomGrammar(combinedCustomGrammar);
var termNodeQuery = (0, _query.nodeQuery)("/constructorDeclaration/term!"), variableNodeQuery = (0, _query.nodeQuery)("/variableDeclaration/variable!"), statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!");
function variableNodeFromVariableString(variableString, lexer, parser) {
    var variableTDeclarationTokens = (0, _tokens.variableDeclarationTokensFromVariableString)(variableString, lexer), variableNode = variableNodeFromVariableVariableTDeclarationTokens(variableTDeclarationTokens, parser);
    return variableNode;
}
function statementNodeFromStatementString(statementString, lexer, parser) {
    var unqualifiedStatementTokens = (0, _tokens.unqualifiedStatementTokensFromStatementString)(statementString, lexer), statementNode = statementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser);
    return statementNode;
}
function metavariableNodeFromMetavariableString(metavariableString, lexer, parser) {
    var metavariableTokens = (0, _tokens.metavariableTokensFromMetavariableString)(metavariableString, lexer), metavariableNode = metavariableNodeFromMetavariableTokens(metavariableTokens, parser);
    return metavariableNode;
}
function termNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser) {
    var termNode = null;
    var constructorDeclarationNode = constructorDeclarationNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser);
    if (constructorDeclarationNode !== null) {
        termNode = termNodeQuery(constructorDeclarationNode);
    }
    return termNode;
}
function statementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser) {
    var statementNode = null;
    var unqualifiedStatementNode = unqualifiedStatementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser);
    if (unqualifiedStatementNode !== null) {
        statementNode = statementNodeQuery(unqualifiedStatementNode);
    }
    return statementNode;
}
function variableNodeFromVariableVariableTDeclarationTokens(variableTDeclarationTokens, parser) {
    var variableNode = null;
    var variableDeclarationNode = variableDeclarationNodeFromVariableTDeclarationTokens(variableTDeclarationTokens, parser);
    if (variableDeclarationNode !== null) {
        variableNode = variableNodeQuery(variableDeclarationNode);
    }
    return variableNode;
}
function metavariableNodeFromMetavariableTokens(metavariableTokens, parser) {
    var ruleName = _ruleNames.METAVARIABLE_RULE_NAME, metavariableNode = nodeFromTokensRuleNameAndParser(metavariableTokens, ruleName, parser);
    return metavariableNode;
}
function variableDeclarationNodeFromVariableTDeclarationTokens(variableTDeclarationTokens, parser) {
    var ruleName = _ruleNames.VARIABLE_DECLARATION_RULE_NAME, variableDeclarationNode = nodeFromTokensRuleNameAndParser(variableTDeclarationTokens, ruleName, parser);
    return variableDeclarationNode;
}
function unqualifiedStatementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, unqualifiedStatementNode = nodeFromTokensRuleNameAndParser(unqualifiedStatementTokens, ruleName, parser);
    return unqualifiedStatementNode;
}
function constructorDeclarationNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser) {
    var ruleName = _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME, constructorDeclarationNode = nodeFromTokensRuleNameAndParser(constructorDeclarationTokens, ruleName, parser);
    return constructorDeclarationNode;
}
function nodeFromTokensRuleNameAndParser(tokens, ruleName) {
    var parser = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : florenceParser;
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], node = parser.parse(tokens, rule);
    return node;
}

//# sourceMappingURL=data:application/json;base64,