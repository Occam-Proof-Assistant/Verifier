"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    equalityStatementNode: function() {
        return equalityStatementNode;
    },
    bracketedStatementNode: function() {
        return bracketedStatementNode;
    },
    bracketedMetastatementNode: function() {
        return bracketedMetastatementNode;
    },
    equalityCombinatorStatementNode: function() {
        return equalityCombinatorStatementNode;
    },
    bracketedCombinatorStatementNode: function() {
        return bracketedCombinatorStatementNode;
    },
    termNodeFromTermString: function() {
        return termNodeFromTermString;
    },
    labelNodeFromLabelString: function() {
        return labelNodeFromLabelString;
    },
    statementNodeFromStatementString: function() {
        return statementNodeFromStatementString;
    },
    metastatementNodeFromMetastatementString: function() {
        return metastatementNodeFromMetastatementString;
    }
});
var _query = require("./query");
var _occamGrammarUtilities = require("occam-grammar-utilities");
var _typeNames = require("../typeNames");
var _occamCustomGrammars = require("occam-custom-grammars");
var _ruleNames = require("../ruleNames");
var _metaTypeNames = require("../metaTypeNames");
var _customGrammar = require("./customGrammar");
var florenceLexerFromCombinedCustomGrammar = _occamCustomGrammars.lexersUtilities.florenceLexerFromCombinedCustomGrammar, florenceParserFromCombinedCustomGrammar = _occamCustomGrammars.parsersUtilities.florenceParserFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), florenceLexer = florenceLexerFromCombinedCustomGrammar(combinedCustomGrammar), florenceParser = florenceParserFromCombinedCustomGrammar(combinedCustomGrammar);
var termNodeQuery = (0, _query.nodeQuery)("/constructorDeclaration/term!"), statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!");
var equalityStatementString = "n=m", bracketedStatementString = "(n=m)", bracketedMetastatementString = "(A)", equalityCombinatorStatementString = "".concat(_typeNames.OBJECT_TYPE_NAME, " = ").concat(_typeNames.OBJECT_TYPE_NAME), bracketedCombinatorStatementString = "(".concat(_metaTypeNames.STATEMENT_META_TYPE_NAME, ")");
var equalityStatementNode = statementNodeFromStatementString(equalityStatementString);
var bracketedStatementNode = statementNodeFromStatementString(bracketedStatementString);
var bracketedMetastatementNode = metastatementNodeFromMetastatementString(bracketedMetastatementString);
var equalityCombinatorStatementNode = statementNodeFromStatementString(equalityCombinatorStatementString);
var bracketedCombinatorStatementNode = statementNodeFromStatementString(bracketedCombinatorStatementString);
function termNodeFromTermString(termString, lexer, parser) {
    var ruleName = _ruleNames.CONSTRUCTOR_DECLARATIONRULE_NAME, content = "Constructor ".concat(termString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), constructorDeclarationNode = node, termNode = termNodeQuery(constructorDeclarationNode);
    return termNode;
}
function labelNodeFromLabelString(labelString, lexer, parser) {
    var content = labelString, ruleName = _ruleNames.LABEL_RULE_NAME, node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), labelNode = node; ///
    return labelNode;
}
function statementNodeFromStatementString(statementString, lexer, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, content = "".concat(statementString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), unqualifiedStatementNode = node, statementNode = statementNodeQuery(unqualifiedStatementNode);
    return statementNode;
}
function metastatementNodeFromMetastatementString(metastatementString, lexer, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME, content = "".concat(metastatementString, "\n"), node = nodeFromContentAndRuleName(content, ruleName, lexer, parser), unqualifiedMetastatementNode = node, metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode);
    return metastatementNode;
}
function nodeFromContentAndRuleName(content, ruleName) {
    var lexer = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : florenceLexer, parser = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : florenceParser;
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], tokens = lexer.tokenise(content), node = parser.parse(tokens, rule);
    (0, _occamGrammarUtilities.rewriteNodes)(node);
    return node;
}

//# sourceMappingURL=data:application/json;base64,