"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    termNodeFromTermJSON: function() {
        return termNodeFromTermJSON;
    },
    labelNodeFromLabelJSON: function() {
        return labelNodeFromLabelJSON;
    },
    statementNodeFromStatementJSON: function() {
        return statementNodeFromStatementJSON;
    },
    metastatementNodeFromMetastatementJSON: function() {
        return metastatementNodeFromMetastatementJSON;
    }
});
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
var statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement"), metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement");
function termNodeFromTermJSON(termJSON, releaseContext) {
    var ruleName = _ruleNames.TERM_RULE_NAME, content = termJSON, node = releaseContext.nodeFromContentAndRuleName(content, ruleName), termNode = node; ///
    return termNode;
}
function labelNodeFromLabelJSON(labelJSON, releaseContext) {
    var content = labelJSON, ruleName = _ruleNames.LABEL_RULE_NAME, node = releaseContext.nodeFromContentAndRuleName(content, ruleName), labelNode = node; ///
    return labelNode;
}
function statementNodeFromStatementJSON(statementJSON, releaseContext) {
    var ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, content = "".concat(statementJSON, "\n"), node = releaseContext.nodeFromContentAndRuleName(content, ruleName), unqualifiedStatementNode = node, statementNode = statementNodeQuery(unqualifiedStatementNode);
    return statementNode;
}
function metastatementNodeFromMetastatementJSON(metastatementJSON, releaseContext) {
    var ruleName = _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME, content = "".concat(metastatementJSON, "\n"), node = releaseContext.nodeFromContentAndRuleName(content, ruleName), unqualifiedMetastatementNode = node, metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode);
    return metastatementNode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgVEVSTV9SVUxFX05BTUUsXG4gICAgICAgICBMQUJFTF9SVUxFX05BTUUsXG4gICAgICAgICBVTlFVQUxJRklFRF9TVEFURU1FTlRfUlVMRV9OQU1FLFxuICAgICAgICAgVU5RVUFMSUZJRURfTUVUQVNUQVRFTUVOVF9SVUxFX05BTUUgfSBmcm9tIFwiLi4vcnVsZU5hbWVzXCI7XG5cbmNvbnN0IHN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZFN0YXRlbWVudC9zdGF0ZW1lbnRcIiksXG4gICAgICBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudC9tZXRhc3RhdGVtZW50XCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gdGVybU5vZGVGcm9tVGVybUpTT04odGVybUpTT04sIHJlbGVhc2VDb250ZXh0KSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gVEVSTV9SVUxFX05BTUUsXG4gICAgICAgIGNvbnRlbnQgPSB0ZXJtSlNPTiwgLy8vXG4gICAgICAgIG5vZGUgPSByZWxlYXNlQ29udGV4dC5ub2RlRnJvbUNvbnRlbnRBbmRSdWxlTmFtZShjb250ZW50LCBydWxlTmFtZSksXG4gICAgICAgIHRlcm1Ob2RlID0gbm9kZTsgIC8vL1xuXG4gIHJldHVybiB0ZXJtTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxhYmVsTm9kZUZyb21MYWJlbEpTT04obGFiZWxKU09OLCByZWxlYXNlQ29udGV4dCkge1xuICBjb25zdCBjb250ZW50ID0gbGFiZWxKU09OLCAvLy9cbiAgICAgICAgcnVsZU5hbWUgPSBMQUJFTF9SVUxFX05BTUUsXG4gICAgICAgIG5vZGUgPSByZWxlYXNlQ29udGV4dC5ub2RlRnJvbUNvbnRlbnRBbmRSdWxlTmFtZShjb250ZW50LCBydWxlTmFtZSksXG4gICAgICAgIGxhYmVsTm9kZSA9IG5vZGU7IC8vL1xuXG4gIHJldHVybiBsYWJlbE5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZW1lbnROb2RlRnJvbVN0YXRlbWVudEpTT04oc3RhdGVtZW50SlNPTiwgcmVsZWFzZUNvbnRleHQpIHtcbiAgY29uc3QgcnVsZU5hbWUgPSBVTlFVQUxJRklFRF9TVEFURU1FTlRfUlVMRV9OQU1FLFxuICAgICAgICBjb250ZW50ID0gYCR7c3RhdGVtZW50SlNPTn1cbmAsXG4gICAgICAgIG5vZGUgPSByZWxlYXNlQ29udGV4dC5ub2RlRnJvbUNvbnRlbnRBbmRSdWxlTmFtZShjb250ZW50LCBydWxlTmFtZSksXG4gICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSA9IG5vZGUsICAvLy9cbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudE5vZGVRdWVyeSh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUpO1xuXG4gIHJldHVybiBzdGF0ZW1lbnROb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWV0YXN0YXRlbWVudE5vZGVGcm9tTWV0YXN0YXRlbWVudEpTT04obWV0YXN0YXRlbWVudEpTT04sIHJlbGVhc2VDb250ZXh0KSB7XG4gIGNvbnN0IHJ1bGVOYW1lID0gVU5RVUFMSUZJRURfTUVUQVNUQVRFTUVOVF9SVUxFX05BTUUsXG4gICAgICAgIGNvbnRlbnQgPSBgJHttZXRhc3RhdGVtZW50SlNPTn1cbmAsXG4gICAgICAgIG5vZGUgPSByZWxlYXNlQ29udGV4dC5ub2RlRnJvbUNvbnRlbnRBbmRSdWxlTmFtZShjb250ZW50LCBydWxlTmFtZSksXG4gICAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUgPSBub2RlLCAgLy8vXG4gICAgICAgIG1ldGFzdGF0ZW1lbnROb2RlID0gbWV0YXN0YXRlbWVudE5vZGVRdWVyeSh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICByZXR1cm4gbWV0YXN0YXRlbWVudE5vZGU7XG59XG4iXSwibmFtZXMiOlsidGVybU5vZGVGcm9tVGVybUpTT04iLCJsYWJlbE5vZGVGcm9tTGFiZWxKU09OIiwic3RhdGVtZW50Tm9kZUZyb21TdGF0ZW1lbnRKU09OIiwibWV0YXN0YXRlbWVudE5vZGVGcm9tTWV0YXN0YXRlbWVudEpTT04iLCJzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5IiwidGVybUpTT04iLCJyZWxlYXNlQ29udGV4dCIsInJ1bGVOYW1lIiwiVEVSTV9SVUxFX05BTUUiLCJjb250ZW50Iiwibm9kZSIsIm5vZGVGcm9tQ29udGVudEFuZFJ1bGVOYW1lIiwidGVybU5vZGUiLCJsYWJlbEpTT04iLCJMQUJFTF9SVUxFX05BTUUiLCJsYWJlbE5vZGUiLCJzdGF0ZW1lbnRKU09OIiwiVU5RVUFMSUZJRURfU1RBVEVNRU5UX1JVTEVfTkFNRSIsInVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSIsInN0YXRlbWVudE5vZGUiLCJtZXRhc3RhdGVtZW50SlNPTiIsIlVOUVVBTElGSUVEX01FVEFTVEFURU1FTlRfUlVMRV9OQU1FIiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsIm1ldGFzdGF0ZW1lbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFXZ0JBLG9CQUFvQjtlQUFwQkE7O0lBU0FDLHNCQUFzQjtlQUF0QkE7O0lBU0FDLDhCQUE4QjtlQUE5QkE7O0lBV0FDLHNDQUFzQztlQUF0Q0E7OztxQkF0Q1U7eUJBSTBCO0FBRXBELElBQU1DLHFCQUFxQkMsSUFBQUEsZ0JBQVMsRUFBQyxvQ0FDL0JDLHlCQUF5QkQsSUFBQUEsZ0JBQVMsRUFBQztBQUVsQyxTQUFTTCxxQkFBcUJPLFFBQVEsRUFBRUMsY0FBYyxFQUFFO0lBQzdELElBQU1DLFdBQVdDLHlCQUFjLEVBQ3pCQyxVQUFVSixVQUNWSyxPQUFPSixlQUFlSywwQkFBMEIsQ0FBQ0YsU0FBU0YsV0FDMURLLFdBQVdGLE1BQU8sR0FBRztJQUUzQixPQUFPRTtBQUNUO0FBRU8sU0FBU2IsdUJBQXVCYyxTQUFTLEVBQUVQLGNBQWMsRUFBRTtJQUNoRSxJQUFNRyxVQUFVSSxXQUNWTixXQUFXTywwQkFBZSxFQUMxQkosT0FBT0osZUFBZUssMEJBQTBCLENBQUNGLFNBQVNGLFdBQzFEUSxZQUFZTCxNQUFNLEdBQUc7SUFFM0IsT0FBT0s7QUFDVDtBQUVPLFNBQVNmLCtCQUErQmdCLGFBQWEsRUFBRVYsY0FBYyxFQUFFO0lBQzVFLElBQU1DLFdBQVdVLDBDQUErQixFQUMxQ1IsVUFBVSxBQUFDLEdBQWdCLE9BQWRPLGVBQWMsT0FFM0JOLE9BQU9KLGVBQWVLLDBCQUEwQixDQUFDRixTQUFTRixXQUMxRFcsMkJBQTJCUixNQUMzQlMsZ0JBQWdCakIsbUJBQW1CZ0I7SUFFekMsT0FBT0M7QUFDVDtBQUVPLFNBQVNsQix1Q0FBdUNtQixpQkFBaUIsRUFBRWQsY0FBYyxFQUFFO0lBQ3hGLElBQU1DLFdBQVdjLDhDQUFtQyxFQUM5Q1osVUFBVSxBQUFDLEdBQW9CLE9BQWxCVyxtQkFBa0IsT0FFL0JWLE9BQU9KLGVBQWVLLDBCQUEwQixDQUFDRixTQUFTRixXQUMxRGUsK0JBQStCWixNQUMvQmEsb0JBQW9CbkIsdUJBQXVCa0I7SUFFakQsT0FBT0M7QUFDVCJ9