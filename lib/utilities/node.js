"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    statementNodeFromStatementString: function() {
        return statementNodeFromStatementString;
    },
    statementNodeFromStatementTokens: function() {
        return statementNodeFromStatementTokens;
    },
    termNodeFromTermString: function() {
        return termNodeFromTermString;
    },
    termNodeFromTermTokens: function() {
        return termNodeFromTermTokens;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _customGrammar = require("./customGrammar");
var _ruleNames = require("../ruleNames");
var _tokens = require("../utilities/tokens");
var florenceParserFromCombinedCustomGrammar = _occamcustomgrammars.parsersUtilities.florenceParserFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), florenceParser = florenceParserFromCombinedCustomGrammar(combinedCustomGrammar);
function termNodeFromTermString(termString, lexer, parser) {
    var termTokens = (0, _tokens.termTokensFromTermString)(termString, lexer), termNode = termNodeFromTermTokens(termTokens, parser);
    return termNode;
}
function statementNodeFromStatementString(statementString, lexer, parser) {
    var statementTokens = (0, _tokens.statementTokensFromStatementString)(statementString, lexer), statementNode = statementNodeFromStatementTokens(statementTokens, parser);
    return statementNode;
}
function termNodeFromTermTokens(termTokens, parser) {
    var tokens = termTokens, ruleName = _ruleNames.TERM_RULE_NAME, termNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return termNode;
}
function statementNodeFromStatementTokens(statementTokens, parser) {
    var tokens = statementTokens, ruleName = _ruleNames.STATEMENT_RULE_NAME, statementNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return statementNode;
}
function nodeFromTokensRuleNameAndParser(tokens, ruleName) {
    var parser = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : florenceParser;
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], node = parser.parse(tokens, rule);
    return node;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGFyc2Vyc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1jdXN0b20tZ3JhbW1hcnNcIjtcblxuaW1wb3J0IHsgY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcgfSBmcm9tIFwiLi9jdXN0b21HcmFtbWFyXCI7XG5pbXBvcnQgeyBURVJNX1JVTEVfTkFNRSwgU1RBVEVNRU5UX1JVTEVfTkFNRSB9IGZyb20gXCIuLi9ydWxlTmFtZXNcIjtcbmltcG9ydCB7IHRlcm1Ub2tlbnNGcm9tVGVybVN0cmluZywgc3RhdGVtZW50VG9rZW5zRnJvbVN0YXRlbWVudFN0cmluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvdG9rZW5zXCI7XG5cbmNvbnN0IHsgZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gPSBwYXJzZXJzVXRpbGl0aWVzO1xuXG5jb25zdCBjb21iaW5lZEN1c3RvbUdyYW1tYXIgPSBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tTm90aGluZygpLFxuICAgICAgZmxvcmVuY2VQYXJzZXIgPSBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIoY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRlcm1Ob2RlRnJvbVRlcm1TdHJpbmcodGVybVN0cmluZywgbGV4ZXIsIHBhcnNlcikge1xuICBjb25zdCB0ZXJtVG9rZW5zID0gdGVybVRva2Vuc0Zyb21UZXJtU3RyaW5nKHRlcm1TdHJpbmcsIGxleGVyKSxcbiAgICAgICAgdGVybU5vZGUgPSB0ZXJtTm9kZUZyb21UZXJtVG9rZW5zKHRlcm1Ub2tlbnMsIHBhcnNlcik7XG5cbiAgcmV0dXJuIHRlcm1Ob2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVtZW50Tm9kZUZyb21TdGF0ZW1lbnRTdHJpbmcoc3RhdGVtZW50U3RyaW5nLCBsZXhlciwgcGFyc2VyKSB7XG4gIGNvbnN0IHN0YXRlbWVudFRva2VucyA9IHN0YXRlbWVudFRva2Vuc0Zyb21TdGF0ZW1lbnRTdHJpbmcoc3RhdGVtZW50U3RyaW5nLCBsZXhlciksXG4gICAgICAgIHN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlRnJvbVN0YXRlbWVudFRva2VucyhzdGF0ZW1lbnRUb2tlbnMsIHBhcnNlcik7XG5cbiAgcmV0dXJuIHN0YXRlbWVudE5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXJtTm9kZUZyb21UZXJtVG9rZW5zKHRlcm1Ub2tlbnMsIHBhcnNlcikge1xuICBjb25zdCB0b2tlbnMgPSB0ZXJtVG9rZW5zLCAgLy8vXG4gICAgICAgIHJ1bGVOYW1lID0gVEVSTV9SVUxFX05BTUUsXG4gICAgICAgIHRlcm1Ob2RlID0gbm9kZUZyb21Ub2tlbnNSdWxlTmFtZUFuZFBhcnNlcih0b2tlbnMsIHJ1bGVOYW1lLCBwYXJzZXIpO1xuXG4gIHJldHVybiB0ZXJtTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlbWVudE5vZGVGcm9tU3RhdGVtZW50VG9rZW5zKHN0YXRlbWVudFRva2VucywgcGFyc2VyKSB7XG4gIGNvbnN0IHRva2VucyA9IHN0YXRlbWVudFRva2VucywgIC8vL1xuICAgICAgICBydWxlTmFtZSA9IFNUQVRFTUVOVF9SVUxFX05BTUUsXG4gICAgICAgIHN0YXRlbWVudE5vZGUgPSBub2RlRnJvbVRva2Vuc1J1bGVOYW1lQW5kUGFyc2VyKHRva2VucywgcnVsZU5hbWUsIHBhcnNlcik7XG5cbiAgcmV0dXJuIHN0YXRlbWVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIG5vZGVGcm9tVG9rZW5zUnVsZU5hbWVBbmRQYXJzZXIodG9rZW5zLCBydWxlTmFtZSwgcGFyc2VyID0gZmxvcmVuY2VQYXJzZXIpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHBhcnNlci5nZXRSdWxlTWFwKCksXG4gICAgICAgIHJ1bGUgPSBydWxlTWFwW3J1bGVOYW1lXSxcbiAgICAgICAgbm9kZSA9IHBhcnNlci5wYXJzZSh0b2tlbnMsIHJ1bGUpO1xuXG4gIHJldHVybiBub2RlO1xufVxuIl0sIm5hbWVzIjpbInN0YXRlbWVudE5vZGVGcm9tU3RhdGVtZW50U3RyaW5nIiwic3RhdGVtZW50Tm9kZUZyb21TdGF0ZW1lbnRUb2tlbnMiLCJ0ZXJtTm9kZUZyb21UZXJtU3RyaW5nIiwidGVybU5vZGVGcm9tVGVybVRva2VucyIsImZsb3JlbmNlUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hciIsInBhcnNlcnNVdGlsaXRpZXMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tTm90aGluZyIsImZsb3JlbmNlUGFyc2VyIiwidGVybVN0cmluZyIsImxleGVyIiwicGFyc2VyIiwidGVybVRva2VucyIsInRlcm1Ub2tlbnNGcm9tVGVybVN0cmluZyIsInRlcm1Ob2RlIiwic3RhdGVtZW50U3RyaW5nIiwic3RhdGVtZW50VG9rZW5zIiwic3RhdGVtZW50VG9rZW5zRnJvbVN0YXRlbWVudFN0cmluZyIsInN0YXRlbWVudE5vZGUiLCJ0b2tlbnMiLCJydWxlTmFtZSIsIlRFUk1fUlVMRV9OQU1FIiwibm9kZUZyb21Ub2tlbnNSdWxlTmFtZUFuZFBhcnNlciIsIlNUQVRFTUVOVF9SVUxFX05BTUUiLCJydWxlTWFwIiwiZ2V0UnVsZU1hcCIsInJ1bGUiLCJub2RlIiwicGFyc2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQW9CZ0JBLGdDQUFnQztlQUFoQ0E7O0lBZUFDLGdDQUFnQztlQUFoQ0E7O0lBdEJBQyxzQkFBc0I7ZUFBdEJBOztJQWNBQyxzQkFBc0I7ZUFBdEJBOzs7bUNBekJpQjs2QkFFZ0I7eUJBQ0c7c0JBQ3lCO0FBRTdFLElBQU0sQUFBRUMsMENBQTRDQyxxQ0FBZ0IsQ0FBNUREO0FBRVIsSUFBTUUsd0JBQXdCQyxJQUFBQSwrQ0FBZ0MsS0FDeERDLGlCQUFpQkosd0NBQXdDRTtBQUV4RCxTQUFTSix1QkFBdUJPLFVBQVUsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQzlELElBQU1DLGFBQWFDLElBQUFBLGdDQUF3QixFQUFDSixZQUFZQyxRQUNsREksV0FBV1gsdUJBQXVCUyxZQUFZRDtJQUVwRCxPQUFPRztBQUNUO0FBRU8sU0FBU2QsaUNBQWlDZSxlQUFlLEVBQUVMLEtBQUssRUFBRUMsTUFBTTtJQUM3RSxJQUFNSyxrQkFBa0JDLElBQUFBLDBDQUFrQyxFQUFDRixpQkFBaUJMLFFBQ3RFUSxnQkFBZ0JqQixpQ0FBaUNlLGlCQUFpQkw7SUFFeEUsT0FBT087QUFDVDtBQUVPLFNBQVNmLHVCQUF1QlMsVUFBVSxFQUFFRCxNQUFNO0lBQ3ZELElBQU1RLFNBQVNQLFlBQ1RRLFdBQVdDLHlCQUFjLEVBQ3pCUCxXQUFXUSxnQ0FBZ0NILFFBQVFDLFVBQVVUO0lBRW5FLE9BQU9HO0FBQ1Q7QUFFTyxTQUFTYixpQ0FBaUNlLGVBQWUsRUFBRUwsTUFBTTtJQUN0RSxJQUFNUSxTQUFTSCxpQkFDVEksV0FBV0csOEJBQW1CLEVBQzlCTCxnQkFBZ0JJLGdDQUFnQ0gsUUFBUUMsVUFBVVQ7SUFFeEUsT0FBT087QUFDVDtBQUVBLFNBQVNJLGdDQUFnQ0gsTUFBTSxFQUFFQyxRQUFRO1FBQUVULFNBQUFBLGlFQUFTSDtJQUNsRSxJQUFNZ0IsVUFBVWIsT0FBT2MsVUFBVSxJQUMzQkMsT0FBT0YsT0FBTyxDQUFDSixTQUFTLEVBQ3hCTyxPQUFPaEIsT0FBT2lCLEtBQUssQ0FBQ1QsUUFBUU87SUFFbEMsT0FBT0M7QUFDVCJ9