"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationNodeFromConstructorDeclarationTokens: function() {
        return constructorDeclarationNodeFromConstructorDeclarationTokens;
    },
    labelNodeFromLabelString: function() {
        return labelNodeFromLabelString;
    },
    labelNodeFromLabelTokens: function() {
        return labelNodeFromLabelTokens;
    },
    metastatementNodeFromMetastatementString: function() {
        return metastatementNodeFromMetastatementString;
    },
    metastatementNodeFromUnqualifiedMetastatementTokens: function() {
        return metastatementNodeFromUnqualifiedMetastatementTokens;
    },
    statementNodeFromStatementString: function() {
        return statementNodeFromStatementString;
    },
    statementNodeFromUnqualifiedStatementTokens: function() {
        return statementNodeFromUnqualifiedStatementTokens;
    },
    termNodeFromConstructorDeclarationTokens: function() {
        return termNodeFromConstructorDeclarationTokens;
    },
    unqualifiedMetastatementNodeFromUnqualifiedMetastatementTokens: function() {
        return unqualifiedMetastatementNodeFromUnqualifiedMetastatementTokens;
    },
    unqualifiedStatementNodeFromUnqualifiedStatementTokens: function() {
        return unqualifiedStatementNodeFromUnqualifiedStatementTokens;
    },
    variableDeclarationNodeFromVariableTDeclarationTokens: function() {
        return variableDeclarationNodeFromVariableTDeclarationTokens;
    },
    variableNodeFromVariableString: function() {
        return variableNodeFromVariableString;
    },
    variableNodeFromVariableVariableTDeclarationTokens: function() {
        return variableNodeFromVariableVariableTDeclarationTokens;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _query = require("../utilities/query");
var _customGrammar = require("./customGrammar");
var _ruleNames = require("../ruleNames");
var _tokens = require("../utilities/tokens");
var florenceParserFromCombinedCustomGrammar = _occamcustomgrammars.parsersUtilities.florenceParserFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), florenceParser = florenceParserFromCombinedCustomGrammar(combinedCustomGrammar);
var termNodeQuery = (0, _query.nodeQuery)("/constructorDeclaration/term!"), variableNodeQuery = (0, _query.nodeQuery)("/variableDeclaration/variable!"), statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!");
function labelNodeFromLabelString(labelString, lexer, parser) {
    var labelTokens = (0, _tokens.labelTokensFromLabelString)(labelString, lexer), labelNode = labelNodeFromLabelTokens(labelTokens, parser);
    return labelNode;
}
function variableNodeFromVariableString(variableString, lexer, parser) {
    var variableTDeclarationTokens = (0, _tokens.variableDeclarationTokensFromVariableString)(variableString, lexer), variableNode = variableNodeFromVariableVariableTDeclarationTokens(variableTDeclarationTokens, parser);
    return variableNode;
}
function statementNodeFromStatementString(statementString, lexer, parser) {
    var unqualifiedStatementTokens = (0, _tokens.unqualifiedStatementTokensFromStatementString)(statementString, lexer), statementNode = statementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser);
    return statementNode;
}
function metastatementNodeFromMetastatementString(metastatementString, lexer, parser) {
    var unqualifiedMetastatementTokens = (0, _tokens.unqualifiedMetastatementTokensFromMetastatementString)(metastatementString, lexer), metastatementNode = metastatementNodeFromUnqualifiedMetastatementTokens(unqualifiedMetastatementTokens, parser);
    return metastatementNode;
}
function termNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser) {
    var constructorDeclarationNode = constructorDeclarationNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser), termNode = termNodeQuery(constructorDeclarationNode);
    return termNode;
}
function statementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser) {
    var unqualifiedStatementNode = unqualifiedStatementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser), statementNode = statementNodeQuery(unqualifiedStatementNode);
    return statementNode;
}
function variableNodeFromVariableVariableTDeclarationTokens(variableTDeclarationTokens, parser) {
    var variableDeclarationNode = variableDeclarationNodeFromVariableTDeclarationTokens(variableTDeclarationTokens, parser), variableNode = variableNodeQuery(variableDeclarationNode);
    return variableNode;
}
function metastatementNodeFromUnqualifiedMetastatementTokens(unqualifiedMetastatementTokens, parser) {
    var unqualifiedMetastatementNode = unqualifiedMetastatementNodeFromUnqualifiedMetastatementTokens(unqualifiedMetastatementTokens, parser), metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode);
    return metastatementNode;
}
function labelNodeFromLabelTokens(labelTokens, parser) {
    var ruleName = _ruleNames.LABEL_RULE_NAME, labelNode = nodeFromTokensRuleNameAndParser(labelTokens, ruleName, parser);
    return labelNode;
}
function variableDeclarationNodeFromVariableTDeclarationTokens(variableTDeclarationTokens, parser) {
    var ruleName = _ruleNames.VARIABLE_DECLARATION_RULE_NAME, variableDeclarationNode = nodeFromTokensRuleNameAndParser(variableTDeclarationTokens, ruleName, parser);
    return variableDeclarationNode;
}
function unqualifiedStatementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, unqualifiedStatementNode = nodeFromTokensRuleNameAndParser(unqualifiedStatementTokens, ruleName, parser);
    return unqualifiedStatementNode;
}
function constructorDeclarationNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser) {
    var ruleName = _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME, constructorDeclarationNode = nodeFromTokensRuleNameAndParser(constructorDeclarationTokens, ruleName, parser);
    return constructorDeclarationNode;
}
function unqualifiedMetastatementNodeFromUnqualifiedMetastatementTokens(unqualifiedMetastatementTokens, parser) {
    var ruleName = _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME, unqualifiedMetastatementNode = nodeFromTokensRuleNameAndParser(unqualifiedMetastatementTokens, ruleName, parser);
    return unqualifiedMetastatementNode;
}
function nodeFromTokensRuleNameAndParser(tokens, ruleName) {
    var parser = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : florenceParser;
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], node = parser.parse(tokens, rule);
    return node;
}

//# sourceMappingURL=data:application/json;base64,