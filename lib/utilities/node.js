"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    constructorDeclarationNodeFromConstructorDeclarationTokens: function() {
        return constructorDeclarationNodeFromConstructorDeclarationTokens;
    },
    constructorDeclarationStringFromTermString: function() {
        return constructorDeclarationStringFromTermString;
    },
    metavariableNodeFromMetavariableString: function() {
        return metavariableNodeFromMetavariableString;
    },
    metavariableNodeFromMetavariableTokens: function() {
        return metavariableNodeFromMetavariableTokens;
    },
    statementNodeFromUnqualifiedStatementNode: function() {
        return statementNodeFromUnqualifiedStatementNode;
    },
    substitutionNodeFromUnqualifiedStatementNode: function() {
        return substitutionNodeFromUnqualifiedStatementNode;
    },
    termNodeFromConstructorDeclarationNode: function() {
        return termNodeFromConstructorDeclarationNode;
    },
    termNodeFromTermString: function() {
        return termNodeFromTermString;
    },
    unqualifiedStatementNodeFromUnqualifiedStatementTokens: function() {
        return unqualifiedStatementNodeFromUnqualifiedStatementTokens;
    },
    unqualifiedStatementStringFromStatementString: function() {
        return unqualifiedStatementStringFromStatementString;
    },
    unqualifiedStatementStringFromSubstitutionString: function() {
        return unqualifiedStatementStringFromSubstitutionString;
    },
    variableNodeFromVariableString: function() {
        return variableNodeFromVariableString;
    },
    variableNodeFromVariableTokens: function() {
        return variableNodeFromVariableTokens;
    }
});
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
var _tokens = require("../utilities/tokens");
var termNodeQuery = (0, _query.nodeQuery)("/constructorDeclaration/term"), statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement"), substitutionNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement/substitution");
function termNodeFromTermString(termString, lexer, parser) {
    var constructorDeclarationString = constructorDeclarationStringFromTermString(termString), constructorDeclarationTokens = (0, _tokens.constructorDeclarationTokensFromConstructorDeclarationString)(constructorDeclarationString, lexer), constructorDeclarationNode = constructorDeclarationNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser), termNode = termNodeFromConstructorDeclarationNode(constructorDeclarationNode);
    return termNode;
}
function variableNodeFromVariableString(variableString, lexer, parser) {
    var variableTokens = (0, _tokens.variableTokensFromVariableString)(variableString, lexer), variableNode = variableNodeFromVariableTokens(variableTokens, parser);
    return variableNode;
}
function metavariableNodeFromMetavariableString(metavariableString, lexer, parser) {
    var metavariableTokens = (0, _tokens.metavariableTokensFromMetavariableString)(metavariableString, lexer), metavariableNode = metavariableNodeFromMetavariableTokens(metavariableTokens, parser);
    return metavariableNode;
}
function constructorDeclarationStringFromTermString(termString) {
    var constructorDeclarationString = "Constructor ".concat(termString, "\n");
    return constructorDeclarationString;
}
function unqualifiedStatementStringFromStatementString(statementString) {
    var unqualifiedStatementString = "".concat(statementString, "\n");
    return unqualifiedStatementString;
}
function unqualifiedStatementStringFromSubstitutionString(substitutionString) {
    var unqualifiedStatementString = "a ".concat(substitutionString, "\n"); ///
    return unqualifiedStatementString;
}
function termNodeFromConstructorDeclarationNode(constructorDeclarationNode) {
    var termNode = termNodeQuery(constructorDeclarationNode, constructorDeclarationNode);
    return termNode;
}
function statementNodeFromUnqualifiedStatementNode(unqualifiedStatementNode) {
    var statementNode = statementNodeQuery(unqualifiedStatementNode);
    return statementNode;
}
function substitutionNodeFromUnqualifiedStatementNode(unqualifiedStatementNode) {
    var substitutionNode = substitutionNodeQuery(unqualifiedStatementNode);
    return substitutionNode;
}
function variableNodeFromVariableTokens(variableTokens, parser) {
    var ruleName = _ruleNames.VARIABLE_RULE_NAME, variableNode = nodeFromTokensRuleNameAndParser(variableTokens, ruleName, parser);
    return variableNode;
}
function metavariableNodeFromMetavariableTokens(metavariableTokens, parser) {
    var ruleName = _ruleNames.METAVARIABLE_RULE_NAME, metavariableNode = nodeFromTokensRuleNameAndParser(metavariableTokens, ruleName, parser);
    return metavariableNode;
}
function unqualifiedStatementNodeFromUnqualifiedStatementTokens(unqualifiedStatementTokens, parser) {
    var tokens = unqualifiedStatementTokens, ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, unqualifiedStatementNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return unqualifiedStatementNode;
}
function constructorDeclarationNodeFromConstructorDeclarationTokens(constructorDeclarationTokens, parser) {
    var tokens = constructorDeclarationTokens, ruleName = _ruleNames.CONSTRUCTOR_DECLARATION_RULE_NAME, constructorDeclarationNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return constructorDeclarationNode;
}
function nodeFromTokensRuleNameAndParser(tokens, ruleName, parser) {
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], node = parser.parse(tokens, rule);
    return node;
}

//# sourceMappingURL=data:application/json;base64,