"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    frameNodeFromFrameString: function() {
        return frameNodeFromFrameString;
    },
    frameNodeFromFrameTokens: function() {
        return frameNodeFromFrameTokens;
    },
    statementNodeFromStatementString: function() {
        return statementNodeFromStatementString;
    },
    statementNodeFromStatementTokens: function() {
        return statementNodeFromStatementTokens;
    },
    termNodeFromTermString: function() {
        return termNodeFromTermString;
    },
    termNodeFromTermTokens: function() {
        return termNodeFromTermTokens;
    }
});
var _occamcustomgrammars = require("occam-custom-grammars");
var _customGrammar = require("./customGrammar");
var _ruleNames = require("../ruleNames");
var _tokens = require("../utilities/tokens");
var florenceParserFromCombinedCustomGrammar = _occamcustomgrammars.parsersUtilities.florenceParserFromCombinedCustomGrammar;
var combinedCustomGrammar = (0, _customGrammar.combinedCustomGrammarFromNothing)(), florenceParser = florenceParserFromCombinedCustomGrammar(combinedCustomGrammar);
function termNodeFromTermString(termString, lexer, parser) {
    var termTokens = (0, _tokens.termTokensFromTermString)(termString, lexer), termNode = termNodeFromTermTokens(termTokens, parser);
    return termNode;
}
function frameNodeFromFrameString(frameString, lexer, parser) {
    var frameTokens = (0, _tokens.frameTokensFromFrameString)(frameString, lexer), frameNode = frameNodeFromFrameTokens(frameTokens, parser);
    return frameNode;
}
function statementNodeFromStatementString(statementString, lexer, parser) {
    var statementTokens = (0, _tokens.statementTokensFromStatementString)(statementString, lexer), statementNode = statementNodeFromStatementTokens(statementTokens, parser);
    return statementNode;
}
function termNodeFromTermTokens(termTokens, parser) {
    var tokens = termTokens, ruleName = _ruleNames.TERM_RULE_NAME, termNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return termNode;
}
function frameNodeFromFrameTokens(frameTokens, parser) {
    var tokens = frameTokens, ruleName = _ruleNames.FRAME_RULE_NAME, frameNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return frameNode;
}
function statementNodeFromStatementTokens(statementTokens, parser) {
    var tokens = statementTokens, ruleName = _ruleNames.STATEMENT_RULE_NAME, statementNode = nodeFromTokensRuleNameAndParser(tokens, ruleName, parser);
    return statementNode;
}
function nodeFromTokensRuleNameAndParser(tokens, ruleName) {
    var parser = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : florenceParser;
    var ruleMap = parser.getRuleMap(), rule = ruleMap[ruleName], node = parser.parse(tokens, rule);
    return node;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGFyc2Vyc1V0aWxpdGllcyB9IGZyb20gXCJvY2NhbS1jdXN0b20tZ3JhbW1hcnNcIjtcblxuaW1wb3J0IHsgY29tYmluZWRDdXN0b21HcmFtbWFyRnJvbU5vdGhpbmcgfSBmcm9tIFwiLi9jdXN0b21HcmFtbWFyXCI7XG5pbXBvcnQgeyBURVJNX1JVTEVfTkFNRSwgRlJBTUVfUlVMRV9OQU1FLCBTVEFURU1FTlRfUlVMRV9OQU1FIH0gZnJvbSBcIi4uL3J1bGVOYW1lc1wiO1xuaW1wb3J0IHsgdGVybVRva2Vuc0Zyb21UZXJtU3RyaW5nLCBmcmFtZVRva2Vuc0Zyb21GcmFtZVN0cmluZywgc3RhdGVtZW50VG9rZW5zRnJvbVN0YXRlbWVudFN0cmluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvdG9rZW5zXCI7XG5cbmNvbnN0IHsgZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIH0gPSBwYXJzZXJzVXRpbGl0aWVzO1xuXG5jb25zdCBjb21iaW5lZEN1c3RvbUdyYW1tYXIgPSBjb21iaW5lZEN1c3RvbUdyYW1tYXJGcm9tTm90aGluZygpLFxuICAgICAgZmxvcmVuY2VQYXJzZXIgPSBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIoY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRlcm1Ob2RlRnJvbVRlcm1TdHJpbmcodGVybVN0cmluZywgbGV4ZXIsIHBhcnNlcikge1xuICBjb25zdCB0ZXJtVG9rZW5zID0gdGVybVRva2Vuc0Zyb21UZXJtU3RyaW5nKHRlcm1TdHJpbmcsIGxleGVyKSxcbiAgICAgICAgdGVybU5vZGUgPSB0ZXJtTm9kZUZyb21UZXJtVG9rZW5zKHRlcm1Ub2tlbnMsIHBhcnNlcik7XG5cbiAgcmV0dXJuIHRlcm1Ob2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJhbWVOb2RlRnJvbUZyYW1lU3RyaW5nKGZyYW1lU3RyaW5nLCBsZXhlciwgcGFyc2VyKSB7XG4gIGNvbnN0IGZyYW1lVG9rZW5zID0gZnJhbWVUb2tlbnNGcm9tRnJhbWVTdHJpbmcoZnJhbWVTdHJpbmcsIGxleGVyKSxcbiAgICAgICAgZnJhbWVOb2RlID0gZnJhbWVOb2RlRnJvbUZyYW1lVG9rZW5zKGZyYW1lVG9rZW5zLCBwYXJzZXIpO1xuXG4gIHJldHVybiBmcmFtZU5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZW1lbnROb2RlRnJvbVN0YXRlbWVudFN0cmluZyhzdGF0ZW1lbnRTdHJpbmcsIGxleGVyLCBwYXJzZXIpIHtcbiAgY29uc3Qgc3RhdGVtZW50VG9rZW5zID0gc3RhdGVtZW50VG9rZW5zRnJvbVN0YXRlbWVudFN0cmluZyhzdGF0ZW1lbnRTdHJpbmcsIGxleGVyKSxcbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudE5vZGVGcm9tU3RhdGVtZW50VG9rZW5zKHN0YXRlbWVudFRva2VucywgcGFyc2VyKTtcblxuICByZXR1cm4gc3RhdGVtZW50Tm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlcm1Ob2RlRnJvbVRlcm1Ub2tlbnModGVybVRva2VucywgcGFyc2VyKSB7XG4gIGNvbnN0IHRva2VucyA9IHRlcm1Ub2tlbnMsICAvLy9cbiAgICAgICAgcnVsZU5hbWUgPSBURVJNX1JVTEVfTkFNRSxcbiAgICAgICAgdGVybU5vZGUgPSBub2RlRnJvbVRva2Vuc1J1bGVOYW1lQW5kUGFyc2VyKHRva2VucywgcnVsZU5hbWUsIHBhcnNlcik7XG5cbiAgcmV0dXJuIHRlcm1Ob2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJhbWVOb2RlRnJvbUZyYW1lVG9rZW5zKGZyYW1lVG9rZW5zLCBwYXJzZXIpIHtcbiAgY29uc3QgdG9rZW5zID0gZnJhbWVUb2tlbnMsICAvLy9cbiAgICAgICAgcnVsZU5hbWUgPSBGUkFNRV9SVUxFX05BTUUsXG4gICAgICAgIGZyYW1lTm9kZSA9IG5vZGVGcm9tVG9rZW5zUnVsZU5hbWVBbmRQYXJzZXIodG9rZW5zLCBydWxlTmFtZSwgcGFyc2VyKTtcblxuICByZXR1cm4gZnJhbWVOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVtZW50Tm9kZUZyb21TdGF0ZW1lbnRUb2tlbnMoc3RhdGVtZW50VG9rZW5zLCBwYXJzZXIpIHtcbiAgY29uc3QgdG9rZW5zID0gc3RhdGVtZW50VG9rZW5zLCAgLy8vXG4gICAgICAgIHJ1bGVOYW1lID0gU1RBVEVNRU5UX1JVTEVfTkFNRSxcbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IG5vZGVGcm9tVG9rZW5zUnVsZU5hbWVBbmRQYXJzZXIodG9rZW5zLCBydWxlTmFtZSwgcGFyc2VyKTtcblxuICByZXR1cm4gc3RhdGVtZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gbm9kZUZyb21Ub2tlbnNSdWxlTmFtZUFuZFBhcnNlcih0b2tlbnMsIHJ1bGVOYW1lLCBwYXJzZXIgPSBmbG9yZW5jZVBhcnNlcikge1xuICBjb25zdCBydWxlTWFwID0gcGFyc2VyLmdldFJ1bGVNYXAoKSxcbiAgICAgICAgcnVsZSA9IHJ1bGVNYXBbcnVsZU5hbWVdLFxuICAgICAgICBub2RlID0gcGFyc2VyLnBhcnNlKHRva2VucywgcnVsZSk7XG5cbiAgcmV0dXJuIG5vZGU7XG59XG4iXSwibmFtZXMiOlsiZnJhbWVOb2RlRnJvbUZyYW1lU3RyaW5nIiwiZnJhbWVOb2RlRnJvbUZyYW1lVG9rZW5zIiwic3RhdGVtZW50Tm9kZUZyb21TdGF0ZW1lbnRTdHJpbmciLCJzdGF0ZW1lbnROb2RlRnJvbVN0YXRlbWVudFRva2VucyIsInRlcm1Ob2RlRnJvbVRlcm1TdHJpbmciLCJ0ZXJtTm9kZUZyb21UZXJtVG9rZW5zIiwiZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwicGFyc2Vyc1V0aWxpdGllcyIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hciIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hckZyb21Ob3RoaW5nIiwiZmxvcmVuY2VQYXJzZXIiLCJ0ZXJtU3RyaW5nIiwibGV4ZXIiLCJwYXJzZXIiLCJ0ZXJtVG9rZW5zIiwidGVybVRva2Vuc0Zyb21UZXJtU3RyaW5nIiwidGVybU5vZGUiLCJmcmFtZVN0cmluZyIsImZyYW1lVG9rZW5zIiwiZnJhbWVUb2tlbnNGcm9tRnJhbWVTdHJpbmciLCJmcmFtZU5vZGUiLCJzdGF0ZW1lbnRTdHJpbmciLCJzdGF0ZW1lbnRUb2tlbnMiLCJzdGF0ZW1lbnRUb2tlbnNGcm9tU3RhdGVtZW50U3RyaW5nIiwic3RhdGVtZW50Tm9kZSIsInRva2VucyIsInJ1bGVOYW1lIiwiVEVSTV9SVUxFX05BTUUiLCJub2RlRnJvbVRva2Vuc1J1bGVOYW1lQW5kUGFyc2VyIiwiRlJBTUVfUlVMRV9OQU1FIiwiU1RBVEVNRU5UX1JVTEVfTkFNRSIsInJ1bGVNYXAiLCJnZXRSdWxlTWFwIiwicnVsZSIsIm5vZGUiLCJwYXJzZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBb0JnQkEsd0JBQXdCO2VBQXhCQTs7SUFzQkFDLHdCQUF3QjtlQUF4QkE7O0lBZkFDLGdDQUFnQztlQUFoQ0E7O0lBdUJBQyxnQ0FBZ0M7ZUFBaENBOztJQXJDQUMsc0JBQXNCO2VBQXRCQTs7SUFxQkFDLHNCQUFzQjtlQUF0QkE7OzttQ0FoQ2lCOzZCQUVnQjt5QkFDb0I7c0JBQ29DO0FBRXpHLElBQU0sQUFBRUMsMENBQTRDQyxxQ0FBZ0IsQ0FBNUREO0FBRVIsSUFBTUUsd0JBQXdCQyxJQUFBQSwrQ0FBZ0MsS0FDeERDLGlCQUFpQkosd0NBQXdDRTtBQUV4RCxTQUFTSix1QkFBdUJPLFVBQVUsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQzlELElBQU1DLGFBQWFDLElBQUFBLGdDQUF3QixFQUFDSixZQUFZQyxRQUNsREksV0FBV1gsdUJBQXVCUyxZQUFZRDtJQUVwRCxPQUFPRztBQUNUO0FBRU8sU0FBU2hCLHlCQUF5QmlCLFdBQVcsRUFBRUwsS0FBSyxFQUFFQyxNQUFNO0lBQ2pFLElBQU1LLGNBQWNDLElBQUFBLGtDQUEwQixFQUFDRixhQUFhTCxRQUN0RFEsWUFBWW5CLHlCQUF5QmlCLGFBQWFMO0lBRXhELE9BQU9PO0FBQ1Q7QUFFTyxTQUFTbEIsaUNBQWlDbUIsZUFBZSxFQUFFVCxLQUFLLEVBQUVDLE1BQU07SUFDN0UsSUFBTVMsa0JBQWtCQyxJQUFBQSwwQ0FBa0MsRUFBQ0YsaUJBQWlCVCxRQUN0RVksZ0JBQWdCckIsaUNBQWlDbUIsaUJBQWlCVDtJQUV4RSxPQUFPVztBQUNUO0FBRU8sU0FBU25CLHVCQUF1QlMsVUFBVSxFQUFFRCxNQUFNO0lBQ3ZELElBQU1ZLFNBQVNYLFlBQ1RZLFdBQVdDLHlCQUFjLEVBQ3pCWCxXQUFXWSxnQ0FBZ0NILFFBQVFDLFVBQVViO0lBRW5FLE9BQU9HO0FBQ1Q7QUFFTyxTQUFTZix5QkFBeUJpQixXQUFXLEVBQUVMLE1BQU07SUFDMUQsSUFBTVksU0FBU1AsYUFDVFEsV0FBV0csMEJBQWUsRUFDMUJULFlBQVlRLGdDQUFnQ0gsUUFBUUMsVUFBVWI7SUFFcEUsT0FBT087QUFDVDtBQUVPLFNBQVNqQixpQ0FBaUNtQixlQUFlLEVBQUVULE1BQU07SUFDdEUsSUFBTVksU0FBU0gsaUJBQ1RJLFdBQVdJLDhCQUFtQixFQUM5Qk4sZ0JBQWdCSSxnQ0FBZ0NILFFBQVFDLFVBQVViO0lBRXhFLE9BQU9XO0FBQ1Q7QUFFQSxTQUFTSSxnQ0FBZ0NILE1BQU0sRUFBRUMsUUFBUTtRQUFFYixTQUFBQSxpRUFBU0g7SUFDbEUsSUFBTXFCLFVBQVVsQixPQUFPbUIsVUFBVSxJQUMzQkMsT0FBT0YsT0FBTyxDQUFDTCxTQUFTLEVBQ3hCUSxPQUFPckIsT0FBT3NCLEtBQUssQ0FBQ1YsUUFBUVE7SUFFbEMsT0FBT0M7QUFDVCJ9