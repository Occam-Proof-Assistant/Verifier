"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    nodeAsString: function() {
        return nodeAsString;
    },
    nodesAsString: function() {
        return nodesAsString;
    },
    termNodeFromTermString: function() {
        return termNodeFromTermString;
    },
    labelNodeFromLabelString: function() {
        return labelNodeFromLabelString;
    },
    statementNodeFromStatementString: function() {
        return statementNodeFromStatementString;
    },
    metastatementNodeFromMetastatementString: function() {
        return metastatementNodeFromMetastatementString;
    },
    unqualifiedStatementNodeFromUnqualifiedStatementString: function() {
        return unqualifiedStatementNodeFromUnqualifiedStatementString;
    },
    indicativeConditionalNodeFromIndicativeConditionalString: function() {
        return indicativeConditionalNodeFromIndicativeConditionalString;
    }
});
var _constants = require("../constants");
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
var statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement"), metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement");
function nodeAsString(node) {
    var string = null;
    if (node !== null) {
        var nodeTerminalNode = node.isTerminalNode();
        if (nodeTerminalNode) {
            var terminalNode = node, content = terminalNode.getContent();
            string = content; ///
        } else {
            var nonTerminalNode = node, childNodes = nonTerminalNode.getChildNodes();
            childNodes.forEach(function(childNode) {
                var nodeString = nodeAsString(childNode);
                string = string === null ? nodeString : "".concat(string).concat(nodeString);
            });
        }
    }
    return string;
}
function nodesAsString(nodes) {
    var string = nodes.reduce(function(string, node) {
        var nodeString = nodeAsString(node);
        if (string === null) {
            string = nodeString; ///
        } else {
            string = "".concat(string).concat(_constants.COMMA).concat(nodeString);
        }
        return string;
    }, null);
    return string;
}
function termNodeFromTermString(termString, releaseContext) {
    var ruleName = _ruleNames.TERM_RULE_NAME, content = termString, node = releaseContext.nodeFromContentAndRuleName(content, ruleName), termNode = node; ///
    return termNode;
}
function labelNodeFromLabelString(labelString, releaseContext) {
    var content = labelString, ruleName = _ruleNames.LABEL_RULE_NAME, node = releaseContext.nodeFromContentAndRuleName(content, ruleName), labelNode = node; ///
    return labelNode;
}
function statementNodeFromStatementString(statementString, releaseContext) {
    var ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, content = "".concat(statementString, "\n"), node = releaseContext.nodeFromContentAndRuleName(content, ruleName), unqualifiedStatementNode = node, statementNode = statementNodeQuery(unqualifiedStatementNode);
    return statementNode;
}
function metastatementNodeFromMetastatementString(metastatementString, releaseContext) {
    var ruleName = _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME, content = "".concat(metastatementString, "\n"), node = releaseContext.nodeFromContentAndRuleName(content, ruleName), unqualifiedMetastatementNode = node, metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode);
    return metastatementNode;
}
function unqualifiedStatementNodeFromUnqualifiedStatementString(unqualifiedStatementString, releaseContext) {
    var ruleName = _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME, content = unqualifiedStatementString, node = releaseContext.nodeFromContentAndRuleName(content, ruleName), unqualifiedStatementNode = node; ///
    return unqualifiedStatementNode;
}
function indicativeConditionalNodeFromIndicativeConditionalString(indicativeConditionalString, releaseContext) {
    var ruleName = _ruleNames.INDICATIVE_CONDITIONAL_RULE_NAME, content = indicativeConditionalString, node = releaseContext.nodeFromContentAndRuleName(content, ruleName), indicativeConditionalNode = node; ///
    return indicativeConditionalNode;
}

//# sourceMappingURL=data:application/json;base64,