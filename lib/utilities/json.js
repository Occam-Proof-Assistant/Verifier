"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _necessary = require("necessary");
var _constants = require("../constants");
var _jsonTypes = require("../jsonTypes");
var _versionChanges = require("../versionChanges");
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
var first = _necessary.arrayUtilities.first;
function compareJSON(jsonA, jsonB) {
    var result = _versionChanges.BREAKING_VERSION_CHANGE;
    var jsonAType = typeOf(jsonA), jsonBType = typeOf(jsonB);
    if (jsonAType === jsonBType) {
        var jsonType = jsonAType; ///
        switch(jsonType){
            case _jsonTypes.ARRAY_JSON_TYPE:
                {
                    var arrayA = jsonA, arrayB = jsonB; ///
                    result = compareArrays(arrayA, arrayB);
                    break;
                }
            case _jsonTypes.OBJECT_JSON_TYPE:
                {
                    var objectA = jsonA, objectB = jsonB; ///
                    result = compareObjects(objectA, objectB);
                    break;
                }
            case _jsonTypes.PRIMITIVE_JSON_TYPE:
                {
                    var primitiveA = jsonA, primitiveB = jsonB; ///
                    result = comparePrimitives(primitiveA, primitiveB);
                    break;
                }
        }
    }
    return result;
}
module.exports = {
    compareJSON: compareJSON
};
function compareArrays(arrayA, arrayB) {
    var result;
    var arrayALength = arrayA.length, arrayBLength = arrayB.length;
    if (arrayALength === 0) {
        if (arrayBLength === 0) {
            result = _versionChanges.COSMETIC_VERSION_CHANGE;
        } else {
            result = _versionChanges.ADDITIVE_VERSION_CHANGE;
        }
    } else {
        if (arrayBLength === 0) {
            result = _versionChanges.BREAKING_VERSION_CHANGE;
        } else {
            var firstElementA = first(arrayA), elementA = firstElementA, elementB = arrayB.find(function(elementB) {
                var jsonA = elementA, jsonB = elementB, result = compareJSON(jsonA, jsonB);
                if (result === _versionChanges.COSMETIC_VERSION_CHANGE) {
                    return true;
                }
            }) || null;
            if (elementB !== null) {
                arrayA = deleteElement(arrayA, elementA);
                arrayB = deleteElement(arrayB, elementB);
                result = compareArrays(arrayA, arrayB);
            } else {
                result = _versionChanges.BREAKING_VERSION_CHANGE;
            }
        }
    }
    return result;
}
function compareObjects(objectA, objectB) {
    var result;
    var keysA = Object.keys(objectA), keysB = Object.keys(objectB), keysALength = keysA.length, keysBLength = keysB.length;
    if (keysALength === 0) {
        if (keysBLength === 0) {
            result = _versionChanges.COSMETIC_VERSION_CHANGE;
        } else {
            result = _versionChanges.ADDITIVE_VERSION_CHANGE;
        }
    } else {
        if (keysBLength === 0) {
            result = _versionChanges.BREAKING_VERSION_CHANGE;
        } else {
            var firstKeyA = first(keysA), keyA = firstKeyA, keyB = keysB.find(function(keyB, index) {
                if (keyA === keyB) {
                    var valueA = objectA[keyA], valueB = objectB[keyB], jsonA = valueA, jsonB = valueB, result = compareJSON(jsonA, jsonB);
                    if (result === _versionChanges.COSMETIC_VERSION_CHANGE) {
                        return true;
                    }
                }
            }) || null;
            if (keyB !== null) {
                objectA = deleteKey(objectA, keyA);
                objectB = deleteKey(objectB, keyB);
                result = compareObjects(objectA, objectB);
            } else {
                result = _versionChanges.BREAKING_VERSION_CHANGE;
            }
        }
    }
    return result;
}
function comparePrimitives(primitiveA, primitiveB) {
    var result = _versionChanges.BREAKING_VERSION_CHANGE;
    if (primitiveA === primitiveB) {
        result = _versionChanges.COSMETIC_VERSION_CHANGE;
    }
    return result;
}
function typeOf(json) {
    var type;
    var _null = isNull(json), array = isArray(json), object = isObject(json), primitive = isPrimitive(json);
    if (_null) {
        type = _jsonTypes.NULL_JSON_TYPE;
    }
    if (array) {
        type = _jsonTypes.ARRAY_JSON_TYPE;
    }
    if (object) {
        type = _jsonTypes.OBJECT_JSON_TYPE;
    }
    if (primitive) {
        type = _jsonTypes.PRIMITIVE_JSON_TYPE;
    }
    return type;
}
function isNull(json) {
    var _null = json === null;
    return _null;
}
function isArray(json) {
    var array = Array.isArray(json);
    return array;
}
function isObject(json) {
    var array = isArray(json), primitive = isPrimitive(json), object = !array && !primitive;
    return object;
}
function isString(json) {
    var string = (typeof json === "undefined" ? "undefined" : _typeof(json)) === _constants.STRING;
    return string;
}
function isNumber(json) {
    var number = (typeof json === "undefined" ? "undefined" : _typeof(json)) === _constants.NUMBER;
    return number;
}
function isBoolean(json) {
    var boolean = (typeof json === "undefined" ? "undefined" : _typeof(json)) === _constants.BOOLEAN;
    return boolean;
}
function isPrimitive(json) {
    var _null = isNull(json), string = isString(json), number = isNumber(json), boolean = isBoolean(json), primitive = _null || string || number || boolean;
    return primitive;
}
function deleteElement(array, element) {
    var deletedElement = element; ///
    array = array.reduce(function(array, element) {
        if (element !== deletedElement) {
            array.push(element);
        }
        return array;
    }, []);
    return array;
}
function deleteKey(object, key) {
    var deletedKey = key, keys = Object.keys(object), values = Object.values(object);
    object = keys.reduce(function(object, key, index) {
        if (key !== deletedKey) {
            var value = values[index];
            object[key] = value;
        }
        return object;
    }, {});
    return object;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvanNvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IFNUUklORywgTlVNQkVSLCBCT09MRUFOIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTlVMTF9KU09OX1RZUEUsIEFSUkFZX0pTT05fVFlQRSwgT0JKRUNUX0pTT05fVFlQRSwgUFJJTUlUSVZFX0pTT05fVFlQRSB9IGZyb20gXCIuLi9qc29uVHlwZXNcIjtcbmltcG9ydCB7IEJSRUFLSU5HX1ZFUlNJT05fQ0hBTkdFLCBBRERJVElWRV9WRVJTSU9OX0NIQU5HRSwgQ09TTUVUSUNfVkVSU0lPTl9DSEFOR0UgfSBmcm9tIFwiLi4vdmVyc2lvbkNoYW5nZXNcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIGNvbXBhcmVKU09OKGpzb25BLCBqc29uQikge1xuICBsZXQgcmVzdWx0ID0gQlJFQUtJTkdfVkVSU0lPTl9DSEFOR0U7XG5cbiAgY29uc3QganNvbkFUeXBlID0gdHlwZU9mKGpzb25BKSxcbiAgICAgICAganNvbkJUeXBlID0gdHlwZU9mKGpzb25CKTtcblxuICBpZiAoanNvbkFUeXBlID09PSBqc29uQlR5cGUpIHtcbiAgICBjb25zdCBqc29uVHlwZSA9IGpzb25BVHlwZTsgLy8vXG5cbiAgICBzd2l0Y2ggKGpzb25UeXBlKSB7XG4gICAgICBjYXNlIEFSUkFZX0pTT05fVFlQRToge1xuICAgICAgICBjb25zdCBhcnJheUEgPSBqc29uQSwgLy8vXG4gICAgICAgICAgICAgIGFycmF5QiA9IGpzb25COyAvLy9cblxuICAgICAgICByZXN1bHQgPSBjb21wYXJlQXJyYXlzKGFycmF5QSwgYXJyYXlCKTtcblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FzZSBPQkpFQ1RfSlNPTl9UWVBFOiB7XG4gICAgICAgIGNvbnN0IG9iamVjdEEgPSBqc29uQSwgLy8vXG4gICAgICAgICAgICAgIG9iamVjdEIgPSBqc29uQjsgLy8vXG5cbiAgICAgICAgcmVzdWx0ID0gY29tcGFyZU9iamVjdHMob2JqZWN0QSwgb2JqZWN0Qik7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgUFJJTUlUSVZFX0pTT05fVFlQRToge1xuICAgICAgICBjb25zdCBwcmltaXRpdmVBID0ganNvbkEsIC8vL1xuICAgICAgICAgICAgICBwcmltaXRpdmVCID0ganNvbkI7IC8vL1xuXG4gICAgICAgIHJlc3VsdCA9IGNvbXBhcmVQcmltaXRpdmVzKHByaW1pdGl2ZUEsIHByaW1pdGl2ZUIpO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wYXJlSlNPTlxufTtcblxuZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheUEsIGFycmF5Qikge1xuICBsZXQgcmVzdWx0O1xuXG4gIGNvbnN0IGFycmF5QUxlbmd0aCA9IGFycmF5QS5sZW5ndGgsXG4gICAgICAgIGFycmF5Qkxlbmd0aCA9IGFycmF5Qi5sZW5ndGg7XG5cbiAgaWYgKGFycmF5QUxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChhcnJheUJMZW5ndGggPT09IDApIHtcbiAgICAgIHJlc3VsdCA9IENPU01FVElDX1ZFUlNJT05fQ0hBTkdFO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBBRERJVElWRV9WRVJTSU9OX0NIQU5HRTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGFycmF5Qkxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzdWx0ID0gQlJFQUtJTkdfVkVSU0lPTl9DSEFOR0U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZpcnN0RWxlbWVudEEgPSBmaXJzdChhcnJheUEpLCAgLy8vXG4gICAgICAgICAgICBlbGVtZW50QSA9IGZpcnN0RWxlbWVudEEsIC8vL1xuICAgICAgICAgICAgZWxlbWVudEIgPSBhcnJheUIuZmluZCgoZWxlbWVudEIpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QganNvbkEgPSBlbGVtZW50QSwgLy8vXG4gICAgICAgICAgICAgICAgICAgIGpzb25CID0gZWxlbWVudEIsIC8vL1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb21wYXJlSlNPTihqc29uQSwganNvbkIpO1xuXG4gICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IENPU01FVElDX1ZFUlNJT05fQ0hBTkdFKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pIHx8IG51bGw7XG5cbiAgICAgIGlmIChlbGVtZW50QiAhPT0gbnVsbCkge1xuICAgICAgICBhcnJheUEgPSBkZWxldGVFbGVtZW50KGFycmF5QSwgZWxlbWVudEEpO1xuXG4gICAgICAgIGFycmF5QiA9IGRlbGV0ZUVsZW1lbnQoYXJyYXlCLCBlbGVtZW50Qik7XG5cbiAgICAgICAgcmVzdWx0ID0gY29tcGFyZUFycmF5cyhhcnJheUEsIGFycmF5Qik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBCUkVBS0lOR19WRVJTSU9OX0NIQU5HRTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjb21wYXJlT2JqZWN0cyhvYmplY3RBLCBvYmplY3RCKSB7XG4gIGxldCByZXN1bHQ7XG5cbiAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhvYmplY3RBKSxcbiAgICAgICAga2V5c0IgPSBPYmplY3Qua2V5cyhvYmplY3RCKSxcbiAgICAgICAga2V5c0FMZW5ndGggPSBrZXlzQS5sZW5ndGgsXG4gICAgICAgIGtleXNCTGVuZ3RoID0ga2V5c0IubGVuZ3RoO1xuXG4gIGlmIChrZXlzQUxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChrZXlzQkxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzdWx0ID0gQ09TTUVUSUNfVkVSU0lPTl9DSEFOR0U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IEFERElUSVZFX1ZFUlNJT05fQ0hBTkdFO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5c0JMZW5ndGggPT09IDApIHtcbiAgICAgIHJlc3VsdCA9IEJSRUFLSU5HX1ZFUlNJT05fQ0hBTkdFO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmaXJzdEtleUEgPSBmaXJzdChrZXlzQSksICAvLy9cbiAgICAgICAgICAgIGtleUEgPSBmaXJzdEtleUEsIC8vL1xuICAgICAgICAgICAga2V5QiA9IGtleXNCLmZpbmQoKGtleUIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChrZXlBID09PSBrZXlCKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVBID0gb2JqZWN0QVtrZXlBXSxcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUIgPSBvYmplY3RCW2tleUJdLFxuICAgICAgICAgICAgICAgICAgICAgIGpzb25BID0gdmFsdWVBLCAvLy9cbiAgICAgICAgICAgICAgICAgICAgICBqc29uQiA9IHZhbHVlQiwgLy8vXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcGFyZUpTT04oanNvbkEsIGpzb25CKTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IENPU01FVElDX1ZFUlNJT05fQ0hBTkdFKSB7ICAvLy9cbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkgfHwgbnVsbDtcblxuICAgICAgaWYgKGtleUIgIT09IG51bGwpIHtcbiAgICAgICAgb2JqZWN0QSA9IGRlbGV0ZUtleShvYmplY3RBLCBrZXlBKTtcblxuICAgICAgICBvYmplY3RCID0gZGVsZXRlS2V5KG9iamVjdEIsIGtleUIpO1xuXG4gICAgICAgIHJlc3VsdCA9IGNvbXBhcmVPYmplY3RzKG9iamVjdEEsIG9iamVjdEIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gQlJFQUtJTkdfVkVSU0lPTl9DSEFOR0U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY29tcGFyZVByaW1pdGl2ZXMocHJpbWl0aXZlQSwgcHJpbWl0aXZlQikge1xuICBsZXQgcmVzdWx0ID0gQlJFQUtJTkdfVkVSU0lPTl9DSEFOR0U7XG5cbiAgaWYgKHByaW1pdGl2ZUEgPT09IHByaW1pdGl2ZUIpIHtcbiAgICByZXN1bHQgPSBDT1NNRVRJQ19WRVJTSU9OX0NIQU5HRTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHR5cGVPZihqc29uKSB7XG4gIGxldCB0eXBlO1xuXG4gIGNvbnN0IF9udWxsID0gaXNOdWxsKGpzb24pLFxuICAgICAgICBhcnJheSA9IGlzQXJyYXkoanNvbiksXG4gICAgICAgIG9iamVjdCA9IGlzT2JqZWN0KGpzb24pLFxuICAgICAgICBwcmltaXRpdmUgPSBpc1ByaW1pdGl2ZShqc29uKTtcblxuICBpZiAoX251bGwpIHtcbiAgICB0eXBlID0gTlVMTF9KU09OX1RZUEU7XG4gIH1cblxuICBpZiAoYXJyYXkpIHtcbiAgICB0eXBlID0gQVJSQVlfSlNPTl9UWVBFO1xuICB9XG5cbiAgaWYgKG9iamVjdCkge1xuICAgIHR5cGUgPSBPQkpFQ1RfSlNPTl9UWVBFO1xuICB9XG5cbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHR5cGUgPSBQUklNSVRJVkVfSlNPTl9UWVBFO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChqc29uKSB7XG4gIGNvbnN0IF9udWxsID0gKGpzb24gPT09IG51bGwpO1xuXG4gIHJldHVybiBfbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNBcnJheShqc29uKSB7XG4gIGNvbnN0IGFycmF5ID0gQXJyYXkuaXNBcnJheShqc29uKTtcblxuICByZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGpzb24pIHtcbiAgY29uc3QgYXJyYXkgPSBpc0FycmF5KGpzb24pLFxuICAgICAgICBwcmltaXRpdmUgPSBpc1ByaW1pdGl2ZShqc29uKSxcbiAgICAgICAgb2JqZWN0ID0gKCFhcnJheSAmJiAhcHJpbWl0aXZlKTtcblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZyhqc29uKSB7XG4gIGNvbnN0IHN0cmluZyA9ICgodHlwZW9mIGpzb24pID09PSBTVFJJTkcpO1xuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGpzb24pIHtcbiAgY29uc3QgbnVtYmVyID0gKCh0eXBlb2YganNvbikgPT09IE5VTUJFUik7XG5cbiAgcmV0dXJuIG51bWJlcjtcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuKGpzb24pIHtcbiAgY29uc3QgYm9vbGVhbiA9ICgodHlwZW9mIGpzb24pID09PSBCT09MRUFOKTtcblxuICByZXR1cm4gYm9vbGVhbjtcbn1cblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoanNvbikge1xuICBjb25zdCBfbnVsbCA9IGlzTnVsbChqc29uKSxcbiAgICAgICAgc3RyaW5nID0gaXNTdHJpbmcoanNvbiksXG4gICAgICAgIG51bWJlciA9IGlzTnVtYmVyKGpzb24pLFxuICAgICAgICBib29sZWFuID0gaXNCb29sZWFuKGpzb24pLFxuICAgICAgICBwcmltaXRpdmUgPSAoX251bGwgfHwgc3RyaW5nIHx8IG51bWJlciB8fCBib29sZWFuKTtcblxuICByZXR1cm4gcHJpbWl0aXZlO1xufVxuXG5mdW5jdGlvbiBkZWxldGVFbGVtZW50KGFycmF5LCBlbGVtZW50KSB7XG4gIGNvbnN0IGRlbGV0ZWRFbGVtZW50ID0gZWxlbWVudDsgLy8vXG5cbiAgYXJyYXkgPSBhcnJheS5yZWR1Y2UoKGFycmF5LCBlbGVtZW50KSA9PiB7ICAvLy9cbiAgICBpZiAoZWxlbWVudCAhPT0gZGVsZXRlZEVsZW1lbnQpIHtcbiAgICAgIGFycmF5LnB1c2goZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBkZWxldGVLZXkob2JqZWN0LCBrZXkpIHtcbiAgY29uc3QgZGVsZXRlZEtleSA9IGtleSwgLy8vXG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpLFxuICAgICAgICB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKG9iamVjdCk7XG5cbiAgb2JqZWN0ID0ga2V5cy5yZWR1Y2UoKG9iamVjdCwga2V5LCBpbmRleCkgPT4geyAgLy8vXG4gICAgaWYgKGtleSAhPT0gZGVsZXRlZEtleSkge1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdO1xuXG4gICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gb2JqZWN0O1xufVxuIl0sIm5hbWVzIjpbImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJjb21wYXJlSlNPTiIsImpzb25BIiwianNvbkIiLCJyZXN1bHQiLCJCUkVBS0lOR19WRVJTSU9OX0NIQU5HRSIsImpzb25BVHlwZSIsInR5cGVPZiIsImpzb25CVHlwZSIsImpzb25UeXBlIiwiQVJSQVlfSlNPTl9UWVBFIiwiYXJyYXlBIiwiYXJyYXlCIiwiY29tcGFyZUFycmF5cyIsIk9CSkVDVF9KU09OX1RZUEUiLCJvYmplY3RBIiwib2JqZWN0QiIsImNvbXBhcmVPYmplY3RzIiwiUFJJTUlUSVZFX0pTT05fVFlQRSIsInByaW1pdGl2ZUEiLCJwcmltaXRpdmVCIiwiY29tcGFyZVByaW1pdGl2ZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJyYXlBTGVuZ3RoIiwibGVuZ3RoIiwiYXJyYXlCTGVuZ3RoIiwiQ09TTUVUSUNfVkVSU0lPTl9DSEFOR0UiLCJBRERJVElWRV9WRVJTSU9OX0NIQU5HRSIsImZpcnN0RWxlbWVudEEiLCJlbGVtZW50QSIsImVsZW1lbnRCIiwiZmluZCIsImRlbGV0ZUVsZW1lbnQiLCJrZXlzQSIsIk9iamVjdCIsImtleXMiLCJrZXlzQiIsImtleXNBTGVuZ3RoIiwia2V5c0JMZW5ndGgiLCJmaXJzdEtleUEiLCJrZXlBIiwia2V5QiIsImluZGV4IiwidmFsdWVBIiwidmFsdWVCIiwiZGVsZXRlS2V5IiwianNvbiIsInR5cGUiLCJfbnVsbCIsImlzTnVsbCIsImFycmF5IiwiaXNBcnJheSIsIm9iamVjdCIsImlzT2JqZWN0IiwicHJpbWl0aXZlIiwiaXNQcmltaXRpdmUiLCJOVUxMX0pTT05fVFlQRSIsIkFycmF5IiwiaXNTdHJpbmciLCJzdHJpbmciLCJTVFJJTkciLCJpc051bWJlciIsIm51bWJlciIsIk5VTUJFUiIsImlzQm9vbGVhbiIsImJvb2xlYW4iLCJCT09MRUFOIiwiZWxlbWVudCIsImRlbGV0ZWRFbGVtZW50IiwicmVkdWNlIiwicHVzaCIsImtleSIsImRlbGV0ZWRLZXkiLCJ2YWx1ZXMiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7eUJBRStCO3lCQUVTO3lCQUMrQzs4QkFDRzs7Ozs7QUFFMUYsSUFBTSxBQUFFQSxRQUFVQyx5QkFBYyxDQUF4QkQ7QUFFUixTQUFTRSxZQUFZQyxLQUFLLEVBQUVDLEtBQUssRUFBRTtJQUNqQyxJQUFJQyxTQUFTQyx1Q0FBdUI7SUFFcEMsSUFBTUMsWUFBWUMsT0FBT0wsUUFDbkJNLFlBQVlELE9BQU9KO0lBRXpCLElBQUlHLGNBQWNFLFdBQVc7UUFDM0IsSUFBTUMsV0FBV0gsV0FBVyxHQUFHO1FBRS9CLE9BQVFHO1lBQ04sS0FBS0MsMEJBQWU7Z0JBQUU7b0JBQ3BCLElBQU1DLFNBQVNULE9BQ1RVLFNBQVNULE9BQU8sR0FBRztvQkFFekJDLFNBQVNTLGNBQWNGLFFBQVFDO29CQUUvQixLQUFNO2dCQUNSO1lBRUEs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