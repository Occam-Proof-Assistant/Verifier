"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyTerm;
    }
});
var _main = require("necessary/lib/main");
var _termAsVariable = /*#__PURE__*/ _interopRequireDefault(require("../verify/termAsVariable"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _ruleNames = require("../ruleNames");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var log = _main.loggingUtilities.log;
var termNodeQuery = (0, _query.nodeQuery)("/argument/term!"), typeNodeQuery = (0, _query.nodeQuery)("/argument/type!");
function verifyTerm(termNode, types, values, context) {
    var termVerified = false;
    var names = [], termVerifiedAsVariable = (0, _termAsVariable.default)(termNode, types, names, values, context);
    if (termVerifiedAsVariable) {
        termVerified = true;
    } else {
        var constructors = context.getConstructors(), constructor = constructors.find(function(constructor) {
            var termVerifiedAgainstConstructor = verifyTermAgainstConstructor(termNode, constructor, context);
            if (termVerifiedAgainstConstructor) {
                return true;
            }
        }) || null;
        if (constructor !== null) {
            var type = constructor.getType(), value = termNode; ///
            types.push(type);
            values.push(value);
            termVerified = true;
        }
    }
    return termVerified;
}
function verifyTermAgainstConstructor(termNode, constructor, context) {
    var constructorTermNode = constructor.getTermNode(), node = termNode, constructorNode = constructorTermNode, nodeVerified = verifyNode(node, constructorNode, context), termVerifiedAgainstConstructor = nodeVerified; ///
    return termVerifiedAgainstConstructor;
}
function verifyNode(node, constructorNode, context) {
    var nodeVerified;
    var nodeTerminalNode = node.isTerminalNode(), constructorNodeTerminalNode = constructorNode.isTerminalNode();
    if (nodeTerminalNode === constructorNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, constructorTerminalNode = constructorNode, terminalNodeVerified = verifyTerminalNode(terminalNode, constructorTerminalNode, context);
            nodeVerified = terminalNodeVerified; ///
        } else {
            var nonTerminalNode = node, constructorNonTerminalNode = constructorNode, nonTerminalNodeVerified = verifyNonTerminalNode(nonTerminalNode, constructorNonTerminalNode, context);
            nodeVerified = nonTerminalNodeVerified; ///
        }
    }
    return nodeVerified;
}
function verifyChildNodes(childNodes, constructorChildNodes, context) {
    var childNodesVerified = false;
    var childNodesLength = childNodes.length, constructorChildNodesLength = constructorChildNodes.length;
    if (childNodesLength === constructorChildNodesLength) {
        childNodesVerified = childNodes.every(function(childNode, index) {
            var constructorChildNode = constructorChildNodes[index], node = childNode, constructorNode = constructorChildNode, nodeVerified = verifyNode(node, constructorNode, context);
            if (nodeVerified) {
                return true;
            }
        });
    }
    return childNodesVerified;
}
function verifyTerminalNode(terminalNode, constructorTerminalNode, context) {
    var terminalNodeVerified = false;
    var matches = terminalNode.match(constructorTerminalNode);
    if (matches) {
        terminalNodeVerified = true;
    }
    return terminalNodeVerified;
}
function verifyNonTerminalNode(nonTerminalNode, constructorNonTerminalNode, context) {
    var nonTerminalNodeVerified = false;
    var ruleName = nonTerminalNode.getRuleName(), constructorRuleName = constructorNonTerminalNode.getRuleName();
    if (ruleName === constructorRuleName) {
        switch(ruleName){
            case _ruleNames.ARGUMENT_RULE_NAME:
                {
                    var argumentNode = nonTerminalNode, constructorArgumentNode = constructorNonTerminalNode, argumentNodeVerified = verifyArgumentNode(argumentNode, constructorArgumentNode, context);
                    nonTerminalNodeVerified = argumentNodeVerified; ///
                    break;
                }
            default:
                {
                    var childNodes = nonTerminalNode.getChildNodes(), constructorChildNodes = constructorNonTerminalNode.getChildNodes(), childNodesVerified = verifyChildNodes(childNodes, constructorChildNodes, context);
                    nonTerminalNodeVerified = childNodesVerified; ///
                    break;
                }
        }
    }
    return nonTerminalNodeVerified;
}
function verifyArgumentNode(argumentNode, constructorArgumentNode, context) {
    var argumentNodeVerified = false;
    var termNode = termNodeQuery(argumentNode);
    if (termNode === null) {
        var argumentString = (0, _string.nodeAsString)(argumentNode);
        log.error("The ".concat(argumentString, " argument should be a term, not a type"));
    } else {
        var types = [], values = [], termVerified = verifyTerm(termNode, types, values, context);
        if (termVerified) {
            var firstType = (0, _array.first)(types), termType = firstType, typeNode = typeNodeQuery(constructorArgumentNode), typeName = (0, _query.typeNameFromTypeNode)(typeNode), type = context.findTypeByTypeName(typeName), termTypeEqualToOrSubTypeOfType = termType.isEqualToOrSubTypeOf(type);
            if (termTypeEqualToOrSubTypeOfType) {
                argumentNodeVerified = true;
            }
        }
    }
    return argumentNodeVerified;
}

//# sourceMappingURL=data:application/json;base64,