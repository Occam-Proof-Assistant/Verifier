"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyRule;
    }
});
var _rule = /*#__PURE__*/ _interopRequireDefault(require("../rule"));
var _labels = /*#__PURE__*/ _interopRequireDefault(require("../verify/labels"));
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../verify/metaproof"));
var _metaproof1 = /*#__PURE__*/ _interopRequireDefault(require("../context/metaproof"));
var _conditinalInference = /*#__PURE__*/ _interopRequireDefault(require("../verify/conditinalInference"));
var _unconditionalInference = /*#__PURE__*/ _interopRequireDefault(require("../verify/unconditionalInference"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var labelNodesQuery = (0, _query.nodesQuery)("/rule/label"), metaproofNodeQuery = (0, _query.nodeQuery)("/rule/metaproof!"), conditionalInferenceNodeQuery = (0, _query.nodeQuery)("/rule/conditionalInference!"), unconditionalInferenceNodeQuery = (0, _query.nodeQuery)("/rule/unconditionalInference!");
function verifyRule(ruleNode, context) {
    var ruleVerified = false;
    context.begin(ruleNode);
    var labelNodes = labelNodesQuery(ruleNode), labelsString = (0, _string.nodesAsString)(labelNodes), metaproofContext = _metaproof1.default.fromContext(context);
    context = metaproofContext; ///
    context.debug("Verifying the '".concat(labelsString, "' rule..."));
    var labels = [], labelsVerified = (0, _labels.default)(labelNodes, labels, context);
    if (labelsVerified) {
        var premises = [], conclusions = [], conditionalInferenceNode = conditionalInferenceNodeQuery(ruleNode), unconditionalInferenceNode = unconditionalInferenceNodeQuery(ruleNode);
        var conditionalInferenceVerified = false, unconditionalInferenceVerified = false;
        if (conditionalInferenceNode !== null) {
            conditionalInferenceVerified = (0, _conditinalInference.default)(conditionalInferenceNode, premises, conclusions, context);
        }
        if (unconditionalInferenceNode !== null) {
            unconditionalInferenceVerified = (0, _unconditionalInference.default)(unconditionalInferenceNode, premises, conclusions, context);
        }
        if (conditionalInferenceVerified || unconditionalInferenceVerified) {
            var metaproofNode = metaproofNodeQuery(ruleNode), firstConclusion = (0, _array.first)(conclusions), conclusion = firstConclusion; ///
            var metaproofVerified = true;
            if (metaproofNode !== null) {
                metaproofVerified = (0, _metaproof.default)(metaproofNode, conclusion, context);
            }
            if (metaproofVerified) {
                var rule = _rule.default.fromPremisesConclusionAndLabels(premises, conclusion, labels);
                context.addRule(rule);
                ruleVerified = true;
            }
        }
    }
    ruleVerified ? context.complete(ruleNode) : context.complete(ruleNode);
    return ruleVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcnVsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFJ1bGUgZnJvbSBcIi4uL3J1bGVcIjtcbmltcG9ydCB2ZXJpZnlMYWJlbHMgZnJvbSBcIi4uL3ZlcmlmeS9sYWJlbHNcIjtcbmltcG9ydCB2ZXJpZnlNZXRhcHJvb2YgZnJvbSBcIi4uL3ZlcmlmeS9tZXRhcHJvb2ZcIjtcbmltcG9ydCBNZXRhcHJvb2ZDb250ZXh0IGZyb20gXCIuLi9jb250ZXh0L21ldGFwcm9vZlwiO1xuaW1wb3J0IHZlcmlmeUNvbmRpdGlvbmFsSW5mZXJlbmNlIGZyb20gXCIuLi92ZXJpZnkvY29uZGl0aW5hbEluZmVyZW5jZVwiO1xuaW1wb3J0IHZlcmlmeVVuY29uZGl0aW9uYWxJbmZlcmVuY2UgZnJvbSBcIi4uL3ZlcmlmeS91bmNvbmRpdGlvbmFsSW5mZXJlbmNlXCI7XG5cbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgbm9kZXNBc1N0cmluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvc3RyaW5nXCI7XG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGxhYmVsTm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvcnVsZS9sYWJlbFwiKSxcbiAgICAgIG1ldGFwcm9vZk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9ydWxlL21ldGFwcm9vZiFcIiksXG4gICAgICBjb25kaXRpb25hbEluZmVyZW5jZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9ydWxlL2NvbmRpdGlvbmFsSW5mZXJlbmNlIVwiKSxcbiAgICAgIHVuY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvcnVsZS91bmNvbmRpdGlvbmFsSW5mZXJlbmNlIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5UnVsZShydWxlTm9kZSwgY29udGV4dCkge1xuICBsZXQgcnVsZVZlcmlmaWVkID0gZmFsc2U7XG5cbiAgY29udGV4dC5iZWdpbihydWxlTm9kZSk7XG5cbiAgY29uc3QgbGFiZWxOb2RlcyA9IGxhYmVsTm9kZXNRdWVyeShydWxlTm9kZSksXG4gICAgICAgIGxhYmVsc1N0cmluZyA9IG5vZGVzQXNTdHJpbmcobGFiZWxOb2RlcyksXG4gICAgICAgIG1ldGFwcm9vZkNvbnRleHQgPSBNZXRhcHJvb2ZDb250ZXh0LmZyb21Db250ZXh0KGNvbnRleHQpO1xuXG4gIGNvbnRleHQgPSBtZXRhcHJvb2ZDb250ZXh0OyAvLy9cblxuICBjb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICcke2xhYmVsc1N0cmluZ30nIHJ1bGUuLi5gKTtcblxuICBjb25zdCBsYWJlbHMgPSBbXSxcbiAgICAgICAgbGFiZWxzVmVyaWZpZWQgPSB2ZXJpZnlMYWJlbHMobGFiZWxOb2RlcywgbGFiZWxzLCBjb250ZXh0KTtcblxuICBpZiAobGFiZWxzVmVyaWZpZWQpIHtcbiAgICBjb25zdCBwcmVtaXNlcyA9IFtdLFxuICAgICAgICAgIGNvbmNsdXNpb25zID0gW10sXG4gICAgICAgICAgY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlID0gY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlUXVlcnkocnVsZU5vZGUpLFxuICAgICAgICAgIHVuY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlID0gdW5jb25kaXRpb25hbEluZmVyZW5jZU5vZGVRdWVyeShydWxlTm9kZSk7XG5cbiAgICBsZXQgY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCA9IGZhbHNlLFxuICAgICAgICB1bmNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgPSBmYWxzZTtcblxuICAgIGlmIChjb25kaXRpb25hbEluZmVyZW5jZU5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgPSB2ZXJpZnlDb25kaXRpb25hbEluZmVyZW5jZShjb25kaXRpb25hbEluZmVyZW5jZU5vZGUsIHByZW1pc2VzLCBjb25jbHVzaW9ucywgY29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKHVuY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlICE9PSBudWxsKSB7XG4gICAgICB1bmNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgPSB2ZXJpZnlVbmNvbmRpdGlvbmFsSW5mZXJlbmNlKHVuY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlLCBwcmVtaXNlcywgY29uY2x1c2lvbnMsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIGlmIChjb25kaXRpb25hbEluZmVyZW5jZVZlcmlmaWVkIHx8IHVuY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCkge1xuICAgICAgY29uc3QgbWV0YXByb29mTm9kZSA9IG1ldGFwcm9vZk5vZGVRdWVyeShydWxlTm9kZSksXG4gICAgICAgICAgICBmaXJzdENvbmNsdXNpb24gPSBmaXJzdChjb25jbHVzaW9ucyksXG4gICAgICAgICAgICBjb25jbHVzaW9uID0gZmlyc3RDb25jbHVzaW9uOyAvLy9cblxuICAgICAgbGV0IG1ldGFwcm9vZlZlcmlmaWVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG1ldGFwcm9vZk5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgbWV0YXByb29mVmVyaWZpZWQgPSB2ZXJpZnlNZXRhcHJvb2YobWV0YXByb29mTm9kZSwgY29uY2x1c2lvbiwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZXRhcHJvb2ZWZXJpZmllZCkge1xuICAgICAgICBjb25zdCBydWxlID0gUnVsZS5mcm9tUHJlbWlzZXNDb25jbHVzaW9uQW5kTGFiZWxzKHByZW1pc2VzLCBjb25jbHVzaW9uLCBsYWJlbHMpO1xuXG4gICAgICAgIGNvbnRleHQuYWRkUnVsZShydWxlKTtcblxuICAgICAgICBydWxlVmVyaWZpZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJ1bGVWZXJpZmllZCA/XG4gICAgY29udGV4dC5jb21wbGV0ZShydWxlTm9kZSkgOlxuICAgICAgY29udGV4dC5jb21wbGV0ZShydWxlTm9kZSk7XG5cbiAgcmV0dXJuIHJ1bGVWZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlSdWxlIiwibGFiZWxOb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsIm1ldGFwcm9vZk5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZVF1ZXJ5IiwidW5jb25kaXRpb25hbEluZmVyZW5jZU5vZGVRdWVyeSIsInJ1bGVOb2RlIiwiY29udGV4dCIsInJ1bGVWZXJpZmllZCIsImJlZ2luIiwibGFiZWxOb2RlcyIsImxhYmVsc1N0cmluZyIsIm5vZGVzQXNTdHJpbmciLCJtZXRhcHJvb2ZDb250ZXh0IiwiTWV0YXByb29mQ29udGV4dCIsImZyb21Db250ZXh0IiwiZGVidWciLCJsYWJlbHMiLCJsYWJlbHNWZXJpZmllZCIsInZlcmlmeUxhYmVscyIsInByZW1pc2VzIiwiY29uY2x1c2lvbnMiLCJjb25kaXRpb25hbEluZmVyZW5jZU5vZGUiLCJ1bmNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSIsImNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQiLCJ1bmNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQiLCJ2ZXJpZnlDb25kaXRpb25hbEluZmVyZW5jZSIsInZlcmlmeVVuY29uZGl0aW9uYWxJbmZlcmVuY2UiLCJtZXRhcHJvb2ZOb2RlIiwiZmlyc3RDb25jbHVzaW9uIiwiZmlyc3QiLCJjb25jbHVzaW9uIiwibWV0YXByb29mVmVyaWZpZWQiLCJ2ZXJpZnlNZXRhcHJvb2YiLCJydWxlIiwiUnVsZSIsImZyb21QcmVtaXNlc0NvbmNsdXNpb25BbmRMYWJlbHMiLCJhZGRSdWxlIiwiY29tcGxldGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWtCQTs7O2VBQXdCQTs7O3lEQWhCUDsyREFDUTs4REFDRzsrREFDQzt3RUFDVTsyRUFDRTtxQkFFbkI7c0JBQ1E7cUJBQ1E7Ozs7OztBQUV0QyxJQUFNQyxrQkFBa0JDLElBQUFBLGlCQUFVLEVBQUMsZ0JBQzdCQyxxQkFBcUJDLElBQUFBLGdCQUFTLEVBQUMscUJBQy9CQyxnQ0FBZ0NELElBQUFBLGdCQUFTLEVBQUMsZ0NBQzFDRSxrQ0FBa0NGLElBQUFBLGdCQUFTLEVBQUM7QUFFbkMsU0FBU0osV0FBV08sUUFBUSxFQUFFQyxPQUFPLEVBQUU7SUFDcEQsSUFBSUMsZUFBZSxLQUFLO0lBRXhCRCxRQUFRRSxLQUFLLENBQUNIO0lBRWQsSUFBTUksYUFBYVYsZ0JBQWdCTSxXQUM3QkssZUFBZUMsSUFBQUEscUJBQWEsRUFBQ0YsYUFDN0JHLG1CQUFtQkMsbUJBQWdCLENBQUNDLFdBQVcsQ0FBQ1I7SUFFdERBLFVBQVVNLGtCQUFrQixHQUFHO0lBRS9CTixRQUFRUyxLQUFLLENBQUMsQUFBQyxrQkFBOEIsT0FBYkwsY0FBYTtJQUU3QyxJQUFNTSxTQUFTLEVBQUUsRUFDWEMsaUJBQWlCQyxJQUFBQSxlQUFZLEVBQUNULFlBQVlPLFFBQVFWO0lBRXhELElBQUlXLGdCQUFnQjtRQUNsQixJQUFNRSxXQUFXLEVBQUUsRUFDYkMsY0FBYyxFQUFFLEVBQ2hCQywyQkFBMkJsQiw4QkFBOEJFLFdBQ3pEaUIsNkJBQTZCbEIsZ0NBQWdDQztRQUVuRSxJQUFJa0IsK0JBQStCLEtBQUssRUFDcENDLGlDQUFpQyxLQUFLO1FBRTFDLElBQUlILDZCQUE2QixJQUFJLEVBQUU7WUFDckNFLCtCQUErQkUsSUFBQUEsNEJBQTBCLEVBQUNKLDBCQUEwQkYsVUFBVUMsYUFBYWQ7UUFDN0csQ0FBQztRQUVELElBQUlnQiwrQkFBK0IsSUFBSSxFQUFFO1lBQ3ZDRSxpQ0FBaUNFLElBQUFBLCtCQUE0QixFQUFDSiw0QkFBNEJILFVBQVVDLGFBQWFkO1FBQ25ILENBQUM7UUFFRCxJQUFJaUIsZ0NBQWdDQyxnQ0FBZ0M7WUFDbEUsSUFBTUcsZ0JBQWdCMUIsbUJBQW1CSSxXQUNuQ3VCLGtCQUFrQkMsSUFBQUEsWUFBSyxFQUFDVCxjQUN4QlUsYUFBYUYsaUJBQWlCLEdBQUc7WUFFdkMsSUFBSUcsb0JBQW9CLElBQUk7WUFFNUIsSUFBSUosa0JBQWtCLElBQUksRUFBRTtnQkFDMUJJLG9CQUFvQkMsSUFBQUEsa0JBQWUsRUFBQ0wsZUFBZUcsWUFBWXhCO1lBQ2pFLENBQUM7WUFFRCxJQUFJeUIsbUJBQW1CO2dCQUNyQixJQUFNRSxPQUFPQyxhQUFJLENBQUNDLCtCQUErQixDQUFDaEIsVUFBVVcsWUFBWWQ7Z0JBRXhFVixRQUFROEIsT0FBTyxDQUFDSDtnQkFFaEIxQixlQUFlLElBQUk7WUFDckIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRURBLGVBQ0VELFFBQVErQixRQUFRLENBQUNoQyxZQUNmQyxRQUFRK0IsUUFBUSxDQUFDaEMsU0FBUztJQUU5QixPQUFPRTtBQUNUIn0=