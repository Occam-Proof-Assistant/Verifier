"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyRule;
    }
});
var _rule = /*#__PURE__*/ _interopRequireDefault(require("../rule"));
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../context/metaproof"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var labelNodesQuery = (0, _query.nodesQuery)("/rule/label"), metaproofNodeQuery = (0, _query.nodeQuery)("/rule/metaproof!"), conditionalInferenceNodeQuery = (0, _query.nodeQuery)("/rule/conditionalInference!"), unconditionalInferenceNodeQuery = (0, _query.nodeQuery)("/rule/unconditionalInference!");
function verifyRule(ruleNode) {
    var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;
    var ruleVerified = false;
    context.begin(ruleNode);
    var labelNodes = labelNodesQuery(ruleNode), labelsString = (0, _string.nodesAsString)(labelNodes), metaproofContext = _metaproof.default.fromContext(context);
    context.debug("Verifying the '".concat(labelsString, "' rule..."));
    var labels = [], labelsVerified = context.verifyLabels(labelNodes, labels);
    if (labelsVerified) {
        var premises = [], conclusions = [], conditionalInferenceNode = conditionalInferenceNodeQuery(ruleNode), unconditionalInferenceNode = unconditionalInferenceNodeQuery(ruleNode);
        var conditionalInferenceVerified = false, unconditionalInferenceVerified = false;
        if (conditionalInferenceNode !== null) {
            conditionalInferenceVerified = metaproofContext.verifyConditionalInference(conditionalInferenceNode, premises, conclusions);
        }
        if (unconditionalInferenceNode !== null) {
            unconditionalInferenceVerified = metaproofContext.verifyUnconditionalInference(unconditionalInferenceNode, premises, conclusions);
        }
        if (conditionalInferenceVerified || unconditionalInferenceVerified) {
            var metaproofNode = metaproofNodeQuery(ruleNode), firstConclusion = (0, _array.first)(conclusions), conclusion = firstConclusion; ///
            var metaproofVerified = true;
            if (metaproofNode !== null) {
                metaproofVerified = metaproofContext.verifyMetaproof(metaproofNode, conclusion);
            }
            if (metaproofVerified) {
                var rule = _rule.default.fromPremisesConclusionAndLabels(premises, conclusion, labels);
                context.addRule(rule);
                ruleVerified = true;
            }
        }
    }
    ruleVerified ? context.complete(ruleNode) : context.complete(ruleNode);
    return ruleVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcnVsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFJ1bGUgZnJvbSBcIi4uL3J1bGVcIjtcbmltcG9ydCBNZXRhcHJvb2ZDb250ZXh0IGZyb20gXCIuLi9jb250ZXh0L21ldGFwcm9vZlwiO1xuXG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IG5vZGVzQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuaW1wb3J0IHsgbm9kZVF1ZXJ5LCBub2Rlc1F1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBsYWJlbE5vZGVzUXVlcnkgPSBub2Rlc1F1ZXJ5KFwiL3J1bGUvbGFiZWxcIiksXG4gICAgICBtZXRhcHJvb2ZOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvcnVsZS9tZXRhcHJvb2YhXCIpLFxuICAgICAgY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvcnVsZS9jb25kaXRpb25hbEluZmVyZW5jZSFcIiksXG4gICAgICB1bmNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3J1bGUvdW5jb25kaXRpb25hbEluZmVyZW5jZSFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVJ1bGUocnVsZU5vZGUsIGNvbnRleHQgPSB0aGlzKSB7XG4gIGxldCBydWxlVmVyaWZpZWQgPSBmYWxzZTtcblxuICBjb250ZXh0LmJlZ2luKHJ1bGVOb2RlKTtcblxuICBjb25zdCBsYWJlbE5vZGVzID0gbGFiZWxOb2Rlc1F1ZXJ5KHJ1bGVOb2RlKSxcbiAgICAgICAgbGFiZWxzU3RyaW5nID0gbm9kZXNBc1N0cmluZyhsYWJlbE5vZGVzKSxcbiAgICAgICAgbWV0YXByb29mQ29udGV4dCA9IE1ldGFwcm9vZkNvbnRleHQuZnJvbUNvbnRleHQoY29udGV4dCk7XG5cbiAgY29udGV4dC5kZWJ1ZyhgVmVyaWZ5aW5nIHRoZSAnJHtsYWJlbHNTdHJpbmd9JyBydWxlLi4uYCk7XG5cbiAgY29uc3QgbGFiZWxzID0gW10sXG4gICAgICAgIGxhYmVsc1ZlcmlmaWVkID0gY29udGV4dC52ZXJpZnlMYWJlbHMobGFiZWxOb2RlcywgbGFiZWxzKTtcblxuICBpZiAobGFiZWxzVmVyaWZpZWQpIHtcbiAgICBjb25zdCBwcmVtaXNlcyA9IFtdLFxuICAgICAgICAgIGNvbmNsdXNpb25zID0gW10sXG4gICAgICAgICAgY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlID0gY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlUXVlcnkocnVsZU5vZGUpLFxuICAgICAgICAgIHVuY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlID0gdW5jb25kaXRpb25hbEluZmVyZW5jZU5vZGVRdWVyeShydWxlTm9kZSk7XG5cbiAgICBsZXQgY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCA9IGZhbHNlLFxuICAgICAgICB1bmNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgPSBmYWxzZTtcblxuICAgIGlmIChjb25kaXRpb25hbEluZmVyZW5jZU5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgPSBtZXRhcHJvb2ZDb250ZXh0LnZlcmlmeUNvbmRpdGlvbmFsSW5mZXJlbmNlKGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSwgcHJlbWlzZXMsIGNvbmNsdXNpb25zKTtcbiAgICB9XG5cbiAgICBpZiAodW5jb25kaXRpb25hbEluZmVyZW5jZU5vZGUgIT09IG51bGwpIHtcbiAgICAgIHVuY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCA9IG1ldGFwcm9vZkNvbnRleHQudmVyaWZ5VW5jb25kaXRpb25hbEluZmVyZW5jZSh1bmNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSwgcHJlbWlzZXMsIGNvbmNsdXNpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCB8fCB1bmNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQpIHtcbiAgICAgIGNvbnN0IG1ldGFwcm9vZk5vZGUgPSBtZXRhcHJvb2ZOb2RlUXVlcnkocnVsZU5vZGUpLFxuICAgICAgICAgICAgZmlyc3RDb25jbHVzaW9uID0gZmlyc3QoY29uY2x1c2lvbnMpLFxuICAgICAgICAgICAgY29uY2x1c2lvbiA9IGZpcnN0Q29uY2x1c2lvbjsgLy8vXG5cbiAgICAgIGxldCBtZXRhcHJvb2ZWZXJpZmllZCA9IHRydWU7XG5cbiAgICAgIGlmIChtZXRhcHJvb2ZOb2RlICE9PSBudWxsKSB7XG4gICAgICAgIG1ldGFwcm9vZlZlcmlmaWVkID0gbWV0YXByb29mQ29udGV4dC52ZXJpZnlNZXRhcHJvb2YobWV0YXByb29mTm9kZSwgY29uY2x1c2lvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZXRhcHJvb2ZWZXJpZmllZCkge1xuICAgICAgICBjb25zdCBydWxlID0gUnVsZS5mcm9tUHJlbWlzZXNDb25jbHVzaW9uQW5kTGFiZWxzKHByZW1pc2VzLCBjb25jbHVzaW9uLCBsYWJlbHMpO1xuXG4gICAgICAgIGNvbnRleHQuYWRkUnVsZShydWxlKTtcblxuICAgICAgICBydWxlVmVyaWZpZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJ1bGVWZXJpZmllZCA/XG4gICAgY29udGV4dC5jb21wbGV0ZShydWxlTm9kZSkgOlxuICAgICAgY29udGV4dC5jb21wbGV0ZShydWxlTm9kZSk7XG5cbiAgcmV0dXJuIHJ1bGVWZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlSdWxlIiwibGFiZWxOb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsIm1ldGFwcm9vZk5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZVF1ZXJ5IiwidW5jb25kaXRpb25hbEluZmVyZW5jZU5vZGVRdWVyeSIsInJ1bGVOb2RlIiwiY29udGV4dCIsInJ1bGVWZXJpZmllZCIsImJlZ2luIiwibGFiZWxOb2RlcyIsImxhYmVsc1N0cmluZyIsIm5vZGVzQXNTdHJpbmciLCJtZXRhcHJvb2ZDb250ZXh0IiwiTWV0YXByb29mQ29udGV4dCIsImZyb21Db250ZXh0IiwiZGVidWciLCJsYWJlbHMiLCJsYWJlbHNWZXJpZmllZCIsInZlcmlmeUxhYmVscyIsInByZW1pc2VzIiwiY29uY2x1c2lvbnMiLCJjb25kaXRpb25hbEluZmVyZW5jZU5vZGUiLCJ1bmNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSIsImNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQiLCJ1bmNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQiLCJ2ZXJpZnlDb25kaXRpb25hbEluZmVyZW5jZSIsInZlcmlmeVVuY29uZGl0aW9uYWxJbmZlcmVuY2UiLCJtZXRhcHJvb2ZOb2RlIiwiZmlyc3RDb25jbHVzaW9uIiwiZmlyc3QiLCJjb25jbHVzaW9uIiwibWV0YXByb29mVmVyaWZpZWQiLCJ2ZXJpZnlNZXRhcHJvb2YiLCJydWxlIiwiUnVsZSIsImZyb21QcmVtaXNlc0NvbmNsdXNpb25BbmRMYWJlbHMiLCJhZGRSdWxlIiwiY29tcGxldGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWNBOzs7ZUFBd0JBOzs7eURBWlA7OERBQ1k7cUJBRVA7c0JBQ1E7cUJBQ1E7Ozs7OztBQUV0QyxJQUFNQyxrQkFBa0JDLElBQUFBLGlCQUFVLEVBQUMsZ0JBQzdCQyxxQkFBcUJDLElBQUFBLGdCQUFTLEVBQUMscUJBQy9CQyxnQ0FBZ0NELElBQUFBLGdCQUFTLEVBQUMsZ0NBQzFDRSxrQ0FBa0NGLElBQUFBLGdCQUFTLEVBQUM7QUFFbkMsU0FBU0osV0FBV08sUUFBUSxFQUFrQjtRQUFoQkMsVUFBQUEsaUVBQVUsSUFBSTtJQUN6RCxJQUFJQyxlQUFlLEtBQUs7SUFFeEJELFFBQVFFLEtBQUssQ0FBQ0g7SUFFZCxJQUFNSSxhQUFhVixnQkFBZ0JNLFdBQzdCSyxlQUFlQyxJQUFBQSxxQkFBYSxFQUFDRixhQUM3QkcsbUJBQW1CQyxrQkFBZ0IsQ0FBQ0MsV0FBVyxDQUFDUjtJQUV0REEsUUFBUVMsS0FBSyxDQUFDLEFBQUMsa0JBQThCLE9BQWJMLGNBQWE7SUFFN0MsSUFBTU0sU0FBUyxFQUFFLEVBQ1hDLGlCQUFpQlgsUUFBUVksWUFBWSxDQUFDVCxZQUFZTztJQUV4RCxJQUFJQyxnQkFBZ0I7UUFDbEIsSUFBTUUsV0FBVyxFQUFFLEVBQ2JDLGNBQWMsRUFBRSxFQUNoQkMsMkJBQTJCbEIsOEJBQThCRSxXQUN6RGlCLDZCQUE2QmxCLGdDQUFnQ0M7UUFFbkUsSUFBSWtCLCtCQUErQixLQUFLLEVBQ3BDQyxpQ0FBaUMsS0FBSztRQUUxQyxJQUFJSCw2QkFBNkIsSUFBSSxFQUFFO1lBQ3JDRSwrQkFBK0JYLGlCQUFpQmEsMEJBQTBCLENBQUNKLDBCQUEwQkYsVUFBVUM7UUFDakgsQ0FBQztRQUVELElBQUlFLCtCQUErQixJQUFJLEVBQUU7WUFDdkNFLGlDQUFpQ1osaUJBQWlCYyw0QkFBNEIsQ0FBQ0osNEJBQTRCSCxVQUFVQztRQUN2SCxDQUFDO1FBRUQsSUFBSUcsZ0NBQWdDQyxnQ0FBZ0M7WUFDbEUsSUFBTUcsZ0JBQWdCMUIsbUJBQW1CSSxXQUNuQ3VCLGtCQUFrQkMsSUFBQUEsWUFBSyxFQUFDVCxjQUN4QlUsYUFBYUYsaUJBQWlCLEdBQUc7WUFFdkMsSUFBSUcsb0JBQW9CLElBQUk7WUFFNUIsSUFBSUosa0JBQWtCLElBQUksRUFBRTtnQkFDMUJJLG9CQUFvQm5CLGlCQUFpQm9CLGVBQWUsQ0FBQ0wsZUFBZUc7WUFDdEUsQ0FBQztZQUVELElBQUlDLG1CQUFtQjtnQkFDckIsSUFBTUUsT0FBT0MsYUFBSSxDQUFDQywrQkFBK0IsQ0FBQ2hCLFVBQVVXLFlBQVlkO2dCQUV4RVYsUUFBUThCLE9BQU8sQ0FBQ0g7Z0JBRWhCMUIsZUFBZSxJQUFJO1lBQ3JCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVEQSxlQUNFRCxRQUFRK0IsUUFBUSxDQUFDaEMsWUFDZkMsUUFBUStCLFFBQVEsQ0FBQ2hDLFNBQVM7SUFFOUIsT0FBT0U7QUFDVCJ9