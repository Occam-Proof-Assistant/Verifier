"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyStatementAsCombinator;
    }
});
var _combinator = /*#__PURE__*/ _interop_require_default(require("../combinator"));
var _term = /*#__PURE__*/ _interop_require_default(require("../verify/term"));
var _statement = /*#__PURE__*/ _interop_require_default(require("../verify/statement"));
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function verifyStatementAsCombinator(statementNode, fileContext) {
    var statementVerifiedAsCombinator = false;
    var statementString = fileContext.nodeAsString(statementNode);
    fileContext.debug("Verifying the '".concat(statementString, "' combinator...."), statementNode);
    var nonTerminalNode = statementNode, childNodes = nonTerminalNode.getChildNodes(), childNodesVerified = verifyChildNodes(childNodes, fileContext, function() {
        var verifiedAhead = true;
        return verifiedAhead;
    });
    if (childNodesVerified) {
        var tokens = fileContext.getTokens(), combinator = _combinator.default.fromStatementNodeAndTokens(statementNode, tokens);
        fileContext.addCombinator(combinator);
        statementVerifiedAsCombinator = true;
    }
    if (statementVerifiedAsCombinator) {
        fileContext.info("Verified the '".concat(statementString, "' combinator."), statementNode);
    }
    return statementVerifiedAsCombinator;
}
function verifyNode(node, fileContext, verifyAhead) {
    var nodeVerified;
    var nodeTerminalNode = node.isTerminalNode();
    if (nodeTerminalNode) {
        var terminalNode = node, terminalNodeVerified = verifyTerminalNode(terminalNode, fileContext, verifyAhead);
        nodeVerified = terminalNodeVerified; ///
    } else {
        var nonTerminalNode = node, nonTerminalNodeVerified = verifyNonTerminalNode(nonTerminalNode, fileContext, verifyAhead);
        nodeVerified = nonTerminalNodeVerified; ///
    }
    return nodeVerified;
}
function verifyChildNodes(childNodes, fileContext, verifyAhead) {
    var childNodesVerified = childNodes.every(function(childNode) {
        var node = childNode, nodeVerified = verifyNode(node, fileContext, verifyAhead);
        if (nodeVerified) {
            return true;
        }
    });
    return childNodesVerified;
}
function verifyTerminalNode(terminalNode, fileContext, verifyAhead) {
    var terminalNodeVerified = true;
    return terminalNodeVerified;
}
function verifyNonTerminalNode(nonTerminalNode, fileContext, verifyAhead) {
    var nonTerminalNodeVerified;
    var ruleName = nonTerminalNode.getRuleName();
    switch(ruleName){
        case _ruleNames.TYPE_RULE_NAME:
            {
                var typeNode = nonTerminalNode, typeNodeVerified = verifyTypeNode(typeNode, fileContext, verifyAhead);
                nonTerminalNodeVerified = typeNodeVerified; ///
                break;
            }
        case _ruleNames.TERM_RULE_NAME:
            {
                var termNode = nonTerminalNode, termNodeVerified = verifyTermNode(termNode, fileContext, verifyAhead);
                nonTerminalNodeVerified = termNodeVerified; ///
                break;
            }
        case _ruleNames.STATEMENT_RULE_NAME:
            {
                var statmentNode = nonTerminalNode, statmentNodeVerified = verifyStatementNode(statmentNode, fileContext, verifyAhead);
                nonTerminalNodeVerified = statmentNodeVerified; ///
                break;
            }
        default:
            {
                var childNodes = nonTerminalNode.getChildNodes(), childNodesVerified = verifyChildNodes(childNodes, fileContext, verifyAhead);
                nonTerminalNodeVerified = childNodesVerified; ///
                break;
            }
    }
    return nonTerminalNodeVerified;
}
function verifyTypeNode(typeNode, fileContext, verifyAhead) {
    var typeNodeVerified = false;
    var typeName = (0, _query.typeNameFromTypeNode)(typeNode), typePresent = fileContext.isTypePresentByTypeName(typeName);
    if (!typePresent) {
        fileContext.error("The type '".concat(typeName, "' not present."), typeNode);
    } else {
        typeNodeVerified = true;
    }
    return typeNodeVerified;
}
function verifyTermNode(termNode, fileContext, verifyAhead) {
    var types = [], context = fileContext, termVerified = (0, _term.default)(termNode, types, context, verifyAhead), termNodeVerified = termVerified; ///
    return termNodeVerified;
}
function verifyStatementNode(statementNode, fileContext, verifyAhead) {
    var context = fileContext, derived = false, assignments = [], statementVerified = (0, _statement.default)(statementNode, assignments, derived, context, verifyAhead), statementNodeVerified = statementVerified; ///
    return statementNodeVerified;
}

//# sourceMappingURL=data:application/json;base64,