"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyStatementAsCombinator;
    }
});
var _combinator = /*#__PURE__*/ _interopRequireDefault(require("../combinator"));
var _term = /*#__PURE__*/ _interopRequireDefault(require("../verify/term"));
var _statement = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement"));
var _string = require("../utilities/string");
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function verifyStatementAsCombinator(statementNode, fileContext) {
    var statementVerifiedAsCombinator = false;
    fileContext.begin(statementNode);
    var statementString = (0, _string.nodeAsString)(statementNode);
    fileContext.debug("Verifying the '".concat(statementString, "' combinator...."));
    var nonTerminalNode = statementNode, childNodes = nonTerminalNode.getChildNodes(), childNodesVerified = verifyChildNodes(childNodes, fileContext);
    if (childNodesVerified) {
        var combinator = _combinator.default.fromStatementNode(statementNode);
        fileContext.addCombinator(combinator);
        statementVerifiedAsCombinator = true;
    }
    if (statementVerifiedAsCombinator) {
        fileContext.info("Verified the '".concat(statementString, "' combinator."));
    }
    statementVerifiedAsCombinator ? fileContext.complete(statementNode) : fileContext.halt(statementNode);
    return statementVerifiedAsCombinator;
}
function verifyNode(node, fileContext) {
    var nodeVerified;
    var nodeTerminalNode = node.isTerminalNode();
    if (nodeTerminalNode) {
        var terminalNode = node, terminalNodeVerified = verifyTerminalNode(terminalNode, fileContext);
        nodeVerified = terminalNodeVerified; ///
    } else {
        var nonTerminalNode = node, nonTerminalNodeVerified = verifyNonTerminalNode(nonTerminalNode, fileContext);
        nodeVerified = nonTerminalNodeVerified; ///
    }
    return nodeVerified;
}
function verifyChildNodes(childNodes, fileContext) {
    var childNodesVerified = childNodes.every(function(childNode) {
        var node = childNode, nodeVerified = verifyNode(node, fileContext);
        if (nodeVerified) {
            return true;
        }
    });
    return childNodesVerified;
}
function verifyTerminalNode(terminalNode, fileContext) {
    var terminalNodeVerified = true;
    return terminalNodeVerified;
}
function verifyNonTerminalNode(nonTerminalNode, fileContext) {
    var nonTerminalNodeVerified;
    var ruleName = nonTerminalNode.getRuleName();
    switch(ruleName){
        case _ruleNames.TYPE_RULE_NAME:
            {
                var typeNode = nonTerminalNode, typeNodeVerified = verifyTypeNode(typeNode, fileContext);
                nonTerminalNodeVerified = typeNodeVerified; ///
                break;
            }
        case _ruleNames.TERM_RULE_NAME:
            {
                var termNode = nonTerminalNode, termNodeVerified = verifyTermNode(termNode, fileContext);
                nonTerminalNodeVerified = termNodeVerified; ///
                break;
            }
        case _ruleNames.STATEMENT_RULE_NAME:
            {
                var statmentNode = nonTerminalNode, statmentNodeVerified = verifyStatementNode(statmentNode, fileContext);
                nonTerminalNodeVerified = statmentNodeVerified; ///
                break;
            }
        default:
            {
                var childNodes = nonTerminalNode.getChildNodes(), childNodesVerified = verifyChildNodes(childNodes, fileContext);
                nonTerminalNodeVerified = childNodesVerified; ///
                break;
            }
    }
    return nonTerminalNodeVerified;
}
function verifyTypeNode(typeNode, fileContext) {
    var typeNodeVerified = false;
    var typeName = (0, _query.typeNameFromTypeNode)(typeNode), typePresent = fileContext.isTypePresentByTypeName(typeName);
    if (!typePresent) {
        fileContext.error("The type '".concat(typeName, "' is missing."));
    } else {
        typeNodeVerified = true;
    }
    return typeNodeVerified;
}
function verifyTermNode(termNode, fileContext) {
    var types = [], context = fileContext, termVerified = (0, _term.default)(termNode, types, context), termNodeVerified = termVerified; ///
    return termNodeVerified;
}
function verifyStatementNode(statementNode, fileContext) {
    var context = fileContext, derived = false, assertions = [], statementVerified = (0, _statement.default)(statementNode, assertions, derived, context), statementNodeVerified = statementVerified; ///
    return statementNodeVerified;
}

//# sourceMappingURL=data:application/json;base64,