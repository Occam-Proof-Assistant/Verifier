"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyProof;
    }
});
var _derivation = /*#__PURE__*/ _interop_require_default(require("../verify/derivation"));
var _intrinsicLevel = /*#__PURE__*/ _interop_require_default(require("../context/local/intrinsicLevel"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var derivationNodeQuery = (0, _query.nodeQuery)("/proof/derivation!");
function verifyProof(proofNode, conclusion, localContext) {
    var proofVerified = false;
    var intrinsicLevelLocalContext = _intrinsicLevel.default.fromLocalContext(localContext); ///
    localContext = intrinsicLevelLocalContext; ///
    var derivationNode = derivationNodeQuery(proofNode), derivationVerified = (0, _derivation.default)(derivationNode, localContext);
    if (derivationVerified) {
        var lastProofStep = localContext.getLastProofStep();
        if (lastProofStep !== null) {
            var proofStep = lastProofStep, statementNode = proofStep.getStatementNode(), conclusionStatementNode = conclusion.getStatementNode(), statementNodeMatchesConclusionStatementNode = statementNode.match(conclusionStatementNode);
            proofVerified = statementNodeMatchesConclusionStatementNode; ///
        }
    }
    return proofVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB2ZXJpZnlEZXJpdmF0aW9uIGZyb20gXCIuLi92ZXJpZnkvZGVyaXZhdGlvblwiO1xuaW1wb3J0IEludHJpbnNpY0xldmVsTG9jYWxDb250ZXh0IGZyb20gXCIuLi9jb250ZXh0L2xvY2FsL2ludHJpbnNpY0xldmVsXCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgZGVyaXZhdGlvbk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9wcm9vZi9kZXJpdmF0aW9uIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5UHJvb2YocHJvb2ZOb2RlLCBjb25jbHVzaW9uLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IHByb29mVmVyaWZpZWQgPSBmYWxzZTtcblxuICBjb25zdCBpbnRyaW5zaWNMZXZlbExvY2FsQ29udGV4dCA9IEludHJpbnNpY0xldmVsTG9jYWxDb250ZXh0LmZyb21Mb2NhbENvbnRleHQobG9jYWxDb250ZXh0KTsgLy8vXG5cbiAgbG9jYWxDb250ZXh0ID0gaW50cmluc2ljTGV2ZWxMb2NhbENvbnRleHQ7ICAvLy9cblxuICBjb25zdCBkZXJpdmF0aW9uTm9kZSA9IGRlcml2YXRpb25Ob2RlUXVlcnkocHJvb2ZOb2RlKSxcbiAgICAgICAgZGVyaXZhdGlvblZlcmlmaWVkID0gdmVyaWZ5RGVyaXZhdGlvbihkZXJpdmF0aW9uTm9kZSwgbG9jYWxDb250ZXh0KTtcblxuICBpZiAoZGVyaXZhdGlvblZlcmlmaWVkKSB7XG4gICAgY29uc3QgbGFzdFByb29mU3RlcCA9IGxvY2FsQ29udGV4dC5nZXRMYXN0UHJvb2ZTdGVwKCk7XG5cbiAgICBpZiAobGFzdFByb29mU3RlcCAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgcHJvb2ZTdGVwID0gbGFzdFByb29mU3RlcCwgLy8vXG4gICAgICAgICAgICBzdGF0ZW1lbnROb2RlID0gcHJvb2ZTdGVwLmdldFN0YXRlbWVudE5vZGUoKSxcbiAgICAgICAgICAgIGNvbmNsdXNpb25TdGF0ZW1lbnROb2RlID0gY29uY2x1c2lvbi5nZXRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgICAgICBzdGF0ZW1lbnROb2RlTWF0Y2hlc0NvbmNsdXNpb25TdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50Tm9kZS5tYXRjaChjb25jbHVzaW9uU3RhdGVtZW50Tm9kZSk7XG5cbiAgICAgIHByb29mVmVyaWZpZWQgPSBzdGF0ZW1lbnROb2RlTWF0Y2hlc0NvbmNsdXNpb25TdGF0ZW1lbnROb2RlOyAgLy8vXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb29mVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5UHJvb2YiLCJkZXJpdmF0aW9uTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwicHJvb2ZOb2RlIiwiY29uY2x1c2lvbiIsImxvY2FsQ29udGV4dCIsInByb29mVmVyaWZpZWQiLCJpbnRyaW5zaWNMZXZlbExvY2FsQ29udGV4dCIsIkludHJpbnNpY0xldmVsTG9jYWxDb250ZXh0IiwiZnJvbUxvY2FsQ29udGV4dCIsImRlcml2YXRpb25Ob2RlIiwiZGVyaXZhdGlvblZlcmlmaWVkIiwidmVyaWZ5RGVyaXZhdGlvbiIsImxhc3RQcm9vZlN0ZXAiLCJnZXRMYXN0UHJvb2ZTdGVwIiwicHJvb2ZTdGVwIiwic3RhdGVtZW50Tm9kZSIsImdldFN0YXRlbWVudE5vZGUiLCJjb25jbHVzaW9uU3RhdGVtZW50Tm9kZSIsInN0YXRlbWVudE5vZGVNYXRjaGVzQ29uY2x1c2lvblN0YXRlbWVudE5vZGUiLCJtYXRjaCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBU0E7OztlQUF3QkE7OztpRUFQSztxRUFDVTtxQkFFYjs7Ozs7O0FBRTFCLElBQU1DLHNCQUFzQkMsSUFBQUEsZ0JBQVMsRUFBQztBQUV2QixTQUFTRixZQUFZRyxTQUFTLEVBQUVDLFVBQVUsRUFBRUMsWUFBWTtJQUNyRSxJQUFJQyxnQkFBZ0I7SUFFcEIsSUFBTUMsNkJBQTZCQyx1QkFBMEIsQ0FBQ0MsZ0JBQWdCLENBQUNKLGVBQWUsR0FBRztJQUVqR0EsZUFBZUUsNEJBQTZCLEdBQUc7SUFFL0MsSUFBTUcsaUJBQWlCVCxvQkFBb0JFLFlBQ3JDUSxxQkFBcUJDLElBQUFBLG1CQUFnQixFQUFDRixnQkFBZ0JMO0lBRTVELElBQUlNLG9CQUFvQjtRQUN0QixJQUFNRSxnQkFBZ0JSLGFBQWFTLGdCQUFnQjtRQUVuRCxJQUFJRCxrQkFBa0IsTUFBTTtZQUMxQixJQUFNRSxZQUFZRixlQUNaRyxnQkFBZ0JELFVBQVVFLGdCQUFnQixJQUMxQ0MsMEJBQTBCZCxXQUFXYSxnQkFBZ0IsSUFDckRFLDhDQUE4Q0gsY0FBY0ksS0FBSyxDQUFDRjtZQUV4RVosZ0JBQWdCYSw2Q0FBOEMsR0FBRztRQUNuRTtJQUNGO0lBRUEsT0FBT2I7QUFDVCJ9