"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyProof;
    }
});
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../step/proof"));
var _derivation = /*#__PURE__*/ _interopRequireDefault(require("../verify/derivation"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("./statement/qualified"));
var _node = require("../utilities/node");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), derivationNodeQuery = (0, _query.nodeQuery)("/proof/derivation!"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/proof/qualifiedStatement!");
function verifyProof(proofNode, conclusion, proofContext) {
    var proofVerified = false;
    proofContext.begin(proofNode);
    var derivationNode = derivationNodeQuery(proofNode), qualifiedStatementNode = qualifiedStatementNodeQuery(proofNode);
    var derivationVerified = false, qualifiedStatementVerified = false;
    if (derivationNode !== null) {
        derivationVerified = (0, _derivation.default)(derivationNode, proofContext);
    }
    if (qualifiedStatementNode !== null) {
        var derived;
        derived = true;
        proofContext.setDerived(derived);
        qualifiedStatementVerified = (0, _qualified.default)(qualifiedStatementNode, proofContext);
        derived = false;
        proofContext.setDerived(derived);
        if (qualifiedStatementVerified) {
            var statementNode = statementNodeQuery(qualifiedStatementNode), proofStep = _proof.default.fromStatementNode(statementNode);
            proofContext.addProofStep(proofStep);
        }
    }
    if (derivationVerified || qualifiedStatementVerified) {
        var lastProofStep = proofContext.getLastProofStep(), proofStep1 = lastProofStep, lastStatementNode = proofStep1.getStatementNode(), conclusionStatementNode = conclusion.getStatementNode(), lastStatementMatches = matchLastStatementNode(lastStatementNode, conclusionStatementNode);
        proofVerified = lastStatementMatches; ///
    }
    proofVerified ? proofContext.complete(proofNode) : proofContext.complete(proofNode);
    return proofVerified;
}
function matchLastStatementNode(lastStatementNode, conclusionStatementNode) {
    var nodeA = lastStatementNode, nodeB = conclusionStatementNode, nonTerminalNodeMatches = (0, _node.matchNode)(nodeA, nodeB), lastStatementMatches = nonTerminalNodeMatches; ///
    return lastStatementMatches;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcm9vZlN0ZXAgZnJvbSBcIi4uL3N0ZXAvcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlEZXJpdmF0aW9uIGZyb20gXCIuLi92ZXJpZnkvZGVyaXZhdGlvblwiO1xuaW1wb3J0IHZlcmlmeVF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi9zdGF0ZW1lbnQvcXVhbGlmaWVkXCI7XG5cbmltcG9ydCB7IG1hdGNoTm9kZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvbm9kZVwiO1xuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvcXVhbGlmaWVkU3RhdGVtZW50L3N0YXRlbWVudCFcIiksXG4gICAgICBkZXJpdmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Byb29mL2Rlcml2YXRpb24hXCIpLFxuICAgICAgcXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Byb29mL3F1YWxpZmllZFN0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVByb29mKHByb29mTm9kZSwgY29uY2x1c2lvbiwgcHJvb2ZDb250ZXh0KSB7XG4gIGxldCBwcm9vZlZlcmlmaWVkID0gZmFsc2U7XG5cbiAgcHJvb2ZDb250ZXh0LmJlZ2luKHByb29mTm9kZSk7XG5cbiAgY29uc3QgZGVyaXZhdGlvbk5vZGUgPSBkZXJpdmF0aW9uTm9kZVF1ZXJ5KHByb29mTm9kZSksXG4gICAgICAgIHF1YWxpZmllZFN0YXRlbWVudE5vZGUgPSBxdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkocHJvb2ZOb2RlKTtcblxuICBsZXQgZGVyaXZhdGlvblZlcmlmaWVkID0gZmFsc2UsXG4gICAgICBxdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGlmIChkZXJpdmF0aW9uTm9kZSAhPT0gbnVsbCkge1xuICAgIGRlcml2YXRpb25WZXJpZmllZCA9IHZlcmlmeURlcml2YXRpb24oZGVyaXZhdGlvbk5vZGUsIHByb29mQ29udGV4dCk7XG4gIH1cblxuICBpZiAocXVhbGlmaWVkU3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIGxldCBkZXJpdmVkO1xuXG4gICAgZGVyaXZlZCA9IHRydWU7XG5cbiAgICBwcm9vZkNvbnRleHQuc2V0RGVyaXZlZChkZXJpdmVkKTtcblxuICAgIHF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkID0gdmVyaWZ5UXVhbGlmaWVkU3RhdGVtZW50KHF1YWxpZmllZFN0YXRlbWVudE5vZGUsIHByb29mQ29udGV4dCk7XG5cbiAgICBkZXJpdmVkID0gZmFsc2U7XG5cbiAgICBwcm9vZkNvbnRleHQuc2V0RGVyaXZlZChkZXJpdmVkKTtcblxuICAgIGlmIChxdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgICAgY29uc3Qgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudE5vZGVRdWVyeShxdWFsaWZpZWRTdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICAgIHByb29mU3RlcCA9IFByb29mU3RlcC5mcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgcHJvb2ZDb250ZXh0LmFkZFByb29mU3RlcChwcm9vZlN0ZXApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZXJpdmF0aW9uVmVyaWZpZWQgfHwgcXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQpIHtcbiAgICBjb25zdCBsYXN0UHJvb2ZTdGVwID0gcHJvb2ZDb250ZXh0LmdldExhc3RQcm9vZlN0ZXAoKSxcbiAgICAgICAgICBwcm9vZlN0ZXAgPSBsYXN0UHJvb2ZTdGVwLCAvLy9cbiAgICAgICAgICBsYXN0U3RhdGVtZW50Tm9kZSA9IHByb29mU3RlcC5nZXRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgICAgY29uY2x1c2lvblN0YXRlbWVudE5vZGUgPSBjb25jbHVzaW9uLmdldFN0YXRlbWVudE5vZGUoKSxcbiAgICAgICAgICBsYXN0U3RhdGVtZW50TWF0Y2hlcyA9IG1hdGNoTGFzdFN0YXRlbWVudE5vZGUobGFzdFN0YXRlbWVudE5vZGUsIGNvbmNsdXNpb25TdGF0ZW1lbnROb2RlKTtcblxuICAgIHByb29mVmVyaWZpZWQgPSBsYXN0U3RhdGVtZW50TWF0Y2hlczsgIC8vL1xuICB9XG5cbiAgcHJvb2ZWZXJpZmllZCA/XG4gICAgcHJvb2ZDb250ZXh0LmNvbXBsZXRlKHByb29mTm9kZSkgOlxuICAgICAgcHJvb2ZDb250ZXh0LmNvbXBsZXRlKHByb29mTm9kZSk7XG5cbiAgcmV0dXJuIHByb29mVmVyaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIG1hdGNoTGFzdFN0YXRlbWVudE5vZGUobGFzdFN0YXRlbWVudE5vZGUsIGNvbmNsdXNpb25TdGF0ZW1lbnROb2RlKSB7XG4gIGNvbnN0IG5vZGVBID0gbGFzdFN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgbm9kZUIgPSBjb25jbHVzaW9uU3RhdGVtZW50Tm9kZSwgIC8vL1xuICAgICAgICBub25UZXJtaW5hbE5vZGVNYXRjaGVzID0gbWF0Y2hOb2RlKG5vZGVBLCBub2RlQiksXG4gICAgICAgIGxhc3RTdGF0ZW1lbnRNYXRjaGVzID0gbm9uVGVybWluYWxOb2RlTWF0Y2hlczsgIC8vL1xuXG4gIHJldHVybiBsYXN0U3RhdGVtZW50TWF0Y2hlcztcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlQcm9vZiIsInN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImRlcml2YXRpb25Ob2RlUXVlcnkiLCJxdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkiLCJwcm9vZk5vZGUiLCJjb25jbHVzaW9uIiwicHJvb2ZDb250ZXh0IiwicHJvb2ZWZXJpZmllZCIsImJlZ2luIiwiZGVyaXZhdGlvbk5vZGUiLCJxdWFsaWZpZWRTdGF0ZW1lbnROb2RlIiwiZGVyaXZhdGlvblZlcmlmaWVkIiwicXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlEZXJpdmF0aW9uIiwiZGVyaXZlZCIsInNldERlcml2ZWQiLCJ2ZXJpZnlRdWFsaWZpZWRTdGF0ZW1lbnQiLCJzdGF0ZW1lbnROb2RlIiwicHJvb2ZTdGVwIiwiUHJvb2ZTdGVwIiwiZnJvbVN0YXRlbWVudE5vZGUiLCJhZGRQcm9vZlN0ZXAiLCJsYXN0UHJvb2ZTdGVwIiwiZ2V0TGFzdFByb29mU3RlcCIsImxhc3RTdGF0ZW1lbnROb2RlIiwiZ2V0U3RhdGVtZW50Tm9kZSIsImNvbmNsdXNpb25TdGF0ZW1lbnROb2RlIiwibGFzdFN0YXRlbWVudE1hdGNoZXMiLCJtYXRjaExhc3RTdGF0ZW1lbnROb2RlIiwiY29tcGxldGUiLCJub2RlQSIsIm5vZGVCIiwibm9uVGVybWluYWxOb2RlTWF0Y2hlcyIsIm1hdGNoTm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBYUE7OztlQUF3QkE7OzswREFYRjsrREFDTzs4REFDUTtvQkFFWDtxQkFDQTs7Ozs7O0FBRTFCLElBQU1DLHFCQUFxQkMsSUFBQUEsZ0JBQVMsRUFBQyxtQ0FDL0JDLHNCQUFzQkQsSUFBQUEsZ0JBQVMsRUFBQyx1QkFDaENFLDhCQUE4QkYsSUFBQUEsZ0JBQVMsRUFBQztBQUUvQixTQUFTRixZQUFZSyxTQUFTLEVBQUVDLFVBQVUsRUFBRUMsWUFBWSxFQUFFO0lBQ3ZFLElBQUlDLGdCQUFnQixLQUFLO0lBRXpCRCxhQUFhRSxLQUFLLENBQUNKO0lBRW5CLElBQU1LLGlCQUFpQlAsb0JBQW9CRSxZQUNyQ00seUJBQXlCUCw0QkFBNEJDO0lBRTNELElBQUlPLHFCQUFxQixLQUFLLEVBQzFCQyw2QkFBNkIsS0FBSztJQUV0QyxJQUFJSCxtQkFBbUIsSUFBSSxFQUFFO1FBQzNCRSxxQkFBcUJFLElBQUFBLG1CQUFnQixFQUFDSixnQkFBZ0JIO0lBQ3hELENBQUM7SUFFRCxJQUFJSSwyQkFBMkIsSUFBSSxFQUFFO1FBQ25DLElBQUlJO1FBRUpBLFVBQVUsSUFBSTtRQUVkUixhQUFhUyxVQUFVLENBQUNEO1FBRXhCRiw2QkFBNkJJLElBQUFBLGtCQUF3QixFQUFDTix3QkFBd0JKO1FBRTlFUSxVQUFVLEtBQUs7UUFFZlIsYUFBYVMsVUFBVSxDQUFDRDtRQUV4QixJQUFJRiw0QkFBNEI7WUFDOUIsSUFBTUssZ0JBQWdCakIsbUJBQW1CVSx5QkFDbkNRLFlBQVlDLGNBQVMsQ0FBQ0MsaUJBQWlCLENBQUNIO1lBRTlDWCxhQUFhZSxZQUFZLENBQUNIO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSVAsc0JBQXNCQyw0QkFBNEI7UUFDcEQsSUFBTVUsZ0JBQWdCaEIsYUFBYWlCLGdCQUFnQixJQUM3Q0wsYUFBWUksZUFDWkUsb0JBQW9CTixXQUFVTyxnQkFBZ0IsSUFDOUNDLDBCQUEwQnJCLFdBQVdvQixnQkFBZ0IsSUFDckRFLHVCQUF1QkMsdUJBQXVCSixtQkFBbUJFO1FBRXZFbkIsZ0JBQWdCb0Isc0JBQXVCLEdBQUc7SUFDNUMsQ0FBQztJQUVEcEIsZ0JBQ0VELGFBQWF1QixRQUFRLENBQUN6QixhQUNwQkUsYUFBYXVCLFFBQVEsQ0FBQ3pCLFVBQVU7SUFFcEMsT0FBT0c7QUFDVDtBQUVBLFNBQVNxQix1QkFBdUJKLGlCQUFpQixFQUFFRSx1QkFBdUIsRUFBRTtJQUMxRSxJQUFNSSxRQUFRTixtQkFDUk8sUUFBUUwseUJBQ1JNLHlCQUF5QkMsSUFBQUEsZUFBUyxFQUFDSCxPQUFPQyxRQUMxQ0osdUJBQXVCSyx3QkFBeUIsR0FBRztJQUV6RCxPQUFPTDtBQUNUIn0=