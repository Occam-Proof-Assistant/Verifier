"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyProof;
    }
});
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../step/proof"));
var _derivation = /*#__PURE__*/ _interopRequireDefault(require("../verify/derivation"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("./statement/qualified"));
var _node = require("../utilities/node");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), derivationNodeQuery = (0, _query.nodeQuery)("/proof/derivation!"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/proof/qualifiedStatement!");
function verifyProof(proofNode, conclusion, proofContext) {
    var proofVerified = false;
    proofContext.begin(proofNode);
    var derivationNode = derivationNodeQuery(proofNode), qualifiedStatementNode = qualifiedStatementNodeQuery(proofNode);
    var derivationVerified = false, qualifiedStatementVerified = false;
    if (derivationNode !== null) {
        derivationVerified = (0, _derivation.default)(derivationNode, proofContext);
    }
    if (qualifiedStatementNode !== null) {
        proofContext.setDerived();
        qualifiedStatementVerified = (0, _qualified.default)(qualifiedStatementNode, proofContext);
        proofContext.resetDerived();
        if (qualifiedStatementVerified) {
            var statementNode = statementNodeQuery(qualifiedStatementNode), proofStep = _proof.default.fromStatementNode(statementNode);
            proofContext.addProofStep(proofStep);
        }
    }
    if (derivationVerified || qualifiedStatementVerified) {
        var lastProofStep = proofContext.getLastProofStep(), proofStep1 = lastProofStep, statementNode1 = proofStep1.getStatementNode(), conclusionStatementNode = conclusion.getStatementNode(), nodeA = statementNode1, nodeB = conclusionStatementNode, nodeMatches = (0, _node.matchNode)(nodeA, nodeB);
        proofVerified = nodeMatches; ///
    }
    proofVerified ? proofContext.complete(proofNode) : proofContext.complete(proofNode);
    return proofVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcm9vZlN0ZXAgZnJvbSBcIi4uL3N0ZXAvcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlEZXJpdmF0aW9uIGZyb20gXCIuLi92ZXJpZnkvZGVyaXZhdGlvblwiO1xuaW1wb3J0IHZlcmlmeVF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi9zdGF0ZW1lbnQvcXVhbGlmaWVkXCI7XG5cbmltcG9ydCB7IG1hdGNoTm9kZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvbm9kZVwiO1xuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvcXVhbGlmaWVkU3RhdGVtZW50L3N0YXRlbWVudCFcIiksXG4gICAgICBkZXJpdmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Byb29mL2Rlcml2YXRpb24hXCIpLFxuICAgICAgcXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Byb29mL3F1YWxpZmllZFN0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVByb29mKHByb29mTm9kZSwgY29uY2x1c2lvbiwgcHJvb2ZDb250ZXh0KSB7XG4gIGxldCBwcm9vZlZlcmlmaWVkID0gZmFsc2U7XG5cbiAgcHJvb2ZDb250ZXh0LmJlZ2luKHByb29mTm9kZSk7XG5cbiAgY29uc3QgZGVyaXZhdGlvbk5vZGUgPSBkZXJpdmF0aW9uTm9kZVF1ZXJ5KHByb29mTm9kZSksXG4gICAgICAgIHF1YWxpZmllZFN0YXRlbWVudE5vZGUgPSBxdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkocHJvb2ZOb2RlKTtcblxuICBsZXQgZGVyaXZhdGlvblZlcmlmaWVkID0gZmFsc2UsXG4gICAgICBxdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGlmIChkZXJpdmF0aW9uTm9kZSAhPT0gbnVsbCkge1xuICAgIGRlcml2YXRpb25WZXJpZmllZCA9IHZlcmlmeURlcml2YXRpb24oZGVyaXZhdGlvbk5vZGUsIHByb29mQ29udGV4dCk7XG4gIH1cblxuICBpZiAocXVhbGlmaWVkU3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHByb29mQ29udGV4dC5zZXREZXJpdmVkKCk7XG5cbiAgICBxdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCA9IHZlcmlmeVF1YWxpZmllZFN0YXRlbWVudChxdWFsaWZpZWRTdGF0ZW1lbnROb2RlLCBwcm9vZkNvbnRleHQpO1xuXG4gICAgcHJvb2ZDb250ZXh0LnJlc2V0RGVyaXZlZCgpO1xuXG4gICAgaWYgKHF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50Tm9kZVF1ZXJ5KHF1YWxpZmllZFN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgICAgcHJvb2ZTdGVwID0gUHJvb2ZTdGVwLmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUpO1xuXG4gICAgICBwcm9vZkNvbnRleHQuYWRkUHJvb2ZTdGVwKHByb29mU3RlcCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRlcml2YXRpb25WZXJpZmllZCB8fCBxdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgIGNvbnN0IGxhc3RQcm9vZlN0ZXAgPSBwcm9vZkNvbnRleHQuZ2V0TGFzdFByb29mU3RlcCgpLFxuICAgICAgICAgIHByb29mU3RlcCA9IGxhc3RQcm9vZlN0ZXAsIC8vL1xuICAgICAgICAgIHN0YXRlbWVudE5vZGUgPSBwcm9vZlN0ZXAuZ2V0U3RhdGVtZW50Tm9kZSgpLFxuICAgICAgICAgIGNvbmNsdXNpb25TdGF0ZW1lbnROb2RlID0gY29uY2x1c2lvbi5nZXRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgICAgbm9kZUEgPSBzdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgICAgbm9kZUIgPSBjb25jbHVzaW9uU3RhdGVtZW50Tm9kZSwgIC8vL1xuICAgICAgICAgIG5vZGVNYXRjaGVzID0gbWF0Y2hOb2RlKG5vZGVBLCBub2RlQik7XG5cbiAgICBwcm9vZlZlcmlmaWVkID0gbm9kZU1hdGNoZXM7ICAvLy9cbiAgfVxuXG4gIHByb29mVmVyaWZpZWQgP1xuICAgIHByb29mQ29udGV4dC5jb21wbGV0ZShwcm9vZk5vZGUpIDpcbiAgICAgIHByb29mQ29udGV4dC5jb21wbGV0ZShwcm9vZk5vZGUpO1xuXG4gIHJldHVybiBwcm9vZlZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeVByb29mIiwic3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiZGVyaXZhdGlvbk5vZGVRdWVyeSIsInF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSIsInByb29mTm9kZSIsImNvbmNsdXNpb24iLCJwcm9vZkNvbnRleHQiLCJwcm9vZlZlcmlmaWVkIiwiYmVnaW4iLCJkZXJpdmF0aW9uTm9kZSIsInF1YWxpZmllZFN0YXRlbWVudE5vZGUiLCJkZXJpdmF0aW9uVmVyaWZpZWQiLCJxdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeURlcml2YXRpb24iLCJzZXREZXJpdmVkIiwidmVyaWZ5UXVhbGlmaWVkU3RhdGVtZW50IiwicmVzZXREZXJpdmVkIiwic3RhdGVtZW50Tm9kZSIsInByb29mU3RlcCIsIlByb29mU3RlcCIsImZyb21TdGF0ZW1lbnROb2RlIiwiYWRkUHJvb2ZTdGVwIiwibGFzdFByb29mU3RlcCIsImdldExhc3RQcm9vZlN0ZXAiLCJnZXRTdGF0ZW1lbnROb2RlIiwiY29uY2x1c2lvblN0YXRlbWVudE5vZGUiLCJub2RlQSIsIm5vZGVCIiwibm9kZU1hdGNoZXMiLCJtYXRjaE5vZGUiLCJjb21wbGV0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBYUE7OztlQUF3QkE7OzswREFYRjsrREFDTzs4REFDUTtvQkFFWDtxQkFDQTs7Ozs7O0FBRTFCLElBQU1DLHFCQUFxQkMsSUFBQUEsZ0JBQVMsRUFBQyxtQ0FDL0JDLHNCQUFzQkQsSUFBQUEsZ0JBQVMsRUFBQyx1QkFDaENFLDhCQUE4QkYsSUFBQUEsZ0JBQVMsRUFBQztBQUUvQixTQUFTRixZQUFZSyxTQUFTLEVBQUVDLFVBQVUsRUFBRUMsWUFBWSxFQUFFO0lBQ3ZFLElBQUlDLGdCQUFnQixLQUFLO0lBRXpCRCxhQUFhRSxLQUFLLENBQUNKO0lBRW5CLElBQU1LLGlCQUFpQlAsb0JBQW9CRSxZQUNyQ00seUJBQXlCUCw0QkFBNEJDO0lBRTNELElBQUlPLHFCQUFxQixLQUFLLEVBQzFCQyw2QkFBNkIsS0FBSztJQUV0QyxJQUFJSCxtQkFBbUIsSUFBSSxFQUFFO1FBQzNCRSxxQkFBcUJFLElBQUFBLG1CQUFnQixFQUFDSixnQkFBZ0JIO0lBQ3hELENBQUM7SUFFRCxJQUFJSSwyQkFBMkIsSUFBSSxFQUFFO1FBQ25DSixhQUFhUSxVQUFVO1FBRXZCRiw2QkFBNkJHLElBQUFBLGtCQUF3QixFQUFDTCx3QkFBd0JKO1FBRTlFQSxhQUFhVSxZQUFZO1FBRXpCLElBQUlKLDRCQUE0QjtZQUM5QixJQUFNSyxnQkFBZ0JqQixtQkFBbUJVLHlCQUNuQ1EsWUFBWUMsY0FBUyxDQUFDQyxpQkFBaUIsQ0FBQ0g7WUFFOUNYLGFBQWFlLFlBQVksQ0FBQ0g7UUFDNUIsQ0FBQztJQUNILENBQUM7SUFFRCxJQUFJUCxzQkFBc0JDLDRCQUE0QjtRQUNwRCxJQUFNVSxnQkFBZ0JoQixhQUFhaUIsZ0JBQWdCLElBQzdDTCxhQUFZSSxlQUNaTCxpQkFBZ0JDLFdBQVVNLGdCQUFnQixJQUMxQ0MsMEJBQTBCcEIsV0FBV21CLGdCQUFnQixJQUNyREUsUUFBUVQsZ0JBQ1JVLFFBQVFGLHlCQUNSRyxjQUFjQyxJQUFBQSxlQUFTLEVBQUNILE9BQU9DO1FBRXJDcEIsZ0JBQWdCcUIsYUFBYyxHQUFHO0lBQ25DLENBQUM7SUFFRHJCLGdCQUNFRCxhQUFhd0IsUUFBUSxDQUFDMUIsYUFDcEJFLGFBQWF3QixRQUFRLENBQUMxQixVQUFVO0lBRXBDLE9BQU9HO0FBQ1QifQ==