"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyProof;
    }
});
var _assertion = /*#__PURE__*/ _interopRequireDefault(require("../assertion"));
var _derivation = /*#__PURE__*/ _interopRequireDefault(require("../verify/derivation"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("./statement/qualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var derivationNodeQuery = (0, _query.nodeQuery)("/proof/derivation!"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/proof/qualifiedStatement!");
function verifyProof(proofNode, consequent, proofContext) {
    var proofVerified = false;
    proofContext.begin(proofNode);
    var derivationNode = derivationNodeQuery(proofNode), qualifiedStatementNode = qualifiedStatementNodeQuery(proofNode);
    var derivationVerified = false, qualifiedStatementVerified = false;
    if (derivationNode !== null) {
        derivationVerified = (0, _derivation.default)(derivationNode, proofContext);
    }
    if (qualifiedStatementNode !== null) {
        qualifiedStatementVerified = (0, _qualified.default)(qualifiedStatementNode, proofContext);
        if (qualifiedStatementVerified) {
            var assertion = _assertion.default.fromQualifiedStatementNode(qualifiedStatementNode);
            proofContext.addAssertion(assertion);
        }
    }
    if (derivationVerified || qualifiedStatementVerified) {
        var lastAssertion = proofContext.getLastAssertion(), assertion1 = lastAssertion, statementNode = consequent.getStatementNode(), assertionStatementNode = assertion1.getStatementNode(), assertionStatementNodeMatches = matchProofStatementNode(assertionStatementNode, statementNode);
        proofVerified = assertionStatementNodeMatches; ///
    }
    proofVerified ? proofContext.complete(proofNode) : proofContext.complete(proofNode);
    return proofVerified;
}
function matchProofStatementNode(assertionStatementNode, statementNode) {
    var assertionNonTerminalNode = assertionStatementNode, nonTerminalNode = statementNode, assertionNonTerminalNodeMatches = matchProofNonTerminalNode(assertionNonTerminalNode, nonTerminalNode), assertionStatementNodeMatches = assertionNonTerminalNodeMatches; ///
    return assertionStatementNodeMatches;
}
function matchProofNode(assertionNode, node) {
    var assertionNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = assertionNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, assertionTerminalNode = assertionNode, assertionTerminalNodeMatches = matchProofTerminalNode(assertionTerminalNode, terminalNode);
            assertionNodeMatches = assertionTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, assertionNonTerminalNode = assertionNode, assertionNonTerminalNodeMatches = matchProofNonTerminalNode(assertionNonTerminalNode, nonTerminalNode);
            assertionNodeMatches = assertionNonTerminalNodeMatches; ///
        }
    }
    return assertionNodeMatches;
}
function matchProofNodes(assertionNodes, nodes) {
    var assertionNodesMatches = false;
    var nodesLength = nodes.length, assertionNodesLength = assertionNodes.length;
    if (nodesLength === assertionNodesLength) {
        assertionNodesMatches = nodes.every(function(node, index) {
            var assertionNode = assertionNodes[index], assertionNodeMatches = matchProofNode(assertionNode, node);
            if (assertionNodeMatches) {
                return true;
            }
        });
    }
    return assertionNodesMatches;
}
function matchProofTerminalNode(assertionTerminalNode, terminalNode) {
    var matches = assertionTerminalNode.match(terminalNode), assertionTerminalNodeMatches = matches; ///
    return assertionTerminalNodeMatches;
}
function matchProofNonTerminalNode(assertionNonTerminalNode, nonTerminalNode) {
    var assertionNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), assertionRuleName = assertionNonTerminalNode.getRuleName(); ///
    if (ruleName === assertionRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), assertionChildNodes = assertionNonTerminalNode.getChildNodes(), nodes = childNodes, assertionNodes = assertionChildNodes, assertionNodesMatches = matchProofNodes(assertionNodes, nodes);
        assertionNonTerminalNodeMatches = assertionNodesMatches; ///
    }
    return assertionNonTerminalNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,