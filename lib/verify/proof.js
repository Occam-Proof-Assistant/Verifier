"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyProof;
    }
});
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _derivation = /*#__PURE__*/ _interopRequireDefault(require("../verify/derivation"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/qualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var derivationNodeQuery = (0, _query.nodeQuery)("/proof/derivation!"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/proof/qualifiedStatement!");
function verifyProof(proofNode, fileContext) {
    var proofVerified = false;
    var proofContext = _proof.default.fromFileContext(fileContext);
    proofContext.begin(proofNode);
    var derivationNode = derivationNodeQuery(proofNode), qualifiedStatementNode = qualifiedStatementNodeQuery(proofNode);
    var derivationVerified = false, qualifiedStatementVerified = false;
    if (derivationNode !== null) {
        derivationVerified = (0, _derivation.default)(derivationNode, proofContext);
    }
    if (qualifiedStatementNode !== null) {
        var derived;
        derived = true;
        proofContext.setDerived(derived);
        qualifiedStatementVerified = (0, _qualified.default)(qualifiedStatementNode, proofContext);
        derived = false;
        proofContext.setDerived(derived);
    }
    // if (derivationVerified) {
    //   const qualifiedStatementNode = qualifiedStatementNodeQuery(proofNode),
    //         qualifiedStatementVerified = verifyQualifiedStatement(qualifiedStatementNode, proofContext);
    //
    //   if (qualifiedStatementVerified) {
    //     const statementNode = conclusion.getStatementNode(),
    //           proofStatementNode = proofStatementNodeQuery(proofNode),
    //           proofStatementNodeMatches = matchProofStatementNode(proofStatementNode, statementNode);
    //
    //     proofVerified = proofStatementNodeMatches;  ///
    //   }
    // }
    proofVerified ? proofContext.complete(proofNode) : proofContext.complete(proofNode);
    return proofVerified;
}
function matchProofStatementNode(proofStatementNode, statementNode) {
    var proofNonTerminalNode = proofStatementNode, nonTerminalNode = statementNode, proofNonTerminalNodeMatches = matchProofNonTerminalNode(proofNonTerminalNode, nonTerminalNode), proofStatementNodeMatches = proofNonTerminalNodeMatches; ///
    return proofStatementNodeMatches;
}
function matchProofNode(proofNode, node) {
    var proofNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = proofNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, proofTerminalNode = proofNode, proofTerminalNodeMatches = matchProofTerminalNode(proofTerminalNode, terminalNode);
            proofNodeMatches = proofTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, proofNonTerminalNode = proofNode, proofNonTerminalNodeMatches = matchProofNonTerminalNode(proofNonTerminalNode, nonTerminalNode);
            proofNodeMatches = proofNonTerminalNodeMatches; ///
        }
    }
    return proofNodeMatches;
}
function matchProofNodes(proofNodes, nodes) {
    var proofNodesMatches = false;
    var nodesLength = nodes.length, proofNodesLength = proofNodes.length;
    if (nodesLength === proofNodesLength) {
        proofNodesMatches = nodes.every(function(node, index) {
            var proofNode = proofNodes[index], proofNodeMatches = matchProofNode(proofNode, node);
            if (proofNodeMatches) {
                return true;
            }
        });
    }
    return proofNodesMatches;
}
function matchProofTerminalNode(proofTerminalNode, terminalNode) {
    var matches = proofTerminalNode.match(terminalNode), proofTerminalNodeMatches = matches; ///
    return proofTerminalNodeMatches;
}
function matchProofNonTerminalNode(proofNonTerminalNode, nonTerminalNode) {
    var proofNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), proofRuleName = proofNonTerminalNode.getRuleName(); ///
    if (ruleName === proofRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), proofChildNodes = proofNonTerminalNode.getChildNodes(), nodes = childNodes, proofNodes = proofChildNodes, proofNodesMatches = matchProofNodes(proofNodes, nodes);
        proofNonTerminalNodeMatches = proofNodesMatches; ///
    }
    return proofNonTerminalNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,