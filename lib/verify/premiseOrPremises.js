"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyPremiseOrPremises;
    }
});
var _premise = /*#__PURE__*/ _interopRequireDefault(require("../premise"));
var _metaAssertion = /*#__PURE__*/ _interopRequireDefault(require("../metaAssertion"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement"), unqualifiedMetastatementNodesQuery = (0, _query.nodesQuery)("/premise|premises/unqualifiedMetastatement");
function verifyPremiseOrPremises(premiseOrPremisesNode, premises, metaproofContext) {
    var premiseOrPremisesVerified;
    metaproofContext.begin(premiseOrPremisesNode);
    var unqualifiedMetastatementNodes = unqualifiedMetastatementNodesQuery(premiseOrPremisesNode);
    premiseOrPremisesVerified = unqualifiedMetastatementNodes.every(function(unqualifiedMetastatementNode) {
        var unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
        if (unqualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaAssertion = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode), premise = _premise.default.fromMetastatementNode(metastatementNode);
            premises.push(premise);
            metaproofContext.addMetaAssertion(metaAssertion);
            return true;
        }
    });
    premiseOrPremisesVerified ? metaproofContext.complete(premiseOrPremisesNode) : metaproofContext.halt(premiseOrPremisesNode);
    return premiseOrPremisesVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcHJlbWlzZU9yUHJlbWlzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcmVtaXNlIGZyb20gXCIuLi9wcmVtaXNlXCI7XG5pbXBvcnQgTWV0YUFzc2VydGlvbiBmcm9tIFwiLi4vbWV0YUFzc2VydGlvblwiO1xuaW1wb3J0IHZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L21ldGFzdGF0ZW1lbnQvdW5xdWFsaWZpZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5LCBub2Rlc1F1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudC9tZXRhc3RhdGVtZW50XCIpLFxuICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvcHJlbWlzZXxwcmVtaXNlcy91bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVByZW1pc2VPclByZW1pc2VzKHByZW1pc2VPclByZW1pc2VzTm9kZSwgcHJlbWlzZXMsIG1ldGFwcm9vZkNvbnRleHQpIHtcbiAgbGV0IHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQ7XG5cbiAgbWV0YXByb29mQ29udGV4dC5iZWdpbihwcmVtaXNlT3JQcmVtaXNlc05vZGUpO1xuXG4gIGNvbnN0IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzID0gdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXNRdWVyeShwcmVtaXNlT3JQcmVtaXNlc05vZGUpO1xuXG4gIHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQgPSB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2Rlcy5ldmVyeSgodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSkgPT4ge1xuICAgIGNvbnN0IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkID0gdmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUsIG1ldGFwcm9vZkNvbnRleHQpO1xuXG4gICAgaWYgKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgICBjb25zdCBtZXRhc3RhdGVtZW50Tm9kZSA9IG1ldGFzdGF0ZW1lbnROb2RlUXVlcnkodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgICBtZXRhQXNzZXJ0aW9uID0gTWV0YUFzc2VydGlvbi5mcm9tVW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICAgIHByZW1pc2UgPSBQcmVtaXNlLmZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZSk7XG5cbiAgICAgIHByZW1pc2VzLnB1c2gocHJlbWlzZSk7XG5cbiAgICAgIG1ldGFwcm9vZkNvbnRleHQuYWRkTWV0YUFzc2VydGlvbihtZXRhQXNzZXJ0aW9uKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkID9cbiAgICBtZXRhcHJvb2ZDb250ZXh0LmNvbXBsZXRlKHByZW1pc2VPclByZW1pc2VzTm9kZSkgOlxuICAgICAgbWV0YXByb29mQ29udGV4dC5oYWx0KHByZW1pc2VPclByZW1pc2VzTm9kZSk7XG5cbiAgcmV0dXJuIHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5UHJlbWlzZU9yUHJlbWlzZXMiLCJtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXNRdWVyeSIsIm5vZGVzUXVlcnkiLCJwcmVtaXNlT3JQcmVtaXNlc05vZGUiLCJwcmVtaXNlcyIsIm1ldGFwcm9vZkNvbnRleHQiLCJwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkIiwiYmVnaW4iLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlcyIsImV2ZXJ5IiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IiwibWV0YXN0YXRlbWVudE5vZGUiLCJtZXRhQXNzZXJ0aW9uIiwiTWV0YUFzc2VydGlvbiIsImZyb21VbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlIiwicHJlbWlzZSIsIlByZW1pc2UiLCJmcm9tTWV0YXN0YXRlbWVudE5vZGUiLCJwdXNoIiwiYWRkTWV0YUFzc2VydGlvbiIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBV0E7OztlQUF3QkE7Ozs0REFUSjtrRUFDTTtnRUFDaUI7cUJBRUw7Ozs7OztBQUV0QyxJQUFNQyx5QkFBeUJDLElBQUFBLGdCQUFTLEVBQUMsNENBQ25DQyxxQ0FBcUNDLElBQUFBLGlCQUFVLEVBQUM7QUFFdkMsU0FBU0osd0JBQXdCSyxxQkFBcUIsRUFBRUMsUUFBUSxFQUFFQyxnQkFBZ0IsRUFBRTtJQUNqRyxJQUFJQztJQUVKRCxpQkFBaUJFLEtBQUssQ0FBQ0o7SUFFdkIsSUFBTUssZ0NBQWdDUCxtQ0FBbUNFO0lBRXpFRyw0QkFBNEJFLDhCQUE4QkMsS0FBSyxDQUFDLFNBQUNDLDhCQUFpQztRQUNoRyxJQUFNQyxtQ0FBbUNDLElBQUFBLG9CQUE4QixFQUFDRiw4QkFBOEJMO1FBRXRHLElBQUlNLGtDQUFrQztZQUNwQyxJQUFNRSxvQkFBb0JkLHVCQUF1QlcsK0JBQzNDSSxnQkFBZ0JDLHNCQUFhLENBQUNDLGdDQUFnQyxDQUFDTiwrQkFDL0RPLFVBQVVDLGdCQUFPLENBQUNDLHFCQUFxQixDQUFDTjtZQUU5Q1QsU0FBU2dCLElBQUksQ0FBQ0g7WUFFZFosaUJBQWlCZ0IsZ0JBQWdCLENBQUNQO1lBRWxDLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSDtJQUVBUiw0QkFDRUQsaUJBQWlCaUIsUUFBUSxDQUFDbkIseUJBQ3hCRSxpQkFBaUJrQixJQUFJLENBQUNwQixzQkFBc0I7SUFFaEQsT0FBT0c7QUFDVCJ9