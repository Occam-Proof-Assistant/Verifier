"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyPremiseOrPremises;
    }
});
var _premise = /*#__PURE__*/ _interopRequireDefault(require("../premise"));
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../step/metaproof"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement"), unqualifiedMetastatementNodesQuery = (0, _query.nodesQuery)("/premise|premises/unqualifiedMetastatement");
function verifyPremiseOrPremises(premiseOrPremisesNode, premises, metaproofContext) {
    var premiseOrPremisesVerified;
    metaproofContext.begin(premiseOrPremisesNode);
    var unqualifiedMetastatementNodes = unqualifiedMetastatementNodesQuery(premiseOrPremisesNode);
    premiseOrPremisesVerified = unqualifiedMetastatementNodes.every(function(unqualifiedMetastatementNode) {
        var unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
        if (unqualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaproofStep = _metaproof.default.fromMetastatementNode(metastatementNode), premise = _premise.default.fromMetastatementNode(metastatementNode);
            premises.push(premise);
            metaproofContext.addMetaproofStep(metaproofStep);
            return true;
        }
    });
    premiseOrPremisesVerified ? metaproofContext.complete(premiseOrPremisesNode) : metaproofContext.halt(premiseOrPremisesNode);
    return premiseOrPremisesVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcHJlbWlzZU9yUHJlbWlzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcmVtaXNlIGZyb20gXCIuLi9wcmVtaXNlXCI7XG5pbXBvcnQgTWV0YXByb29mU3RlcCBmcm9tIFwiLi4vc3RlcC9tZXRhcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQgZnJvbSBcIi4uL3ZlcmlmeS9tZXRhc3RhdGVtZW50L3VucXVhbGlmaWVkXCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSwgbm9kZXNRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgbWV0YXN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQvbWV0YXN0YXRlbWVudFwiKSxcbiAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzUXVlcnkgPSBub2Rlc1F1ZXJ5KFwiL3ByZW1pc2V8cHJlbWlzZXMvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50XCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlQcmVtaXNlT3JQcmVtaXNlcyhwcmVtaXNlT3JQcmVtaXNlc05vZGUsIHByZW1pc2VzLCBtZXRhcHJvb2ZDb250ZXh0KSB7XG4gIGxldCBwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkO1xuXG4gIG1ldGFwcm9vZkNvbnRleHQuYmVnaW4ocHJlbWlzZU9yUHJlbWlzZXNOb2RlKTtcblxuICBjb25zdCB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlcyA9IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzUXVlcnkocHJlbWlzZU9yUHJlbWlzZXNOb2RlKTtcblxuICBwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkID0gdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXMuZXZlcnkoKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpID0+IHtcbiAgICBjb25zdCB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCA9IHZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlLCBtZXRhcHJvb2ZDb250ZXh0KTtcblxuICAgIGlmICh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgICAgY29uc3QgbWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgICAgbWV0YXByb29mU3RlcCA9IE1ldGFwcm9vZlN0ZXAuZnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICAgIHByZW1pc2UgPSBQcmVtaXNlLmZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZSk7XG5cbiAgICAgIHByZW1pc2VzLnB1c2gocHJlbWlzZSk7XG5cbiAgICAgIG1ldGFwcm9vZkNvbnRleHQuYWRkTWV0YXByb29mU3RlcChtZXRhcHJvb2ZTdGVwKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkID9cbiAgICBtZXRhcHJvb2ZDb250ZXh0LmNvbXBsZXRlKHByZW1pc2VPclByZW1pc2VzTm9kZSkgOlxuICAgICAgbWV0YXByb29mQ29udGV4dC5oYWx0KHByZW1pc2VPclByZW1pc2VzTm9kZSk7XG5cbiAgcmV0dXJuIHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5UHJlbWlzZU9yUHJlbWlzZXMiLCJtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXNRdWVyeSIsIm5vZGVzUXVlcnkiLCJwcmVtaXNlT3JQcmVtaXNlc05vZGUiLCJwcmVtaXNlcyIsIm1ldGFwcm9vZkNvbnRleHQiLCJwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkIiwiYmVnaW4iLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlcyIsImV2ZXJ5IiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IiwibWV0YXN0YXRlbWVudE5vZGUiLCJtZXRhcHJvb2ZTdGVwIiwiTWV0YXByb29mU3RlcCIsImZyb21NZXRhc3RhdGVtZW50Tm9kZSIsInByZW1pc2UiLCJQcmVtaXNlIiwicHVzaCIsImFkZE1ldGFwcm9vZlN0ZXAiLCJjb21wbGV0ZSIsImhhbHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVdBOzs7ZUFBd0JBOzs7NERBVEo7OERBQ007Z0VBQ2lCO3FCQUVMOzs7Ozs7QUFFdEMsSUFBTUMseUJBQXlCQyxJQUFBQSxnQkFBUyxFQUFDLDRDQUNuQ0MscUNBQXFDQyxJQUFBQSxpQkFBVSxFQUFDO0FBRXZDLFNBQVNKLHdCQUF3QksscUJBQXFCLEVBQUVDLFFBQVEsRUFBRUMsZ0JBQWdCLEVBQUU7SUFDakcsSUFBSUM7SUFFSkQsaUJBQWlCRSxLQUFLLENBQUNKO0lBRXZCLElBQU1LLGdDQUFnQ1AsbUNBQW1DRTtJQUV6RUcsNEJBQTRCRSw4QkFBOEJDLEtBQUssQ0FBQyxTQUFDQyw4QkFBaUM7UUFDaEcsSUFBTUMsbUNBQW1DQyxJQUFBQSxvQkFBOEIsRUFBQ0YsOEJBQThCTDtRQUV0RyxJQUFJTSxrQ0FBa0M7WUFDcEMsSUFBTUUsb0JBQW9CZCx1QkFBdUJXLCtCQUMzQ0ksZ0JBQWdCQyxrQkFBYSxDQUFDQyxxQkFBcUIsQ0FBQ0gsb0JBQ3BESSxVQUFVQyxnQkFBTyxDQUFDRixxQkFBcUIsQ0FBQ0g7WUFFOUNULFNBQVNlLElBQUksQ0FBQ0Y7WUFFZFosaUJBQWlCZSxnQkFBZ0IsQ0FBQ047WUFFbEMsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNIO0lBRUFSLDRCQUNFRCxpQkFBaUJnQixRQUFRLENBQUNsQix5QkFDeEJFLGlCQUFpQmlCLElBQUksQ0FBQ25CLHNCQUFzQjtJQUVoRCxPQUFPRztBQUNUIn0=