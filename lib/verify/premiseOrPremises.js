"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyPremiseOrPremises;
    }
});
var _premise = /*#__PURE__*/ _interopRequireDefault(require("../premise"));
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../step/metaproof"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodesQuery = (0, _query.nodesQuery)("/premise|premises/unqualifiedMetastatement/metastatement");
function verifyPremiseOrPremises(premiseOrPremisesNode, premises, metaproofContext) {
    var premiseOrPremisesVerified;
    metaproofContext.begin(premiseOrPremisesNode);
    var metastatementNodes = metastatementNodesQuery(premiseOrPremisesNode);
    premiseOrPremisesVerified = metastatementNodes.every(function(unqualifiedMetastatementNode) {
        var unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
        if (unqualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaproofStep = _metaproof.default.fromMetastatementNode(metastatementNode), premise = _premise.default.fromMetastatementNode(metastatementNode);
            premises.push(premise);
            metaproofContext.addMetaproofStep(metaproofStep);
            return true;
        }
    });
    premiseOrPremisesVerified ? metaproofContext.complete(premiseOrPremisesNode) : metaproofContext.halt(premiseOrPremisesNode);
    return premiseOrPremisesVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcHJlbWlzZU9yUHJlbWlzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcmVtaXNlIGZyb20gXCIuLi9wcmVtaXNlXCI7XG5pbXBvcnQgTWV0YXByb29mU3RlcCBmcm9tIFwiLi4vc3RlcC9tZXRhcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQgZnJvbSBcIi4uL3ZlcmlmeS9tZXRhc3RhdGVtZW50L3VucXVhbGlmaWVkXCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSwgbm9kZXNRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgbWV0YXN0YXRlbWVudE5vZGVzUXVlcnkgPSBub2Rlc1F1ZXJ5KFwiL3ByZW1pc2V8cHJlbWlzZXMvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50L21ldGFzdGF0ZW1lbnRcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVByZW1pc2VPclByZW1pc2VzKHByZW1pc2VPclByZW1pc2VzTm9kZSwgcHJlbWlzZXMsIG1ldGFwcm9vZkNvbnRleHQpIHtcbiAgbGV0IHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQ7XG5cbiAgbWV0YXByb29mQ29udGV4dC5iZWdpbihwcmVtaXNlT3JQcmVtaXNlc05vZGUpO1xuXG4gIGNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlcyA9IG1ldGFzdGF0ZW1lbnROb2Rlc1F1ZXJ5KHByZW1pc2VPclByZW1pc2VzTm9kZSk7XG5cbiAgcHJlbWlzZU9yUHJlbWlzZXNWZXJpZmllZCA9IG1ldGFzdGF0ZW1lbnROb2Rlcy5ldmVyeSgodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSkgPT4ge1xuICAgIGNvbnN0IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkID0gdmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUsIG1ldGFwcm9vZkNvbnRleHQpO1xuXG4gICAgaWYgKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgICBjb25zdCBtZXRhc3RhdGVtZW50Tm9kZSA9IG1ldGFzdGF0ZW1lbnROb2RlUXVlcnkodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgICBtZXRhcHJvb2ZTdGVwID0gTWV0YXByb29mU3RlcC5mcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgICAgcHJlbWlzZSA9IFByZW1pc2UuZnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgcHJlbWlzZXMucHVzaChwcmVtaXNlKTtcblxuICAgICAgbWV0YXByb29mQ29udGV4dC5hZGRNZXRhcHJvb2ZTdGVwKG1ldGFwcm9vZlN0ZXApO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQgP1xuICAgIG1ldGFwcm9vZkNvbnRleHQuY29tcGxldGUocHJlbWlzZU9yUHJlbWlzZXNOb2RlKSA6XG4gICAgICBtZXRhcHJvb2ZDb250ZXh0LmhhbHQocHJlbWlzZU9yUHJlbWlzZXNOb2RlKTtcblxuICByZXR1cm4gcHJlbWlzZU9yUHJlbWlzZXNWZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlQcmVtaXNlT3JQcmVtaXNlcyIsIm1ldGFzdGF0ZW1lbnROb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsInByZW1pc2VPclByZW1pc2VzTm9kZSIsInByZW1pc2VzIiwibWV0YXByb29mQ29udGV4dCIsInByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQiLCJiZWdpbiIsIm1ldGFzdGF0ZW1lbnROb2RlcyIsImV2ZXJ5IiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IiwibWV0YXN0YXRlbWVudE5vZGUiLCJtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5IiwibWV0YXByb29mU3RlcCIsIk1ldGFwcm9vZlN0ZXAiLCJmcm9tTWV0YXN0YXRlbWVudE5vZGUiLCJwcmVtaXNlIiwiUHJlbWlzZSIsInB1c2giLCJhZGRNZXRhcHJvb2ZTdGVwIiwiY29tcGxldGUiLCJoYWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFVQTs7O2VBQXdCQTs7OzREQVJKOzhEQUNNO2dFQUNpQjtxQkFFTDs7Ozs7O0FBRXRDLElBQU1DLDBCQUEwQkMsSUFBQUEsaUJBQVUsRUFBQztBQUU1QixTQUFTRix3QkFBd0JHLHFCQUFxQixFQUFFQyxRQUFRLEVBQUVDLGdCQUFnQixFQUFFO0lBQ2pHLElBQUlDO0lBRUpELGlCQUFpQkUsS0FBSyxDQUFDSjtJQUV2QixJQUFNSyxxQkFBcUJQLHdCQUF3QkU7SUFFbkRHLDRCQUE0QkUsbUJBQW1CQyxLQUFLLENBQUMsU0FBQ0MsOEJBQWlDO1FBQ3JGLElBQU1DLG1DQUFtQ0MsSUFBQUEsb0JBQThCLEVBQUNGLDhCQUE4Qkw7UUFFdEcsSUFBSU0sa0NBQWtDO1lBQ3BDLElBQU1FLG9CQUFvQkMsdUJBQXVCSiwrQkFDM0NLLGdCQUFnQkMsa0JBQWEsQ0FBQ0MscUJBQXFCLENBQUNKLG9CQUNwREssVUFBVUMsZ0JBQU8sQ0FBQ0YscUJBQXFCLENBQUNKO1lBRTlDVCxTQUFTZ0IsSUFBSSxDQUFDRjtZQUVkYixpQkFBaUJnQixnQkFBZ0IsQ0FBQ047WUFFbEMsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNIO0lBRUFULDRCQUNFRCxpQkFBaUJpQixRQUFRLENBQUNuQix5QkFDeEJFLGlCQUFpQmtCLElBQUksQ0FBQ3BCLHNCQUFzQjtJQUVoRCxPQUFPRztBQUNUIn0=