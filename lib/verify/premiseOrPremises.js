"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyPremiseOrPremises;
    }
});
var _premise = /*#__PURE__*/ _interopRequireDefault(require("../premise"));
var _metaAssertion = /*#__PURE__*/ _interopRequireDefault(require("../metaAssertion"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement"), unqualifiedMetastatementNodesQuery = (0, _query.nodesQuery)("/premise|premises/unqualifiedMetastatement");
function verifyPremiseOrPremises(premiseOrPremisesNode, premises) {
    var context = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this;
    var premiseOrPremisesVerified;
    context.begin(premiseOrPremisesNode);
    var unqualifiedMetastatementNodes = unqualifiedMetastatementNodesQuery(premiseOrPremisesNode);
    premiseOrPremisesVerified = unqualifiedMetastatementNodes.every(function(unqualifiedMetastatementNode) {
        var unqualifiedMetastatementVerified = context.verifyUnqualifiedMetastatement(unqualifiedMetastatementNode);
        if (unqualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaAssertion = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode), premise = _premise.default.fromMetastatementNode(metastatementNode);
            premises.push(premise);
            context.addMetaAssertion(metaAssertion);
            return true;
        }
    });
    premiseOrPremisesVerified ? context.complete(premiseOrPremisesNode) : context.halt(premiseOrPremisesNode);
    return premiseOrPremisesVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcHJlbWlzZU9yUHJlbWlzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcmVtaXNlIGZyb20gXCIuLi9wcmVtaXNlXCI7XG5pbXBvcnQgTWV0YUFzc2VydGlvbiBmcm9tIFwiLi4vbWV0YUFzc2VydGlvblwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50L21ldGFzdGF0ZW1lbnRcIiksXG4gICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2Rlc1F1ZXJ5ID0gbm9kZXNRdWVyeShcIi9wcmVtaXNlfHByZW1pc2VzL3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudFwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5UHJlbWlzZU9yUHJlbWlzZXMocHJlbWlzZU9yUHJlbWlzZXNOb2RlLCBwcmVtaXNlcywgY29udGV4dCA9IHRoaXMpIHtcbiAgbGV0IHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQ7XG5cbiAgY29udGV4dC5iZWdpbihwcmVtaXNlT3JQcmVtaXNlc05vZGUpO1xuXG4gIGNvbnN0IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzID0gdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXNRdWVyeShwcmVtaXNlT3JQcmVtaXNlc05vZGUpO1xuXG4gIHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQgPSB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2Rlcy5ldmVyeSgodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSkgPT4ge1xuICAgIGNvbnN0IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkID0gY29udGV4dC52ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSk7XG5cbiAgICBpZiAodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQpIHtcbiAgICAgIGNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlID0gbWV0YXN0YXRlbWVudE5vZGVRdWVyeSh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICAgIG1ldGFBc3NlcnRpb24gPSBNZXRhQXNzZXJ0aW9uLmZyb21VbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgICAgcHJlbWlzZSA9IFByZW1pc2UuZnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgcHJlbWlzZXMucHVzaChwcmVtaXNlKTtcblxuICAgICAgY29udGV4dC5hZGRNZXRhQXNzZXJ0aW9uKG1ldGFBc3NlcnRpb24pO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQgP1xuICAgIGNvbnRleHQuY29tcGxldGUocHJlbWlzZU9yUHJlbWlzZXNOb2RlKSA6XG4gICAgICBjb250ZXh0LmhhbHQocHJlbWlzZU9yUHJlbWlzZXNOb2RlKTtcblxuICByZXR1cm4gcHJlbWlzZU9yUHJlbWlzZXNWZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlQcmVtaXNlT3JQcmVtaXNlcyIsIm1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsInByZW1pc2VPclByZW1pc2VzTm9kZSIsInByZW1pc2VzIiwiY29udGV4dCIsInByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQiLCJiZWdpbiIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzIiwiZXZlcnkiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlIiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQiLCJtZXRhc3RhdGVtZW50Tm9kZSIsIm1ldGFBc3NlcnRpb24iLCJNZXRhQXNzZXJ0aW9uIiwiZnJvbVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUiLCJwcmVtaXNlIiwiUHJlbWlzZSIsImZyb21NZXRhc3RhdGVtZW50Tm9kZSIsInB1c2giLCJhZGRNZXRhQXNzZXJ0aW9uIiwiY29tcGxldGUiLCJoYWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFVQTs7O2VBQXdCQTs7OzREQVJKO2tFQUNNO3FCQUVZOzs7Ozs7QUFFdEMsSUFBTUMseUJBQXlCQyxJQUFBQSxnQkFBUyxFQUFDLDRDQUNuQ0MscUNBQXFDQyxJQUFBQSxpQkFBVSxFQUFDO0FBRXZDLFNBQVNKLHdCQUF3QksscUJBQXFCLEVBQUVDLFFBQVEsRUFBa0I7UUFBaEJDLFVBQUFBLGlFQUFVLElBQUk7SUFDN0YsSUFBSUM7SUFFSkQsUUFBUUUsS0FBSyxDQUFDSjtJQUVkLElBQU1LLGdDQUFnQ1AsbUNBQW1DRTtJQUV6RUcsNEJBQTRCRSw4QkFBOEJDLEtBQUssQ0FBQyxTQUFDQyw4QkFBaUM7UUFDaEcsSUFBTUMsbUNBQW1DTixRQUFRTyw4QkFBOEIsQ0FBQ0Y7UUFFaEYsSUFBSUMsa0NBQWtDO1lBQ3BDLElBQU1FLG9CQUFvQmQsdUJBQXVCVywrQkFDM0NJLGdCQUFnQkMsc0JBQWEsQ0FBQ0MsZ0NBQWdDLENBQUNOLCtCQUMvRE8sVUFBVUMsZ0JBQU8sQ0FBQ0MscUJBQXFCLENBQUNOO1lBRTlDVCxTQUFTZ0IsSUFBSSxDQUFDSDtZQUVkWixRQUFRZ0IsZ0JBQWdCLENBQUNQO1lBRXpCLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSDtJQUVBUiw0QkFDRUQsUUFBUWlCLFFBQVEsQ0FBQ25CLHlCQUNmRSxRQUFRa0IsSUFBSSxDQUFDcEIsc0JBQXNCO0lBRXZDLE9BQU9HO0FBQ1QifQ==