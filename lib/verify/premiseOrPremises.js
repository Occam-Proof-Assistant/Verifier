"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyPremiseOrPremises;
    }
});
var _premise = /*#__PURE__*/ _interopRequireDefault(require("../premise"));
var _metaAssertion = /*#__PURE__*/ _interopRequireDefault(require("../metaAssertion"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement"), unqualifiedMetastatementNodesQuery = (0, _query.nodesQuery)("/premise|premises/unqualifiedMetastatement");
function verifyPremiseOrPremises(premiseOrPremisesNode, premises) {
    var context = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this;
    var premiseOrPremisesVerified;
    context.begin(premiseOrPremisesNode);
    var unqualifiedMetastatementNodes = unqualifiedMetastatementNodesQuery(premiseOrPremisesNode);
    premiseOrPremisesVerified = unqualifiedMetastatementNodes.every(function(unqualifiedMetastatementNode) {
        var unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, context);
        if (unqualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaAssertion = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode), premise = _premise.default.fromMetastatementNode(metastatementNode);
            premises.push(premise);
            context.addMetaAssertion(metaAssertion);
            return true;
        }
    });
    premiseOrPremisesVerified ? context.complete(premiseOrPremisesNode) : context.halt(premiseOrPremisesNode);
    return premiseOrPremisesVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcHJlbWlzZU9yUHJlbWlzZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcmVtaXNlIGZyb20gXCIuLi9wcmVtaXNlXCI7XG5pbXBvcnQgTWV0YUFzc2VydGlvbiBmcm9tIFwiLi4vbWV0YUFzc2VydGlvblwiO1xuaW1wb3J0IHZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L21ldGFzdGF0ZW1lbnQvdW5xdWFsaWZpZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5LCBub2Rlc1F1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudC9tZXRhc3RhdGVtZW50XCIpLFxuICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvcHJlbWlzZXxwcmVtaXNlcy91bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVByZW1pc2VPclByZW1pc2VzKHByZW1pc2VPclByZW1pc2VzTm9kZSwgcHJlbWlzZXMsIGNvbnRleHQgPSB0aGlzKSB7XG4gIGxldCBwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkO1xuXG4gIGNvbnRleHQuYmVnaW4ocHJlbWlzZU9yUHJlbWlzZXNOb2RlKTtcblxuICBjb25zdCB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlcyA9IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzUXVlcnkocHJlbWlzZU9yUHJlbWlzZXNOb2RlKTtcblxuICBwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkID0gdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXMuZXZlcnkoKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpID0+IHtcbiAgICBjb25zdCB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCA9IHZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlLCBjb250ZXh0KTtcblxuICAgIGlmICh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgICAgY29uc3QgbWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgICAgbWV0YUFzc2VydGlvbiA9IE1ldGFBc3NlcnRpb24uZnJvbVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgICBwcmVtaXNlID0gUHJlbWlzZS5mcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgICBwcmVtaXNlcy5wdXNoKHByZW1pc2UpO1xuXG4gICAgICBjb250ZXh0LmFkZE1ldGFBc3NlcnRpb24obWV0YUFzc2VydGlvbik7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcHJlbWlzZU9yUHJlbWlzZXNWZXJpZmllZCA/XG4gICAgY29udGV4dC5jb21wbGV0ZShwcmVtaXNlT3JQcmVtaXNlc05vZGUpIDpcbiAgICAgIGNvbnRleHQuaGFsdChwcmVtaXNlT3JQcmVtaXNlc05vZGUpO1xuXG4gIHJldHVybiBwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeVByZW1pc2VPclByZW1pc2VzIiwibWV0YXN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzUXVlcnkiLCJub2Rlc1F1ZXJ5IiwicHJlbWlzZU9yUHJlbWlzZXNOb2RlIiwicHJlbWlzZXMiLCJjb250ZXh0IiwicHJlbWlzZU9yUHJlbWlzZXNWZXJpZmllZCIsImJlZ2luIiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXMiLCJldmVyeSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCIsIm1ldGFzdGF0ZW1lbnROb2RlIiwibWV0YUFzc2VydGlvbiIsIk1ldGFBc3NlcnRpb24iLCJmcm9tVW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsInByZW1pc2UiLCJQcmVtaXNlIiwiZnJvbU1ldGFzdGF0ZW1lbnROb2RlIiwicHVzaCIsImFkZE1ldGFBc3NlcnRpb24iLCJjb21wbGV0ZSIsImhhbHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVdBOzs7ZUFBd0JBOzs7NERBVEo7a0VBQ007Z0VBQ2lCO3FCQUVMOzs7Ozs7QUFFdEMsSUFBTUMseUJBQXlCQyxJQUFBQSxnQkFBUyxFQUFDLDRDQUNuQ0MscUNBQXFDQyxJQUFBQSxpQkFBVSxFQUFDO0FBRXZDLFNBQVNKLHdCQUF3QksscUJBQXFCLEVBQUVDLFFBQVEsRUFBa0I7UUFBaEJDLFVBQUFBLGlFQUFVLElBQUk7SUFDN0YsSUFBSUM7SUFFSkQsUUFBUUUsS0FBSyxDQUFDSjtJQUVkLElBQU1LLGdDQUFnQ1AsbUNBQW1DRTtJQUV6RUcsNEJBQTRCRSw4QkFBOEJDLEtBQUssQ0FBQyxTQUFDQyw4QkFBaUM7UUFDaEcsSUFBTUMsbUNBQW1DQyxJQUFBQSxvQkFBOEIsRUFBQ0YsOEJBQThCTDtRQUV0RyxJQUFJTSxrQ0FBa0M7WUFDcEMsSUFBTUUsb0JBQW9CZCx1QkFBdUJXLCtCQUMzQ0ksZ0JBQWdCQyxzQkFBYSxDQUFDQyxnQ0FBZ0MsQ0FBQ04sK0JBQy9ETyxVQUFVQyxnQkFBTyxDQUFDQyxxQkFBcUIsQ0FBQ047WUFFOUNULFNBQVNnQixJQUFJLENBQUNIO1lBRWRaLFFBQVFnQixnQkFBZ0IsQ0FBQ1A7WUFFekIsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNIO0lBRUFSLDRCQUNFRCxRQUFRaUIsUUFBUSxDQUFDbkIseUJBQ2ZFLFFBQVFrQixJQUFJLENBQUNwQixzQkFBc0I7SUFFdkMsT0FBT0c7QUFDVCJ9