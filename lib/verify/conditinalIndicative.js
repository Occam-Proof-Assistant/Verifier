"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConditionalIndicative;
    }
});
var _consequent = /*#__PURE__*/ _interopRequireDefault(require("../verify/consequent"));
var _antecedent = /*#__PURE__*/ _interopRequireDefault(require("../verify/antecedent"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var consequentNodeQuery = (0, _query.nodeQuery)("/conditionalIndicative/consequent!"), antecedentsNodeQuery = (0, _query.nodesQuery)("/conditionalIndicative/antecedent");
function verifyConditionalIndicative(conditionalIndicativeNode, antecedents, consequents, proofContext) {
    var conditionalIndicativeVerified = false;
    proofContext.begin(conditionalIndicativeNode);
    var consequentNode = consequentNodeQuery(conditionalIndicativeNode), antecedentNodes = antecedentsNodeQuery(conditionalIndicativeNode), antecedentsVerified = antecedentNodes.every(function(antecedentNode) {
        var antecedentVerified = (0, _antecedent.default)(antecedentNode, antecedents, proofContext);
        if (antecedentVerified) {
            return true;
        }
    });
    if (antecedentsVerified) {
        var consequentVerified = (0, _consequent.default)(consequentNode, consequents, proofContext);
        conditionalIndicativeVerified = consequentVerified; ///
    }
    conditionalIndicativeVerified ? proofContext.complete(conditionalIndicativeNode) : proofContext.halt(conditionalIndicativeNode);
    return conditionalIndicativeVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uZGl0aW5hbEluZGljYXRpdmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB2ZXJpZnlDb25zZXF1ZW50IGZyb20gXCIuLi92ZXJpZnkvY29uc2VxdWVudFwiO1xuaW1wb3J0IHZlcmlmeUFudGVjZWRlbnQgZnJvbSBcIi4uL3ZlcmlmeS9hbnRlY2VkZW50XCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSwgbm9kZXNRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgY29uc2VxdWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9jb25kaXRpb25hbEluZGljYXRpdmUvY29uc2VxdWVudCFcIiksXG4gICAgICBhbnRlY2VkZW50c05vZGVRdWVyeSA9IG5vZGVzUXVlcnkoXCIvY29uZGl0aW9uYWxJbmRpY2F0aXZlL2FudGVjZWRlbnRcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeUNvbmRpdGlvbmFsSW5kaWNhdGl2ZShjb25kaXRpb25hbEluZGljYXRpdmVOb2RlLCBhbnRlY2VkZW50cywgY29uc2VxdWVudHMsIHByb29mQ29udGV4dCkge1xuICBsZXQgY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQgPSBmYWxzZTtcblxuICBwcm9vZkNvbnRleHQuYmVnaW4oY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSk7XG5cbiAgY29uc3QgY29uc2VxdWVudE5vZGUgPSBjb25zZXF1ZW50Tm9kZVF1ZXJ5KGNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUpLFxuICAgICAgICBhbnRlY2VkZW50Tm9kZXMgPSBhbnRlY2VkZW50c05vZGVRdWVyeShjb25kaXRpb25hbEluZGljYXRpdmVOb2RlKSxcbiAgICAgICAgYW50ZWNlZGVudHNWZXJpZmllZCA9IGFudGVjZWRlbnROb2Rlcy5ldmVyeSgoYW50ZWNlZGVudE5vZGUpID0+IHtcbiAgICAgICAgICBjb25zdCBhbnRlY2VkZW50VmVyaWZpZWQgPSB2ZXJpZnlBbnRlY2VkZW50KGFudGVjZWRlbnROb2RlLCBhbnRlY2VkZW50cywgcHJvb2ZDb250ZXh0KTtcblxuICAgICAgICAgIGlmIChhbnRlY2VkZW50VmVyaWZpZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgaWYgKGFudGVjZWRlbnRzVmVyaWZpZWQpIHtcbiAgICBjb25zdCBjb25zZXF1ZW50VmVyaWZpZWQgPSB2ZXJpZnlDb25zZXF1ZW50KGNvbnNlcXVlbnROb2RlLCBjb25zZXF1ZW50cywgcHJvb2ZDb250ZXh0KTtcblxuICAgIGNvbmRpdGlvbmFsSW5kaWNhdGl2ZVZlcmlmaWVkID0gY29uc2VxdWVudFZlcmlmaWVkOyAgLy8vXG4gIH1cblxuICBjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCA/XG4gICAgcHJvb2ZDb250ZXh0LmNvbXBsZXRlKGNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUpIDpcbiAgICAgIHByb29mQ29udGV4dC5oYWx0KGNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUpO1xuXG4gIHJldHVybiBjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlDb25kaXRpb25hbEluZGljYXRpdmUiLCJjb25zZXF1ZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiYW50ZWNlZGVudHNOb2RlUXVlcnkiLCJub2Rlc1F1ZXJ5IiwiY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSIsImFudGVjZWRlbnRzIiwiY29uc2VxdWVudHMiLCJwcm9vZkNvbnRleHQiLCJjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCIsImJlZ2luIiwiY29uc2VxdWVudE5vZGUiLCJhbnRlY2VkZW50Tm9kZXMiLCJhbnRlY2VkZW50c1ZlcmlmaWVkIiwiZXZlcnkiLCJhbnRlY2VkZW50Tm9kZSIsImFudGVjZWRlbnRWZXJpZmllZCIsInZlcmlmeUFudGVjZWRlbnQiLCJjb25zZXF1ZW50VmVyaWZpZWQiLCJ2ZXJpZnlDb25zZXF1ZW50IiwiY29tcGxldGUiLCJoYWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFVQTs7O2VBQXdCQTs7OytEQVJLOytEQUNBO3FCQUVTOzs7Ozs7QUFFdEMsSUFBTUMsc0JBQXNCQyxJQUFBQSxnQkFBUyxFQUFDLHVDQUNoQ0MsdUJBQXVCQyxJQUFBQSxpQkFBVSxFQUFDO0FBRXpCLFNBQVNKLDRCQUE0QksseUJBQXlCLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUU7SUFDckgsSUFBSUMsZ0NBQWdDLEtBQUs7SUFFekNELGFBQWFFLEtBQUssQ0FBQ0w7SUFFbkIsSUFBTU0saUJBQWlCVixvQkFBb0JJLDRCQUNyQ08sa0JBQWtCVCxxQkFBcUJFLDRCQUN2Q1Esc0JBQXNCRCxnQkFBZ0JFLEtBQUssQ0FBQyxTQUFDQyxnQkFBbUI7UUFDOUQsSUFBTUMscUJBQXFCQyxJQUFBQSxtQkFBZ0IsRUFBQ0YsZ0JBQWdCVCxhQUFhRTtRQUV6RSxJQUFJUSxvQkFBb0I7WUFDdEIsT0FBTyxJQUFJO1FBQ2IsQ0FBQztJQUNIO0lBRU4sSUFBSUgscUJBQXFCO1FBQ3ZCLElBQU1LLHFCQUFxQkMsSUFBQUEsbUJBQWdCLEVBQUNSLGdCQUFnQkosYUFBYUM7UUFFekVDLGdDQUFnQ1Msb0JBQXFCLEdBQUc7SUFDMUQsQ0FBQztJQUVEVCxnQ0FDRUQsYUFBYVksUUFBUSxDQUFDZiw2QkFDcEJHLGFBQWFhLElBQUksQ0FBQ2hCLDBCQUEwQjtJQUVoRCxPQUFPSTtBQUNUIn0=