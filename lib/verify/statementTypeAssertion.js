"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyStatementTypeAssertion;
    }
});
var _variable = /*#__PURE__*/ _interopRequireDefault(require("../variable"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
var _term = require("../verify/term");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var termNodeQuery = (0, _query.nodeQuery)("/typeAssertion/term"), typeNodeQuery = (0, _query.nodeQuery)("/typeAssertion/type"), typeAssertionNodeQuery = (0, _query.nodeQuery)("/statement/typeAssertion!");
function verifyStatementTypeAssertion(statementNode, proofContext) {
    var typeAssertionVerified = false;
    proofContext.begin(statementNode);
    var statementString = (0, _string.nodeAsString)(statementNode);
    proofContext.debug("Verifying the '".concat(statementString, "' statement type assertion..."));
    var typeAssertionNode = typeAssertionNodeQuery(statementNode);
    if (typeAssertionNode !== null) {
        var typeNode = typeNodeQuery(typeAssertionNode), typeName = (0, _query.typeNameFromTypeNode)(typeNode), typePresent = proofContext.isTypePresentByTypeName(typeName);
        if (!typePresent) {
            proofContext.error("The ".concat(typeName, " type is not present."));
        } else {
            var context = proofContext, termNode = termNodeQuery(typeAssertionNode), variables = [], termVerifiedAsVariable = (0, _term.verifyTermAsVariable)(termNode, variables, context);
            if (termVerifiedAsVariable) {
                var variableTypeAssertionVerified = verifyVariableTypeAssertion(typeAssertionNode, proofContext);
                typeAssertionVerified = variableTypeAssertionVerified; ///
            } else {
                var termTypeAssertionVerified = verifyTermTypeAssertion(typeAssertionNode, proofContext);
                typeAssertionVerified = termTypeAssertionVerified; ///
            }
        }
    }
    if (typeAssertionVerified) {
        proofContext.info("Verified the '".concat(statementString, "' statement type assertion."));
    }
    typeAssertionVerified ? proofContext.complete(statementNode) : proofContext.halt(statementNode);
    return typeAssertionVerified;
}
function verifyTermTypeAssertion(typeAssertionNode, proofContext) {
    var termTypeAssertionVerified = false;
    var types = [], context = proofContext, termNode = termNodeQuery(typeAssertionNode), termVerifiedAgainstConstructors = (0, _term.verifyTermAgainstConstructors)(termNode, types, context);
    if (termVerifiedAgainstConstructors) {
        var typeNode = typeNodeQuery(typeAssertionNode), typeName = (0, _query.typeNameFromTypeNode)(typeNode), assertedTypeName = typeName, assertedType = proofContext.findTypeByTypeName(assertedTypeName), firstType = (0, _array.first)(types), termType = firstType, assertedTypeEqualToOrSubTypeOfTermType = assertedType.isEqualToOrSubTypeOf(termType);
        if (!assertedTypeEqualToOrSubTypeOfTermType) {
            var termString = (0, _string.nodeAsString)(termNode);
            proofContext.error("The asserted type is not equal to or a sub-type of the '".concat(termString, "' term type."));
        } else {
            termTypeAssertionVerified = true;
        }
    }
    return termTypeAssertionVerified;
}
function verifyVariableTypeAssertion(typeAssertionNode, proofContext) {
    var variableTypeAssertionVerified = false;
    var context = proofContext, variables = [], termNode = termNodeQuery(typeAssertionNode);
    (0, _term.verifyTermAsVariable)(termNode, variables, context);
    var typeNode = typeNodeQuery(typeAssertionNode), typeName = (0, _query.typeNameFromTypeNode)(typeNode), assertedTypeName = typeName, assertedType = proofContext.findTypeByTypeName(assertedTypeName), firstVariable = (0, _array.first)(variables), variable = firstVariable, variableName = variable.getName(), variableType = variable.getType();
    var assertedTypeEqualToOrSubTypeOfVariableType = variableType === null ? true : assertedType.isEqualToOrSubTypeOf(variableType);
    if (!assertedTypeEqualToOrSubTypeOfVariableType) {
        proofContext.error("The asserted type is not equal to or a sub-type of the '".concat(variableName, "' variable type."));
    } else {
        var derived = proofContext.isDerived();
        if (!derived) {
            var type = assertedType, name = variableName, variable1 = _variable.default.fromTypeAndName(type, name);
            proofContext.addVariable(variable1);
        }
        variableTypeAssertionVerified = true;
    }
    return variableTypeAssertionVerified;
}

//# sourceMappingURL=data:application/json;base64,