"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyPackage;
    }
});
var _necessary = require("necessary");
var _files = /*#__PURE__*/ _interopRequireDefault(require("../verify/files"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var log = _necessary.loggingUtilities.log;
function verifyPackage(packageName, packageContextMap) {
    var packageContexts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    var packageContext = packageContextMap[packageName];
    var packageVerified = packageContext.isPackageVerified();
    if (!packageVerified) {
        log.debug("Verifying the '".concat(packageName, "' package..."));
        var dependencyPackageNames = packageContext.getDependencyPackageNames(), dependencyPackagesVVerified = dependencyPackageNames.every(function(dependencyPackageName) {
            var _$packageName = dependencyPackageName, packageVerified = verifyPackage(_$packageName, packageContextMap, packageContexts);
            if (packageVerified) {
                return true;
            }
        });
        if (dependencyPackagesVVerified) {
            var packageNames = dependencyPackageNames, packageContexts1 = packageNames.map(function(packageName) {
                var packageContext = packageContextMap[packageName];
                return packageContext;
            });
            var dependencyPackageContexts = retrieveDependencyPackageContexts(dependencyPackageNames, packageContextMap);
            packageContext.initialise(packageContexts1, dependencyPackageContexts);
            var filesVerified = (0, _files.default)(packageContext);
            packageVerified = filesVerified; ///
            if (packageVerified) {
                packageContexts1.push(packageContext);
                log.info("Verified the '".concat(packageName, "' package."));
            }
        }
    }
    return packageVerified;
}
function retrieveDependencyPackageContexts(dependencyPackageNames, packageContextMap) {
    var dependencyPackageContexts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    dependencyPackageNames.forEach(function(dependencyPackageName) {
        var dependencyPackageContext = packageContextMap[dependencyPackageName], dependencyPackageContextsIncludesDependencyPackageContext = dependencyPackageContexts.includes(dependencyPackageContext);
        if (!dependencyPackageContextsIncludesDependencyPackageContext) {
            var packageContext = dependencyPackageContext, _$dependencyPackageNames = packageContext.getDependencyPackageNames();
            retrieveDependencyPackageContexts(_$dependencyPackageNames, packageContextMap, dependencyPackageContexts);
            dependencyPackageContexts.push(dependencyPackageContext);
        }
    });
    return dependencyPackageContexts;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcGFja2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgbG9nZ2luZ1V0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHZlcmlmeUZpbGVzIGZyb20gXCIuLi92ZXJpZnkvZmlsZXNcIjtcblxuY29uc3QgeyBsb2cgfSA9IGxvZ2dpbmdVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVBhY2thZ2UocGFja2FnZU5hbWUsIHBhY2thZ2VDb250ZXh0TWFwLCBwYWNrYWdlQ29udGV4dHMgPSBbXSkge1xuICBjb25zdCBwYWNrYWdlQ29udGV4dCA9IHBhY2thZ2VDb250ZXh0TWFwW3BhY2thZ2VOYW1lXTtcblxuICBsZXQgcGFja2FnZVZlcmlmaWVkID0gcGFja2FnZUNvbnRleHQuaXNQYWNrYWdlVmVyaWZpZWQoKTtcblxuICBpZiAoIXBhY2thZ2VWZXJpZmllZCkge1xuICAgIGxvZy5kZWJ1ZyhgVmVyaWZ5aW5nIHRoZSAnJHtwYWNrYWdlTmFtZX0nIHBhY2thZ2UuLi5gKTtcblxuICAgIGNvbnN0IGRlcGVuZGVuY3lQYWNrYWdlTmFtZXMgPSBwYWNrYWdlQ29udGV4dC5nZXREZXBlbmRlbmN5UGFja2FnZU5hbWVzKCksXG4gICAgICAgICAgZGVwZW5kZW5jeVBhY2thZ2VzVlZlcmlmaWVkID0gZGVwZW5kZW5jeVBhY2thZ2VOYW1lcy5ldmVyeSgoZGVwZW5kZW5jeVBhY2thZ2VOYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYWNrYWdlTmFtZSA9IGRlcGVuZGVuY3lQYWNrYWdlTmFtZSwgIC8vL1xuICAgICAgICAgICAgICAgICAgcGFja2FnZVZlcmlmaWVkID0gdmVyaWZ5UGFja2FnZShwYWNrYWdlTmFtZSwgcGFja2FnZUNvbnRleHRNYXAsIHBhY2thZ2VDb250ZXh0cyk7XG5cbiAgICAgICAgICAgIGlmIChwYWNrYWdlVmVyaWZpZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICBpZiAoZGVwZW5kZW5jeVBhY2thZ2VzVlZlcmlmaWVkKSB7XG4gICAgICBjb25zdCBwYWNrYWdlTmFtZXMgPSBkZXBlbmRlbmN5UGFja2FnZU5hbWVzLCAgLy8vXG4gICAgICAgICAgICBwYWNrYWdlQ29udGV4dHMgPSBwYWNrYWdlTmFtZXMubWFwKChwYWNrYWdlTmFtZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBwYWNrYWdlQ29udGV4dCA9IHBhY2thZ2VDb250ZXh0TWFwW3BhY2thZ2VOYW1lXTtcblxuICAgICAgICAgICAgICByZXR1cm4gcGFja2FnZUNvbnRleHQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgY29uc3QgZGVwZW5kZW5jeVBhY2thZ2VDb250ZXh0cyA9IHJldHJpZXZlRGVwZW5kZW5jeVBhY2thZ2VDb250ZXh0cyhkZXBlbmRlbmN5UGFja2FnZU5hbWVzLCBwYWNrYWdlQ29udGV4dE1hcCk7XG5cbiAgICAgIHBhY2thZ2VDb250ZXh0LmluaXRpYWxpc2UocGFja2FnZUNvbnRleHRzLCBkZXBlbmRlbmN5UGFja2FnZUNvbnRleHRzKTtcblxuICAgICAgY29uc3QgZmlsZXNWZXJpZmllZCA9IHZlcmlmeUZpbGVzKHBhY2thZ2VDb250ZXh0KTtcblxuICAgICAgcGFja2FnZVZlcmlmaWVkID0gZmlsZXNWZXJpZmllZDsgIC8vL1xuXG4gICAgICBpZiAocGFja2FnZVZlcmlmaWVkKSB7XG4gICAgICAgIHBhY2thZ2VDb250ZXh0cy5wdXNoKHBhY2thZ2VDb250ZXh0KTtcblxuICAgICAgICBsb2cuaW5mbyhgVmVyaWZpZWQgdGhlICcke3BhY2thZ2VOYW1lfScgcGFja2FnZS5gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFja2FnZVZlcmlmaWVkO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZURlcGVuZGVuY3lQYWNrYWdlQ29udGV4dHMoZGVwZW5kZW5jeVBhY2thZ2VOYW1lcywgcGFja2FnZUNvbnRleHRNYXAsIGRlcGVuZGVuY3lQYWNrYWdlQ29udGV4dHMgPSBbXSkge1xuICBkZXBlbmRlbmN5UGFja2FnZU5hbWVzLmZvckVhY2goKGRlcGVuZGVuY3lQYWNrYWdlTmFtZSkgPT4ge1xuICAgIGNvbnN0IGRlcGVuZGVuY3lQYWNrYWdlQ29udGV4dCA9IHBhY2thZ2VDb250ZXh0TWFwW2RlcGVuZGVuY3lQYWNrYWdlTmFtZV0sXG4gICAgICAgICAgZGVwZW5kZW5jeVBhY2thZ2VDb250ZXh0c0luY2x1ZGVzRGVwZW5kZW5jeVBhY2thZ2VDb250ZXh0ID0gZGVwZW5kZW5jeVBhY2thZ2VDb250ZXh0cy5pbmNsdWRlcyhkZXBlbmRlbmN5UGFja2FnZUNvbnRleHQpO1xuXG4gICAgaWYgKCFkZXBlbmRlbmN5UGFja2FnZUNvbnRleHRzSW5jbHVkZXNEZXBlbmRlbmN5UGFja2FnZUNvbnRleHQpIHtcbiAgICAgIGNvbnN0IHBhY2thZ2VDb250ZXh0ID0gZGVwZW5kZW5jeVBhY2thZ2VDb250ZXh0LCAgLy8vXG4gICAgICAgICAgICBkZXBlbmRlbmN5UGFja2FnZU5hbWVzID0gcGFja2FnZUNvbnRleHQuZ2V0RGVwZW5kZW5jeVBhY2thZ2VOYW1lcygpO1xuXG4gICAgICByZXRyaWV2ZURlcGVuZGVuY3lQYWNrYWdlQ29udGV4dHMoZGVwZW5kZW5jeVBhY2thZ2VOYW1lcywgcGFja2FnZUNvbnRleHRNYXAsIGRlcGVuZGVuY3lQYWNrYWdlQ29udGV4dHMpO1xuXG4gICAgICBkZXBlbmRlbmN5UGFja2FnZUNvbnRleHRzLnB1c2goZGVwZW5kZW5jeVBhY2thZ2VDb250ZXh0KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkZXBlbmRlbmN5UGFja2FnZUNvbnRleHRzO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeVBhY2thZ2UiLCJsb2ciLCJsb2dnaW5nVXRpbGl0aWVzIiwicGFja2FnZU5hbWUiLCJwYWNrYWdlQ29udGV4dE1hcCIsInBhY2thZ2VDb250ZXh0cyIsInBhY2thZ2VDb250ZXh0IiwicGFja2FnZVZlcmlmaWVkIiwiaXNQYWNrYWdlVmVyaWZpZWQiLCJkZWJ1ZyIsImRlcGVuZGVuY3lQYWNrYWdlTmFtZXMiLCJnZXREZXBlbmRlbmN5UGFja2FnZU5hbWVzIiwiZGVwZW5kZW5jeVBhY2thZ2VzVlZlcmlmaWVkIiwiZXZlcnkiLCJkZXBlbmRlbmN5UGFja2FnZU5hbWUiLCJwYWNrYWdlTmFtZXMiLCJtYXAiLCJkZXBlbmRlbmN5UGFja2FnZUNvbnRleHRzIiwicmV0cmlldmVEZXBlbmRlbmN5UGFja2FnZUNvbnRleHRzIiwiaW5pdGlhbGlzZSIsImZpbGVzVmVyaWZpZWQiLCJ2ZXJpZnlGaWxlcyIsInB1c2giLCJpbmZvIiwiZm9yRWFjaCIsImRlcGVuZGVuY3lQYWNrYWdlQ29udGV4dCIsImRlcGVuZGVuY3lQYWNrYWdlQ29udGV4dHNJbmNsdWRlc0RlcGVuZGVuY3lQYWNrYWdlQ29udGV4dCIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFRQTs7O2VBQXdCQTs7O3lCQU5TOzBEQUVUOzs7Ozs7QUFFeEIsSUFBTSxBQUFFQyxNQUFRQywyQkFBZ0IsQ0FBeEJEO0FBRU8sU0FBU0QsY0FBY0csV0FBVyxFQUFFQyxpQkFBaUIsRUFBd0I7UUFBdEJDLGtCQUFBQSxpRUFBa0IsRUFBRTtJQUN4RixJQUFNQyxpQkFBaUJGLGlCQUFpQixDQUFDRCxZQUFZO0lBRXJELElBQUlJLGtCQUFrQkQsZUFBZUUsaUJBQWlCO0lBRXRELElBQUksQ0FBQ0QsaUJBQWlCO1FBQ3BCTixJQUFJUSxLQUFLLENBQUMsQUFBQyxrQkFBNkIsT0FBWk4sYUFBWTtRQUV4QyxJQUFNTyx5QkFBeUJKLGVBQWVLLHlCQUF5QixJQUNqRUMsOEJBQThCRix1QkFBdUJHLEtBQUssQ0FBQyxTQUFDQyx1QkFBMEI7WUFDcEYsSUFBTVgsZ0JBQWNXLHVCQUNkUCxrQkFBa0JQLGNBQWNHLGVBQWFDLG1CQUFtQkM7WUFFdEUsSUFBSUUsaUJBQWlCO2dCQUNuQixPQUFPLElBQUk7WUFDYixDQUFDO1FBQ0g7UUFFTixJQUFJSyw2QkFBNkI7WUFDL0IsSUFBTUcsZUFBZUwsd0JBQ2ZMLG1CQUFrQlUsYUFBYUMsR0FBRyxDQUFDLFNBQUNiLGFBQWdCO2dCQUNsRCxJQUFNRyxpQkFBaUJGLGlCQUFpQixDQUFDRCxZQUFZO2dCQUVyRCxPQUFPRztZQUNUO1lBRU4sSUFBTVcsNEJBQTRCQyxrQ0FBa0NSLHdCQUF3Qk47WUFFNUZFLGVBQWVhLFVBQVUsQ0FBQ2Qsa0JBQWlCWTtZQUUzQyxJQUFNRyxnQkFBZ0JDLElBQUFBLGNBQVcsRUFBQ2Y7WUFFbENDLGtCQUFrQmEsZUFBZ0IsR0FBRztZQUVyQyxJQUFJYixpQkFBaUI7Z0JBQ25CRixpQkFBZ0JpQixJQUFJLENBQUNoQjtnQkFFckJMLElBQUlzQixJQUFJLENBQUMsQUFBQyxpQkFBNEIsT0FBWnBCLGFBQVk7WUFDeEMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBT0k7QUFDVDtBQUVBLFNBQVNXLGtDQUFrQ1Isc0JBQXNCLEVBQUVOLGlCQUFpQixFQUFrQztRQUFoQ2EsNEJBQUFBLGlFQUE0QixFQUFFO0lBQ2xIUCx1QkFBdUJjLE9BQU8sQ0FBQyxTQUFDVix1QkFBMEI7UUFDeEQsSUFBTVcsMkJBQTJCckIsaUJBQWlCLENBQUNVLHNCQUFzQixFQUNuRVksNERBQTREVCwwQkFBMEJVLFFBQVEsQ0FBQ0Y7UUFFckcsSUFBSSxDQUFDQywyREFBMkQ7WUFDOUQsSUFBTXBCLGlCQUFpQm1CLDBCQUNqQmYsMkJBQXlCSixlQUFlSyx5QkFBeUI7WUFFdkVPLGtDQUFrQ1IsMEJBQXdCTixtQkFBbUJhO1lBRTdFQSwwQkFBMEJLLElBQUksQ0FBQ0c7UUFDakMsQ0FBQztJQUNIO0lBRUEsT0FBT1I7QUFDVCJ9