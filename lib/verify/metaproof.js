"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaproof;
    }
});
var _metaAssertion = /*#__PURE__*/ _interopRequireDefault(require("../metaAssertion"));
var _metaDerivation = /*#__PURE__*/ _interopRequireDefault(require("../verify/metaDerivation"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("./metastatement/qualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaDerivationNodeQuery = (0, _query.nodeQuery)("/metaproof/metaDerivation!"), qualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaproof/qualifiedMetastatement!");
function verifyMetaproof(metaproofNode, metastatementNode, metaproofContext) {
    var metaproofVerified = false;
    metaproofContext.begin(metaproofNode);
    var metaDerivationNode = metaDerivationNodeQuery(metaproofNode), qualifiedMetastatementNode = qualifiedMetastatementNodeQuery(metaproofNode);
    var metaDerivationVerified = false, qualifiedMetastatementVerified = false;
    if (metaDerivationNode !== null) {
        metaDerivationVerified = (0, _metaDerivation.default)(metaDerivationNode, metaproofContext);
    }
    if (qualifiedMetastatementNode !== null) {
        qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, metaproofContext);
        if (qualifiedMetastatementVerified) {
            var metaAssertion = _metaAssertion.default.fromQualifiedMetastatementNode(qualifiedMetastatementNode);
            metaproofContext.addMetaAssertion(metaAssertion);
        }
    }
    if (metaDerivationVerified || qualifiedMetastatementVerified) {
        var lastMetaAssertion = metaproofContext.getLastMetaAssertion(), metaAssertion1 = lastMetaAssertion, metaAssertionMetastatementNode = metaAssertion1.getMetastatementNode(), metaAssertionMetastatementNodeMatches = matchMetaProofMetastatementNode(metaAssertionMetastatementNode, metastatementNode);
        metaproofVerified = metaAssertionMetastatementNodeMatches; ///
    }
    metaproofVerified ? metaproofContext.complete(metaproofNode) : metaproofContext.complete(metaproofNode);
    return metaproofVerified;
}
function matchMetaProofMetastatementNode(metaAssertionMetastatementNode, metastatementNode) {
    var metaAssertionNonTerminalNode = metaAssertionMetastatementNode, nonTerminalNode = metastatementNode, metaAssertionNonTerminalNodeMatches = matchMetaProofNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode), metaAssertionMetastatementNodeMatches = metaAssertionNonTerminalNodeMatches; ///
    return metaAssertionMetastatementNodeMatches;
}
function matchMetaProofNode(metaAssertionNode, node) {
    var metaAssertionNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = metaAssertionNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, metaAssertionTerminalNode = metaAssertionNode, metaAssertionTerminalNodeMatches = matchMetaProofTerminalNode(metaAssertionTerminalNode, terminalNode);
            metaAssertionNodeMatches = metaAssertionTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, metaAssertionNonTerminalNode = metaAssertionNode, metaAssertionNonTerminalNodeMatches = matchMetaProofNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode);
            metaAssertionNodeMatches = metaAssertionNonTerminalNodeMatches; ///
        }
    }
    return metaAssertionNodeMatches;
}
function matchMetaProofNodes(metaAssertionNodes, nodes) {
    var metaAssertionNodesMatches = false;
    var nodesLength = nodes.length, metaAssertionNodesLength = metaAssertionNodes.length;
    if (nodesLength === metaAssertionNodesLength) {
        metaAssertionNodesMatches = nodes.every(function(node, index) {
            var metaAssertionNode = metaAssertionNodes[index], metaAssertionNodeMatches = matchMetaProofNode(metaAssertionNode, node);
            if (metaAssertionNodeMatches) {
                return true;
            }
        });
    }
    return metaAssertionNodesMatches;
}
function matchMetaProofTerminalNode(metaAssertionTerminalNode, terminalNode) {
    var matches = metaAssertionTerminalNode.match(terminalNode), metaAssertionTerminalNodeMatches = matches; ///
    return metaAssertionTerminalNodeMatches;
}
function matchMetaProofNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode) {
    var metaAssertionNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), metaAssertionRuleName = metaAssertionNonTerminalNode.getRuleName(); ///
    if (ruleName === metaAssertionRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), metaAssertionChildNodes = metaAssertionNonTerminalNode.getChildNodes(), nodes = childNodes, metaAssertionNodes = metaAssertionChildNodes, metaAssertionNodesMatches = matchMetaProofNodes(metaAssertionNodes, nodes);
        metaAssertionNonTerminalNodeMatches = metaAssertionNodesMatches; ///
    }
    return metaAssertionNonTerminalNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,