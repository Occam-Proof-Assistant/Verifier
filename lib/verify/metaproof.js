"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaproof;
    }
});
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../step/metaproof"));
var _metaDerivation = /*#__PURE__*/ _interopRequireDefault(require("../verify/metaDerivation"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("./metastatement/qualified"));
var _node = require("../utilities/node");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement/metastatement!"), metaDerivationNodeQuery = (0, _query.nodeQuery)("/metaproof/metaDerivation!"), qualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaproof/qualifiedMetastatement!");
function verifyMetaproof(metaproofNode, conclusion, metaproofContext) {
    var metaproofVerified = false;
    metaproofContext.begin(metaproofNode);
    var metaDerivationNode = metaDerivationNodeQuery(metaproofNode), qualifiedMetastatementNode = qualifiedMetastatementNodeQuery(metaproofNode);
    var metaDerivationVerified = false, qualifiedMetastatementVerified = false;
    if (metaDerivationNode !== null) {
        metaDerivationVerified = (0, _metaDerivation.default)(metaDerivationNode, metaproofContext);
    }
    if (qualifiedMetastatementNode !== null) {
        var derived;
        derived = true;
        metaproofContext.setDerived(derived);
        qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, metaproofContext);
        derived = false;
        metaproofContext.setDerived(derived);
        if (qualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metaproofStep = _metaproof.default.fromMetastatementNode(metastatementNode);
            metaproofContext.addMetaproofStep(metaproofStep);
        }
    }
    if (metaDerivationVerified || qualifiedMetastatementVerified) {
        var lastMetaproofStep = metaproofContext.getLastMetaproofStep(), metaproofStep1 = lastMetaproofStep, lastMetastatementNode = metaproofStep1.getMetastatementNode(), conclusionMetastatementNode = conclusion.getMetastatementNode(), lastMetastatementMatches = matchLastMetastatementNode(lastMetastatementNode, conclusionMetastatementNode);
        metaproofVerified = lastMetastatementMatches; ///
    }
    metaproofVerified ? metaproofContext.complete(metaproofNode) : metaproofContext.complete(metaproofNode);
    return metaproofVerified;
}
function matchLastMetastatementNode(lastMetastatementNode, conclusionMetastatementNode) {
    var nodeA = lastMetastatementNode, nodeB = conclusionMetastatementNode, nonTerminalNodeMatches = (0, _node.matchNode)(nodeA, nodeB), lastMetastatementMatches = nonTerminalNodeMatches; ///
    return lastMetastatementMatches;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YXByb29mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgTWV0YXByb29mU3RlcCBmcm9tIFwiLi4vc3RlcC9tZXRhcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlNZXRhRGVyaXZhdGlvbiBmcm9tIFwiLi4vdmVyaWZ5L21ldGFEZXJpdmF0aW9uXCI7XG5pbXBvcnQgdmVyaWZ5UXVhbGlmaWVkTWV0YXN0YXRlbWVudCBmcm9tIFwiLi9tZXRhc3RhdGVtZW50L3F1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBtYXRjaE5vZGUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL25vZGVcIjtcbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgbWV0YXN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9xdWFsaWZpZWRNZXRhc3RhdGVtZW50L21ldGFzdGF0ZW1lbnQhXCIpLFxuICAgICAgbWV0YURlcml2YXRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvbWV0YXByb29mL21ldGFEZXJpdmF0aW9uIVwiKSxcbiAgICAgIHF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvbWV0YXByb29mL3F1YWxpZmllZE1ldGFzdGF0ZW1lbnQhXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlNZXRhcHJvb2YobWV0YXByb29mTm9kZSwgY29uY2x1c2lvbiwgbWV0YXByb29mQ29udGV4dCkge1xuICBsZXQgbWV0YXByb29mVmVyaWZpZWQgPSBmYWxzZTtcblxuICBtZXRhcHJvb2ZDb250ZXh0LmJlZ2luKG1ldGFwcm9vZk5vZGUpO1xuXG4gIGNvbnN0IG1ldGFEZXJpdmF0aW9uTm9kZSA9IG1ldGFEZXJpdmF0aW9uTm9kZVF1ZXJ5KG1ldGFwcm9vZk5vZGUpLFxuICAgICAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSA9IHF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkobWV0YXByb29mTm9kZSk7XG5cbiAgbGV0IG1ldGFEZXJpdmF0aW9uVmVyaWZpZWQgPSBmYWxzZSxcbiAgICAgIHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGlmIChtZXRhRGVyaXZhdGlvbk5vZGUgIT09IG51bGwpIHtcbiAgICBtZXRhRGVyaXZhdGlvblZlcmlmaWVkID0gdmVyaWZ5TWV0YURlcml2YXRpb24obWV0YURlcml2YXRpb25Ob2RlLCBtZXRhcHJvb2ZDb250ZXh0KTtcbiAgfVxuXG4gIGlmIChxdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIGxldCBkZXJpdmVkO1xuXG4gICAgZGVyaXZlZCA9IHRydWU7XG5cbiAgICBtZXRhcHJvb2ZDb250ZXh0LnNldERlcml2ZWQoZGVyaXZlZCk7XG5cbiAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlRdWFsaWZpZWRNZXRhc3RhdGVtZW50KHF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlLCBtZXRhcHJvb2ZDb250ZXh0KTtcblxuICAgIGRlcml2ZWQgPSBmYWxzZTtcblxuICAgIG1ldGFwcm9vZkNvbnRleHQuc2V0RGVyaXZlZChkZXJpdmVkKTtcblxuICAgIGlmIChxdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQpIHtcbiAgICAgIGNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlID0gbWV0YXN0YXRlbWVudE5vZGVRdWVyeShxdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgICBtZXRhcHJvb2ZTdGVwID0gTWV0YXByb29mU3RlcC5mcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgICBtZXRhcHJvb2ZDb250ZXh0LmFkZE1ldGFwcm9vZlN0ZXAobWV0YXByb29mU3RlcCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1ldGFEZXJpdmF0aW9uVmVyaWZpZWQgfHwgcXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgY29uc3QgbGFzdE1ldGFwcm9vZlN0ZXAgPSBtZXRhcHJvb2ZDb250ZXh0LmdldExhc3RNZXRhcHJvb2ZTdGVwKCksXG4gICAgICAgICAgbWV0YXByb29mU3RlcCA9IGxhc3RNZXRhcHJvb2ZTdGVwLCAvLy9cbiAgICAgICAgICBsYXN0TWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhcHJvb2ZTdGVwLmdldE1ldGFzdGF0ZW1lbnROb2RlKCksXG4gICAgICAgICAgY29uY2x1c2lvbk1ldGFzdGF0ZW1lbnROb2RlID0gY29uY2x1c2lvbi5nZXRNZXRhc3RhdGVtZW50Tm9kZSgpLFxuICAgICAgICAgIGxhc3RNZXRhc3RhdGVtZW50TWF0Y2hlcyA9IG1hdGNoTGFzdE1ldGFzdGF0ZW1lbnROb2RlKGxhc3RNZXRhc3RhdGVtZW50Tm9kZSwgY29uY2x1c2lvbk1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgIG1ldGFwcm9vZlZlcmlmaWVkID0gbGFzdE1ldGFzdGF0ZW1lbnRNYXRjaGVzOyAgLy8vXG4gIH1cblxuICBtZXRhcHJvb2ZWZXJpZmllZCA/XG4gICAgbWV0YXByb29mQ29udGV4dC5jb21wbGV0ZShtZXRhcHJvb2ZOb2RlKSA6XG4gICAgICBtZXRhcHJvb2ZDb250ZXh0LmNvbXBsZXRlKG1ldGFwcm9vZk5vZGUpO1xuXG4gIHJldHVybiBtZXRhcHJvb2ZWZXJpZmllZDtcbn1cblxuZnVuY3Rpb24gbWF0Y2hMYXN0TWV0YXN0YXRlbWVudE5vZGUobGFzdE1ldGFzdGF0ZW1lbnROb2RlLCBjb25jbHVzaW9uTWV0YXN0YXRlbWVudE5vZGUpIHtcbiAgY29uc3Qgbm9kZUEgPSBsYXN0TWV0YXN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgbm9kZUIgPSBjb25jbHVzaW9uTWV0YXN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgbm9uVGVybWluYWxOb2RlTWF0Y2hlcyA9IG1hdGNoTm9kZShub2RlQSwgbm9kZUIpLFxuICAgICAgICBsYXN0TWV0YXN0YXRlbWVudE1hdGNoZXMgPSBub25UZXJtaW5hbE5vZGVNYXRjaGVzOyAgLy8vXG5cbiAgcmV0dXJuIGxhc3RNZXRhc3RhdGVtZW50TWF0Y2hlcztcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlNZXRhcHJvb2YiLCJtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwibWV0YURlcml2YXRpb25Ob2RlUXVlcnkiLCJxdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5IiwibWV0YXByb29mTm9kZSIsImNvbmNsdXNpb24iLCJtZXRhcHJvb2ZDb250ZXh0IiwibWV0YXByb29mVmVyaWZpZWQiLCJiZWdpbiIsIm1ldGFEZXJpdmF0aW9uTm9kZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlIiwibWV0YURlcml2YXRpb25WZXJpZmllZCIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeU1ldGFEZXJpdmF0aW9uIiwiZGVyaXZlZCIsInNldERlcml2ZWQiLCJ2ZXJpZnlRdWFsaWZpZWRNZXRhc3RhdGVtZW50IiwibWV0YXN0YXRlbWVudE5vZGUiLCJtZXRhcHJvb2ZTdGVwIiwiTWV0YXByb29mU3RlcCIsImZyb21NZXRhc3RhdGVtZW50Tm9kZSIsImFkZE1ldGFwcm9vZlN0ZXAiLCJsYXN0TWV0YXByb29mU3RlcCIsImdldExhc3RNZXRhcHJvb2ZTdGVwIiwibGFzdE1ldGFzdGF0ZW1lbnROb2RlIiwiZ2V0TWV0YXN0YXRlbWVudE5vZGUiLCJjb25jbHVzaW9uTWV0YXN0YXRlbWVudE5vZGUiLCJsYXN0TWV0YXN0YXRlbWVudE1hdGNoZXMiLCJtYXRjaExhc3RNZXRhc3RhdGVtZW50Tm9kZSIsImNvbXBsZXRlIiwibm9kZUEiLCJub2RlQiIsIm5vblRlcm1pbmFsTm9kZU1hdGNoZXMiLCJtYXRjaE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWFBOzs7ZUFBd0JBOzs7OERBWEU7bUVBQ087OERBQ1E7b0JBRWY7cUJBQ0E7Ozs7OztBQUUxQixJQUFNQyx5QkFBeUJDLElBQUFBLGdCQUFTLEVBQUMsMkNBQ25DQywwQkFBMEJELElBQUFBLGdCQUFTLEVBQUMsK0JBQ3BDRSxrQ0FBa0NGLElBQUFBLGdCQUFTLEVBQUM7QUFFbkMsU0FBU0YsZ0JBQWdCSyxhQUFhLEVBQUVDLFVBQVUsRUFBRUMsZ0JBQWdCLEVBQUU7SUFDbkYsSUFBSUMsb0JBQW9CLEtBQUs7SUFFN0JELGlCQUFpQkUsS0FBSyxDQUFDSjtJQUV2QixJQUFNSyxxQkFBcUJQLHdCQUF3QkUsZ0JBQzdDTSw2QkFBNkJQLGdDQUFnQ0M7SUFFbkUsSUFBSU8seUJBQXlCLEtBQUssRUFDOUJDLGlDQUFpQyxLQUFLO0lBRTFDLElBQUlILHVCQUF1QixJQUFJLEVBQUU7UUFDL0JFLHlCQUF5QkUsSUFBQUEsdUJBQW9CLEVBQUNKLG9CQUFvQkg7SUFDcEUsQ0FBQztJQUVELElBQUlJLCtCQUErQixJQUFJLEVBQUU7UUFDdkMsSUFBSUk7UUFFSkEsVUFBVSxJQUFJO1FBRWRSLGlCQUFpQlMsVUFBVSxDQUFDRDtRQUU1QkYsaUNBQWlDSSxJQUFBQSxrQkFBNEIsRUFBQ04sNEJBQTRCSjtRQUUxRlEsVUFBVSxLQUFLO1FBRWZSLGlCQUFpQlMsVUFBVSxDQUFDRDtRQUU1QixJQUFJRixnQ0FBZ0M7WUFDbEMsSUFBTUssb0JBQW9CakIsdUJBQXVCVSw2QkFDM0NRLGdCQUFnQkMsa0JBQWEsQ0FBQ0MscUJBQXFCLENBQUNIO1lBRTFEWCxpQkFBaUJlLGdCQUFnQixDQUFDSDtRQUNwQyxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUlQLDBCQUEwQkMsZ0NBQWdDO1FBQzVELElBQU1VLG9CQUFvQmhCLGlCQUFpQmlCLG9CQUFvQixJQUN6REwsaUJBQWdCSSxtQkFDaEJFLHdCQUF3Qk4sZUFBY08sb0JBQW9CLElBQzFEQyw4QkFBOEJyQixXQUFXb0Isb0JBQW9CLElBQzdERSwyQkFBMkJDLDJCQUEyQkosdUJBQXVCRTtRQUVuRm5CLG9CQUFvQm9CLDBCQUEyQixHQUFHO0lBQ3BELENBQUM7SUFFRHBCLG9CQUNFRCxpQkFBaUJ1QixRQUFRLENBQUN6QixpQkFDeEJFLGlCQUFpQnVCLFFBQVEsQ0FBQ3pCLGNBQWM7SUFFNUMsT0FBT0c7QUFDVDtBQUVBLFNBQVNxQiwyQkFBMkJKLHFCQUFxQixFQUFFRSwyQkFBMkIsRUFBRTtJQUN0RixJQUFNSSxRQUFRTix1QkFDUk8sUUFBUUwsNkJBQ1JNLHlCQUF5QkMsSUFBQUEsZUFBUyxFQUFDSCxPQUFPQyxRQUMxQ0osMkJBQTJCSyx3QkFBeUIsR0FBRztJQUU3RCxPQUFPTDtBQUNUIn0=