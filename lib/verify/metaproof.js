"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaproof;
    }
});
var _metaDerivation = /*#__PURE__*/ _interopRequireDefault(require("../verify/metaDerivation"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/qualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaDerivationNodeQuery = (0, _query.nodeQuery)("/metaproof/metaDerivation!"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/metaproof/qualifiedMetastatement!"), metaProofMetastatementNodeQuery = (0, _query.nodeQuery)("/metaproof/qualifiedMetastatement/metastatement!");
function verifyMetaproof(metaproofNode, conclusion, metaproofContext) {
    var metaproofVerified = false;
    metaproofContext.begin(metaproofNode);
    var metaDerivationNode = metaDerivationNodeQuery(metaproofNode);
    var metaDerivationVerified = true;
    if (metaDerivationNode !== null) {
        metaDerivationVerified = (0, _metaDerivation.default)(metaDerivationNode, metaproofContext);
    }
    if (metaDerivationVerified) {
        var qualifiedMetastatementNode = qualifiedStatementNodeQuery(metaproofNode), qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, metaproofContext);
        if (qualifiedMetastatementVerified) {
            var metastatementNode = conclusion.getMetastatementNode(), metaProofMetastatementNode = metaProofMetastatementNodeQuery(metaproofNode), metaProofMetastatementNodeMatches = matchMetaProofMetastatementNode(metaProofMetastatementNode, metastatementNode);
            metaproofVerified = metaProofMetastatementNodeMatches; ///
        }
    }
    metaproofVerified ? metaproofContext.complete(metaproofNode) : metaproofContext.complete(metaproofNode);
    return metaproofVerified;
}
function matchMetaProofMetastatementNode(metaProofMetastatementNode, metastatementNode) {
    var metaProofNonTerminalNode = metaProofMetastatementNode, nonTerminalNode = metastatementNode, metaProofNonTerminalNodeMatches = matchMetaProofNonTerminalNode(metaProofNonTerminalNode, nonTerminalNode), metaProofMetastatementNodeMatches = metaProofNonTerminalNodeMatches; ///
    return metaProofMetastatementNodeMatches;
}
function matchMetaProofNode(metaProofNode, node) {
    var metaProofNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = metaProofNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, metaProofTerminalNode = metaProofNode, metaProofTerminalNodeMatches = matchMetaProofTerminalNode(metaProofTerminalNode, terminalNode);
            metaProofNodeMatches = metaProofTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, metaProofNonTerminalNode = metaProofNode, metaProofNonTerminalNodeMatches = matchMetaProofNonTerminalNode(metaProofNonTerminalNode, nonTerminalNode);
            metaProofNodeMatches = metaProofNonTerminalNodeMatches; ///
        }
    }
    return metaProofNodeMatches;
}
function matchMetaProofNodes(metaProofNodes, nodes) {
    var metaProofNodesMatches = false;
    var nodesLength = nodes.length, metaProofNodesLength = metaProofNodes.length;
    if (nodesLength === metaProofNodesLength) {
        metaProofNodesMatches = nodes.every(function(node, index) {
            var metaProofNode = metaProofNodes[index], metaProofNodeMatches = matchMetaProofNode(metaProofNode, node);
            if (metaProofNodeMatches) {
                return true;
            }
        });
    }
    return metaProofNodesMatches;
}
function matchMetaProofTerminalNode(metaProofTerminalNode, terminalNode) {
    var matches = metaProofTerminalNode.match(terminalNode), metaProofTerminalNodeMatches = matches; ///
    return metaProofTerminalNodeMatches;
}
function matchMetaProofNonTerminalNode(metaProofNonTerminalNode, nonTerminalNode) {
    var metaProofNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), metaProofRuleName = metaProofNonTerminalNode.getRuleName(); ///
    if (ruleName === metaProofRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), metaProofChildNodes = metaProofNonTerminalNode.getChildNodes(), nodes = childNodes, metaProofNodes = metaProofChildNodes, metaProofNodesMatches = matchMetaProofNodes(metaProofNodes, nodes);
        metaProofNonTerminalNodeMatches = metaProofNodesMatches; ///
    }
    return metaProofNonTerminalNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,