"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaEquality;
    }
});
var _metaEquality = /*#__PURE__*/ _interop_require_default(require("../metaEquality"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var leftMetastatementNodeQuery = (0, _query.nodeQuery)("/metaEquality/metastatement[0]"), rightMetastatementNodeQuery = (0, _query.nodeQuery)("/metaEquality/metastatement[1]");
function verifyMetaEquality(metaEqualityNode, derived, localMetaContext) {
    var metaEqualityVerified;
    var metaEqualityString = localMetaContext.nodeAsString(metaEqualityNode);
    localMetaContext.trace("Verifying the '".concat(metaEqualityString, "' meta-equality..."), metaEqualityNode);
    var verifyMetaEqualityFunctions = [
        verifyDerivedMetaEquality,
        verifyStatedMetaEquality
    ];
    metaEqualityVerified = verifyMetaEqualityFunctions.some(function(verifyMetaEqualityFunction) {
        var metaEqualityVerified = verifyMetaEqualityFunction(metaEqualityNode, derived, localMetaContext);
        if (metaEqualityVerified) {
            return true;
        }
    });
    if (metaEqualityVerified) {
        localMetaContext.debug("...verified the '".concat(metaEqualityString, "' meta-equality."), metaEqualityNode);
    }
    return metaEqualityVerified;
}
function verifyDerivedMetaEquality(metaEqualityNode, derived, localMetaContext) {
    var derivedMetaEqualityVerified = false;
    if (derived) {
        var metaEqualityString = localMetaContext.nodeAsString(metaEqualityNode);
        localMetaContext.trace("Verifying the '".concat(metaEqualityString, "' derived meta-equality..."), metaEqualityNode);
        var leftMetastatementNode = leftMetastatementNodeQuery(metaEqualityNode), rightMetastatementNode = rightMetastatementNodeQuery(metaEqualityNode), metaEquality = _metaEquality.default.fromLeftMetastatementNodeRightMetastatementNodeAndMetaEqualityNode(leftMetastatementNode, rightMetastatementNode, metaEqualityNode, localMetaContext);
        if (metaEquality !== null) {
            debugger;
        }
        if (derivedMetaEqualityVerified) {
            localMetaContext.debug("...verified the '".concat(metaEqualityString, "' derived meta-equality."), metaEqualityNode);
        }
    }
    return derivedMetaEqualityVerified;
}
function verifyStatedMetaEquality(metaEqualityNode, derived, localMetaContext) {
    var statedMetaEqualityVerified = false;
    if (!derived) {
        var metaEqualityString = localMetaContext.nodeAsString(metaEqualityNode);
        localMetaContext.trace("Verifying the '".concat(metaEqualityString, "' stated meta-equality..."), metaEqualityNode);
        debugger;
        if (statedMetaEqualityVerified) {
            localMetaContext.debug("...verified the '".concat(metaEqualityString, "' stated meta-equality."), metaEqualityNode);
        }
    }
    return statedMetaEqualityVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YUVxdWFsaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgTWV0YUVxdWFsaXR5IGZyb20gXCIuLi9tZXRhRXF1YWxpdHlcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBsZWZ0TWV0YXN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9tZXRhRXF1YWxpdHkvbWV0YXN0YXRlbWVudFswXVwiKSxcbiAgICAgIHJpZ2h0TWV0YXN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9tZXRhRXF1YWxpdHkvbWV0YXN0YXRlbWVudFsxXVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5TWV0YUVxdWFsaXR5KG1ldGFFcXVhbGl0eU5vZGUsIGRlcml2ZWQsIGxvY2FsTWV0YUNvbnRleHQpIHtcbiAgbGV0IG1ldGFFcXVhbGl0eVZlcmlmaWVkO1xuXG4gIGNvbnN0IG1ldGFFcXVhbGl0eVN0cmluZyA9IGxvY2FsTWV0YUNvbnRleHQubm9kZUFzU3RyaW5nKG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gIGxvY2FsTWV0YUNvbnRleHQudHJhY2UoYFZlcmlmeWluZyB0aGUgJyR7bWV0YUVxdWFsaXR5U3RyaW5nfScgbWV0YS1lcXVhbGl0eS4uLmAsIG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gIGNvbnN0IHZlcmlmeU1ldGFFcXVhbGl0eUZ1bmN0aW9ucyA9IFtcbiAgICB2ZXJpZnlEZXJpdmVkTWV0YUVxdWFsaXR5LFxuICAgIHZlcmlmeVN0YXRlZE1ldGFFcXVhbGl0eVxuICBdO1xuXG4gIG1ldGFFcXVhbGl0eVZlcmlmaWVkID0gdmVyaWZ5TWV0YUVxdWFsaXR5RnVuY3Rpb25zLnNvbWUoKHZlcmlmeU1ldGFFcXVhbGl0eUZ1bmN0aW9uKSA9PiB7XG4gICAgY29uc3QgbWV0YUVxdWFsaXR5VmVyaWZpZWQgPSB2ZXJpZnlNZXRhRXF1YWxpdHlGdW5jdGlvbihtZXRhRXF1YWxpdHlOb2RlLCBkZXJpdmVkLCBsb2NhbE1ldGFDb250ZXh0KTtcblxuICAgIGlmIChtZXRhRXF1YWxpdHlWZXJpZmllZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBpZiAobWV0YUVxdWFsaXR5VmVyaWZpZWQpIHtcbiAgICBsb2NhbE1ldGFDb250ZXh0LmRlYnVnKGAuLi52ZXJpZmllZCB0aGUgJyR7bWV0YUVxdWFsaXR5U3RyaW5nfScgbWV0YS1lcXVhbGl0eS5gLCBtZXRhRXF1YWxpdHlOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBtZXRhRXF1YWxpdHlWZXJpZmllZDtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5RGVyaXZlZE1ldGFFcXVhbGl0eShtZXRhRXF1YWxpdHlOb2RlLCBkZXJpdmVkLCBsb2NhbE1ldGFDb250ZXh0KSB7XG4gIGxldCBkZXJpdmVkTWV0YUVxdWFsaXR5VmVyaWZpZWQgPSBmYWxzZTtcblxuICBpZiAoZGVyaXZlZCkge1xuICAgIGNvbnN0IG1ldGFFcXVhbGl0eVN0cmluZyA9IGxvY2FsTWV0YUNvbnRleHQubm9kZUFzU3RyaW5nKG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gICAgbG9jYWxNZXRhQ29udGV4dC50cmFjZShgVmVyaWZ5aW5nIHRoZSAnJHttZXRhRXF1YWxpdHlTdHJpbmd9JyBkZXJpdmVkIG1ldGEtZXF1YWxpdHkuLi5gLCBtZXRhRXF1YWxpdHlOb2RlKTtcblxuICAgIGNvbnN0IGxlZnRNZXRhc3RhdGVtZW50Tm9kZSA9IGxlZnRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5KG1ldGFFcXVhbGl0eU5vZGUpLFxuICAgICAgICAgIHJpZ2h0TWV0YXN0YXRlbWVudE5vZGUgPSByaWdodE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkobWV0YUVxdWFsaXR5Tm9kZSksXG4gICAgICAgICAgbWV0YUVxdWFsaXR5ID0gTWV0YUVxdWFsaXR5LmZyb21MZWZ0TWV0YXN0YXRlbWVudE5vZGVSaWdodE1ldGFzdGF0ZW1lbnROb2RlQW5kTWV0YUVxdWFsaXR5Tm9kZShsZWZ0TWV0YXN0YXRlbWVudE5vZGUsIHJpZ2h0TWV0YXN0YXRlbWVudE5vZGUsIG1ldGFFcXVhbGl0eU5vZGUsIGxvY2FsTWV0YUNvbnRleHQpO1xuXG4gICAgaWYgKG1ldGFFcXVhbGl0eSAhPT0gbnVsbCkge1xuICAgICAgZGVidWdnZXJcbiAgICB9XG5cbiAgICBpZiAoZGVyaXZlZE1ldGFFcXVhbGl0eVZlcmlmaWVkKSB7XG4gICAgICBsb2NhbE1ldGFDb250ZXh0LmRlYnVnKGAuLi52ZXJpZmllZCB0aGUgJyR7bWV0YUVxdWFsaXR5U3RyaW5nfScgZGVyaXZlZCBtZXRhLWVxdWFsaXR5LmAsIG1ldGFFcXVhbGl0eU5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZXJpdmVkTWV0YUVxdWFsaXR5VmVyaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVN0YXRlZE1ldGFFcXVhbGl0eShtZXRhRXF1YWxpdHlOb2RlLCBkZXJpdmVkLCBsb2NhbE1ldGFDb250ZXh0KSB7XG4gIGxldCBzdGF0ZWRNZXRhRXF1YWxpdHlWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGlmICghZGVyaXZlZCkge1xuICAgIGNvbnN0IG1ldGFFcXVhbGl0eVN0cmluZyA9IGxvY2FsTWV0YUNvbnRleHQubm9kZUFzU3RyaW5nKG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gICAgbG9jYWxNZXRhQ29udGV4dC50cmFjZShgVmVyaWZ5aW5nIHRoZSAnJHttZXRhRXF1YWxpdHlTdHJpbmd9JyBzdGF0ZWQgbWV0YS1lcXVhbGl0eS4uLmAsIG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gICAgZGVidWdnZXJcblxuICAgIGlmIChzdGF0ZWRNZXRhRXF1YWxpdHlWZXJpZmllZCkge1xuICAgICAgbG9jYWxNZXRhQ29udGV4dC5kZWJ1ZyhgLi4udmVyaWZpZWQgdGhlICcke21ldGFFcXVhbGl0eVN0cmluZ30nIHN0YXRlZCBtZXRhLWVxdWFsaXR5LmAsIG1ldGFFcXVhbGl0eU5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZWRNZXRhRXF1YWxpdHlWZXJpZmllZDtcbn0iXSwibmFtZXMiOlsidmVyaWZ5TWV0YUVxdWFsaXR5IiwibGVmdE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJyaWdodE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJtZXRhRXF1YWxpdHlOb2RlIiwiZGVyaXZlZCIsImxvY2FsTWV0YUNvbnRleHQiLCJtZXRhRXF1YWxpdHlWZXJpZmllZCIsIm1ldGFFcXVhbGl0eVN0cmluZyIsIm5vZGVBc1N0cmluZyIsInRyYWNlIiwidmVyaWZ5TWV0YUVxdWFsaXR5RnVuY3Rpb25zIiwidmVyaWZ5RGVyaXZlZE1ldGFFcXVhbGl0eSIsInZlcmlmeVN0YXRlZE1ldGFFcXVhbGl0eSIsInNvbWUiLCJ2ZXJpZnlNZXRhRXF1YWxpdHlGdW5jdGlvbiIsImRlYnVnIiwiZGVyaXZlZE1ldGFFcXVhbGl0eVZlcmlmaWVkIiwibGVmdE1ldGFzdGF0ZW1lbnROb2RlIiwicmlnaHRNZXRhc3RhdGVtZW50Tm9kZSIsIm1ldGFFcXVhbGl0eSIsIk1ldGFFcXVhbGl0eSIsImZyb21MZWZ0TWV0YXN0YXRlbWVudE5vZGVSaWdodE1ldGFzdGF0ZW1lbnROb2RlQW5kTWV0YUVxdWFsaXR5Tm9kZSIsInN0YXRlZE1ldGFFcXVhbGl0eVZlcmlmaWVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFTQTs7O2VBQXdCQTs7O21FQVBDO3FCQUVDOzs7Ozs7QUFFMUIsSUFBTUMsNkJBQTZCQyxJQUFBQSxnQkFBUyxFQUFDLG1DQUN2Q0MsOEJBQThCRCxJQUFBQSxnQkFBUyxFQUFDO0FBRS9CLFNBQVNGLG1CQUFtQkksZ0JBQWdCLEVBQUVDLE9BQU8sRUFBRUMsZ0JBQWdCO0lBQ3BGLElBQUlDO0lBRUosSUFBTUMscUJBQXFCRixpQkFBaUJHLFlBQVksQ0FBQ0w7SUFFekRFLGlCQUFpQkksS0FBSyxDQUFDLEFBQUMsa0JBQW9DLE9BQW5CRixvQkFBbUIsdUJBQXFCSjtJQUVqRixJQUFNTyw4QkFBOEI7UUFDbENDO1FBQ0FDO0tBQ0Q7SUFFRE4sdUJBQXVCSSw0QkFBNEJHLElBQUksQ0FBQyxTQUFDQztRQUN2RCxJQUFNUix1QkFBdUJRLDJCQUEyQlgsa0JBQWtCQyxTQUFTQztRQUVuRixJQUFJQyxzQkFBc0I7WUFDeEIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxJQUFJQSxzQkFBc0I7UUFDeEJELGlCQUFpQlUsS0FBSyxDQUFDLEFBQUMsb0JBQXNDLE9BQW5CUixvQkFBbUIscUJBQW1CSjtJQUNuRjtJQUVBLE9BQU9HO0FBQ1Q7QUFFQSxTQUFTSywwQkFBMEJSLGdCQUFnQixFQUFFQyxPQUFPLEVBQUVDLGdCQUFnQjtJQUM1RSxJQUFJVyw4QkFBOEI7SUFFbEMsSUFBSVosU0FBUztRQUNYLElBQU1HLHFCQUFxQkYsaUJBQWlCRyxZQUFZLENBQUNMO1FBRXpERSxpQkFBaUJJLEtBQUssQ0FBQyxBQUFDLGtCQUFvQyxPQUFuQkYsb0JBQW1CLCtCQUE2Qko7UUFFekYsSUFBTWMsd0JBQXdCakIsMkJBQTJCRyxtQkFDbkRlLHlCQUF5QmhCLDRCQUE0QkMsbUJBQ3JEZ0IsZUFBZUMscUJBQVksQ0FBQ0Msa0VBQWtFLENBQUNKLHVCQUF1QkMsd0JBQXdCZixrQkFBa0JFO1FBRXRLLElBQUljLGlCQUFpQixNQUFNO1lBQ3pCLFFBQVE7UUFDVjtRQUVBLElBQUlILDZCQUE2QjtZQUMvQlgsaUJBQWlCVSxLQUFLLENBQUMsQUFBQyxvQkFBc0MsT0FBbkJSLG9CQUFtQiw2QkFBMkJKO1FBQzNGO0lBQ0Y7SUFFQSxPQUFPYTtBQUNUO0FBRUEsU0FBU0oseUJBQXlCVCxnQkFBZ0IsRUFBRUMsT0FBTyxFQUFFQyxnQkFBZ0I7SUFDM0UsSUFBSWlCLDZCQUE2QjtJQUVqQyxJQUFJLENBQUNsQixTQUFTO1FBQ1osSUFBTUcscUJBQXFCRixpQkFBaUJHLFlBQVksQ0FBQ0w7UUFFekRFLGlCQUFpQkksS0FBSyxDQUFDLEFBQUMsa0JBQW9DLE9BQW5CRixvQkFBbUIsOEJBQTRCSjtRQUV4RixRQUFRO1FBRVIsSUFBSW1CLDRCQUE0QjtZQUM5QmpCLGlCQUFpQlUsS0FBSyxDQUFDLEFBQUMsb0JBQXNDLE9BQW5CUixvQkFBbUIsNEJBQTBCSjtRQUMxRjtJQUNGO0lBRUEsT0FBT21CO0FBQ1QifQ==