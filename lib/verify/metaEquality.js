"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaEquality;
    }
});
var _metaEquality = /*#__PURE__*/ _interop_require_default(require("../metaEquality"));
var _metaEquality1 = /*#__PURE__*/ _interop_require_default(require("../assignment/metaEquality"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var leftMetastatementNodeQuery = (0, _query.nodeQuery)("/metaEquality/metastatement[0]"), rightMetastatementNodeQuery = (0, _query.nodeQuery)("/metaEquality/metastatement[1]");
function verifyMetaEquality(metaEqualityNode, assignments, derived, localMetaContext) {
    var metaEqualityVerified;
    var metaEqualityString = localMetaContext.nodeAsString(metaEqualityNode);
    localMetaContext.trace("Verifying the '".concat(metaEqualityString, "' meta-equality..."), metaEqualityNode);
    var verifyMetaEqualityFunctions = [
        verifyDerivedMetaEquality,
        verifyStatedMetaEquality
    ];
    metaEqualityVerified = verifyMetaEqualityFunctions.some(function(verifyMetaEqualityFunction) {
        var metaEqualityVerified = verifyMetaEqualityFunction(metaEqualityNode, assignments, derived, localMetaContext);
        if (metaEqualityVerified) {
            return true;
        }
    });
    if (metaEqualityVerified) {
        localMetaContext.debug("...verified the '".concat(metaEqualityString, "' meta-equality."), metaEqualityNode);
    }
    return metaEqualityVerified;
}
function verifyDerivedMetaEquality(metaEqualityNode, assignments, derived, localMetaContext) {
    var derivedMetaEqualityVerified = false;
    if (derived) {
        var metaEqualityString = localMetaContext.nodeAsString(metaEqualityNode);
        localMetaContext.trace("Verifying the '".concat(metaEqualityString, "' derived meta-equality..."), metaEqualityNode);
        var leftMetastatementNode = leftMetastatementNodeQuery(metaEqualityNode), rightMetastatementNode = rightMetastatementNodeQuery(metaEqualityNode), metaEquality = _metaEquality.default.fromLeftMetastatementNodeRightMetastatementNodeAndMetaEqualityNode(leftMetastatementNode, rightMetastatementNode, metaEqualityNode, localMetaContext);
        if (metaEquality !== null) {
            var metaEqualityAssignment = _metaEquality1.default.fromMetaEquality(metaEquality), assignment = metaEqualityAssignment; ///
            assignments.push(assignment);
            derivedMetaEqualityVerified = true;
        }
        if (derivedMetaEqualityVerified) {
            localMetaContext.debug("...verified the '".concat(metaEqualityString, "' derived meta-equality."), metaEqualityNode);
        }
    }
    return derivedMetaEqualityVerified;
}
function verifyStatedMetaEquality(metaEqualityNode, assignments, derived, localMetaContext) {
    var statedMetaEqualityVerified = false;
    if (!derived) {
        var metaEqualityString = localMetaContext.nodeAsString(metaEqualityNode);
        localMetaContext.trace("Verifying the '".concat(metaEqualityString, "' stated meta-equality..."), metaEqualityNode);
        debugger;
        if (statedMetaEqualityVerified) {
            localMetaContext.debug("...verified the '".concat(metaEqualityString, "' stated meta-equality."), metaEqualityNode);
        }
    }
    return statedMetaEqualityVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YUVxdWFsaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgTWV0YUVxdWFsaXR5IGZyb20gXCIuLi9tZXRhRXF1YWxpdHlcIjtcbmltcG9ydCBNZXRhRXF1YWxpdHlBc3NpZ25tZW50IGZyb20gXCIuLi9hc3NpZ25tZW50L21ldGFFcXVhbGl0eVwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGxlZnRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL21ldGFFcXVhbGl0eS9tZXRhc3RhdGVtZW50WzBdXCIpLFxuICAgICAgcmlnaHRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL21ldGFFcXVhbGl0eS9tZXRhc3RhdGVtZW50WzFdXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlNZXRhRXF1YWxpdHkobWV0YUVxdWFsaXR5Tm9kZSwgYXNzaWdubWVudHMsIGRlcml2ZWQsIGxvY2FsTWV0YUNvbnRleHQpIHtcbiAgbGV0IG1ldGFFcXVhbGl0eVZlcmlmaWVkO1xuXG4gIGNvbnN0IG1ldGFFcXVhbGl0eVN0cmluZyA9IGxvY2FsTWV0YUNvbnRleHQubm9kZUFzU3RyaW5nKG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gIGxvY2FsTWV0YUNvbnRleHQudHJhY2UoYFZlcmlmeWluZyB0aGUgJyR7bWV0YUVxdWFsaXR5U3RyaW5nfScgbWV0YS1lcXVhbGl0eS4uLmAsIG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gIGNvbnN0IHZlcmlmeU1ldGFFcXVhbGl0eUZ1bmN0aW9ucyA9IFtcbiAgICB2ZXJpZnlEZXJpdmVkTWV0YUVxdWFsaXR5LFxuICAgIHZlcmlmeVN0YXRlZE1ldGFFcXVhbGl0eVxuICBdO1xuXG4gIG1ldGFFcXVhbGl0eVZlcmlmaWVkID0gdmVyaWZ5TWV0YUVxdWFsaXR5RnVuY3Rpb25zLnNvbWUoKHZlcmlmeU1ldGFFcXVhbGl0eUZ1bmN0aW9uKSA9PiB7XG4gICAgY29uc3QgbWV0YUVxdWFsaXR5VmVyaWZpZWQgPSB2ZXJpZnlNZXRhRXF1YWxpdHlGdW5jdGlvbihtZXRhRXF1YWxpdHlOb2RlLCBhc3NpZ25tZW50cywgZGVyaXZlZCwgbG9jYWxNZXRhQ29udGV4dCk7XG5cbiAgICBpZiAobWV0YUVxdWFsaXR5VmVyaWZpZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKG1ldGFFcXVhbGl0eVZlcmlmaWVkKSB7XG4gICAgbG9jYWxNZXRhQ29udGV4dC5kZWJ1ZyhgLi4udmVyaWZpZWQgdGhlICcke21ldGFFcXVhbGl0eVN0cmluZ30nIG1ldGEtZXF1YWxpdHkuYCwgbWV0YUVxdWFsaXR5Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbWV0YUVxdWFsaXR5VmVyaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeURlcml2ZWRNZXRhRXF1YWxpdHkobWV0YUVxdWFsaXR5Tm9kZSwgYXNzaWdubWVudHMsIGRlcml2ZWQsIGxvY2FsTWV0YUNvbnRleHQpIHtcbiAgbGV0IGRlcml2ZWRNZXRhRXF1YWxpdHlWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGlmIChkZXJpdmVkKSB7XG4gICAgY29uc3QgbWV0YUVxdWFsaXR5U3RyaW5nID0gbG9jYWxNZXRhQ29udGV4dC5ub2RlQXNTdHJpbmcobWV0YUVxdWFsaXR5Tm9kZSk7XG5cbiAgICBsb2NhbE1ldGFDb250ZXh0LnRyYWNlKGBWZXJpZnlpbmcgdGhlICcke21ldGFFcXVhbGl0eVN0cmluZ30nIGRlcml2ZWQgbWV0YS1lcXVhbGl0eS4uLmAsIG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gICAgY29uc3QgbGVmdE1ldGFzdGF0ZW1lbnROb2RlID0gbGVmdE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkobWV0YUVxdWFsaXR5Tm9kZSksXG4gICAgICAgICAgcmlnaHRNZXRhc3RhdGVtZW50Tm9kZSA9IHJpZ2h0TWV0YXN0YXRlbWVudE5vZGVRdWVyeShtZXRhRXF1YWxpdHlOb2RlKSxcbiAgICAgICAgICBtZXRhRXF1YWxpdHkgPSBNZXRhRXF1YWxpdHkuZnJvbUxlZnRNZXRhc3RhdGVtZW50Tm9kZVJpZ2h0TWV0YXN0YXRlbWVudE5vZGVBbmRNZXRhRXF1YWxpdHlOb2RlKGxlZnRNZXRhc3RhdGVtZW50Tm9kZSwgcmlnaHRNZXRhc3RhdGVtZW50Tm9kZSwgbWV0YUVxdWFsaXR5Tm9kZSwgbG9jYWxNZXRhQ29udGV4dCk7XG5cbiAgICBpZiAobWV0YUVxdWFsaXR5ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBtZXRhRXF1YWxpdHlBc3NpZ25tZW50ID0gTWV0YUVxdWFsaXR5QXNzaWdubWVudC5mcm9tTWV0YUVxdWFsaXR5KG1ldGFFcXVhbGl0eSksXG4gICAgICAgICAgICBhc3NpZ25tZW50ID0gbWV0YUVxdWFsaXR5QXNzaWdubWVudDsgIC8vL1xuXG4gICAgICBhc3NpZ25tZW50cy5wdXNoKGFzc2lnbm1lbnQpO1xuXG4gICAgICBkZXJpdmVkTWV0YUVxdWFsaXR5VmVyaWZpZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChkZXJpdmVkTWV0YUVxdWFsaXR5VmVyaWZpZWQpIHtcbiAgICAgIGxvY2FsTWV0YUNvbnRleHQuZGVidWcoYC4uLnZlcmlmaWVkIHRoZSAnJHttZXRhRXF1YWxpdHlTdHJpbmd9JyBkZXJpdmVkIG1ldGEtZXF1YWxpdHkuYCwgbWV0YUVxdWFsaXR5Tm9kZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlcml2ZWRNZXRhRXF1YWxpdHlWZXJpZmllZDtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5U3RhdGVkTWV0YUVxdWFsaXR5KG1ldGFFcXVhbGl0eU5vZGUsIGFzc2lnbm1lbnRzLCBkZXJpdmVkLCBsb2NhbE1ldGFDb250ZXh0KSB7XG4gIGxldCBzdGF0ZWRNZXRhRXF1YWxpdHlWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGlmICghZGVyaXZlZCkge1xuICAgIGNvbnN0IG1ldGFFcXVhbGl0eVN0cmluZyA9IGxvY2FsTWV0YUNvbnRleHQubm9kZUFzU3RyaW5nKG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gICAgbG9jYWxNZXRhQ29udGV4dC50cmFjZShgVmVyaWZ5aW5nIHRoZSAnJHttZXRhRXF1YWxpdHlTdHJpbmd9JyBzdGF0ZWQgbWV0YS1lcXVhbGl0eS4uLmAsIG1ldGFFcXVhbGl0eU5vZGUpO1xuXG4gICAgZGVidWdnZXJcblxuICAgIGlmIChzdGF0ZWRNZXRhRXF1YWxpdHlWZXJpZmllZCkge1xuICAgICAgbG9jYWxNZXRhQ29udGV4dC5kZWJ1ZyhgLi4udmVyaWZpZWQgdGhlICcke21ldGFFcXVhbGl0eVN0cmluZ30nIHN0YXRlZCBtZXRhLWVxdWFsaXR5LmAsIG1ldGFFcXVhbGl0eU5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZWRNZXRhRXF1YWxpdHlWZXJpZmllZDtcbn0iXSwibmFtZXMiOlsidmVyaWZ5TWV0YUVxdWFsaXR5IiwibGVmdE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJyaWdodE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJtZXRhRXF1YWxpdHlOb2RlIiwiYXNzaWdubWVudHMiLCJkZXJpdmVkIiwibG9jYWxNZXRhQ29udGV4dCIsIm1ldGFFcXVhbGl0eVZlcmlmaWVkIiwibWV0YUVxdWFsaXR5U3RyaW5nIiwibm9kZUFzU3RyaW5nIiwidHJhY2UiLCJ2ZXJpZnlNZXRhRXF1YWxpdHlGdW5jdGlvbnMiLCJ2ZXJpZnlEZXJpdmVkTWV0YUVxdWFsaXR5IiwidmVyaWZ5U3RhdGVkTWV0YUVxdWFsaXR5Iiwic29tZSIsInZlcmlmeU1ldGFFcXVhbGl0eUZ1bmN0aW9uIiwiZGVidWciLCJkZXJpdmVkTWV0YUVxdWFsaXR5VmVyaWZpZWQiLCJsZWZ0TWV0YXN0YXRlbWVudE5vZGUiLCJyaWdodE1ldGFzdGF0ZW1lbnROb2RlIiwibWV0YUVxdWFsaXR5IiwiTWV0YUVxdWFsaXR5IiwiZnJvbUxlZnRNZXRhc3RhdGVtZW50Tm9kZVJpZ2h0TWV0YXN0YXRlbWVudE5vZGVBbmRNZXRhRXF1YWxpdHlOb2RlIiwibWV0YUVxdWFsaXR5QXNzaWdubWVudCIsIk1ldGFFcXVhbGl0eUFzc2lnbm1lbnQiLCJmcm9tTWV0YUVxdWFsaXR5IiwiYXNzaWdubWVudCIsInB1c2giLCJzdGF0ZWRNZXRhRXF1YWxpdHlWZXJpZmllZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVUE7OztlQUF3QkE7OzttRUFSQztvRUFDVTtxQkFFVDs7Ozs7O0FBRTFCLElBQU1DLDZCQUE2QkMsSUFBQUEsZ0JBQVMsRUFBQyxtQ0FDdkNDLDhCQUE4QkQsSUFBQUEsZ0JBQVMsRUFBQztBQUUvQixTQUFTRixtQkFBbUJJLGdCQUFnQixFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRUMsZ0JBQWdCO0lBQ2pHLElBQUlDO0lBRUosSUFBTUMscUJBQXFCRixpQkFBaUJHLFlBQVksQ0FBQ047SUFFekRHLGlCQUFpQkksS0FBSyxDQUFDLEFBQUMsa0JBQW9DLE9BQW5CRixvQkFBbUIsdUJBQXFCTDtJQUVqRixJQUFNUSw4QkFBOEI7UUFDbENDO1FBQ0FDO0tBQ0Q7SUFFRE4sdUJBQXVCSSw0QkFBNEJHLElBQUksQ0FBQyxTQUFDQztRQUN2RCxJQUFNUix1QkFBdUJRLDJCQUEyQlosa0JBQWtCQyxhQUFhQyxTQUFTQztRQUVoRyxJQUFJQyxzQkFBc0I7WUFDeEIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxJQUFJQSxzQkFBc0I7UUFDeEJELGlCQUFpQlUsS0FBSyxDQUFDLEFBQUMsb0JBQXNDLE9BQW5CUixvQkFBbUIscUJBQW1CTDtJQUNuRjtJQUVBLE9BQU9JO0FBQ1Q7QUFFQSxTQUFTSywwQkFBMEJULGdCQUFnQixFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRUMsZ0JBQWdCO0lBQ3pGLElBQUlXLDhCQUE4QjtJQUVsQyxJQUFJWixTQUFTO1FBQ1gsSUFBTUcscUJBQXFCRixpQkFBaUJHLFlBQVksQ0FBQ047UUFFekRHLGlCQUFpQkksS0FBSyxDQUFDLEFBQUMsa0JBQW9DLE9BQW5CRixvQkFBbUIsK0JBQTZCTDtRQUV6RixJQUFNZSx3QkFBd0JsQiwyQkFBMkJHLG1CQUNuRGdCLHlCQUF5QmpCLDRCQUE0QkMsbUJBQ3JEaUIsZUFBZUMscUJBQVksQ0FBQ0Msa0VBQWtFLENBQUNKLHVCQUF1QkMsd0JBQXdCaEIsa0JBQWtCRztRQUV0SyxJQUFJYyxpQkFBaUIsTUFBTTtZQUN6QixJQUFNRyx5QkFBeUJDLHNCQUFzQixDQUFDQyxnQkFBZ0IsQ0FBQ0wsZUFDakVNLGFBQWFILHdCQUF5QixHQUFHO1lBRS9DbkIsWUFBWXVCLElBQUksQ0FBQ0Q7WUFFakJULDhCQUE4QjtRQUNoQztRQUVBLElBQUlBLDZCQUE2QjtZQUMvQlgsaUJBQWlCVSxLQUFLLENBQUMsQUFBQyxvQkFBc0MsT0FBbkJSLG9CQUFtQiw2QkFBMkJMO1FBQzNGO0lBQ0Y7SUFFQSxPQUFPYztBQUNUO0FBRUEsU0FBU0oseUJBQXlCVixnQkFBZ0IsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUVDLGdCQUFnQjtJQUN4RixJQUFJc0IsNkJBQTZCO0lBRWpDLElBQUksQ0FBQ3ZCLFNBQVM7UUFDWixJQUFNRyxxQkFBcUJGLGlCQUFpQkcsWUFBWSxDQUFDTjtRQUV6REcsaUJBQWlCSSxLQUFLLENBQUMsQUFBQyxrQkFBb0MsT0FBbkJGLG9CQUFtQiw4QkFBNEJMO1FBRXhGLFFBQVE7UUFFUixJQUFJeUIsNEJBQTRCO1lBQzlCdEIsaUJBQWlCVSxLQUFLLENBQUMsQUFBQyxvQkFBc0MsT0FBbkJSLG9CQUFtQiw0QkFBMEJMO1FBQzFGO0lBQ0Y7SUFFQSxPQUFPeUI7QUFDVCJ9