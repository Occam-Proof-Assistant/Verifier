"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyRuleProofStep;
    }
});
var _metaproof = /*#__PURE__*/ _interop_require_default(require("../step/metaproof"));
var _ruleSubproof = /*#__PURE__*/ _interop_require_default(require("../verify/ruleSubproof"));
var _ruleSubDerivation = /*#__PURE__*/ _interop_require_default(require("../verify/ruleSubDerivation"));
var _qualified = /*#__PURE__*/ _interop_require_default(require("../verify/statement/qualified"));
var _qualified1 = /*#__PURE__*/ _interop_require_default(require("../verify/metastatement/qualified"));
var _unqualified = /*#__PURE__*/ _interop_require_default(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
var _assignments = require("../utilities/assignments");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement|unqualifiedStatement/statement!"), ruleSubproofNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/ruleSubproof!"), metastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement|unqualifiedMetastatement/metastatement!"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/qualifiedStatement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/unqualifiedStatement!"), qualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/qualifiedMetastatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/unqualifiedMetastatement!");
function verifyRuleProofStep(ruleProofStepNode, localMetaContext) {
    var ruleProofStepVerified = false;
    var ruleSubproofNode = ruleSubproofNodeQuery(ruleProofStepNode), qualifiedStatementNode = qualifiedStatementNodeQuery(ruleProofStepNode), unqualifiedStatementNode = unqualifiedStatementNodeQuery(ruleProofStepNode), qualifiedMetastatementNode = qualifiedMetastatementNodeQuery(ruleProofStepNode), unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(ruleProofStepNode);
    if (false) {
    ///
    } else if (ruleSubproofNode !== null) {
        var ruleSubproofVerified;
        ruleSubproofVerified = (0, _ruleSubproof.default)(ruleSubproofNode, localMetaContext);
        if (ruleSubproofVerified) {
            var metaproofStep = _metaproof.default.fromRuleSubproofNode(ruleSubproofNode);
            localMetaContext.addMetaproofStep(metaproofStep);
            ruleProofStepVerified = true;
        }
    } else if (qualifiedStatementNode !== null) {
        var qualifiedStatementVerified;
        var assignments = [], localContext = localMetaContext; ///
        qualifiedStatementVerified = (0, _qualified.default)(qualifiedStatementNode, assignments, localContext);
        if (qualifiedStatementVerified) {
            var assignmentAssigned = (0, _assignments.assignAssignment)(assignments, localContext);
            qualifiedStatementVerified = assignmentAssigned; ///
        }
        if (qualifiedStatementVerified) {
            var statementNode = statementNodeQuery(qualifiedStatementNode), metaproofStep1 = _metaproof.default.fromStatementNode(statementNode);
            localMetaContext.addMetaproofStep(metaproofStep1);
            ruleProofStepVerified = true;
        }
    } else if (unqualifiedStatementNode !== null) {
        var qualifiedStatementVerified1;
        var assignments1 = [], localContext1 = localMetaContext, substitutions = null;
        qualifiedStatementVerified1 = (0, _qualified.default)(qualifiedStatementNode, substitutions, assignments1, localContext1);
        if (qualifiedStatementVerified1) {
            var assignmentAssigned1 = (0, _assignments.assignAssignment)(assignments1, localContext1);
            qualifiedStatementVerified1 = assignmentAssigned1; ///
        }
        if (qualifiedStatementVerified1) {
            var statementNode1 = statementNodeQuery(qualifiedStatementNode), metaproofStep2 = _metaproof.default.fromStatementNode(statementNode1);
            localMetaContext.addMetaproofStep(metaproofStep2);
            ruleProofStepVerified = qualifiedStatementVerified1; ///
        }
    } else if (qualifiedMetastatementNode !== null) {
        var qualifiedMetastatementVerified;
        var assignments2 = [], substitutions1 = null;
        qualifiedMetastatementVerified = (0, _qualified1.default)(qualifiedMetastatementNode, substitutions1, assignments2, localMetaContext);
        if (qualifiedMetastatementVerified) {
            var localContext2 = localMetaContext, assignmentAssigned2 = (0, _assignments.assignAssignment)(assignments2, localContext2);
            qualifiedMetastatementVerified = assignmentAssigned2; ///
        }
        if (qualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metaproofStep3 = _metaproof.default.fromMetastatementNode(metastatementNode);
            localMetaContext.addMetaproofStep(metaproofStep3);
            ruleProofStepVerified = qualifiedMetastatementVerified; ///
        }
    } else if (unqualifiedMetastatementNode !== null) {
        var unqualifiedMetastatementVerified;
        var derived = true, assignments3 = [];
        unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, assignments3, derived, localMetaContext);
        if (unqualifiedMetastatementVerified) {
            var localContext3 = localMetaContext, assignmentAssigned3 = (0, _assignments.assignAssignment)(assignments3, localContext3);
            unqualifiedMetastatementVerified = assignmentAssigned3; ///
        }
        if (unqualifiedMetastatementVerified) {
            var metastatementNode1 = metastatementNodeQuery(unqualifiedMetastatementNode), metaproofStep4 = _metaproof.default.fromMetastatementNode(metastatementNode1);
            localMetaContext.addMetaproofStep(metaproofStep4);
            ruleProofStepVerified = true;
        }
    }
    return ruleProofStepVerified;
}
Object.assign(_ruleSubDerivation.default, {
    verifyRuleProofStep: verifyRuleProofStep
});

//# sourceMappingURL=data:application/json;base64,