"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyRuleProofStep;
    }
});
var _metaproof = /*#__PURE__*/ _interop_require_default(require("../step/metaproof"));
var _ruleSubproof = /*#__PURE__*/ _interop_require_default(require("../verify/ruleSubproof"));
var _ruleSubDerivation = /*#__PURE__*/ _interop_require_default(require("../verify/ruleSubDerivation"));
var _qualified = /*#__PURE__*/ _interop_require_default(require("../verify/statement/qualified"));
var _unqualified = /*#__PURE__*/ _interop_require_default(require("../verify/statement/unqualified"));
var _qualified1 = /*#__PURE__*/ _interop_require_default(require("../verify/metastatement/qualified"));
var _unqualified1 = /*#__PURE__*/ _interop_require_default(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
var _assignments = require("../utilities/assignments");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleSubproofNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/ruleSubproof!"), metastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement|unqualifiedMetastatement/metastatement!"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/qualifiedStatement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/unqualifiedStatement!"), qualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/qualifiedMetastatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/ruleProofStep|lastRuleProofStep/unqualifiedMetastatement!");
function verifyRuleProofStep(ruleProofStepNode, localMetaContext) {
    var ruleProofStepVerified = false;
    var ruleSubproofNode = ruleSubproofNodeQuery(ruleProofStepNode), qualifiedStatementNode = qualifiedStatementNodeQuery(ruleProofStepNode), unqualifiedStatementNode = unqualifiedStatementNodeQuery(ruleProofStepNode), qualifiedMetastatementNode = qualifiedMetastatementNodeQuery(ruleProofStepNode), unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(ruleProofStepNode);
    if (false) {
    ///
    } else if (ruleSubproofNode !== null) {
        var ruleSubproofVerified;
        ruleSubproofVerified = (0, _ruleSubproof.default)(ruleSubproofNode, localMetaContext);
        if (ruleSubproofVerified) {
            var metaproofStep = _metaproof.default.fromRuleSubproofNode(ruleSubproofNode);
            localMetaContext.addMetaproofStep(metaproofStep);
            ruleProofStepVerified = true;
        }
    } else if (qualifiedStatementNode !== null) {
        debugger;
    } else if (unqualifiedStatementNode !== null) {
        debugger;
    } else if (qualifiedMetastatementNode !== null) {
        var qualifiedMetastatementVerified;
        var assignments = [], substitutions = null;
        qualifiedMetastatementVerified = (0, _qualified1.default)(qualifiedMetastatementNode, substitutions, assignments, localMetaContext);
        if (qualifiedMetastatementVerified) {
            var assignmentAssigned = (0, _assignments.assignAssignment)(assignments, localMetaContext);
            qualifiedMetastatementVerified = assignmentAssigned; ///
        }
        if (qualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metaproofStep1 = _metaproof.default.fromMetastatementNode(metastatementNode);
            localMetaContext.addMetaproofStep(metaproofStep1);
            ruleProofStepVerified = qualifiedMetastatementVerified; ///
        }
    } else if (unqualifiedMetastatementNode !== null) {
        var unqualifiedMetastatementVerified;
        var derived = true, assignments1 = [];
        unqualifiedMetastatementVerified = (0, _unqualified1.default)(unqualifiedMetastatementNode, assignments1, derived, localMetaContext);
        if (unqualifiedMetastatementVerified) {
            var assignmentAssigned1 = (0, _assignments.assignAssignment)(assignments1, localMetaContext);
            unqualifiedMetastatementVerified = assignmentAssigned1; ///
        }
        if (unqualifiedMetastatementVerified) {
            var metastatementNode1 = metastatementNodeQuery(unqualifiedMetastatementNode), metaproofStep2 = _metaproof.default.fromMetastatementNode(metastatementNode1);
            localMetaContext.addMetaproofStep(metaproofStep2);
            ruleProofStepVerified = true;
        }
    }
    return ruleProofStepVerified;
}
Object.assign(_ruleSubDerivation.default, {
    verifyRuleProofStep: verifyRuleProofStep
});

//# sourceMappingURL=data:application/json;base64,