"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConsequence;
    }
});
var _consequence = /*#__PURE__*/ _interopRequireDefault(require("../consequence"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("./statement/unqualified"));
var _query = require("../utilities/query");
var _string = require("../utilities/string");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/consequence/unqualifiedStatement!");
function verifyConsequence(consequenceNode, consequences, proofContext) {
    var consequenceVerified = false;
    proofContext.begin(consequenceNode);
    var consequenceString = (0, _string.nodeAsString)(consequenceNode);
    proofContext.debug("Verifying the ".concat(consequenceString, " consequence..."));
    var derived = false, unqualifiedStatementNode = unqualifiedStatementNodeQuery(consequenceNode), unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, derived, proofContext);
    if (unqualifiedStatementVerified) {
        var statementNode = statementNodeQuery(unqualifiedStatementNode), consequence = _consequence.default.fromStatementNode(statementNode);
        consequences.push(consequence);
        consequenceVerified = true;
    }
    consequenceVerified ? proofContext.complete(consequenceNode) : proofContext.halt(consequenceNode);
    return consequenceVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uc2VxdWVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBDb25zZXF1ZW5jZSBmcm9tIFwiLi4vY29uc2VxdWVuY2VcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi9zdGF0ZW1lbnQvdW5xdWFsaWZpZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgbm9kZUFzU3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9zdHJpbmdcIjtcblxuY29uc3Qgc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3VucXVhbGlmaWVkU3RhdGVtZW50L3N0YXRlbWVudCFcIiksXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9jb25zZXF1ZW5jZS91bnF1YWxpZmllZFN0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeUNvbnNlcXVlbmNlKGNvbnNlcXVlbmNlTm9kZSwgY29uc2VxdWVuY2VzLCBwcm9vZkNvbnRleHQpIHtcbiAgbGV0IGNvbnNlcXVlbmNlVmVyaWZpZWQgPSBmYWxzZTtcblxuICBwcm9vZkNvbnRleHQuYmVnaW4oY29uc2VxdWVuY2VOb2RlKTtcblxuICBjb25zdCBjb25zZXF1ZW5jZVN0cmluZyA9IG5vZGVBc1N0cmluZyhjb25zZXF1ZW5jZU5vZGUpO1xuXG4gIHByb29mQ29udGV4dC5kZWJ1ZyhgVmVyaWZ5aW5nIHRoZSAke2NvbnNlcXVlbmNlU3RyaW5nfSBjb25zZXF1ZW5jZS4uLmApO1xuXG4gIGNvbnN0IGRlcml2ZWQgPSBmYWxzZSxcbiAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlID0gdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkoY29uc2VxdWVuY2VOb2RlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCA9IHZlcmlmeVVucXVhbGlmaWVkU3RhdGVtZW50KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSwgZGVyaXZlZCwgcHJvb2ZDb250ZXh0KTtcblxuICBpZiAodW5xdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgIGNvbnN0IHN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlUXVlcnkodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICBjb25zZXF1ZW5jZSA9IENvbnNlcXVlbmNlLmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUpO1xuXG4gICAgY29uc2VxdWVuY2VzLnB1c2goY29uc2VxdWVuY2UpO1xuXG4gICAgY29uc2VxdWVuY2VWZXJpZmllZCA9IHRydWU7XG4gIH1cblxuICBjb25zZXF1ZW5jZVZlcmlmaWVkID9cbiAgICBwcm9vZkNvbnRleHQuY29tcGxldGUoY29uc2VxdWVuY2VOb2RlKSA6XG4gICAgICBwcm9vZkNvbnRleHQuaGFsdChjb25zZXF1ZW5jZU5vZGUpO1xuXG4gIHJldHVybiBjb25zZXF1ZW5jZVZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeUNvbnNlcXVlbmNlIiwic3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkiLCJjb25zZXF1ZW5jZU5vZGUiLCJjb25zZXF1ZW5jZXMiLCJwcm9vZkNvbnRleHQiLCJjb25zZXF1ZW5jZVZlcmlmaWVkIiwiYmVnaW4iLCJjb25zZXF1ZW5jZVN0cmluZyIsIm5vZGVBc1N0cmluZyIsImRlYnVnIiwiZGVyaXZlZCIsInVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSIsInVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCIsInN0YXRlbWVudE5vZGUiLCJjb25zZXF1ZW5jZSIsIkNvbnNlcXVlbmNlIiwiZnJvbVN0YXRlbWVudE5vZGUiLCJwdXNoIiwiY29tcGxldGUiLCJoYWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFXQTs7O2VBQXdCQTs7O2dFQVRBO2dFQUNlO3FCQUViO3NCQUNHOzs7Ozs7QUFFN0IsSUFBTUMscUJBQXFCQyxJQUFBQSxnQkFBUyxFQUFDLHFDQUMvQkMsZ0NBQWdDRCxJQUFBQSxnQkFBUyxFQUFDO0FBRWpDLFNBQVNGLGtCQUFrQkksZUFBZSxFQUFFQyxZQUFZLEVBQUVDLFlBQVksRUFBRTtJQUNyRixJQUFJQyxzQkFBc0IsS0FBSztJQUUvQkQsYUFBYUUsS0FBSyxDQUFDSjtJQUVuQixJQUFNSyxvQkFBb0JDLElBQUFBLG9CQUFZLEVBQUNOO0lBRXZDRSxhQUFhSyxLQUFLLENBQUMsQUFBQyxpQkFBa0MsT0FBbEJGLG1CQUFrQjtJQUV0RCxJQUFNRyxVQUFVLEtBQUssRUFDZkMsMkJBQTJCViw4QkFBOEJDLGtCQUN6RFUsK0JBQStCQyxJQUFBQSxvQkFBMEIsRUFBQ0YsMEJBQTBCRCxTQUFTTjtJQUVuRyxJQUFJUSw4QkFBOEI7UUFDaEMsSUFBTUUsZ0JBQWdCZixtQkFBbUJZLDJCQUNuQ0ksY0FBY0Msb0JBQVcsQ0FBQ0MsaUJBQWlCLENBQUNIO1FBRWxEWCxhQUFhZSxJQUFJLENBQUNIO1FBRWxCVixzQkFBc0IsSUFBSTtJQUM1QixDQUFDO0lBRURBLHNCQUNFRCxhQUFhZSxRQUFRLENBQUNqQixtQkFDcEJFLGFBQWFnQixJQUFJLENBQUNsQixnQkFBZ0I7SUFFdEMsT0FBT0c7QUFDVCJ9