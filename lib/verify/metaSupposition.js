"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaSupposition;
    }
});
var _metaproof = /*#__PURE__*/ _interop_require_default(require("../step/metaproof"));
var _metaSupposition = /*#__PURE__*/ _interop_require_default(require("../metaSupposition"));
var _unqualified = /*#__PURE__*/ _interop_require_default(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
var _assignments = require("../utilities/assignments");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaSupposition/unqualifiedMetastatement!");
function verifyMetaSupposition(metaSuppositionNode, metaSuppositions, localMetaContext) {
    var metaSuppositionVerified = false;
    var metaSuppositionString = localMetaContext.nodeAsString(metaSuppositionNode);
    localMetaContext.trace("Verifying the '".concat(metaSuppositionString, "' meta-supposition..."), metaSuppositionNode);
    var derived = false, assignments = [], unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(metaSuppositionNode), unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, assignments, derived, localMetaContext);
    if (unqualifiedMetastatementVerified) {
        var localContext = localMetaContext, assignmentAssigned = (0, _assignments.assignAssignment)(assignments, localContext);
        metaSuppositionVerified = assignmentAssigned; ///
    }
    if (metaSuppositionVerified) {
        var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaSupposition = _metaSupposition.default.fromMetastatementNode(metastatementNode), metaproofStep = _metaproof.default.fromMetastatementNode(metastatementNode);
        metaSuppositions.push(metaSupposition);
        localMetaContext.addMetaproofStep(metaproofStep);
        localMetaContext.debug("...verified the '".concat(metaSuppositionString, "' meta-supposition."), metaSuppositionNode);
    }
    return metaSuppositionVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YVN1cHBvc2l0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgTWV0YXByb29mU3RlcCBmcm9tIFwiLi4vc3RlcC9tZXRhcHJvb2ZcIjtcbmltcG9ydCBNZXRhU3VwcG9zaXRpb24gZnJvbSBcIi4uL21ldGFTdXBwb3NpdGlvblwiO1xuaW1wb3J0IHZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L21ldGFzdGF0ZW1lbnQvdW5xdWFsaWZpZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgYXNzaWduQXNzaWdubWVudCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXNzaWdubWVudHNcIjtcblxuY29uc3QgbWV0YXN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQvbWV0YXN0YXRlbWVudCFcIiksXG4gICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvbWV0YVN1cHBvc2l0aW9uL3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeU1ldGFTdXBwb3NpdGlvbihtZXRhU3VwcG9zaXRpb25Ob2RlLCBtZXRhU3VwcG9zaXRpb25zLCBsb2NhbE1ldGFDb250ZXh0KSB7XG4gIGxldCBtZXRhU3VwcG9zaXRpb25WZXJpZmllZCA9IGZhbHNlO1xuXG4gIGNvbnN0IG1ldGFTdXBwb3NpdGlvblN0cmluZyA9IGxvY2FsTWV0YUNvbnRleHQubm9kZUFzU3RyaW5nKG1ldGFTdXBwb3NpdGlvbk5vZGUpO1xuXG4gIGxvY2FsTWV0YUNvbnRleHQudHJhY2UoYFZlcmlmeWluZyB0aGUgJyR7bWV0YVN1cHBvc2l0aW9uU3RyaW5nfScgbWV0YS1zdXBwb3NpdGlvbi4uLmAsIG1ldGFTdXBwb3NpdGlvbk5vZGUpO1xuXG4gIGNvbnN0IGRlcml2ZWQgPSBmYWxzZSxcbiAgICAgICAgYXNzaWdubWVudHMgPSBbXSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeShtZXRhU3VwcG9zaXRpb25Ob2RlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSwgYXNzaWdubWVudHMsIGRlcml2ZWQsIGxvY2FsTWV0YUNvbnRleHQpO1xuXG4gIGlmICh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgIGNvbnN0IGxvY2FsQ29udGV4dCA9IGxvY2FsTWV0YUNvbnRleHQsICAvLy9cbiAgICAgICAgICBhc3NpZ25tZW50QXNzaWduZWQgPSBhc3NpZ25Bc3NpZ25tZW50KGFzc2lnbm1lbnRzLCBsb2NhbENvbnRleHQpO1xuXG4gICAgbWV0YVN1cHBvc2l0aW9uVmVyaWZpZWQgPSBhc3NpZ25tZW50QXNzaWduZWQ7IC8vL1xuICB9XG5cbiAgaWYgKG1ldGFTdXBwb3NpdGlvblZlcmlmaWVkKSB7XG4gICAgY29uc3QgbWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgIG1ldGFTdXBwb3NpdGlvbiA9IE1ldGFTdXBwb3NpdGlvbi5mcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgIG1ldGFwcm9vZlN0ZXAgPSBNZXRhcHJvb2ZTdGVwLmZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZSk7XG5cbiAgICBtZXRhU3VwcG9zaXRpb25zLnB1c2gobWV0YVN1cHBvc2l0aW9uKTtcblxuICAgIGxvY2FsTWV0YUNvbnRleHQuYWRkTWV0YXByb29mU3RlcChtZXRhcHJvb2ZTdGVwKTtcblxuICAgIGxvY2FsTWV0YUNvbnRleHQuZGVidWcoYC4uLnZlcmlmaWVkIHRoZSAnJHttZXRhU3VwcG9zaXRpb25TdHJpbmd9JyBtZXRhLXN1cHBvc2l0aW9uLmAsIG1ldGFTdXBwb3NpdGlvbk5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGFTdXBwb3NpdGlvblZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeU1ldGFTdXBwb3NpdGlvbiIsIm1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJtZXRhU3VwcG9zaXRpb25Ob2RlIiwibWV0YVN1cHBvc2l0aW9ucyIsImxvY2FsTWV0YUNvbnRleHQiLCJtZXRhU3VwcG9zaXRpb25WZXJpZmllZCIsIm1ldGFTdXBwb3NpdGlvblN0cmluZyIsIm5vZGVBc1N0cmluZyIsInRyYWNlIiwiZGVyaXZlZCIsImFzc2lnbm1lbnRzIiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IiwibG9jYWxDb250ZXh0IiwiYXNzaWdubWVudEFzc2lnbmVkIiwiYXNzaWduQXNzaWdubWVudCIsIm1ldGFzdGF0ZW1lbnROb2RlIiwibWV0YVN1cHBvc2l0aW9uIiwiTWV0YVN1cHBvc2l0aW9uIiwiZnJvbU1ldGFzdGF0ZW1lbnROb2RlIiwibWV0YXByb29mU3RlcCIsIk1ldGFwcm9vZlN0ZXAiLCJwdXNoIiwiYWRkTWV0YXByb29mU3RlcCIsImRlYnVnIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFZQTs7O2VBQXdCQTs7O2dFQVZFO3NFQUNFO2tFQUNlO3FCQUVqQjsyQkFDTzs7Ozs7O0FBRWpDLElBQU1DLHlCQUF5QkMsSUFBQUEsZ0JBQVMsRUFBQyw2Q0FDbkNDLG9DQUFvQ0QsSUFBQUEsZ0JBQVMsRUFBQztBQUVyQyxTQUFTRixzQkFBc0JJLG1CQUFtQixFQUFFQyxnQkFBZ0IsRUFBRUMsZ0JBQWdCO0lBQ25HLElBQUlDLDBCQUEwQjtJQUU5QixJQUFNQyx3QkFBd0JGLGlCQUFpQkcsWUFBWSxDQUFDTDtJQUU1REUsaUJBQWlCSSxLQUFLLENBQUMsQUFBQyxrQkFBdUMsT0FBdEJGLHVCQUFzQiwwQkFBd0JKO0lBRXZGLElBQU1PLFVBQVUsT0FDVkMsY0FBYyxFQUFFLEVBQ2hCQywrQkFBK0JWLGtDQUFrQ0Msc0JBQ2pFVSxtQ0FBbUNDLElBQUFBLG9CQUE4QixFQUFDRiw4QkFBOEJELGFBQWFELFNBQVNMO0lBRTVILElBQUlRLGtDQUFrQztRQUNwQyxJQUFNRSxlQUFlVixrQkFDZlcscUJBQXFCQyxJQUFBQSw2QkFBZ0IsRUFBQ04sYUFBYUk7UUFFekRULDBCQUEwQlUsb0JBQW9CLEdBQUc7SUFDbkQ7SUFFQSxJQUFJVix5QkFBeUI7UUFDM0IsSUFBTVksb0JBQW9CbEIsdUJBQXVCWSwrQkFDM0NPLGtCQUFrQkMsd0JBQWUsQ0FBQ0MscUJBQXFCLENBQUNILG9CQUN4REksZ0JBQWdCQyxrQkFBYSxDQUFDRixxQkFBcUIsQ0FBQ0g7UUFFMURkLGlCQUFpQm9CLElBQUksQ0FBQ0w7UUFFdEJkLGlCQUFpQm9CLGdCQUFnQixDQUFDSDtRQUVsQ2pCLGlCQUFpQnFCLEtBQUssQ0FBQyxBQUFDLG9CQUF5QyxPQUF0Qm5CLHVCQUFzQix3QkFBc0JKO0lBQ3pGO0lBRUEsT0FBT0c7QUFDVCJ9