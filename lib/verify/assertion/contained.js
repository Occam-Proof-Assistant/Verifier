"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyContainedAssertion;
    }
});
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../../verifier/metaLevel"));
var _verify = require("../../utilities/verify");
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var termNodeQuery = (0, _query.nodeQuery)("/containedAssertion/term!"), statementTermNodesQuery = (0, _query.nodesQuery)("/containedAssertion/statement//term");
var verifyContainedAssertionFunctions = [
    verifyDerivedContainedAssertion,
    verifyStatedContainedAssertion
];
function verifyContainedAssertion(containedAssertionNode, assignments, derived, localContext) {
    var containedAssertionVerified = false;
    var containedAssertionString = localContext.nodeAsString(containedAssertionNode), savedDerived = derived; ///
    localContext.trace("Verifying the '".concat(containedAssertionString, "' contained assertion..."), containedAssertionNode);
    assignments = []; ///
    derived = false; ///
    var verified = _metaLevel.default.verify(containedAssertionNode, assignments, derived, localContext);
    derived = savedDerived; ///
    if (verified) {
        containedAssertionVerified = verifyContainedAssertionFunctions.some(function(verifyContainedAssertionFunction) {
            var containedAssertionVerified = verifyContainedAssertionFunction(containedAssertionNode, assignments, derived, localContext);
            if (containedAssertionVerified) {
                return true;
            }
        });
    }
    if (containedAssertionVerified) {
        localContext.debug("...verified the '".concat(containedAssertionString, "' contained assertion."), containedAssertionNode);
    }
    return containedAssertionVerified;
}
function verifyDerivedContainedAssertion(containedAssertionNode, assignments, derived, localContext) {
    var derivedContainedAssertionVerified = false;
    if (derived) {
        var containedAssertionString = localContext.nodeAsString(containedAssertionNode);
        localContext.trace("Verifying the '".concat(containedAssertionString, "' derived contained assertion..."), containedAssertionNode);
        var assertionNegated = (0, _verify.isAssertionNegated)(containedAssertionNode), termNode = termNodeQuery(containedAssertionNode), negated = assertionNegated, statementTermNodes = statementTermNodesQuery(containedAssertionNode), termNodeMatchesAssertionTermNode = statementTermNodes.some(function(statementTermNode) {
            var termNodeMatchesAssertionTermNode = termNode.match(statementTermNode);
            if (termNodeMatchesAssertionTermNode) {
                return true;
            }
        });
        if (!negated) {
            if (termNodeMatchesAssertionTermNode) {
                derivedContainedAssertionVerified = true;
            }
        }
        if (negated) {
            if (!termNodeMatchesAssertionTermNode) {
                derivedContainedAssertionVerified = true;
            }
        }
        if (derivedContainedAssertionVerified) {
            localContext.debug("...verified the '".concat(containedAssertionString, "' derived contained assertion."), containedAssertionNode);
        }
    }
    return derivedContainedAssertionVerified;
}
function verifyStatedContainedAssertion(containedAssertionNode, assignments, derived, localContext) {
    var statedContainedAssertionVerified;
    if (!derived) {
        var containedAssertionString = localContext.nodeAsString(containedAssertionNode);
        localContext.trace("Verifying the '".concat(containedAssertionString, "' stated contained assertion..."), containedAssertionNode);
        statedContainedAssertionVerified = true;
        if (statedContainedAssertionVerified) {
            localContext.debug("...verified the '".concat(containedAssertionString, "' stated contained assertion."), containedAssertionNode);
        }
    }
    return statedContainedAssertionVerified;
}

//# sourceMappingURL=data:application/json;base64,