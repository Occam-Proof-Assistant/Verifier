"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConclusion;
    }
});
var _conclusion = /*#__PURE__*/ _interopRequireDefault(require("../conclusion"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("./metastatement/unqualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/conclusion/unqualifiedMetastatement!");
function verifyConclusion(conclusionNode, conclusions, metaproofContext) {
    var conclusionVerified = false;
    metaproofContext.begin(conclusionNode);
    var conclusionString = metaproofContext.nodeAsString(conclusionNode);
    metaproofContext.debug("Verifying the '".concat(conclusionString, "' conclusion..."));
    var derived = false, assertions = [], unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(conclusionNode), unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, assertions, derived, metaproofContext);
    if (unqualifiedMetastatementVerified) {
        var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), conclusion = _conclusion.default.fromMetastatementNode(metastatementNode);
        conclusions.push(conclusion);
        conclusionVerified = true;
    }
    conclusionVerified ? metaproofContext.complete(conclusionNode) : metaproofContext.halt(conclusionNode);
    return conclusionVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uY2x1c2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IENvbmNsdXNpb24gZnJvbSBcIi4uL2NvbmNsdXNpb25cIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQgZnJvbSBcIi4vbWV0YXN0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50L21ldGFzdGF0ZW1lbnQhXCIpLFxuICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2NvbmNsdXNpb24vdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5Q29uY2x1c2lvbihjb25jbHVzaW9uTm9kZSwgY29uY2x1c2lvbnMsIG1ldGFwcm9vZkNvbnRleHQpIHtcbiAgbGV0IGNvbmNsdXNpb25WZXJpZmllZCA9IGZhbHNlO1xuXG4gIG1ldGFwcm9vZkNvbnRleHQuYmVnaW4oY29uY2x1c2lvbk5vZGUpO1xuXG4gIGNvbnN0IGNvbmNsdXNpb25TdHJpbmcgPSBtZXRhcHJvb2ZDb250ZXh0Lm5vZGVBc1N0cmluZyhjb25jbHVzaW9uTm9kZSk7XG5cbiAgbWV0YXByb29mQ29udGV4dC5kZWJ1ZyhgVmVyaWZ5aW5nIHRoZSAnJHtjb25jbHVzaW9uU3RyaW5nfScgY29uY2x1c2lvbi4uLmApO1xuXG4gIGNvbnN0IGRlcml2ZWQgPSBmYWxzZSxcbiAgICAgICAgYXNzZXJ0aW9ucyA9IFtdLFxuICAgICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlID0gdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5KGNvbmNsdXNpb25Ob2RlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSwgYXNzZXJ0aW9ucywgZGVyaXZlZCwgbWV0YXByb29mQ29udGV4dCk7XG5cbiAgaWYgKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgY29uc3QgbWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgIGNvbmNsdXNpb24gPSBDb25jbHVzaW9uLmZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZSk7XG5cbiAgICBjb25jbHVzaW9ucy5wdXNoKGNvbmNsdXNpb24pO1xuXG4gICAgY29uY2x1c2lvblZlcmlmaWVkID0gdHJ1ZTtcbiAgfVxuXG4gIGNvbmNsdXNpb25WZXJpZmllZCA/XG4gICAgbWV0YXByb29mQ29udGV4dC5jb21wbGV0ZShjb25jbHVzaW9uTm9kZSkgOlxuICAgICAgbWV0YXByb29mQ29udGV4dC5oYWx0KGNvbmNsdXNpb25Ob2RlKTtcblxuICByZXR1cm4gY29uY2x1c2lvblZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeUNvbmNsdXNpb24iLCJtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5IiwiY29uY2x1c2lvbk5vZGUiLCJjb25jbHVzaW9ucyIsIm1ldGFwcm9vZkNvbnRleHQiLCJjb25jbHVzaW9uVmVyaWZpZWQiLCJiZWdpbiIsImNvbmNsdXNpb25TdHJpbmciLCJub2RlQXNTdHJpbmciLCJkZWJ1ZyIsImRlcml2ZWQiLCJhc3NlcnRpb25zIiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IiwibWV0YXN0YXRlbWVudE5vZGUiLCJjb25jbHVzaW9uIiwiQ29uY2x1c2lvbiIsImZyb21NZXRhc3RhdGVtZW50Tm9kZSIsInB1c2giLCJjb21wbGV0ZSIsImhhbHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVVBOzs7ZUFBd0JBOzs7K0RBUkQ7Z0VBQ29CO3FCQUVqQjs7Ozs7O0FBRTFCLElBQU1DLHlCQUF5QkMsSUFBQUEsZ0JBQVMsRUFBQyw2Q0FDbkNDLG9DQUFvQ0QsSUFBQUEsZ0JBQVMsRUFBQztBQUVyQyxTQUFTRixpQkFBaUJJLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxnQkFBZ0IsRUFBRTtJQUN0RixJQUFJQyxxQkFBcUIsS0FBSztJQUU5QkQsaUJBQWlCRSxLQUFLLENBQUNKO0lBRXZCLElBQU1LLG1CQUFtQkgsaUJBQWlCSSxZQUFZLENBQUNOO0lBRXZERSxpQkFBaUJLLEtBQUssQ0FBQyxBQUFDLGtCQUFrQyxPQUFqQkYsa0JBQWlCO0lBRTFELElBQU1HLFVBQVUsS0FBSyxFQUNmQyxhQUFhLEVBQUUsRUFDZkMsK0JBQStCWCxrQ0FBa0NDLGlCQUNqRVcsbUNBQW1DQyxJQUFBQSxvQkFBOEIsRUFBQ0YsOEJBQThCRCxZQUFZRCxTQUFTTjtJQUUzSCxJQUFJUyxrQ0FBa0M7UUFDcEMsSUFBTUUsb0JBQW9CaEIsdUJBQXVCYSwrQkFDM0NJLGFBQWFDLG1CQUFVLENBQUNDLHFCQUFxQixDQUFDSDtRQUVwRFosWUFBWWdCLElBQUksQ0FBQ0g7UUFFakJYLHFCQUFxQixJQUFJO0lBQzNCLENBQUM7SUFFREEscUJBQ0VELGlCQUFpQmdCLFFBQVEsQ0FBQ2xCLGtCQUN4QkUsaUJBQWlCaUIsSUFBSSxDQUFDbkIsZUFBZTtJQUV6QyxPQUFPRztBQUNUIn0=