"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConclusion;
    }
});
var _conclusion = /*#__PURE__*/ _interopRequireDefault(require("../conclusion"));
var _query = require("../utilities/query");
var _string = require("../utilities/string");
var _metastatement = /*#__PURE__*/ _interopRequireDefault(require("./metastatement"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/conclusion/unqualifiedMetastatement!/metastatement!");
function verifyConclusion(conclusionNode, conclusions, metaproofContext) {
    var conclusionVerified = false;
    metaproofContext.begin(conclusionNode);
    var conclusionString = (0, _string.nodeAsString)(conclusionNode);
    metaproofContext.debug("Verifying the '".concat(conclusionString, "' conclusion..."));
    var metastatementNode = metastatementNodeQuery(conclusionNode);
    if (metastatementNode !== null) {
        var qualified = false, metastatementVerified = (0, _metastatement.default)(metastatementNode, qualified, metaproofContext);
        if (metastatementVerified) {
            var conclusion = _conclusion.default.fromMetastatementNode(metastatementNode);
            conclusions.push(conclusion);
            conclusionVerified = true;
        }
    }
    conclusionVerified ? metaproofContext.complete(conclusionNode) : metaproofContext.halt(conclusionNode);
    return conclusionVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uY2x1c2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IENvbmNsdXNpb24gZnJvbSBcIi4uL2NvbmNsdXNpb25cIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgbm9kZUFzU3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9zdHJpbmdcIjtcbmltcG9ydCB2ZXJpZnlNZXRhc3RhdGVtZW50IGZyb20gXCIuL21ldGFzdGF0ZW1lbnRcIjtcblxuY29uc3QgbWV0YXN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9jb25jbHVzaW9uL3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudCEvbWV0YXN0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeUNvbmNsdXNpb24oY29uY2x1c2lvbk5vZGUsIGNvbmNsdXNpb25zLCBtZXRhcHJvb2ZDb250ZXh0KSB7XG4gIGxldCBjb25jbHVzaW9uVmVyaWZpZWQgPSBmYWxzZTtcblxuICBtZXRhcHJvb2ZDb250ZXh0LmJlZ2luKGNvbmNsdXNpb25Ob2RlKTtcblxuICBjb25zdCBjb25jbHVzaW9uU3RyaW5nID0gbm9kZUFzU3RyaW5nKGNvbmNsdXNpb25Ob2RlKTtcblxuICBtZXRhcHJvb2ZDb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICcke2NvbmNsdXNpb25TdHJpbmd9JyBjb25jbHVzaW9uLi4uYCk7XG5cbiAgY29uc3QgbWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5KGNvbmNsdXNpb25Ob2RlKTtcblxuICBpZiAobWV0YXN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBxdWFsaWZpZWQgPSBmYWxzZSxcbiAgICAgICAgICBtZXRhc3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlNZXRhc3RhdGVtZW50KG1ldGFzdGF0ZW1lbnROb2RlLCBxdWFsaWZpZWQsIG1ldGFwcm9vZkNvbnRleHQpO1xuXG4gICAgaWYgKG1ldGFzdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgICAgY29uc3QgY29uY2x1c2lvbiA9IENvbmNsdXNpb24uZnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgY29uY2x1c2lvbnMucHVzaChjb25jbHVzaW9uKTtcblxuICAgICAgY29uY2x1c2lvblZlcmlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBjb25jbHVzaW9uVmVyaWZpZWQgP1xuICAgIG1ldGFwcm9vZkNvbnRleHQuY29tcGxldGUoY29uY2x1c2lvbk5vZGUpIDpcbiAgICAgIG1ldGFwcm9vZkNvbnRleHQuaGFsdChjb25jbHVzaW9uTm9kZSk7XG5cbiAgcmV0dXJuIGNvbmNsdXNpb25WZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlDb25jbHVzaW9uIiwibWV0YXN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImNvbmNsdXNpb25Ob2RlIiwiY29uY2x1c2lvbnMiLCJtZXRhcHJvb2ZDb250ZXh0IiwiY29uY2x1c2lvblZlcmlmaWVkIiwiYmVnaW4iLCJjb25jbHVzaW9uU3RyaW5nIiwibm9kZUFzU3RyaW5nIiwiZGVidWciLCJtZXRhc3RhdGVtZW50Tm9kZSIsInF1YWxpZmllZCIsIm1ldGFzdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeU1ldGFzdGF0ZW1lbnQiLCJjb25jbHVzaW9uIiwiQ29uY2x1c2lvbiIsImZyb21NZXRhc3RhdGVtZW50Tm9kZSIsInB1c2giLCJjb21wbGV0ZSIsImhhbHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVVBOzs7ZUFBd0JBOzs7K0RBUkQ7cUJBRUc7c0JBQ0c7a0VBQ0c7Ozs7OztBQUVoQyxJQUFNQyx5QkFBeUJDLElBQUFBLGdCQUFTLEVBQUM7QUFFMUIsU0FBU0YsaUJBQWlCRyxjQUFjLEVBQUVDLFdBQVcsRUFBRUMsZ0JBQWdCLEVBQUU7SUFDdEYsSUFBSUMscUJBQXFCLEtBQUs7SUFFOUJELGlCQUFpQkUsS0FBSyxDQUFDSjtJQUV2QixJQUFNSyxtQkFBbUJDLElBQUFBLG9CQUFZLEVBQUNOO0lBRXRDRSxpQkFBaUJLLEtBQUssQ0FBQyxBQUFDLGtCQUFrQyxPQUFqQkYsa0JBQWlCO0lBRTFELElBQU1HLG9CQUFvQlYsdUJBQXVCRTtJQUVqRCxJQUFJUSxzQkFBc0IsSUFBSSxFQUFFO1FBQzlCLElBQU1DLFlBQVksS0FBSyxFQUNqQkMsd0JBQXdCQyxJQUFBQSxzQkFBbUIsRUFBQ0gsbUJBQW1CQyxXQUFXUDtRQUVoRixJQUFJUSx1QkFBdUI7WUFDekIsSUFBTUUsYUFBYUMsbUJBQVUsQ0FBQ0MscUJBQXFCLENBQUNOO1lBRXBEUCxZQUFZYyxJQUFJLENBQUNIO1lBRWpCVCxxQkFBcUIsSUFBSTtRQUMzQixDQUFDO0lBQ0gsQ0FBQztJQUVEQSxxQkFDRUQsaUJBQWlCYyxRQUFRLENBQUNoQixrQkFDeEJFLGlCQUFpQmUsSUFBSSxDQUFDakIsZUFBZTtJQUV6QyxPQUFPRztBQUNUIn0=