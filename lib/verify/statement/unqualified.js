"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyUnqualifiedStatement;
    }
});
var _equality = /*#__PURE__*/ _interop_require_default(require("../../verify/equality"));
var _judgement = /*#__PURE__*/ _interop_require_default(require("../../verify/judgement"));
var _statement = /*#__PURE__*/ _interop_require_default(require("../../verify/statement"));
var _type = /*#__PURE__*/ _interop_require_default(require("../assertion/type"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), equalityNodeQuery = (0, _query.nodeQuery)("/statement/equality!"), judgementNodeQuery = (0, _query.nodeQuery)("/statement/judgement!"), typeAssertionNodeQuery = (0, _query.nodeQuery)("/statement/typeAssertion!");
function verifyUnqualifiedStatement(unqualifiedStatementNode, assignments, derived, localContext) {
    var unqualifiedStatementVerified;
    var unqualifiedStatementString = localContext.nodeAsString(unqualifiedStatementNode);
    localContext.trace("Verifying the '".concat(unqualifiedStatementString, "' unqualified statement..."), unqualifiedStatementNode);
    var verifyUnqualifiedStatementFunctions = [
        verifyDerivedUnqualifiedStatement,
        verifyStatedUnqualifiedStatement
    ];
    unqualifiedStatementVerified = verifyUnqualifiedStatementFunctions.some(function(verifyUnqualifiedStatementFunction) {
        var unqualifiedStatementVerified = verifyUnqualifiedStatementFunction(unqualifiedStatementNode, assignments, derived, localContext);
        if (unqualifiedStatementVerified) {
            return true;
        }
    });
    if (unqualifiedStatementVerified) {
        localContext.debug("...verified the '".concat(unqualifiedStatementString, "' unqualified statement."), unqualifiedStatementNode);
    }
    return unqualifiedStatementVerified;
}
function verifyDerivedUnqualifiedStatement(unqualifiedStatementNode, assignments, derived, localContext) {
    var derivedUnqualifiedStatementVerified = false;
    if (derived) {
        var statementNode = statementNodeQuery(unqualifiedStatementNode), unqualifiedStatementString = localContext.nodeAsString(unqualifiedStatementNode);
        localContext.trace("Verifying the '".concat(unqualifiedStatementString, "' derived unqualified statement..."), unqualifiedStatementNode);
        var statementUnified = localContext.unifyStatement(statementNode, localContext);
        if (statementUnified) {
            derivedUnqualifiedStatementVerified = true;
        } else {
            var statementNode1 = statementNodeQuery(unqualifiedStatementNode), derivedStatementVerified = verifyDerivedStatement(statementNode1, assignments, derived, localContext);
            derivedUnqualifiedStatementVerified = derivedStatementVerified; ///
        }
        if (derivedUnqualifiedStatementVerified) {
            localContext.debug("...verified the '".concat(unqualifiedStatementString, "' derived unqualified statement."), unqualifiedStatementNode);
        }
    }
    return derivedUnqualifiedStatementVerified;
}
function verifyStatedUnqualifiedStatement(unqualifiedStatementNode, assignments, derived, localContext) {
    var statedUnqualifiedStatementVerified = false;
    if (!derived) {
        var statementNode = statementNodeQuery(unqualifiedStatementNode), unqualifiedStatementString = localContext.nodeAsString(unqualifiedStatementNode);
        localContext.trace("Verifying the '".concat(unqualifiedStatementString, "' stated unqualified statement..."), unqualifiedStatementNode);
        var statementVerified = (0, _statement.default)(statementNode, assignments, derived, localContext);
        statedUnqualifiedStatementVerified = statementVerified; ///
        if (statedUnqualifiedStatementVerified) {
            localContext.debug("...verified the '".concat(unqualifiedStatementString, "' stated unqualified statement."), unqualifiedStatementNode);
        }
    }
    return statedUnqualifiedStatementVerified;
}
function verifyDerivedStatement(statementNode, assignments, derived, localContext) {
    var derivedStatementVerified;
    var statementString = localContext.nodeAsString(statementNode);
    localContext.trace("Verifying the '".concat(statementString, "' derived statement..."), statementNode);
    var verifyDerivedStatementFunctions = [
        verifyDerivedStatementAsEquality,
        verifyDerivedStatementAsJudgement,
        verifyDerivedStatementAsTypeAssertion
    ];
    derivedStatementVerified = verifyDerivedStatementFunctions.every(function(verifyDerivedStatementFunction) {
        var derivedStatementVerified = verifyDerivedStatementFunction(statementNode, assignments, derived, localContext);
        if (derivedStatementVerified) {
            return true;
        }
    });
    if (derivedStatementVerified) {
        localContext.debug("...verified the '".concat(statementString, "' derived statement."), statementNode);
    }
    return derivedStatementVerified;
}
function verifyDerivedStatementAsEquality(statementNode, assignments, derived, localContext) {
    var derivedStatementVerifiedAsEquality = true; ///
    var equalityNode = equalityNodeQuery(statementNode);
    if (equalityNode !== null) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the '".concat(statementString, "' derived statement as an equality..."), statementNode);
        var equalityVerified = (0, _equality.default)(equalityNode, assignments, derived, localContext, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        derivedStatementVerifiedAsEquality = equalityVerified; ///
        if (derivedStatementVerifiedAsEquality) {
            localContext.debug("...verified the '".concat(statementString, "' derived statement as an equality."), statementNode);
        }
    }
    return derivedStatementVerifiedAsEquality;
}
function verifyDerivedStatementAsJudgement(statementNode, assignments, derived, localContext) {
    var derivedStatementVerifiedAsJudgement = true;
    var judgementNode = judgementNodeQuery(statementNode);
    if (judgementNode !== null) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the '".concat(statementString, "' derived statement as a judgement..."), statementNode);
        var judgementVerified = (0, _judgement.default)(judgementNode, assignments, derived, localContext);
        derivedStatementVerifiedAsJudgement = judgementVerified; ///
        if (derivedStatementVerifiedAsJudgement) {
            localContext.debug("...verified the '".concat(statementString, "' derived statement as a judgement."), statementNode);
        }
    }
    return derivedStatementVerifiedAsJudgement;
}
function verifyDerivedStatementAsTypeAssertion(statementNode, assignments, derived, localContext) {
    var statementVerifiedAsTypeAssertion = true; ///
    var typeAssertionNode = typeAssertionNodeQuery(statementNode);
    if (typeAssertionNode !== null) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the '".concat(statementString, "' derived statement as a type assertion..."), statementNode);
        var typeAssertionVerified = (0, _type.default)(typeAssertionNode, assignments, derived, localContext);
        statementVerifiedAsTypeAssertion = typeAssertionVerified; ///
        if (statementVerifiedAsTypeAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' derived statement as a type assertion."), statementNode);
        }
    }
    return statementVerifiedAsTypeAssertion;
}

//# sourceMappingURL=data:application/json;base64,