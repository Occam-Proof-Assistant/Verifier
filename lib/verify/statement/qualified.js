"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedStatement;
    }
});
var _statement = /*#__PURE__*/ _interop_require_default(require("../../verify/statement"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), metavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/reference/metavariable!");
function verifyQualifiedStatement(qualifiedStatementNode, substitutions, assignments, derived, localContext) {
    var qualifiedStatementVerified;
    var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
    var statementNode = statementNodeQuery(qualifiedStatementNode), statementVerified = (0, _statement.default)(statementNode, assignments, derived, localContext);
    if (statementVerified) {
        var unifyQualifiedStatementFunctions = [
            unifyQualifiedStatementAWithRule,
            unifyQualifiedStatementAWithAxiom,
            unifyQualifiedStatementAWithLemma,
            unifyQualifiedStatementAWithTheorem,
            unifyQualifiedStatementAWithConjecture,
            unifyQualifiedStatementAWithReference
        ];
        var qualifiedStatementUnified = unifyQualifiedStatementFunctions.some(function(unifyQualifiedStatementFunction) {
            var qualifiedStatementUnified = unifyQualifiedStatementFunction(qualifiedStatementNode, substitutions, localContext);
            if (qualifiedStatementUnified) {
                return true;
            }
        });
        qualifiedStatementVerified = qualifiedStatementUnified; ///
    }
    if (qualifiedStatementVerified) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
    }
    return qualifiedStatementVerified;
}
function unifyQualifiedStatementAWithRule(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithRule = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), rule = localContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' rule..."), qualifiedStatementNode);
        var ruleMatchesStatement = rule.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithRule = ruleMatchesStatement; ///
        if (qualifiedStatementUnifiedWithRule) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' rule."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithRule;
}
function unifyQualifiedStatementAWithAxiom(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithAxiom = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), axiom = localContext.findAxiomByMetavariableNode(metavariableNode);
    if (axiom !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' axiom..."), qualifiedStatementNode);
        var axiomMatchesStatement = axiom.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithAxiom = axiomMatchesStatement; ///
        if (qualifiedStatementUnifiedWithAxiom) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' axiom."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithAxiom;
}
function unifyQualifiedStatementAWithLemma(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithLemma = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), lemma = localContext.findLemmaByMetavariableNode(metavariableNode);
    if (lemma !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' lemma..."), qualifiedStatementNode);
        var lemmaMatchesStatement = lemma.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithLemma = lemmaMatchesStatement; ///
        if (qualifiedStatementUnifiedWithLemma) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' lemma."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithLemma;
}
function unifyQualifiedStatementAWithTheorem(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithTheorem = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), theorem = localContext.findTheoremByMetavariableNode(metavariableNode);
    if (theorem !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' theorem..."), qualifiedStatementNode);
        var theoremMatchesStatement = theorem.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithTheorem = theoremMatchesStatement; ///
        if (qualifiedStatementUnifiedWithTheorem) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' theorem."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithTheorem;
}
function unifyQualifiedStatementAWithConjecture(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithConjecture = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), conjecture = localContext.findConjectureByMetavariableNode(metavariableNode);
    if (conjecture !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' conjecture..."), qualifiedStatementNode);
        var conjectureMatchesStatement = conjecture.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithConjecture = conjectureMatchesStatement; ///
        if (qualifiedStatementUnifiedWithConjecture) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' conjecture."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithConjecture;
}
function unifyQualifiedStatementAWithReference(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithReference = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), metavariablePresent = localContext.isMetavariablePresentByMetavariableNode(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' reference..."), qualifiedStatementNode);
    if (metavariablePresent) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), localContextA = null, localContextB = localContext, statementNodeB = statementNode, substitutionNodeA = null, metavariableNodeA = metavariableNode, metavariableUnifiedWithStatement = unifyMetavariableWithStatement(metavariableNodeA, statementNodeB, substitutionNodeA, substitutions, localContextA, localContextB, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        qualifiedStatementUnifiedWithReference = metavariableUnifiedWithStatement; ///
    }
    if (qualifiedStatementUnifiedWithReference) {
        localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(metavariableString, "' reference."), qualifiedStatementNode);
    }
    return qualifiedStatementUnifiedWithReference;
}

//# sourceMappingURL=data:application/json;base64,