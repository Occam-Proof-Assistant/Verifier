"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedStatement;
    }
});
var _query = require("../../utilities/query");
var _statement = require("../../verify/statement");
var referenceNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/qualification!/reference!"), statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!");
function verifyQualifiedStatement(qualifiedStatementNode, assignments, derived, localContext) {
    var qualifiedStatementVerified = false;
    var statementNode = statementNodeQuery(qualifiedStatementNode);
    if (statementNode !== null) {
        var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
        var referenceNode = referenceNodeQuery(qualifiedStatementNode), referenceName = (0, _query.referenceNameFromReferenceNode)(referenceNode), verifyQualifiedStatementFunctions = [
            verifyUnqualifiedStatementAAgainstRule,
            verifyUnqualifiedStatementAAgainstAxiom,
            verifyUnqualifiedStatementAAgainstLemma,
            verifyUnqualifiedStatementAAgainstTheorem,
            verifyUnqualifiedStatementAAgainstConjecture
        ];
        qualifiedStatementVerified = verifyQualifiedStatementFunctions.some(function(verifyQualifiedStatementFunction) {
            var unqualifiedStatementVerified = verifyQualifiedStatementFunction(qualifiedStatementNode, referenceName, localContext);
            if (unqualifiedStatementVerified) {
                return true;
            }
        });
        if (qualifiedStatementVerified) {
            derived = false; ///
            var context = localContext, verifyStatementFunctions = [
                _statement.verifyStatementAsEquality,
                _statement.verifyStatementAsTypeAssertion
            ];
            qualifiedStatementVerified = verifyStatementFunctions.some(function(verifyStatementFunction) {
                var statementVerified = verifyStatementFunction(statementNode, assignments, derived, context, function() {
                    var verifiedAhead = true;
                    return verifiedAhead;
                });
                if (statementVerified) {
                    return true;
                }
            });
        }
        if (qualifiedStatementVerified) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerified;
}
function verifyUnqualifiedStatementAAgainstRule(qualifiedStatementNode, referenceName, localContext) {
    var unqualifiedStatementVerifiedAgainstRule = false;
    var rule = localContext.findRuleByReferenceName(referenceName);
    if (rule !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " rule..."), statementNode);
        var ruleMatchesStatement = rule.matchStatement(statementNode, statementLocalContext);
        unqualifiedStatementVerifiedAgainstRule = ruleMatchesStatement; ///
        if (unqualifiedStatementVerifiedAgainstRule) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " rule."), statementNode);
        }
    }
    return unqualifiedStatementVerifiedAgainstRule;
}
function verifyUnqualifiedStatementAAgainstAxiom(qualifiedStatementNode, referenceName, localContext) {
    var unqualifiedStatementVerifiedAgainstAxiom = false;
    var axiom = localContext.findAxiomByReferenceName(referenceName);
    if (axiom !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " axiom..."), statementNode);
        var axiomMatchesStatement = axiom.matchStatement(statementNode, statementLocalContext);
        unqualifiedStatementVerifiedAgainstAxiom = axiomMatchesStatement; ///
        if (unqualifiedStatementVerifiedAgainstAxiom) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " axiom."), statementNode);
        }
    }
    return unqualifiedStatementVerifiedAgainstAxiom;
}
function verifyUnqualifiedStatementAAgainstLemma(qualifiedStatementNode, referenceName, localContext) {
    var unqualifiedStatementVerifiedAgainstLemma = false;
    var lemma = localContext.findLemmaByReferenceName(referenceName);
    if (lemma !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " lemma..."), statementNode);
        var lemmaMatchesStatement = lemma.matchStatement(statementNode, statementLocalContext);
        unqualifiedStatementVerifiedAgainstLemma = lemmaMatchesStatement; ///
        if (unqualifiedStatementVerifiedAgainstLemma) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " lemma."), statementNode);
        }
    }
    return unqualifiedStatementVerifiedAgainstLemma;
}
function verifyUnqualifiedStatementAAgainstTheorem(qualifiedStatementNode, referenceName, localContext) {
    var unqualifiedStatementVerifiedAgainstTheorem = false;
    var theorem = localContext.findTheoremByReferenceName(referenceName);
    if (theorem !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " theorem..."), statementNode);
        var theoremMatchesStatement = theorem.matchStatement(statementNode, statementLocalContext);
        unqualifiedStatementVerifiedAgainstTheorem = theoremMatchesStatement; ///
        if (unqualifiedStatementVerifiedAgainstTheorem) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " theorem."), statementNode);
        }
    }
    return unqualifiedStatementVerifiedAgainstTheorem;
}
function verifyUnqualifiedStatementAAgainstConjecture(qualifiedStatementNode, referenceName, localContext) {
    var unqualifiedStatementVerifiedAgainstConjecture = false;
    var conjecture = localContext.findConjectureByReferenceName(referenceName);
    if (conjecture !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " conjecture..."), statementNode);
        var conjectureMatchesStatement = conjecture.matchStatement(statementNode, statementLocalContext);
        unqualifiedStatementVerifiedAgainstConjecture = conjectureMatchesStatement; ///
        if (unqualifiedStatementVerifiedAgainstConjecture) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the ").concat(referenceName, " conjecture."), statementNode);
        }
    }
    return unqualifiedStatementVerifiedAgainstConjecture;
}

//# sourceMappingURL=data:application/json;base64,