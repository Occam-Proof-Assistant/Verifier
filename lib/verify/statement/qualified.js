"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedStatement;
    }
});
var _equality = /*#__PURE__*/ _interop_require_default(require("../equality"));
var _judgement = /*#__PURE__*/ _interop_require_default(require("../judgement"));
var _type = /*#__PURE__*/ _interop_require_default(require("../assertion/type"));
var _metavariableAgainstStatement = /*#__PURE__*/ _interop_require_default(require("../../unify/metavariableAgainstStatement"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), equalityNodeQuery = (0, _query.nodeQuery)("/statement/equality!"), judgementNodeQuery = (0, _query.nodeQuery)("/statement/judgement!"), metavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/reference/metavariable!"), typeAssertionNodeQuery = (0, _query.nodeQuery)("/statement/typeAssertion!");
function verifyQualifiedStatement(qualifiedStatementNode, substitutions, assignments, localContext) {
    var qualifiedStatementVerified;
    var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
    var verifyQualifiedStatementFunctions = [
        verifyQualifiedStatementAAgainstRule,
        verifyQualifiedStatementAAgainstAxiom,
        verifyQualifiedStatementAAgainstLemma,
        verifyQualifiedStatementAAgainstTheorem,
        verifyQualifiedStatementAAgainstConjecture,
        verifyQualifiedStatementAAgainstReference
    ];
    qualifiedStatementVerified = verifyQualifiedStatementFunctions.some(function(verifyQualifiedStatementFunction) {
        var qualifiedStatementVerified = verifyQualifiedStatementFunction(qualifiedStatementNode, substitutions, localContext);
        if (qualifiedStatementVerified) {
            return true;
        }
    });
    if (qualifiedStatementVerified) {
        var derived = false, statementNode = statementNodeQuery(qualifiedStatementNode), statedStatementVerified = verifyStatedStatement(statementNode, assignments, derived, localContext);
        qualifiedStatementVerified = statedStatementVerified; ///
    }
    if (qualifiedStatementVerified) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
    }
    return qualifiedStatementVerified;
}
function verifyQualifiedStatementAAgainstRule(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstRule = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), rule = localContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' rule..."), qualifiedStatementNode);
        var ruleMatchesStatement = rule.unifyStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstRule = ruleMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstRule) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' rule."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstRule;
}
function verifyQualifiedStatementAAgainstAxiom(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstAxiom = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), axiom = localContext.findAxiomByMetavariableNode(metavariableNode);
    if (axiom !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' axiom..."), qualifiedStatementNode);
        var axiomMatchesStatement = axiom.unifyStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstAxiom = axiomMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstAxiom) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' axiom."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstAxiom;
}
function verifyQualifiedStatementAAgainstLemma(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstLemma = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), lemma = localContext.findLemmaByMetavariableNode(metavariableNode);
    if (lemma !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' lemma..."), qualifiedStatementNode);
        var lemmaMatchesStatement = lemma.unifyStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstLemma = lemmaMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstLemma) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' lemma."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstLemma;
}
function verifyQualifiedStatementAAgainstTheorem(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstTheorem = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), theorem = localContext.findTheoremByMetavariableNode(metavariableNode);
    if (theorem !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' theorem..."), qualifiedStatementNode);
        var theoremMatchesStatement = theorem.unifyStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstTheorem = theoremMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstTheorem) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' theorem."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstTheorem;
}
function verifyQualifiedStatementAAgainstConjecture(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstConjecture = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), conjecture = localContext.findConjectureByMetavariableNode(metavariableNode);
    if (conjecture !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' conjecture..."), qualifiedStatementNode);
        var conjectureMatchesStatement = conjecture.unifyStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstConjecture = conjectureMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstConjecture) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' conjecture."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstConjecture;
}
function verifyQualifiedStatementAAgainstReference(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstReference = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), metavariablePresent = localContext.isMetavariablePresentByMetavariableNode(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' reference..."), qualifiedStatementNode);
    if (metavariablePresent) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), localContextA = null, localContextB = localContext, statementNodeB = statementNode, substitutionNodeA = null, metavariableNodeA = metavariableNode, metavariableVerifiedAgainstStatement = (0, _metavariableAgainstStatement.default)(metavariableNodeA, statementNodeB, substitutionNodeA, substitutions, localContextA, localContextB, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        qualifiedStatementVerifiedAgainstReference = metavariableVerifiedAgainstStatement; ///
    }
    if (qualifiedStatementVerifiedAgainstReference) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' reference."), qualifiedStatementNode);
    }
    return qualifiedStatementVerifiedAgainstReference;
}
function verifyStatedStatement(statementNode, assignments, derived, localContext) {
    var statedStatementVerified;
    var statementString = localContext.nodeAsString(statementNode);
    localContext.trace("Verifying the '".concat(statementString, "' stated statement..."), statementNode);
    var verifyStatedStatementFunctions = [
        verifyStatedStatementAsEquality,
        verifyStatedStatementAsJudgement,
        verifyStatedStatementAsTypeAssertion
    ];
    verifyStatedStatementFunctions.every(function(verifyStatedStatementFunction) {
        var statedStatementVerified = verifyStatedStatementFunction(statementNode, assignments, derived, localContext);
        if (statedStatementVerified) {
            return true;
        }
    });
    statedStatementVerified = true; ///
    if (statedStatementVerified) {
        localContext.debug("...verified the '".concat(statementString, "' stated statement."), statementNode);
    }
    return statedStatementVerified;
}
function verifyStatedStatementAsEquality(statementNode, assignments, derived, localContext) {
    var statedStatementVerifiedAsEquality = true; ///
    var equalityNode = equalityNodeQuery(statementNode);
    if (equalityNode !== null) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the '".concat(statementString, "' stated statement as an equality..."), statementNode);
        var equalityVerified = (0, _equality.default)(equalityNode, assignments, derived, localContext, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        statedStatementVerifiedAsEquality = equalityVerified; ///
        if (statedStatementVerifiedAsEquality) {
            localContext.debug("...verified the '".concat(statementString, "' stated statement as an equality."), statementNode);
        }
    }
    return statedStatementVerifiedAsEquality;
}
function verifyStatedStatementAsJudgement(statementNode, assignments, derived, localContext) {
    var statedStatementVerifiedAsJudgement = true;
    var judgementNode = judgementNodeQuery(statementNode);
    if (judgementNode !== null) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the '".concat(statementString, "' stated statement as a judgement..."), statementNode);
        var judgementVerified = (0, _judgement.default)(judgementNode, assignments, derived, localContext);
        statedStatementVerifiedAsJudgement = judgementVerified; ///
        if (statedStatementVerifiedAsJudgement) {
            localContext.debug("...verified the '".concat(statementString, "' stated statement as a judgement."), statementNode);
        }
    }
    return statedStatementVerifiedAsJudgement;
}
function verifyStatedStatementAsTypeAssertion(statementNode, assignments, derived, localContext) {
    var statementVerifiedAsTypeAssertion = true; ///
    var typeAssertionNode = typeAssertionNodeQuery(statementNode);
    if (typeAssertionNode !== null) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the '".concat(statementString, "' stated statement as a type assertion..."), statementNode);
        var typeAssertionVerified = (0, _type.default)(typeAssertionNode, assignments, derived, localContext);
        statementVerifiedAsTypeAssertion = typeAssertionVerified; ///
        if (statementVerifiedAsTypeAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' stated statement as a type assertion."), statementNode);
        }
    }
    return statementVerifiedAsTypeAssertion;
}

//# sourceMappingURL=data:application/json;base64,