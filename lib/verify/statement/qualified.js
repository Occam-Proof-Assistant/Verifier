"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedStatement;
    }
});
var _metavariableAgainstStatement = /*#__PURE__*/ _interop_require_default(require("../../unify/metavariableAgainstStatement"));
var _query = require("../../utilities/query");
var _statement = require("../../verify/statement");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), metavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/reference/metavariable!");
function verifyQualifiedStatement(qualifiedStatementNode, substitutions, assignments, localContext) {
    var qualifiedStatementVerified;
    var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
    var verifyQualifiedStatementFunctions = [
        verifyQualifiedStatementAAgainstRule,
        verifyQualifiedStatementAAgainstAxiom,
        verifyQualifiedStatementAAgainstLemma,
        verifyQualifiedStatementAAgainstTheorem,
        verifyQualifiedStatementAAgainstConjecture,
        verifyQualifiedStatementAAgainstReference
    ];
    qualifiedStatementVerified = verifyQualifiedStatementFunctions.some(function(verifyQualifiedStatementFunction) {
        var qualifiedStatementVerified = verifyQualifiedStatementFunction(qualifiedStatementNode, substitutions, localContext);
        if (qualifiedStatementVerified) {
            return true;
        }
    });
    if (qualifiedStatementVerified) {
        var derived = false, statementNode = statementNodeQuery(qualifiedStatementNode), statedStatementVerified = verifyStatedStatement(statementNode, assignments, derived, localContext);
        qualifiedStatementVerified = statedStatementVerified; ///
    }
    if (qualifiedStatementVerified) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
    }
    return qualifiedStatementVerified;
}
function verifyQualifiedStatementAAgainstRule(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstRule = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), rule = localContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' rule..."), qualifiedStatementNode);
        var ruleMatchesStatement = rule.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstRule = ruleMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstRule) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' rule."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstRule;
}
function verifyQualifiedStatementAAgainstAxiom(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstAxiom = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), axiom = localContext.findAxiomByMetavariableNode(metavariableNode);
    if (axiom !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' axiom..."), qualifiedStatementNode);
        var axiomMatchesStatement = axiom.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstAxiom = axiomMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstAxiom) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' axiom."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstAxiom;
}
function verifyQualifiedStatementAAgainstLemma(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstLemma = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), lemma = localContext.findLemmaByMetavariableNode(metavariableNode);
    if (lemma !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' lemma..."), qualifiedStatementNode);
        var lemmaMatchesStatement = lemma.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstLemma = lemmaMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstLemma) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' lemma."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstLemma;
}
function verifyQualifiedStatementAAgainstTheorem(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstTheorem = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), theorem = localContext.findTheoremByMetavariableNode(metavariableNode);
    if (theorem !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' theorem..."), qualifiedStatementNode);
        var theoremMatchesStatement = theorem.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstTheorem = theoremMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstTheorem) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' theorem."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstTheorem;
}
function verifyQualifiedStatementAAgainstConjecture(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstConjecture = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), conjecture = localContext.findConjectureByMetavariableNode(metavariableNode);
    if (conjecture !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' conjecture..."), qualifiedStatementNode);
        var conjectureMatchesStatement = conjecture.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstConjecture = conjectureMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstConjecture) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' conjecture."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstConjecture;
}
function verifyQualifiedStatementAAgainstReference(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstReference = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), metavariablePresent = localContext.isMetavariablePresentByMetavariableNode(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' reference..."), qualifiedStatementNode);
    if (metavariablePresent) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), localContextA = null, localContextB = localContext, statementNodeB = statementNode, substitutionNode = null, metavariableNodeA = metavariableNode, metavariableVerifiedAgainstStatement = (0, _metavariableAgainstStatement.default)(metavariableNodeA, statementNodeB, substitutionNode, substitutions, localContextA, localContextB, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        qualifiedStatementVerifiedAgainstReference = metavariableVerifiedAgainstStatement; ///
    }
    if (qualifiedStatementVerifiedAgainstReference) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' reference."), qualifiedStatementNode);
    }
    return qualifiedStatementVerifiedAgainstReference;
}
function verifyStatedStatement(statementNode, assignments, derived, localContext) {
    var statedStatementVerified;
    var statementString = localContext.nodeAsString(statementNode);
    localContext.trace("Verifying the '".concat(statementString, "' stated statement..."), statementNode);
    var verifyStatementFunctions = [
        _statement.verifyStatementAsEquality,
        _statement.verifyStatementAsTypeAssertion
    ];
    verifyStatementFunctions.some(function(verifyStatementFunction) {
        var statedStatementVerified = verifyStatementFunction(statementNode, assignments, derived, localContext);
        if (statedStatementVerified) {
            return true;
        }
    });
    statedStatementVerified = true; ///
    if (statedStatementVerified) {
        localContext.debug("...verified the '".concat(statementString, "' stated statement."), statementNode);
    }
    return statedStatementVerified;
}

//# sourceMappingURL=data:application/json;base64,