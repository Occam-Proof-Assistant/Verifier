"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedStatement;
    }
});
var _query = require("../../utilities/query");
var _statement = require("../../verify/statement");
var _metavariableAgainstStatement = /*#__PURE__*/ _interop_require_default(require("../../verify/metavariableAgainstStatement"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), metavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/reference!/metavariable!");
function verifyQualifiedStatement(qualifiedStatementNode, substitutions, assignments, localContext) {
    var qualifiedStatementVerified;
    var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), verifyQualifiedStatementFunctions = [
        verifyQualifiedStatementAAgainstRule,
        verifyQualifiedStatementAAgainstReference,
        verifyQualifiedStatementAAgainstAxiom,
        verifyQualifiedStatementAAgainstLemma,
        verifyQualifiedStatementAAgainstTheorem,
        verifyQualifiedStatementAAgainstConjecture
    ];
    qualifiedStatementVerified = verifyQualifiedStatementFunctions.some(function(verifyQualifiedStatementFunction) {
        var qualifiedStatementVerified = verifyQualifiedStatementFunction(qualifiedStatementNode, metavariableNode, substitutions, localContext);
        if (qualifiedStatementVerified) {
            return true;
        }
    });
    if (qualifiedStatementVerified) {
        var derived = false, statementNode = statementNodeQuery(qualifiedStatementNode), statementVerified = verifyStatement(statementNode, assignments, derived, localContext, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        qualifiedStatementVerified = statementVerified; ///
    }
    if (qualifiedStatementVerified) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
    }
    return qualifiedStatementVerified;
}
function verifyQualifiedStatementAAgainstRule(qualifiedStatementNode, metavariableNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstRule = false;
    var rule = localContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' rule..."), qualifiedStatementNode);
        var ruleMatchesStatement = rule.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstRule = ruleMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstRule) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' rule."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstRule;
}
function verifyQualifiedStatementAAgainstAxiom(qualifiedStatementNode, metavariableNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstAxiom = false;
    var axiom = localContext.findAxiomByMetavariableNode(metavariableNode);
    if (axiom !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' axiom..."), qualifiedStatementNode);
        var axiomMatchesStatement = axiom.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstAxiom = axiomMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstAxiom) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' axiom."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstAxiom;
}
function verifyQualifiedStatementAAgainstLemma(qualifiedStatementNode, metavariableNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstLemma = false;
    var lemma = localContext.findLemmaByMetavariableNode(metavariableNode);
    if (lemma !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' lemma..."), qualifiedStatementNode);
        var lemmaMatchesStatement = lemma.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstLemma = lemmaMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstLemma) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' lemma."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstLemma;
}
function verifyQualifiedStatementAAgainstTheorem(qualifiedStatementNode, metavariableNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstTheorem = false;
    var theorem = localContext.findTheoremByMetavariableNode(metavariableNode);
    if (theorem !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' theorem..."), qualifiedStatementNode);
        var theoremMatchesStatement = theorem.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstTheorem = theoremMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstTheorem) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' theorem."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstTheorem;
}
function verifyQualifiedStatementAAgainstConjecture(qualifiedStatementNode, metavariableNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstConjecture = false;
    var conjecture = localContext.findConjectureByMetavariableNode(metavariableNode);
    if (conjecture !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' conjecture..."), qualifiedStatementNode);
        var conjectureMatchesStatement = conjecture.matchStatement(statementNode, localContext);
        qualifiedStatementVerifiedAgainstConjecture = conjectureMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstConjecture) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' conjecture."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstConjecture;
}
function verifyQualifiedStatementAAgainstReference(qualifiedStatementNode, metavariableNode, substitutions, localContext) {
    var qualifiedStatementVerifiedAgainstReference = false;
    var metavariableString = localContext.nodeAsString(metavariableNode), metavariablePresent = localContext.isMetavariablePresentByMetavariableNode(metavariableNode, localContext), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' reference..."), qualifiedStatementNode);
    if (metavariablePresent) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableVerifiedAgainstStatement = (0, _metavariableAgainstStatement.default)(metavariableNode, statementNode, substitutions, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        qualifiedStatementVerifiedAgainstReference = metavariableVerifiedAgainstStatement; ///
    }
    if (qualifiedStatementVerifiedAgainstReference) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(metavariableString, "' reference."), qualifiedStatementNode);
    }
    return qualifiedStatementVerifiedAgainstReference;
}
function verifyStatement(statementNode, assignments, derived, localContext) {
    var statementVerified;
    var statementString = localContext.nodeAsString(statementNode);
    localContext.trace("Verifying the '".concat(statementString, "' statement..."), statementNode);
    var verifyStatementFunctions = [
        _statement.verifyStatementAsEquality,
        _statement.verifyStatementAsTypeAssertion
    ];
    verifyStatementFunctions.some(function(verifyStatementFunction) {
        var statementVerified = verifyStatementFunction(statementNode, assignments, derived, localContext);
        if (statementVerified) {
            return true;
        }
    });
    statementVerified = true; ///
    if (statementVerified) {
        localContext.debug("...verified the '".concat(statementString, "' statement."), statementNode);
    }
    return statementVerified;
}

//# sourceMappingURL=data:application/json;base64,