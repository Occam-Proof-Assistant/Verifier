"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedStatement;
    }
});
var _statement = /*#__PURE__*/ _interop_require_default(require("../../verify/statement"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), metavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/reference/metavariable!");
var unifyDerivedQualifiedStatementFunctions = [
    unifyDerivedQualifiedStatementAWithRule,
    unifyDerivedQualifiedStatementAWithAxiom,
    unifyDerivedQualifiedStatementAWithLemma,
    unifyDerivedQualifiedStatementAWithTheorem,
    unifyDerivedQualifiedStatementAWithConjecture,
    unifyDerivedQualifiedStatementAWithReference
];
function verifyQualifiedStatement(qualifiedStatementNode, substitutions, assignments, derived, localContext) {
    var qualifiedStatementVerified;
    var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
    var statementNode = statementNodeQuery(qualifiedStatementNode), statementVerified = (0, _statement.default)(statementNode, assignments, derived, localContext);
    if (statementVerified) {
        if (derived) {
            var derivedQualifiedStatementVerified = verifyDerivedQualifiedStatement(qualifiedStatementNode, substitutions, localContext);
            qualifiedStatementVerified = derivedQualifiedStatementVerified; ///
        } else {
            qualifiedStatementVerified = true;
        }
    }
    if (qualifiedStatementVerified) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
    }
    return qualifiedStatementVerified;
}
function verifyDerivedQualifiedStatement(qualifiedStatementNode, substitutions, localContext) {
    var derivedQualifiedStatementVerified;
    var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' derived qualified statement..."), qualifiedStatementNode);
    var derivedQualifiedStatementUnified = unifyDerivedQualifiedStatementFunctions.some(function(unifyDerivedQualifiedStatementFunction) {
        var derivedQualifiedStatementUnified = unifyDerivedQualifiedStatementFunction(qualifiedStatementNode, substitutions, localContext);
        return derivedQualifiedStatementUnified;
    });
    derivedQualifiedStatementVerified = derivedQualifiedStatementUnified; ///
    if (derivedQualifiedStatementVerified) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' derived qualified statement."), qualifiedStatementNode);
    }
    return derivedQualifiedStatementVerified;
}
function unifyDerivedQualifiedStatementAWithRule(qualifiedStatementNode, substitutions, localContext) {
    var derivedQualifiedStatementUnifiedWithRule = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), rule = localContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' rule..."), qualifiedStatementNode);
        var statementUnified = rule.unifyStatement(statementNode, localContext);
        derivedQualifiedStatementUnifiedWithRule = statementUnified; ///
        if (derivedQualifiedStatementUnifiedWithRule) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' rule."), qualifiedStatementNode);
        }
    }
    return derivedQualifiedStatementUnifiedWithRule;
}
function unifyDerivedQualifiedStatementAWithAxiom(qualifiedStatementNode, substitutions, localContext) {
    var derivedQualifiedStatementUnifiedWithAxiom = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), axiom = localContext.findAxiomByMetavariableNode(metavariableNode);
    if (axiom !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' axiom..."), qualifiedStatementNode);
        var statementUnified = axiom.unifyStatement(statementNode, localContext);
        derivedQualifiedStatementUnifiedWithAxiom = statementUnified; ///
        if (derivedQualifiedStatementUnifiedWithAxiom) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' axiom."), qualifiedStatementNode);
        }
    }
    return derivedQualifiedStatementUnifiedWithAxiom;
}
function unifyDerivedQualifiedStatementAWithLemma(qualifiedStatementNode, substitutions, localContext) {
    var derivedQualifiedStatementUnifiedWithLemma = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), lemma = localContext.findLemmaByMetavariableNode(metavariableNode);
    if (lemma !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' lemma..."), qualifiedStatementNode);
        var statementUnified = lemma.unifyStatement(statementNode, localContext);
        derivedQualifiedStatementUnifiedWithLemma = statementUnified; ///
        if (derivedQualifiedStatementUnifiedWithLemma) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' lemma."), qualifiedStatementNode);
        }
    }
    return derivedQualifiedStatementUnifiedWithLemma;
}
function unifyDerivedQualifiedStatementAWithTheorem(qualifiedStatementNode, substitutions, localContext) {
    var derivedQualifiedStatementUnifiedWithTheorem = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), theorem = localContext.findTheoremByMetavariableNode(metavariableNode);
    if (theorem !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' theorem..."), qualifiedStatementNode);
        var statementUnified = theorem.unifyStatement(statementNode, localContext);
        derivedQualifiedStatementUnifiedWithTheorem = statementUnified; ///
        if (derivedQualifiedStatementUnifiedWithTheorem) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' theorem."), qualifiedStatementNode);
        }
    }
    return derivedQualifiedStatementUnifiedWithTheorem;
}
function unifyDerivedQualifiedStatementAWithConjecture(qualifiedStatementNode, substitutions, localContext) {
    var derivedQualifiedStatementUnifiedWithConjecture = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), conjecture = localContext.findConjectureByMetavariableNode(metavariableNode);
    if (conjecture !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' conjecture..."), qualifiedStatementNode);
        var statementUnified = conjecture.unifyStatement(statementNode, localContext);
        derivedQualifiedStatementUnifiedWithConjecture = statementUnified; ///
        if (derivedQualifiedStatementUnifiedWithConjecture) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' conjecture."), qualifiedStatementNode);
        }
    }
    return derivedQualifiedStatementUnifiedWithConjecture;
}
function unifyDerivedQualifiedStatementAWithReference(qualifiedStatementNode, substitutions, localContext) {
    var derivedQualifiedStatementUnifiedWithReference = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), metavariableString = localContext.nodeAsString(metavariableNode), metavariablePresent = localContext.isMetavariablePresentByMetavariableNode(metavariableNode), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Unifying the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' reference..."), qualifiedStatementNode);
    if (metavariablePresent) {
        debugger;
    // const statementNode = statementNodeQuery(qualifiedStatementNode),
    //       localContextA = null,
    //       localContextB = localContext, ///
    //       statementNodeB = statementNode, ///
    //       substitutionNodeA = null,
    //       metavariableNodeA = metavariableNode, ///
    //       metavariableUnifiedWithStatement = unifyMetavariableWithStatement(metavariableNodeA, statementNodeB, substitutionNodeA, substitutions, localContextA, localContextB, () => {
    //         const verifiedAhead = true;
    //
    //         return verifiedAhead;
    //       });
    //
    // derivedQualifiedStatementUnifiedWithReference = metavariableUnifiedWithStatement; ///
    }
    if (derivedQualifiedStatementUnifiedWithReference) {
        localContext.debug("...unified the '".concat(qualifiedStatementString, "' derived qualified statement with the '").concat(metavariableString, "' reference."), qualifiedStatementNode);
    }
    return derivedQualifiedStatementUnifiedWithReference;
}

//# sourceMappingURL=data:application/json;base64,