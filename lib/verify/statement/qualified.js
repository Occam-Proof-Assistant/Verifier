"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedStatement;
    }
});
var _equality = /*#__PURE__*/ _interop_require_default(require("../equality"));
var _typeAssertion = /*#__PURE__*/ _interop_require_default(require("../typeAssertion"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var equalityNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement/equality!"), referenceNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/qualification!/reference!"), statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), typeAssertionNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement/typeAssertion!");
function verifyQualifiedStatement(qualifiedStatementNode, assignments, derived, localContext) {
    var qualifiedStatementVerified = false;
    var statementNode = statementNodeQuery(qualifiedStatementNode);
    if (statementNode !== null) {
        var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
        var referenceNode = referenceNodeQuery(qualifiedStatementNode), referenceName = (0, _query.referenceNameFromReferenceNode)(referenceNode), verifyQualifiedStatementFunctions = [
            verifyQualifiedStatementAAgainstRule,
            verifyQualifiedStatementAAgainstAxiom,
            verifyQualifiedStatementAAgainstLemma,
            verifyQualifiedStatementAAgainstTheorem,
            verifyQualifiedStatementAAgainstConjecture
        ];
        qualifiedStatementVerified = verifyQualifiedStatementFunctions.some(function(verifyQualifiedStatementFunction) {
            var qualifiedStatementVerified = verifyQualifiedStatementFunction(qualifiedStatementNode, referenceName, localContext);
            if (qualifiedStatementVerified) {
                return true;
            }
        });
        if (qualifiedStatementVerified) {
            derived = false; ///
            var context = localContext, verifyQualifiedStatementFunctions1 = [
                verifyQualifiedStatementAsEquality,
                verifyQualifiedStatementAsTypeAssertion
            ];
            qualifiedStatementVerified = verifyQualifiedStatementFunctions1.every(function(verifyQualifiedStatementFunction) {
                var qualifiedStatementVerified = verifyQualifiedStatementFunction(qualifiedStatementNode, assignments, derived, context, function() {
                    var verifiedAhead = true;
                    return verifiedAhead;
                });
                if (qualifiedStatementVerified) {
                    return true;
                }
            });
        }
        if (qualifiedStatementVerified) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementVerified;
}
function verifyQualifiedStatementAAgainstRule(qualifiedStatementNode, referenceName, localContext) {
    var qualifiedStatementVerifiedAgainstRule = false;
    var rule = localContext.findRuleByReferenceName(referenceName);
    if (rule !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' rule..."), statementNode);
        var ruleMatchesStatement = rule.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstRule = ruleMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstRule) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' rule."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstRule;
}
function verifyQualifiedStatementAAgainstAxiom(qualifiedStatementNode, referenceName, localContext) {
    var qualifiedStatementVerifiedAgainstAxiom = false;
    var axiom = localContext.findAxiomByReferenceName(referenceName);
    if (axiom !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' axiom..."), statementNode);
        var axiomMatchesStatement = axiom.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstAxiom = axiomMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstAxiom) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' axiom."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstAxiom;
}
function verifyQualifiedStatementAAgainstLemma(qualifiedStatementNode, referenceName, localContext) {
    var qualifiedStatementVerifiedAgainstLemma = false;
    var lemma = localContext.findLemmaByReferenceName(referenceName);
    if (lemma !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' lemma..."), statementNode);
        var lemmaMatchesStatement = lemma.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstLemma = lemmaMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstLemma) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' lemma."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstLemma;
}
function verifyQualifiedStatementAAgainstTheorem(qualifiedStatementNode, referenceName, localContext) {
    var qualifiedStatementVerifiedAgainstTheorem = false;
    var theorem = localContext.findTheoremByReferenceName(referenceName);
    if (theorem !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' theorem..."), statementNode);
        var theoremMatchesStatement = theorem.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstTheorem = theoremMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstTheorem) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' theorem."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstTheorem;
}
function verifyQualifiedStatementAAgainstConjecture(qualifiedStatementNode, referenceName, localContext) {
    var qualifiedStatementVerifiedAgainstConjecture = false;
    var conjecture = localContext.findConjectureByReferenceName(referenceName);
    if (conjecture !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' conjecture..."), statementNode);
        var conjectureMatchesStatement = conjecture.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstConjecture = conjectureMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstConjecture) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceName, "' conjecture."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstConjecture;
}
function verifyQualifiedStatementAsEquality(qualifiedStatementNode, assignments, derived, context, verifyAhead) {
    var statementVerifiedAsEquality = true; ///
    var equalityNode = equalityNodeQuery(qualifiedStatementNode);
    if (equalityNode !== null) {
        var qualifiedStatementString = context.nodeAsString(qualifiedStatementNode);
        context.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement as an equality..."), qualifiedStatementNode);
        var equalityVerified = (0, _equality.default)(equalityNode, assignments, derived, context, verifyAhead);
        statementVerifiedAsEquality = equalityVerified; ///
        if (statementVerifiedAsEquality) {
            context.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement as an equality."), qualifiedStatementNode);
        }
    }
    return statementVerifiedAsEquality;
}
function verifyQualifiedStatementAsTypeAssertion(qualifiedStatementNode, assignments, derived, context, verifyAhead) {
    var statementVerifiedAsTypeAssertion = true; ///
    var typeAssertionNode = typeAssertionNodeQuery(qualifiedStatementNode);
    if (typeAssertionNode !== null) {
        var qualifiedStatementString = context.nodeAsString(qualifiedStatementNode);
        context.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement as a type assertion..."), qualifiedStatementNode);
        var typeAssertionVerified = (0, _typeAssertion.default)(typeAssertionNode, assignments, derived, context, verifyAhead);
        statementVerifiedAsTypeAssertion = typeAssertionVerified; ///
        if (statementVerifiedAsTypeAssertion) {
            context.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement as a type assertion."), qualifiedStatementNode);
        }
    }
    return statementVerifiedAsTypeAssertion;
}

//# sourceMappingURL=data:application/json;base64,