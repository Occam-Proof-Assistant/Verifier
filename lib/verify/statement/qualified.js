"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedStatement;
    }
});
var _equality = /*#__PURE__*/ _interop_require_default(require("../equality"));
var _typeAssertion = /*#__PURE__*/ _interop_require_default(require("../typeAssertion"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var equalityNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement/equality!"), statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), typeAssertionNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement/typeAssertion!"), referenceMetavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/reference!/metavariable!");
function verifyQualifiedStatement(qualifiedStatementNode, assignments, derived, localContext) {
    var qualifiedStatementVerified = false;
    var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
    var referenceMetavariableNode = referenceMetavariableNodeQuery(qualifiedStatementNode), verifyQualifiedStatementFunctions = [
        verifyQualifiedStatementAAgainstRule,
        verifyQualifiedStatementAAgainstAxiom,
        verifyQualifiedStatementAAgainstLemma,
        verifyQualifiedStatementAAgainstTheorem,
        verifyQualifiedStatementAAgainstConjecture
    ];
    qualifiedStatementVerified = verifyQualifiedStatementFunctions.some(function(verifyQualifiedStatementFunction) {
        var qualifiedStatementVerified = verifyQualifiedStatementFunction(qualifiedStatementNode, referenceMetavariableNode, localContext);
        if (qualifiedStatementVerified) {
            return true;
        }
    });
    if (qualifiedStatementVerified) {
        derived = false; ///
        var verifyQualifiedStatementFunctions1 = [
            verifyQualifiedStatementAsEquality,
            verifyQualifiedStatementAsTypeAssertion
        ];
        qualifiedStatementVerified = verifyQualifiedStatementFunctions1.every(function(verifyQualifiedStatementFunction) {
            var qualifiedStatementVerified = verifyQualifiedStatementFunction(qualifiedStatementNode, assignments, derived, localContext, function() {
                var verifiedAhead = true;
                return verifiedAhead;
            });
            if (qualifiedStatementVerified) {
                return true;
            }
        });
    }
    if (qualifiedStatementVerified) {
        localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
    }
    return qualifiedStatementVerified;
}
function verifyQualifiedStatementAAgainstRule(qualifiedStatementNode, referenceMetavariableNode, localContext) {
    var qualifiedStatementVerifiedAgainstRule = false;
    var metavariableNode = referenceMetavariableNode, rule = localContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var referenceMetavariableString = localContext.nodeAsString(referenceMetavariableNode), statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' rule..."), statementNode);
        var ruleMatchesStatement = rule.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstRule = ruleMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstRule) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' rule."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstRule;
}
function verifyQualifiedStatementAAgainstAxiom(qualifiedStatementNode, referenceMetavariableNode, localContext) {
    var qualifiedStatementVerifiedAgainstAxiom = false;
    var metavariableNode = referenceMetavariableNode, axiom = localContext.findAxiomByMetavariableNode(metavariableNode);
    if (axiom !== null) {
        var referenceMetavariableString = localContext.nodeAsString(referenceMetavariableNode), statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' axiom..."), statementNode);
        var axiomMatchesStatement = axiom.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstAxiom = axiomMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstAxiom) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' axiom."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstAxiom;
}
function verifyQualifiedStatementAAgainstLemma(qualifiedStatementNode, referenceMetavariableNode, localContext) {
    var qualifiedStatementVerifiedAgainstLemma = false;
    var metavariableNode = referenceMetavariableNode, lemma = localContext.findLemmaByMetavariableNode(metavariableNode);
    if (lemma !== null) {
        var referenceMetavariableString = localContext.nodeAsString(referenceMetavariableNode), statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' lemma..."), statementNode);
        var lemmaMatchesStatement = lemma.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstLemma = lemmaMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstLemma) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' lemma."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstLemma;
}
function verifyQualifiedStatementAAgainstTheorem(qualifiedStatementNode, referenceMetavariableNode, localContext) {
    var qualifiedStatementVerifiedAgainstTheorem = false;
    var metavariableNode = referenceMetavariableNode, theorem = localContext.findTheoremByMetavariableNode(metavariableNode);
    if (theorem !== null) {
        var referenceMetavariableString = localContext.nodeAsString(referenceMetavariableNode), statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' theorem..."), statementNode);
        var theoremMatchesStatement = theorem.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstTheorem = theoremMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstTheorem) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' theorem."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstTheorem;
}
function verifyQualifiedStatementAAgainstConjecture(qualifiedStatementNode, referenceMetavariableNode, localContext) {
    var qualifiedStatementVerifiedAgainstConjecture = false;
    var metavariableNode = referenceMetavariableNode, conjecture = localContext.findConjectureByMetavariableNode(metavariableNode);
    if (conjecture !== null) {
        var referenceMetavariableString = localContext.nodeAsString(referenceMetavariableNode), statementNode = statementNodeQuery(qualifiedStatementNode), statementLocalContext = localContext, qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' conjecture..."), statementNode);
        var conjectureMatchesStatement = conjecture.matchStatement(statementNode, statementLocalContext);
        qualifiedStatementVerifiedAgainstConjecture = conjectureMatchesStatement; ///
        if (qualifiedStatementVerifiedAgainstConjecture) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement against the '").concat(referenceMetavariableString, "' conjecture."), statementNode);
        }
    }
    return qualifiedStatementVerifiedAgainstConjecture;
}
function verifyQualifiedStatementAsEquality(qualifiedStatementNode, assignments, derived, localContext, verifyAhead) {
    var statementVerifiedAsEquality = true; ///
    var equalityNode = equalityNodeQuery(qualifiedStatementNode);
    if (equalityNode !== null) {
        var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement as an equality..."), qualifiedStatementNode);
        var equalityVerified = (0, _equality.default)(equalityNode, assignments, derived, localContext, verifyAhead);
        statementVerifiedAsEquality = equalityVerified; ///
        if (statementVerifiedAsEquality) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement as an equality."), qualifiedStatementNode);
        }
    }
    return statementVerifiedAsEquality;
}
function verifyQualifiedStatementAsTypeAssertion(qualifiedStatementNode, assignments, derived, localContext, verifyAhead) {
    var statementVerifiedAsTypeAssertion = true; ///
    var typeAssertionNode = typeAssertionNodeQuery(qualifiedStatementNode);
    if (typeAssertionNode !== null) {
        var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
        localContext.trace("Verifying the '".concat(qualifiedStatementString, "' qualified statement as a type assertion..."), qualifiedStatementNode);
        var typeAssertionVerified = (0, _typeAssertion.default)(typeAssertionNode, assignments, derived, localContext, verifyAhead);
        statementVerifiedAsTypeAssertion = typeAssertionVerified; ///
        if (statementVerifiedAsTypeAssertion) {
            localContext.debug("...verified the '".concat(qualifiedStatementString, "' qualified statement as a type assertion."), qualifiedStatementNode);
        }
    }
    return statementVerifiedAsTypeAssertion;
}

//# sourceMappingURL=data:application/json;base64,