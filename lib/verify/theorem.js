"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyTheorem;
    }
});
var _theorem = /*#__PURE__*/ _interopRequireDefault(require("../theorem"));
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../verify/proof"));
var _proof1 = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _labels = /*#__PURE__*/ _interopRequireDefault(require("../verify/labels"));
var _conditionalIndicative = /*#__PURE__*/ _interopRequireDefault(require("../verify/conditionalIndicative"));
var _unconditionalIndicative = /*#__PURE__*/ _interopRequireDefault(require("../verify/unconditionalIndicative"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var proofNodeQuery = (0, _query.nodeQuery)("/theorem/proof!"), labelNodesQuery = (0, _query.nodesQuery)("/theorem/label"), conditionalIndicativeNodeQuery = (0, _query.nodeQuery)("/theorem/conditionalIndicative!"), unconditionalIndicativeNodeQuery = (0, _query.nodeQuery)("/theorem/unconditionalIndicative!");
function verifyTheorem(theoremNode, fileContext) {
    var theoremVerified = false;
    fileContext.begin(theoremNode);
    var labelNodes = labelNodesQuery(theoremNode), labelsString = (0, _string.nodesAsString)(labelNodes), proofContext = _proof1.default.fromFileContext(fileContext);
    fileContext.debug("Verifying the '".concat(labelsString, "' theorem..."));
    var labels = [], labelsVerified = (0, _labels.default)(labelNodes, labels, fileContext);
    if (labelsVerified) {
        var antecedents = [], consequents = [], conditionalIndicativeNode = conditionalIndicativeNodeQuery(theoremNode), unconditionalIndicativeNode = unconditionalIndicativeNodeQuery(theoremNode);
        var conditionalIndicativeVerified = false, unconditionalIndicativeVerified = false;
        if (conditionalIndicativeNode !== null) {
            conditionalIndicativeVerified = (0, _conditionalIndicative.default)(conditionalIndicativeNode, antecedents, consequents, proofContext);
        }
        if (unconditionalIndicativeNode !== null) {
            unconditionalIndicativeVerified = (0, _unconditionalIndicative.default)(unconditionalIndicativeNode, consequents, proofContext);
        }
        if (conditionalIndicativeVerified || unconditionalIndicativeVerified) {
            var proofNode = proofNodeQuery(theoremNode), firstConsequent = (0, _array.first)(consequents), consequent = firstConsequent, proofVerified = (0, _proof.default)(proofNode, consequent, proofContext);
            if (proofVerified) {
                var theorem = _theorem.default.fromLabelsAntecedentsAndConsequent(labels, antecedents, consequent);
                fileContext.addTheorem(theorem);
                theoremVerified = true;
            }
        }
    }
    if (theoremVerified) {
        fileContext.info("Verified the '".concat(labelsString, "' theorem."));
    }
    theoremVerified ? fileContext.complete(theoremNode) : fileContext.complete(theoremNode);
    return theoremVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvdGhlb3JlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFRoZW9yZW0gZnJvbSBcIi4uL3RoZW9yZW1cIjtcbmltcG9ydCB2ZXJpZnlQcm9vZiBmcm9tIFwiLi4vdmVyaWZ5L3Byb29mXCI7XG5pbXBvcnQgUHJvb2ZDb250ZXh0IGZyb20gXCIuLi9jb250ZXh0L3Byb29mXCI7XG5pbXBvcnQgdmVyaWZ5TGFiZWxzIGZyb20gXCIuLi92ZXJpZnkvbGFiZWxzXCI7XG5pbXBvcnQgdmVyaWZ5Q29uZGl0aW9uYWxJbmRpY2F0aXZlIGZyb20gXCIuLi92ZXJpZnkvY29uZGl0aW9uYWxJbmRpY2F0aXZlXCI7XG5pbXBvcnQgdmVyaWZ5VW5jb25kaXRpb25hbEluZGljYXRpdmUgZnJvbSBcIi4uL3ZlcmlmeS91bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZVwiO1xuXG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IG5vZGVzQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuaW1wb3J0IHsgbm9kZVF1ZXJ5LCBub2Rlc1F1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBwcm9vZk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90aGVvcmVtL3Byb29mIVwiKSxcbiAgICAgIGxhYmVsTm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvdGhlb3JlbS9sYWJlbFwiKSxcbiAgICAgIGNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90aGVvcmVtL2NvbmRpdGlvbmFsSW5kaWNhdGl2ZSFcIiksXG4gICAgICB1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90aGVvcmVtL3VuY29uZGl0aW9uYWxJbmRpY2F0aXZlIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5VGhlb3JlbSh0aGVvcmVtTm9kZSwgZmlsZUNvbnRleHQpIHtcbiAgbGV0IHRoZW9yZW1WZXJpZmllZCA9IGZhbHNlO1xuXG4gIGZpbGVDb250ZXh0LmJlZ2luKHRoZW9yZW1Ob2RlKTtcblxuICBjb25zdCBsYWJlbE5vZGVzID0gbGFiZWxOb2Rlc1F1ZXJ5KHRoZW9yZW1Ob2RlKSxcbiAgICAgICAgbGFiZWxzU3RyaW5nID0gbm9kZXNBc1N0cmluZyhsYWJlbE5vZGVzKSxcbiAgICAgICAgcHJvb2ZDb250ZXh0ID0gUHJvb2ZDb250ZXh0LmZyb21GaWxlQ29udGV4dChmaWxlQ29udGV4dCk7XG5cbiAgZmlsZUNvbnRleHQuZGVidWcoYFZlcmlmeWluZyB0aGUgJyR7bGFiZWxzU3RyaW5nfScgdGhlb3JlbS4uLmApO1xuXG4gIGNvbnN0IGxhYmVscyA9IFtdLFxuICAgICAgICBsYWJlbHNWZXJpZmllZCA9IHZlcmlmeUxhYmVscyhsYWJlbE5vZGVzLCBsYWJlbHMsIGZpbGVDb250ZXh0KTtcblxuICBpZiAobGFiZWxzVmVyaWZpZWQpIHtcbiAgICBjb25zdCBhbnRlY2VkZW50cyA9IFtdLFxuICAgICAgICAgIGNvbnNlcXVlbnRzID0gW10sXG4gICAgICAgICAgY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSA9IGNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGVRdWVyeSh0aGVvcmVtTm9kZSksXG4gICAgICAgICAgdW5jb25kaXRpb25hbEluZGljYXRpdmVOb2RlID0gdW5jb25kaXRpb25hbEluZGljYXRpdmVOb2RlUXVlcnkodGhlb3JlbU5vZGUpO1xuXG4gICAgbGV0IGNvbmRpdGlvbmFsSW5kaWNhdGl2ZVZlcmlmaWVkID0gZmFsc2UsXG4gICAgICAgIHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQgPSBmYWxzZTtcblxuICAgIGlmIChjb25kaXRpb25hbEluZGljYXRpdmVOb2RlICE9PSBudWxsKSB7XG4gICAgICBjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCA9IHZlcmlmeUNvbmRpdGlvbmFsSW5kaWNhdGl2ZShjb25kaXRpb25hbEluZGljYXRpdmVOb2RlLCBhbnRlY2VkZW50cywgY29uc2VxdWVudHMsIHByb29mQ29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSAhPT0gbnVsbCkge1xuICAgICAgdW5jb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCA9IHZlcmlmeVVuY29uZGl0aW9uYWxJbmRpY2F0aXZlKHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSwgY29uc2VxdWVudHMsIHByb29mQ29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmRpdGlvbmFsSW5kaWNhdGl2ZVZlcmlmaWVkIHx8IHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQpIHtcbiAgICAgIGNvbnN0IHByb29mTm9kZSA9IHByb29mTm9kZVF1ZXJ5KHRoZW9yZW1Ob2RlKSxcbiAgICAgICAgICAgIGZpcnN0Q29uc2VxdWVudCA9IGZpcnN0KGNvbnNlcXVlbnRzKSxcbiAgICAgICAgICAgIGNvbnNlcXVlbnQgPSBmaXJzdENvbnNlcXVlbnQsIC8vL1xuICAgICAgICAgICAgcHJvb2ZWZXJpZmllZCA9IHZlcmlmeVByb29mKHByb29mTm9kZSwgY29uc2VxdWVudCwgcHJvb2ZDb250ZXh0KTtcblxuICAgICAgaWYgKHByb29mVmVyaWZpZWQpIHtcbiAgICAgICAgY29uc3QgdGhlb3JlbSA9IFRoZW9yZW0uZnJvbUxhYmVsc0FudGVjZWRlbnRzQW5kQ29uc2VxdWVudChsYWJlbHMsIGFudGVjZWRlbnRzLCBjb25zZXF1ZW50KTtcblxuICAgICAgICBmaWxlQ29udGV4dC5hZGRUaGVvcmVtKHRoZW9yZW0pO1xuXG4gICAgICAgIHRoZW9yZW1WZXJpZmllZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoZW9yZW1WZXJpZmllZCkge1xuICAgIGZpbGVDb250ZXh0LmluZm8oYFZlcmlmaWVkIHRoZSAnJHtsYWJlbHNTdHJpbmd9JyB0aGVvcmVtLmApO1xuICB9XG5cbiAgdGhlb3JlbVZlcmlmaWVkID9cbiAgICBmaWxlQ29udGV4dC5jb21wbGV0ZSh0aGVvcmVtTm9kZSkgOlxuICAgICAgZmlsZUNvbnRleHQuY29tcGxldGUodGhlb3JlbU5vZGUpO1xuXG4gIHJldHVybiB0aGVvcmVtVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5VGhlb3JlbSIsInByb29mTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwibGFiZWxOb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsImNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGVRdWVyeSIsInVuY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZVF1ZXJ5IiwidGhlb3JlbU5vZGUiLCJmaWxlQ29udGV4dCIsInRoZW9yZW1WZXJpZmllZCIsImJlZ2luIiwibGFiZWxOb2RlcyIsImxhYmVsc1N0cmluZyIsIm5vZGVzQXNTdHJpbmciLCJwcm9vZkNvbnRleHQiLCJQcm9vZkNvbnRleHQiLCJmcm9tRmlsZUNvbnRleHQiLCJkZWJ1ZyIsImxhYmVscyIsImxhYmVsc1ZlcmlmaWVkIiwidmVyaWZ5TGFiZWxzIiwiYW50ZWNlZGVudHMiLCJjb25zZXF1ZW50cyIsImNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUiLCJ1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUiLCJjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCIsInVuY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQiLCJ2ZXJpZnlDb25kaXRpb25hbEluZGljYXRpdmUiLCJ2ZXJpZnlVbmNvbmRpdGlvbmFsSW5kaWNhdGl2ZSIsInByb29mTm9kZSIsImZpcnN0Q29uc2VxdWVudCIsImZpcnN0IiwiY29uc2VxdWVudCIsInByb29mVmVyaWZpZWQiLCJ2ZXJpZnlQcm9vZiIsInRoZW9yZW0iLCJUaGVvcmVtIiwiZnJvbUxhYmVsc0FudGVjZWRlbnRzQW5kQ29uc2VxdWVudCIsImFkZFRoZW9yZW0iLCJpbmZvIiwiY29tcGxldGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWtCQTs7O2VBQXdCQTs7OzREQWhCSjswREFDSTsyREFDQzsyREFDQTswRUFDZTs0RUFDRTtxQkFFcEI7c0JBQ1E7cUJBQ1E7Ozs7OztBQUV0QyxJQUFNQyxpQkFBaUJDLElBQUFBLGdCQUFTLEVBQUMsb0JBQzNCQyxrQkFBa0JDLElBQUFBLGlCQUFVLEVBQUMsbUJBQzdCQyxpQ0FBaUNILElBQUFBLGdCQUFTLEVBQUMsb0NBQzNDSSxtQ0FBbUNKLElBQUFBLGdCQUFTLEVBQUM7QUFFcEMsU0FBU0YsY0FBY08sV0FBVyxFQUFFQyxXQUFXLEVBQUU7SUFDOUQsSUFBSUMsa0JBQWtCLEtBQUs7SUFFM0JELFlBQVlFLEtBQUssQ0FBQ0g7SUFFbEIsSUFBTUksYUFBYVIsZ0JBQWdCSSxjQUM3QkssZUFBZUMsSUFBQUEscUJBQWEsRUFBQ0YsYUFDN0JHLGVBQWVDLGVBQVksQ0FBQ0MsZUFBZSxDQUFDUjtJQUVsREEsWUFBWVMsS0FBSyxDQUFDLEFBQUMsa0JBQThCLE9BQWJMLGNBQWE7SUFFakQsSUFBTU0sU0FBUyxFQUFFLEVBQ1hDLGlCQUFpQkMsSUFBQUEsZUFBWSxFQUFDVCxZQUFZTyxRQUFRVjtJQUV4RCxJQUFJVyxnQkFBZ0I7UUFDbEIsSUFBTUUsY0FBYyxFQUFFLEVBQ2hCQyxjQUFjLEVBQUUsRUFDaEJDLDRCQUE0QmxCLCtCQUErQkUsY0FDM0RpQiw4QkFBOEJsQixpQ0FBaUNDO1FBRXJFLElBQUlrQixnQ0FBZ0MsS0FBSyxFQUNyQ0Msa0NBQWtDLEtBQUs7UUFFM0MsSUFBSUgsOEJBQThCLElBQUksRUFBRTtZQUN0Q0UsZ0NBQWdDRSxJQUFBQSw4QkFBMkIsRUFBQ0osMkJBQTJCRixhQUFhQyxhQUFhUjtRQUNuSCxDQUFDO1FBRUQsSUFBSVUsZ0NBQWdDLElBQUksRUFBRTtZQUN4Q0Usa0NBQWtDRSxJQUFBQSxnQ0FBNkIsRUFBQ0osNkJBQTZCRixhQUFhUjtRQUM1RyxDQUFDO1FBRUQsSUFBSVcsaUNBQWlDQyxpQ0FBaUM7WUFDcEUsSUFBTUcsWUFBWTVCLGVBQWVNLGNBQzNCdUIsa0JBQWtCQyxJQUFBQSxZQUFLLEVBQUNULGNBQ3hCVSxhQUFhRixpQkFDYkcsZ0JBQWdCQyxJQUFBQSxjQUFXLEVBQUNMLFdBQVdHLFlBQVlsQjtZQUV6RCxJQUFJbUIsZUFBZTtnQkFDakIsSUFBTUUsVUFBVUMsZ0JBQU8sQ0FBQ0Msa0NBQWtDLENBQUNuQixRQUFRRyxhQUFhVztnQkFFaEZ4QixZQUFZOEIsVUFBVSxDQUFDSDtnQkFFdkIxQixrQkFBa0IsSUFBSTtZQUN4QixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxJQUFJQSxpQkFBaUI7UUFDbkJELFlBQVkrQixJQUFJLENBQUMsQUFBQyxpQkFBNkIsT0FBYjNCLGNBQWE7SUFDakQsQ0FBQztJQUVESCxrQkFDRUQsWUFBWWdDLFFBQVEsQ0FBQ2pDLGVBQ25CQyxZQUFZZ0MsUUFBUSxDQUFDakMsWUFBWTtJQUVyQyxPQUFPRTtBQUNUIn0=