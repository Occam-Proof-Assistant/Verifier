"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyLemma;
    }
});
var _lemma = /*#__PURE__*/ _interopRequireDefault(require("../lemma"));
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../verify/proof"));
var _proof1 = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _labels = /*#__PURE__*/ _interopRequireDefault(require("../verify/labels"));
var _conditinalIndicative = /*#__PURE__*/ _interopRequireDefault(require("../verify/conditinalIndicative"));
var _unconditionalIndicative = /*#__PURE__*/ _interopRequireDefault(require("../verify/unconditionalIndicative"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var proofNodeQuery = (0, _query.nodeQuery)("/lemma/proof!"), labelNodesQuery = (0, _query.nodesQuery)("/lemma/label"), conditionalIndicativeNodeQuery = (0, _query.nodeQuery)("/lemma/conditionalIndicative!"), unconditionalIndicativeNodeQuery = (0, _query.nodeQuery)("/lemma/unconditionalIndicative!");
function verifyLemma(lemmaNode, fileContext) {
    var lemmaVerified = false;
    fileContext.begin(lemmaNode);
    var labelNodes = labelNodesQuery(lemmaNode), labelsString = (0, _string.nodesAsString)(labelNodes), proofContext = _proof1.default.fromFileContext(fileContext);
    fileContext.debug("Verifying the '".concat(labelsString, "' lemma..."));
    var labels = [], labelsVerified = (0, _labels.default)(labelNodes, labels, fileContext);
    if (labelsVerified) {
        var antecedents = [], consequents = [], conditionalIndicativeNode = conditionalIndicativeNodeQuery(lemmaNode), unconditionalIndicativeNode = unconditionalIndicativeNodeQuery(lemmaNode);
        var conditionalIndicativeVerified = false, unconditionalIndicativeVerified = false;
        if (conditionalIndicativeNode !== null) {
            conditionalIndicativeVerified = (0, _conditinalIndicative.default)(conditionalIndicativeNode, antecedents, consequents, proofContext);
        }
        if (unconditionalIndicativeNode !== null) {
            unconditionalIndicativeVerified = (0, _unconditionalIndicative.default)(unconditionalIndicativeNode, consequents, proofContext);
        }
        if (conditionalIndicativeVerified || unconditionalIndicativeVerified) {
            var proofNode = proofNodeQuery(lemmaNode), firstConsequent = (0, _array.first)(consequents), consequent = firstConsequent, proofVerified = (0, _proof.default)(proofNode, consequent, proofContext);
            if (proofVerified) {
                var lemma = _lemma.default.fromLabelsPremisesAndConsequent(labels, antecedents, consequent);
                fileContext.addLemma(lemma);
                lemmaVerified = true;
            }
        }
    }
    if (lemmaVerified) {
        fileContext.info("Verified the '".concat(labelsString, "' lemma."));
    }
    lemmaVerified ? fileContext.complete(lemmaNode) : fileContext.complete(lemmaNode);
    return lemmaVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbGVtbWEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBMZW1tYSBmcm9tIFwiLi4vbGVtbWFcIjtcbmltcG9ydCB2ZXJpZnlQcm9vZiBmcm9tIFwiLi4vdmVyaWZ5L3Byb29mXCI7XG5pbXBvcnQgUHJvb2ZDb250ZXh0IGZyb20gXCIuLi9jb250ZXh0L3Byb29mXCI7XG5pbXBvcnQgdmVyaWZ5TGFiZWxzIGZyb20gXCIuLi92ZXJpZnkvbGFiZWxzXCI7XG5pbXBvcnQgdmVyaWZ5Q29uZGl0aW9uYWxJbmRpY2F0aXZlIGZyb20gXCIuLi92ZXJpZnkvY29uZGl0aW5hbEluZGljYXRpdmVcIjtcbmltcG9ydCB2ZXJpZnlVbmNvbmRpdGlvbmFsSW5kaWNhdGl2ZSBmcm9tIFwiLi4vdmVyaWZ5L3VuY29uZGl0aW9uYWxJbmRpY2F0aXZlXCI7XG5cbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgbm9kZXNBc1N0cmluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvc3RyaW5nXCI7XG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHByb29mTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2xlbW1hL3Byb29mIVwiKSxcbiAgICAgIGxhYmVsTm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvbGVtbWEvbGFiZWxcIiksXG4gICAgICBjb25kaXRpb25hbEluZGljYXRpdmVOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvbGVtbWEvY29uZGl0aW9uYWxJbmRpY2F0aXZlIVwiKSxcbiAgICAgIHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2xlbW1hL3VuY29uZGl0aW9uYWxJbmRpY2F0aXZlIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5TGVtbWEobGVtbWFOb2RlLCBmaWxlQ29udGV4dCkge1xuICBsZXQgbGVtbWFWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGZpbGVDb250ZXh0LmJlZ2luKGxlbW1hTm9kZSk7XG5cbiAgY29uc3QgbGFiZWxOb2RlcyA9IGxhYmVsTm9kZXNRdWVyeShsZW1tYU5vZGUpLFxuICAgICAgICBsYWJlbHNTdHJpbmcgPSBub2Rlc0FzU3RyaW5nKGxhYmVsTm9kZXMpLFxuICAgICAgICBwcm9vZkNvbnRleHQgPSBQcm9vZkNvbnRleHQuZnJvbUZpbGVDb250ZXh0KGZpbGVDb250ZXh0KTtcblxuICBmaWxlQ29udGV4dC5kZWJ1ZyhgVmVyaWZ5aW5nIHRoZSAnJHtsYWJlbHNTdHJpbmd9JyBsZW1tYS4uLmApO1xuXG4gIGNvbnN0IGxhYmVscyA9IFtdLFxuICAgICAgICBsYWJlbHNWZXJpZmllZCA9IHZlcmlmeUxhYmVscyhsYWJlbE5vZGVzLCBsYWJlbHMsIGZpbGVDb250ZXh0KTtcblxuICBpZiAobGFiZWxzVmVyaWZpZWQpIHtcbiAgICBjb25zdCBhbnRlY2VkZW50cyA9IFtdLFxuICAgICAgICAgIGNvbnNlcXVlbnRzID0gW10sXG4gICAgICAgICAgY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSA9IGNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGVRdWVyeShsZW1tYU5vZGUpLFxuICAgICAgICAgIHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSA9IHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZVF1ZXJ5KGxlbW1hTm9kZSk7XG5cbiAgICBsZXQgY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQgPSBmYWxzZSxcbiAgICAgIHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQgPSBmYWxzZTtcblxuICAgIGlmIChjb25kaXRpb25hbEluZGljYXRpdmVOb2RlICE9PSBudWxsKSB7XG4gICAgICBjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCA9IHZlcmlmeUNvbmRpdGlvbmFsSW5kaWNhdGl2ZShjb25kaXRpb25hbEluZGljYXRpdmVOb2RlLCBhbnRlY2VkZW50cywgY29uc2VxdWVudHMsIHByb29mQ29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSAhPT0gbnVsbCkge1xuICAgICAgdW5jb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCA9IHZlcmlmeVVuY29uZGl0aW9uYWxJbmRpY2F0aXZlKHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSwgY29uc2VxdWVudHMsIHByb29mQ29udGV4dCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmRpdGlvbmFsSW5kaWNhdGl2ZVZlcmlmaWVkIHx8IHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQpIHtcbiAgICAgIGNvbnN0IHByb29mTm9kZSA9IHByb29mTm9kZVF1ZXJ5KGxlbW1hTm9kZSksXG4gICAgICAgICAgICBmaXJzdENvbnNlcXVlbnQgPSBmaXJzdChjb25zZXF1ZW50cyksXG4gICAgICAgICAgICBjb25zZXF1ZW50ID0gZmlyc3RDb25zZXF1ZW50LCAvLy9cbiAgICAgICAgICAgIHByb29mVmVyaWZpZWQgPSB2ZXJpZnlQcm9vZihwcm9vZk5vZGUsIGNvbnNlcXVlbnQsIHByb29mQ29udGV4dCk7XG5cbiAgICAgIGlmIChwcm9vZlZlcmlmaWVkKSB7XG4gICAgICAgIGNvbnN0IGxlbW1hID0gTGVtbWEuZnJvbUxhYmVsc1ByZW1pc2VzQW5kQ29uc2VxdWVudChsYWJlbHMsIGFudGVjZWRlbnRzLCBjb25zZXF1ZW50KTtcblxuICAgICAgICBmaWxlQ29udGV4dC5hZGRMZW1tYShsZW1tYSk7XG5cbiAgICAgICAgbGVtbWFWZXJpZmllZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGxlbW1hVmVyaWZpZWQpIHtcbiAgICBmaWxlQ29udGV4dC5pbmZvKGBWZXJpZmllZCB0aGUgJyR7bGFiZWxzU3RyaW5nfScgbGVtbWEuYCk7XG4gIH1cblxuICBsZW1tYVZlcmlmaWVkID9cbiAgICBmaWxlQ29udGV4dC5jb21wbGV0ZShsZW1tYU5vZGUpIDpcbiAgICAgIGZpbGVDb250ZXh0LmNvbXBsZXRlKGxlbW1hTm9kZSk7XG5cbiAgcmV0dXJuIGxlbW1hVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5TGVtbWEiLCJwcm9vZk5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImxhYmVsTm9kZXNRdWVyeSIsIm5vZGVzUXVlcnkiLCJjb25kaXRpb25hbEluZGljYXRpdmVOb2RlUXVlcnkiLCJ1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGVRdWVyeSIsImxlbW1hTm9kZSIsImZpbGVDb250ZXh0IiwibGVtbWFWZXJpZmllZCIsImJlZ2luIiwibGFiZWxOb2RlcyIsImxhYmVsc1N0cmluZyIsIm5vZGVzQXNTdHJpbmciLCJwcm9vZkNvbnRleHQiLCJQcm9vZkNvbnRleHQiLCJmcm9tRmlsZUNvbnRleHQiLCJkZWJ1ZyIsImxhYmVscyIsImxhYmVsc1ZlcmlmaWVkIiwidmVyaWZ5TGFiZWxzIiwiYW50ZWNlZGVudHMiLCJjb25zZXF1ZW50cyIsImNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUiLCJ1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUiLCJjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCIsInVuY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQiLCJ2ZXJpZnlDb25kaXRpb25hbEluZGljYXRpdmUiLCJ2ZXJpZnlVbmNvbmRpdGlvbmFsSW5kaWNhdGl2ZSIsInByb29mTm9kZSIsImZpcnN0Q29uc2VxdWVudCIsImZpcnN0IiwiY29uc2VxdWVudCIsInByb29mVmVyaWZpZWQiLCJ2ZXJpZnlQcm9vZiIsImxlbW1hIiwiTGVtbWEiLCJmcm9tTGFiZWxzUHJlbWlzZXNBbmRDb25zZXF1ZW50IiwiYWRkTGVtbWEiLCJpbmZvIiwiY29tcGxldGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWtCQTs7O2VBQXdCQTs7OzBEQWhCTjswREFDTTsyREFDQzsyREFDQTt5RUFDZTs0RUFDRTtxQkFFcEI7c0JBQ1E7cUJBQ1E7Ozs7OztBQUV0QyxJQUFNQyxpQkFBaUJDLElBQUFBLGdCQUFTLEVBQUMsa0JBQzNCQyxrQkFBa0JDLElBQUFBLGlCQUFVLEVBQUMsaUJBQzdCQyxpQ0FBaUNILElBQUFBLGdCQUFTLEVBQUMsa0NBQzNDSSxtQ0FBbUNKLElBQUFBLGdCQUFTLEVBQUM7QUFFcEMsU0FBU0YsWUFBWU8sU0FBUyxFQUFFQyxXQUFXLEVBQUU7SUFDMUQsSUFBSUMsZ0JBQWdCLEtBQUs7SUFFekJELFlBQVlFLEtBQUssQ0FBQ0g7SUFFbEIsSUFBTUksYUFBYVIsZ0JBQWdCSSxZQUM3QkssZUFBZUMsSUFBQUEscUJBQWEsRUFBQ0YsYUFDN0JHLGVBQWVDLGVBQVksQ0FBQ0MsZUFBZSxDQUFDUjtJQUVsREEsWUFBWVMsS0FBSyxDQUFDLEFBQUMsa0JBQThCLE9BQWJMLGNBQWE7SUFFakQsSUFBTU0sU0FBUyxFQUFFLEVBQ1hDLGlCQUFpQkMsSUFBQUEsZUFBWSxFQUFDVCxZQUFZTyxRQUFRVjtJQUV4RCxJQUFJVyxnQkFBZ0I7UUFDbEIsSUFBTUUsY0FBYyxFQUFFLEVBQ2hCQyxjQUFjLEVBQUUsRUFDaEJDLDRCQUE0QmxCLCtCQUErQkUsWUFDM0RpQiw4QkFBOEJsQixpQ0FBaUNDO1FBRXJFLElBQUlrQixnQ0FBZ0MsS0FBSyxFQUN2Q0Msa0NBQWtDLEtBQUs7UUFFekMsSUFBSUgsOEJBQThCLElBQUksRUFBRTtZQUN0Q0UsZ0NBQWdDRSxJQUFBQSw2QkFBMkIsRUFBQ0osMkJBQTJCRixhQUFhQyxhQUFhUjtRQUNuSCxDQUFDO1FBRUQsSUFBSVUsZ0NBQWdDLElBQUksRUFBRTtZQUN4Q0Usa0NBQWtDRSxJQUFBQSxnQ0FBNkIsRUFBQ0osNkJBQTZCRixhQUFhUjtRQUM1RyxDQUFDO1FBRUQsSUFBSVcsaUNBQWlDQyxpQ0FBaUM7WUFDcEUsSUFBTUcsWUFBWTVCLGVBQWVNLFlBQzNCdUIsa0JBQWtCQyxJQUFBQSxZQUFLLEVBQUNULGNBQ3hCVSxhQUFhRixpQkFDYkcsZ0JBQWdCQyxJQUFBQSxjQUFXLEVBQUNMLFdBQVdHLFlBQVlsQjtZQUV6RCxJQUFJbUIsZUFBZTtnQkFDakIsSUFBTUUsUUFBUUMsY0FBSyxDQUFDQywrQkFBK0IsQ0FBQ25CLFFBQVFHLGFBQWFXO2dCQUV6RXhCLFlBQVk4QixRQUFRLENBQUNIO2dCQUVyQjFCLGdCQUFnQixJQUFJO1lBQ3RCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUlBLGVBQWU7UUFDakJELFlBQVkrQixJQUFJLENBQUMsQUFBQyxpQkFBNkIsT0FBYjNCLGNBQWE7SUFDakQsQ0FBQztJQUVESCxnQkFDRUQsWUFBWWdDLFFBQVEsQ0FBQ2pDLGFBQ25CQyxZQUFZZ0MsUUFBUSxDQUFDakMsVUFBVTtJQUVuQyxPQUFPRTtBQUNUIn0=