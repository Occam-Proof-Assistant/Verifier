"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyLemma;
    }
});
var _lemma = /*#__PURE__*/ _interopRequireDefault(require("../lemma"));
var _labels = /*#__PURE__*/ _interopRequireDefault(require("../verify/labels"));
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/unqualified"));
var _indicativeConditional = /*#__PURE__*/ _interopRequireDefault(require("../verify/indicativeConditional"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var labelNodesQuery = (0, _query.nodesQuery)("/lemma/label"), statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), statementNodesQuery = (0, _query.nodesQuery)("/indicativeConditional/unqualifiedStatement/statement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/lemma/unqualifiedStatement!"), indicativeConditionalNodeQuery = (0, _query.nodeQuery)("/lemma/indicativeConditional!");
function verifyLemma(lemmaNode, fileContext) {
    var lemmaVerified = false;
    fileContext.begin(lemmaNode);
    var labelNodes = labelNodesQuery(lemmaNode), labelsString = (0, _string.nodesAsString)(labelNodes), proofContext = _proof.default.fromFileContext(fileContext);
    labelsString === null ? fileContext.debug("Verifying an anonymous lemma...") : fileContext.debug("Verifying the '".concat(labelsString, "' lemma..."));
    var labels = [], labelsLength = labels.length, labelsVerified = (0, _labels.default)(labelNodes, labels, fileContext);
    if (labelsVerified) {
        var unqualifiedStatementNode = unqualifiedStatementNodeQuery(lemmaNode), indicativeConditionalNode = indicativeConditionalNodeQuery(lemmaNode);
        if (unqualifiedStatementNode !== null) {
            var unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, proofContext);
            if (unqualifiedStatementVerified) {
                if (labelsLength > 0) {
                    var statementNode = statementNodeQuery(unqualifiedStatementNode), lemma = _lemma.default.fromLabelsAndStatementNode(labels, statementNode);
                    fileContext.addLemma(lemma);
                }
                lemmaVerified = true;
            }
        }
        if (indicativeConditionalNode !== null) {
            var indicativeConditionalVerified = (0, _indicativeConditional.default)(indicativeConditionalNode, proofContext);
            if (indicativeConditionalVerified !== null) {
                if (labelsLength) {
                    var statementNodes = statementNodesQuery(indicativeConditionalNode), lastStatementNode = (0, _array.last)(statementNodes), frontStatementNodes = (0, _array.front)(statementNodes), consequentStatementNode = lastStatementNode, suppositionStatementNodes = frontStatementNodes, lemma1 = _lemma.default.fromLabelsSuppositionStatementNodesAndConsequentStatementNode(labels, suppositionStatementNodes, consequentStatementNode);
                    fileContext.addLemma(lemma1);
                }
                lemmaVerified = true;
            }
        }
    }
    if (lemmaVerified) {
        labelsString === null ? fileContext.info("Verified an anonymous lemma.") : fileContext.info("Verified the '".concat(labelsString, "' lemma."));
    }
    lemmaVerified ? fileContext.complete(lemmaNode) : fileContext.halt(lemmaNode);
    return lemmaVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbGVtbWEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBMZW1tYSBmcm9tIFwiLi4vbGVtbWFcIjtcbmltcG9ydCB2ZXJpZnlMYWJlbHMgZnJvbSBcIi4uL3ZlcmlmeS9sYWJlbHNcIjtcbmltcG9ydCBQcm9vZkNvbnRleHQgZnJvbSBcIi4uL2NvbnRleHQvcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L3N0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuaW1wb3J0IHZlcmlmeUluZGljYXRpdmVDb25kaXRpb25hbCBmcm9tIFwiLi4vdmVyaWZ5L2luZGljYXRpdmVDb25kaXRpb25hbFwiO1xuXG5pbXBvcnQgeyBmcm9udCwgbGFzdCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IG5vZGVzQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuaW1wb3J0IHsgbm9kZVF1ZXJ5LCBub2Rlc1F1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBsYWJlbE5vZGVzUXVlcnkgPSBub2Rlc1F1ZXJ5KFwiL2xlbW1hL2xhYmVsXCIpLFxuICAgICAgc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3VucXVhbGlmaWVkU3RhdGVtZW50L3N0YXRlbWVudCFcIiksXG4gICAgICBzdGF0ZW1lbnROb2Rlc1F1ZXJ5ID0gbm9kZXNRdWVyeShcIi9pbmRpY2F0aXZlQ29uZGl0aW9uYWwvdW5xdWFsaWZpZWRTdGF0ZW1lbnQvc3RhdGVtZW50IVwiKSxcbiAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2xlbW1hL3VucXVhbGlmaWVkU3RhdGVtZW50IVwiKSxcbiAgICAgIGluZGljYXRpdmVDb25kaXRpb25hbE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9sZW1tYS9pbmRpY2F0aXZlQ29uZGl0aW9uYWwhXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlMZW1tYShsZW1tYU5vZGUsIGZpbGVDb250ZXh0KSB7XG4gIGxldCBsZW1tYVZlcmlmaWVkID0gZmFsc2U7XG5cbiAgZmlsZUNvbnRleHQuYmVnaW4obGVtbWFOb2RlKTtcblxuICBjb25zdCBsYWJlbE5vZGVzID0gbGFiZWxOb2Rlc1F1ZXJ5KGxlbW1hTm9kZSksXG4gICAgICAgIGxhYmVsc1N0cmluZyA9IG5vZGVzQXNTdHJpbmcobGFiZWxOb2RlcyksXG4gICAgICAgIHByb29mQ29udGV4dCA9IFByb29mQ29udGV4dC5mcm9tRmlsZUNvbnRleHQoZmlsZUNvbnRleHQpO1xuXG4gIChsYWJlbHNTdHJpbmcgPT09IG51bGwpID9cbiAgICBmaWxlQ29udGV4dC5kZWJ1ZyhgVmVyaWZ5aW5nIGFuIGFub255bW91cyBsZW1tYS4uLmApIDpcbiAgICAgIGZpbGVDb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICcke2xhYmVsc1N0cmluZ30nIGxlbW1hLi4uYCk7XG5cbiAgY29uc3QgbGFiZWxzID0gW10sXG4gICAgICAgIGxhYmVsc0xlbmd0aCA9IGxhYmVscy5sZW5ndGgsXG4gICAgICAgIGxhYmVsc1ZlcmlmaWVkID0gdmVyaWZ5TGFiZWxzKGxhYmVsTm9kZXMsIGxhYmVscywgZmlsZUNvbnRleHQpO1xuXG4gIGlmIChsYWJlbHNWZXJpZmllZCkge1xuICAgIGNvbnN0IHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5KGxlbW1hTm9kZSksXG4gICAgICAgICAgaW5kaWNhdGl2ZUNvbmRpdGlvbmFsTm9kZSA9IGluZGljYXRpdmVDb25kaXRpb25hbE5vZGVRdWVyeShsZW1tYU5vZGUpO1xuXG4gICAgaWYgKHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgdW5xdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCA9IHZlcmlmeVVucXVhbGlmaWVkU3RhdGVtZW50KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSwgcHJvb2ZDb250ZXh0KTtcblxuICAgICAgaWYgKHVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQpIHtcbiAgICAgICAgaWYgKGxhYmVsc0xlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgICAgICAgbGVtbWEgPSBMZW1tYS5mcm9tTGFiZWxzQW5kU3RhdGVtZW50Tm9kZShsYWJlbHMsIHN0YXRlbWVudE5vZGUpO1xuXG4gICAgICAgICAgZmlsZUNvbnRleHQuYWRkTGVtbWEobGVtbWEpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGVtbWFWZXJpZmllZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluZGljYXRpdmVDb25kaXRpb25hbE5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGluZGljYXRpdmVDb25kaXRpb25hbFZlcmlmaWVkID0gdmVyaWZ5SW5kaWNhdGl2ZUNvbmRpdGlvbmFsKGluZGljYXRpdmVDb25kaXRpb25hbE5vZGUsIHByb29mQ29udGV4dCk7XG5cbiAgICAgIGlmIChpbmRpY2F0aXZlQ29uZGl0aW9uYWxWZXJpZmllZCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAobGFiZWxzTGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3Qgc3RhdGVtZW50Tm9kZXMgPSBzdGF0ZW1lbnROb2Rlc1F1ZXJ5KGluZGljYXRpdmVDb25kaXRpb25hbE5vZGUpLFxuICAgICAgICAgICAgICAgIGxhc3RTdGF0ZW1lbnROb2RlID0gbGFzdChzdGF0ZW1lbnROb2RlcyksXG4gICAgICAgICAgICAgICAgZnJvbnRTdGF0ZW1lbnROb2RlcyA9IGZyb250KHN0YXRlbWVudE5vZGVzKSxcbiAgICAgICAgICAgICAgICBjb25zZXF1ZW50U3RhdGVtZW50Tm9kZSA9IGxhc3RTdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgICAgICAgICAgc3VwcG9zaXRpb25TdGF0ZW1lbnROb2RlcyA9IGZyb250U3RhdGVtZW50Tm9kZXMsICAvLy9cbiAgICAgICAgICAgICAgICBsZW1tYSA9IExlbW1hLmZyb21MYWJlbHNTdXBwb3NpdGlvblN0YXRlbWVudE5vZGVzQW5kQ29uc2VxdWVudFN0YXRlbWVudE5vZGUobGFiZWxzLCBzdXBwb3NpdGlvblN0YXRlbWVudE5vZGVzLCBjb25zZXF1ZW50U3RhdGVtZW50Tm9kZSk7XG5cbiAgICAgICAgICBmaWxlQ29udGV4dC5hZGRMZW1tYShsZW1tYSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZW1tYVZlcmlmaWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobGVtbWFWZXJpZmllZCkge1xuICAgIChsYWJlbHNTdHJpbmcgPT09IG51bGwpID9cbiAgICAgIGZpbGVDb250ZXh0LmluZm8oYFZlcmlmaWVkIGFuIGFub255bW91cyBsZW1tYS5gKSA6XG4gICAgICAgIGZpbGVDb250ZXh0LmluZm8oYFZlcmlmaWVkIHRoZSAnJHtsYWJlbHNTdHJpbmd9JyBsZW1tYS5gKTtcbiAgfVxuXG4gIGxlbW1hVmVyaWZpZWQgP1xuICAgIGZpbGVDb250ZXh0LmNvbXBsZXRlKGxlbW1hTm9kZSkgOlxuICAgICAgZmlsZUNvbnRleHQuaGFsdChsZW1tYU5vZGUpO1xuXG4gIHJldHVybiBsZW1tYVZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeUxlbW1hIiwibGFiZWxOb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsInN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInN0YXRlbWVudE5vZGVzUXVlcnkiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSIsImluZGljYXRpdmVDb25kaXRpb25hbE5vZGVRdWVyeSIsImxlbW1hTm9kZSIsImZpbGVDb250ZXh0IiwibGVtbWFWZXJpZmllZCIsImJlZ2luIiwibGFiZWxOb2RlcyIsImxhYmVsc1N0cmluZyIsIm5vZGVzQXNTdHJpbmciLCJwcm9vZkNvbnRleHQiLCJQcm9vZkNvbnRleHQiLCJmcm9tRmlsZUNvbnRleHQiLCJkZWJ1ZyIsImxhYmVscyIsImxhYmVsc0xlbmd0aCIsImxlbmd0aCIsImxhYmVsc1ZlcmlmaWVkIiwidmVyaWZ5TGFiZWxzIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlIiwiaW5kaWNhdGl2ZUNvbmRpdGlvbmFsTm9kZSIsInVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCIsInN0YXRlbWVudE5vZGUiLCJsZW1tYSIsIkxlbW1hIiwiZnJvbUxhYmVsc0FuZFN0YXRlbWVudE5vZGUiLCJhZGRMZW1tYSIsImluZGljYXRpdmVDb25kaXRpb25hbFZlcmlmaWVkIiwidmVyaWZ5SW5kaWNhdGl2ZUNvbmRpdGlvbmFsIiwic3RhdGVtZW50Tm9kZXMiLCJsYXN0U3RhdGVtZW50Tm9kZSIsImxhc3QiLCJmcm9udFN0YXRlbWVudE5vZGVzIiwiZnJvbnQiLCJjb25zZXF1ZW50U3RhdGVtZW50Tm9kZSIsInN1cHBvc2l0aW9uU3RhdGVtZW50Tm9kZXMiLCJmcm9tTGFiZWxzU3VwcG9zaXRpb25TdGF0ZW1lbnROb2Rlc0FuZENvbnNlcXVlbnRTdGF0ZW1lbnROb2RlIiwiaW5mbyIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBa0JBOzs7ZUFBd0JBOzs7MERBaEJOOzJEQUNPOzBEQUNBO2dFQUNjOzBFQUNDO3FCQUVaO3NCQUNFO3FCQUNROzs7Ozs7QUFFdEMsSUFBTUMsa0JBQWtCQyxJQUFBQSxpQkFBVSxFQUFDLGlCQUM3QkMscUJBQXFCQyxJQUFBQSxnQkFBUyxFQUFDLHFDQUMvQkMsc0JBQXNCSCxJQUFBQSxpQkFBVSxFQUFDLDJEQUNqQ0ksZ0NBQWdDRixJQUFBQSxnQkFBUyxFQUFDLGlDQUMxQ0csaUNBQWlDSCxJQUFBQSxnQkFBUyxFQUFDO0FBRWxDLFNBQVNKLFlBQVlRLFNBQVMsRUFBRUMsV0FBVyxFQUFFO0lBQzFELElBQUlDLGdCQUFnQixLQUFLO0lBRXpCRCxZQUFZRSxLQUFLLENBQUNIO0lBRWxCLElBQU1JLGFBQWFYLGdCQUFnQk8sWUFDN0JLLGVBQWVDLElBQUFBLHFCQUFhLEVBQUNGLGFBQzdCRyxlQUFlQyxjQUFZLENBQUNDLGVBQWUsQ0FBQ1I7SUFFakRJLGlCQUFpQixJQUFJLEdBQ3BCSixZQUFZUyxLQUFLLENBQUUscUNBQ2pCVCxZQUFZUyxLQUFLLENBQUMsQUFBQyxrQkFBOEIsT0FBYkwsY0FBYSxjQUFZO0lBRWpFLElBQU1NLFNBQVMsRUFBRSxFQUNYQyxlQUFlRCxPQUFPRSxNQUFNLEVBQzVCQyxpQkFBaUJDLElBQUFBLGVBQVksRUFBQ1gsWUFBWU8sUUFBUVY7SUFFeEQsSUFBSWEsZ0JBQWdCO1FBQ2xCLElBQU1FLDJCQUEyQmxCLDhCQUE4QkUsWUFDekRpQiw0QkFBNEJsQiwrQkFBK0JDO1FBRWpFLElBQUlnQiw2QkFBNkIsSUFBSSxFQUFFO1lBQ3JDLElBQU1FLCtCQUErQkMsSUFBQUEsb0JBQTBCLEVBQUNILDBCQUEwQlQ7WUFFMUYsSUFBSVcsOEJBQThCO2dCQUNoQyxJQUFJTixlQUFlLEdBQUc7b0JBQ3BCLElBQU1RLGdCQUFnQnpCLG1CQUFtQnFCLDJCQUNuQ0ssUUFBUUMsY0FBSyxDQUFDQywwQkFBMEIsQ0FBQ1osUUFBUVM7b0JBRXZEbkIsWUFBWXVCLFFBQVEsQ0FBQ0g7Z0JBQ3ZCLENBQUM7Z0JBRURuQixnQkFBZ0IsSUFBSTtZQUN0QixDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUllLDhCQUE4QixJQUFJLEVBQUU7WUFDdEMsSUFBTVEsZ0NBQWdDQyxJQUFBQSw4QkFBMkIsRUFBQ1QsMkJBQTJCVjtZQUU3RixJQUFJa0Isa0NBQWtDLElBQUksRUFBRTtnQkFDMUMsSUFBSWIsY0FBYztvQkFDaEIsSUFBTWUsaUJBQWlCOUIsb0JBQW9Cb0IsNEJBQ3JDVyxvQkFBb0JDLElBQUFBLFdBQUksRUFBQ0YsaUJBQ3pCRyxzQkFBc0JDLElBQUFBLFlBQUssRUFBQ0osaUJBQzVCSywwQkFBMEJKLG1CQUMxQkssNEJBQTRCSCxxQkFDNUJULFNBQVFDLGNBQUssQ0FBQ1ksNkRBQTZELENBQUN2QixRQUFRc0IsMkJBQTJCRDtvQkFFckgvQixZQUFZdUIsUUFBUSxDQUFDSDtnQkFDdkIsQ0FBQztnQkFFRG5CLGdCQUFnQixJQUFJO1lBQ3RCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUlBLGVBQWU7UUFDaEJHLGlCQUFpQixJQUFJLEdBQ3BCSixZQUFZa0MsSUFBSSxDQUFFLGtDQUNoQmxDLFlBQVlrQyxJQUFJLENBQUMsQUFBQyxpQkFBNkIsT0FBYjlCLGNBQWEsWUFBVTtJQUMvRCxDQUFDO0lBRURILGdCQUNFRCxZQUFZbUMsUUFBUSxDQUFDcEMsYUFDbkJDLFlBQVlvQyxJQUFJLENBQUNyQyxVQUFVO0lBRS9CLE9BQU9FO0FBQ1QifQ==