"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyDerivation;
    }
});
var _assertion = /*#__PURE__*/ _interopRequireDefault(require("../assertion"));
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/qualified"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/unqualified"));
var _array = require("../utilities/array");
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var derivationNodeQuery = (0, _query.nodeQuery)("/subproof/derivation!"), derivationChildNodesQuery = (0, _query.nodesQuery)("/derivation/*"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement!"), qualifiedOrUnqualifiedStatementNodesQuery = (0, _query.nodesQuery)("/subproof/qualifiedStatement|unqualifiedStatement");
function verifyDerivation(derivationNode, proofContext) {
    var derivationVerified, derived;
    proofContext.begin(derivationNode);
    derived = true;
    proofContext.setDerived(derived);
    var derivationChildNodes = derivationChildNodesQuery(derivationNode);
    derivationVerified = derivationChildNodes.every(function(derivationChildNode) {
        var derivationChildVerified = verifyDerivationChild(derivationChildNode, proofContext);
        if (derivationChildVerified) {
            return true;
        }
    });
    derived = false;
    proofContext.setDerived(derived);
    derivationVerified ? proofContext.complete(derivationNode) : proofContext.halt(derivationNode);
    return derivationVerified;
}
function verifyDerivationChild(derivationChildNode, proofContext) {
    var derivationChildVerified;
    var ruleName = derivationChildNode.getRuleName();
    switch(ruleName){
        case _ruleNames.SUBPROOF_RULE_NAME:
            {
                var subproofNode = derivationChildNode, subproofVerified = verifySubproof(subproofNode, proofContext);
                if (subproofVerified) {
                    var assertion = _assertion.default.fromSubproofNode(subproofNode);
                    proofContext.addAssertion(assertion);
                    derivationChildVerified = true;
                }
                break;
            }
        case _ruleNames.QUALIFIED_STATEMENT_RULE_NAME:
            {
                var qualifiedStatementNode = derivationChildNode, qualifiedStatementVerified = (0, _qualified.default)(qualifiedStatementNode, proofContext);
                if (qualifiedStatementVerified) {
                    var assertion1 = _assertion.default.fromQualifiedStatementNode(qualifiedStatementNode);
                    proofContext.addAssertion(assertion1);
                    derivationChildVerified = qualifiedStatementVerified; ///
                }
                break;
            }
        case _ruleNames.UNQUALIFIED_STATEMENT_RULE_NAME:
            {
                var unqualifiedStatementNode = derivationChildNode, unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, proofContext);
                if (unqualifiedStatementVerified) {
                    var assertion2 = _assertion.default.fromUnqualifiedStatementNode(unqualifiedStatementNode);
                    proofContext.addAssertion(assertion2);
                    derivationChildVerified = true;
                }
                break;
            }
    }
    return derivationChildVerified;
}
function verifySubproof(subproofNode, proofContext) {
    var subproofVerified = false;
    proofContext = _proof.default.fromProofContext(proofContext); ///
    var qualifiedOrUnqualifiedStatementNodes = qualifiedOrUnqualifiedStatementNodesQuery(subproofNode), frontQualifiedOrUnqualifiedStatementNodes = (0, _array.front)(qualifiedOrUnqualifiedStatementNodes), unqualifiedStatementNodes = frontQualifiedOrUnqualifiedStatementNodes, unqualifiedStatementsVerified = unqualifiedStatementNodes.every(function(unqualifiedStatementNode) {
        var unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, proofContext);
        if (unqualifiedStatementVerified) {
            return true;
        }
    });
    if (unqualifiedStatementsVerified) {
        unqualifiedStatementNodes.forEach(function(unqualifiedStatementNode) {
            var assertion = _assertion.default.fromUnqualifiedStatementNode(unqualifiedStatementNode);
            proofContext.addAssertion(assertion);
        });
        var derivationVerified = true;
        var derivationNode = derivationNodeQuery(subproofNode);
        if (derivationNode !== null) {
            derivationVerified = verifyDerivation(derivationNode, proofContext);
        }
        if (derivationVerified) {
            var lastQualifiedOrUnqualifiedStatementNode = (0, _array.last)(qualifiedOrUnqualifiedStatementNodes), qualifiedOrUnqualifiedStatementNode = lastQualifiedOrUnqualifiedStatementNode, qualifiedStatementNode = qualifiedStatementNodeQuery(qualifiedOrUnqualifiedStatementNode), unqualifiedStatementNode = unqualifiedStatementNodeQuery(qualifiedOrUnqualifiedStatementNode);
            if (qualifiedStatementNode !== null) {
                var qualifiedStatementVerified = (0, _qualified.default)(qualifiedStatementNode, proofContext);
                subproofVerified = qualifiedStatementVerified; ///
            }
            if (unqualifiedStatementNode !== null) {
                var unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, proofContext);
                subproofVerified = unqualifiedStatementVerified; ///
            }
        }
    }
    return subproofVerified;
}

//# sourceMappingURL=data:application/json;base64,