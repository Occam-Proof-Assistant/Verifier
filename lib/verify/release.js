"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyRelease;
    }
});
function verifyRelease(name, releaseContextMap) {
    var releaseContext = releaseContextMap[name], verified = releaseContext.isVerified();
    var releaseVerified = verified; ///
    if (!releaseVerified) {
        releaseContext.debug("Verifying the '".concat(name, "' package..."));
        var dependencyReleasesVVerified = verifyDependencyReleases(releaseContext, releaseContextMap);
        if (dependencyReleasesVVerified) {
            var releaseFilesVerified = verifyReleaseFiles(releaseContext, releaseContextMap);
            if (releaseFilesVerified) {
                releaseVerified = true;
            }
        }
    }
    if (releaseVerified) {
        var verified1 = true;
        releaseContext.setVerified(verified1);
        releaseContext.info("Verified the '".concat(name, "' package."));
    }
    return releaseVerified;
}
function verifyReleaseFiles(releaseContext, releaseContextMap) {
    var dependencies = releaseContext.getDependencies(), releaseContexts = dependencies.mapDependency(function(dependency) {
        var name = dependency.getName(), _$releaseContext = releaseContextMap[name];
        return _$releaseContext;
    }), dependencyReleaseContexts = retrieveDependencyReleaseContexts(dependencies, releaseContextMap);
    releaseContext.initialise(releaseContexts, dependencyReleaseContexts);
    var filesVerified = releaseContext.verifyFiles(), releaseFilesVerified = filesVerified; ///
    return releaseFilesVerified;
}
function verifyDependencyReleases(releaseContext, releaseContextMap) {
    var dependencies = releaseContext.getDependencies(), dependencyReleasesVVerified = dependencies.everyDependency(function(dependency) {
        var name = dependency.getName(), releaseVerified = verifyRelease(name, releaseContextMap);
        if (releaseVerified) {
            return true;
        }
    });
    return dependencyReleasesVVerified;
}
function retrieveDependencyReleaseContexts(dependencies, releaseContextMap) {
    var dependencyReleaseContexts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    dependencies.forEachDependency(function(dependency) {
        var dependencyName = dependency.getName(), dependencyReleaseName = dependencyName, dependencyReleaseContext = releaseContextMap[dependencyReleaseName], dependencyReleaseContextsIncludesDependencyReleaseContext = dependencyReleaseContexts.includes(dependencyReleaseContext);
        if (!dependencyReleaseContextsIncludesDependencyReleaseContext) {
            var releaseContext = dependencyReleaseContext, _$dependencies = releaseContext.getDependencies();
            retrieveDependencyReleaseContexts(_$dependencies, releaseContextMap, dependencyReleaseContexts);
            dependencyReleaseContexts.push(dependencyReleaseContext);
        }
    });
    return dependencyReleaseContexts;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcmVsZWFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5UmVsZWFzZShuYW1lLCByZWxlYXNlQ29udGV4dE1hcCkge1xuICBjb25zdCByZWxlYXNlQ29udGV4dCA9IHJlbGVhc2VDb250ZXh0TWFwW25hbWVdLFxuICAgICAgICB2ZXJpZmllZCA9IHJlbGVhc2VDb250ZXh0LmlzVmVyaWZpZWQoKTtcblxuICBsZXQgcmVsZWFzZVZlcmlmaWVkID0gdmVyaWZpZWQ7IC8vL1xuXG4gIGlmICghcmVsZWFzZVZlcmlmaWVkKSB7XG4gICAgcmVsZWFzZUNvbnRleHQuZGVidWcoYFZlcmlmeWluZyB0aGUgJyR7bmFtZX0nIHBhY2thZ2UuLi5gKTtcblxuICAgIGNvbnN0IGRlcGVuZGVuY3lSZWxlYXNlc1ZWZXJpZmllZCA9IHZlcmlmeURlcGVuZGVuY3lSZWxlYXNlcyhyZWxlYXNlQ29udGV4dCwgcmVsZWFzZUNvbnRleHRNYXApO1xuXG4gICAgaWYgKGRlcGVuZGVuY3lSZWxlYXNlc1ZWZXJpZmllZCkge1xuICAgICAgY29uc3QgcmVsZWFzZUZpbGVzVmVyaWZpZWQgPSB2ZXJpZnlSZWxlYXNlRmlsZXMocmVsZWFzZUNvbnRleHQsIHJlbGVhc2VDb250ZXh0TWFwKTtcblxuICAgICAgaWYgKHJlbGVhc2VGaWxlc1ZlcmlmaWVkKSB7XG4gICAgICAgIHJlbGVhc2VWZXJpZmllZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlbGVhc2VWZXJpZmllZCkge1xuICAgIGNvbnN0IHZlcmlmaWVkID0gdHJ1ZTtcblxuICAgIHJlbGVhc2VDb250ZXh0LnNldFZlcmlmaWVkKHZlcmlmaWVkKTtcblxuICAgIHJlbGVhc2VDb250ZXh0LmluZm8oYFZlcmlmaWVkIHRoZSAnJHtuYW1lfScgcGFja2FnZS5gKTtcbiAgfVxuXG4gIHJldHVybiByZWxlYXNlVmVyaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVJlbGVhc2VGaWxlcyhyZWxlYXNlQ29udGV4dCwgcmVsZWFzZUNvbnRleHRNYXApIHtcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gcmVsZWFzZUNvbnRleHQuZ2V0RGVwZW5kZW5jaWVzKCksXG4gICAgICAgIHJlbGVhc2VDb250ZXh0cyA9IGRlcGVuZGVuY2llcy5tYXBEZXBlbmRlbmN5KChkZXBlbmRlbmN5KSA9PiB7XG4gICAgICAgICAgY29uc3QgbmFtZSA9IGRlcGVuZGVuY3kuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgIHJlbGVhc2VDb250ZXh0ID0gcmVsZWFzZUNvbnRleHRNYXBbbmFtZV07XG5cbiAgICAgICAgICByZXR1cm4gcmVsZWFzZUNvbnRleHQ7XG4gICAgICAgIH0pLFxuICAgICAgICBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzID0gcmV0cmlldmVEZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzKGRlcGVuZGVuY2llcywgcmVsZWFzZUNvbnRleHRNYXApO1xuXG4gIHJlbGVhc2VDb250ZXh0LmluaXRpYWxpc2UocmVsZWFzZUNvbnRleHRzLCBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzKTtcblxuICBjb25zdCBmaWxlc1ZlcmlmaWVkID0gcmVsZWFzZUNvbnRleHQudmVyaWZ5RmlsZXMoKSxcbiAgICAgICAgcmVsZWFzZUZpbGVzVmVyaWZpZWQgPSBmaWxlc1ZlcmlmaWVkOyAvLy9cblxuICByZXR1cm4gcmVsZWFzZUZpbGVzVmVyaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeURlcGVuZGVuY3lSZWxlYXNlcyhyZWxlYXNlQ29udGV4dCwgcmVsZWFzZUNvbnRleHRNYXApIHtcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gcmVsZWFzZUNvbnRleHQuZ2V0RGVwZW5kZW5jaWVzKCksXG4gICAgICAgIGRlcGVuZGVuY3lSZWxlYXNlc1ZWZXJpZmllZCA9IGRlcGVuZGVuY2llcy5ldmVyeURlcGVuZGVuY3koKGRlcGVuZGVuY3kpID0+IHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gZGVwZW5kZW5jeS5nZXROYW1lKCksXG4gICAgICAgICAgICAgICAgcmVsZWFzZVZlcmlmaWVkID0gdmVyaWZ5UmVsZWFzZShuYW1lLCByZWxlYXNlQ29udGV4dE1hcCk7XG5cbiAgICAgICAgICBpZiAocmVsZWFzZVZlcmlmaWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gIHJldHVybiBkZXBlbmRlbmN5UmVsZWFzZXNWVmVyaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlRGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0cyhkZXBlbmRlbmNpZXMsIHJlbGVhc2VDb250ZXh0TWFwLCBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzID0gW10pIHtcbiAgZGVwZW5kZW5jaWVzLmZvckVhY2hEZXBlbmRlbmN5KChkZXBlbmRlbmN5KSA9PiB7XG4gICAgY29uc3QgZGVwZW5kZW5jeU5hbWUgPSBkZXBlbmRlbmN5LmdldE5hbWUoKSxcbiAgICAgICAgICBkZXBlbmRlbmN5UmVsZWFzZU5hbWUgPSBkZXBlbmRlbmN5TmFtZSwgLy8vXG4gICAgICAgICAgZGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0ID0gcmVsZWFzZUNvbnRleHRNYXBbZGVwZW5kZW5jeVJlbGVhc2VOYW1lXSxcbiAgICAgICAgICBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzSW5jbHVkZXNEZXBlbmRlbmN5UmVsZWFzZUNvbnRleHQgPSBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzLmluY2x1ZGVzKGRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dCk7XG5cbiAgICBpZiAoIWRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHNJbmNsdWRlc0RlcGVuZGVuY3lSZWxlYXNlQ29udGV4dCkge1xuICAgICAgY29uc3QgcmVsZWFzZUNvbnRleHQgPSBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHQsICAvLy9cbiAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IHJlbGVhc2VDb250ZXh0LmdldERlcGVuZGVuY2llcygpO1xuXG4gICAgICByZXRyaWV2ZURlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHMoZGVwZW5kZW5jaWVzLCByZWxlYXNlQ29udGV4dE1hcCwgZGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0cyk7XG5cbiAgICAgIGRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHMucHVzaChkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHM7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5UmVsZWFzZSIsIm5hbWUiLCJyZWxlYXNlQ29udGV4dE1hcCIsInJlbGVhc2VDb250ZXh0IiwidmVyaWZpZWQiLCJpc1ZlcmlmaWVkIiwicmVsZWFzZVZlcmlmaWVkIiwiZGVidWciLCJkZXBlbmRlbmN5UmVsZWFzZXNWVmVyaWZpZWQiLCJ2ZXJpZnlEZXBlbmRlbmN5UmVsZWFzZXMiLCJyZWxlYXNlRmlsZXNWZXJpZmllZCIsInZlcmlmeVJlbGVhc2VGaWxlcyIsInNldFZlcmlmaWVkIiwiaW5mbyIsImRlcGVuZGVuY2llcyIsImdldERlcGVuZGVuY2llcyIsInJlbGVhc2VDb250ZXh0cyIsIm1hcERlcGVuZGVuY3kiLCJkZXBlbmRlbmN5IiwiZ2V0TmFtZSIsImRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHMiLCJyZXRyaWV2ZURlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHMiLCJpbml0aWFsaXNlIiwiZmlsZXNWZXJpZmllZCIsInZlcmlmeUZpbGVzIiwiZXZlcnlEZXBlbmRlbmN5IiwiZm9yRWFjaERlcGVuZGVuY3kiLCJkZXBlbmRlbmN5TmFtZSIsImRlcGVuZGVuY3lSZWxlYXNlTmFtZSIsImRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dCIsImRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHNJbmNsdWRlc0RlcGVuZGVuY3lSZWxlYXNlQ29udGV4dCIsImluY2x1ZGVzIiwicHVzaCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBRUE7OztlQUF3QkE7OztBQUFULFNBQVNBLGNBQWNDLElBQUksRUFBRUMsaUJBQWlCLEVBQUU7SUFDN0QsSUFBTUMsaUJBQWlCRCxpQkFBaUIsQ0FBQ0QsS0FBSyxFQUN4Q0csV0FBV0QsZUFBZUUsVUFBVTtJQUUxQyxJQUFJQyxrQkFBa0JGLFVBQVUsR0FBRztJQUVuQyxJQUFJLENBQUNFLGlCQUFpQjtRQUNwQkgsZUFBZUksS0FBSyxDQUFDLEFBQUMsa0JBQXNCLE9BQUxOLE1BQUs7UUFFNUMsSUFBTU8sOEJBQThCQyx5QkFBeUJOLGdCQUFnQkQ7UUFFN0UsSUFBSU0sNkJBQTZCO1lBQy9CLElBQU1FLHVCQUF1QkMsbUJBQW1CUixnQkFBZ0JEO1lBRWhFLElBQUlRLHNCQUFzQjtnQkFDeEJKLGtCQUFrQixJQUFJO1lBQ3hCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUlBLGlCQUFpQjtRQUNuQixJQUFNRixZQUFXLElBQUk7UUFFckJELGVBQWVTLFdBQVcsQ0FBQ1I7UUFFM0JELGVBQWVVLElBQUksQ0FBQyxBQUFDLGlCQUFxQixPQUFMWixNQUFLO0lBQzVDLENBQUM7SUFFRCxPQUFPSztBQUNUO0FBRUEsU0FBU0ssbUJBQW1CUixjQUFjLEVBQUVELGlCQUFpQixFQUFFO0lBQzdELElBQU1ZLGVBQWVYLGVBQWVZLGVBQWUsSUFDN0NDLGtCQUFrQkYsYUFBYUcsYUFBYSxDQUFDLFNBQUNDLFlBQWU7UUFDM0QsSUFBTWpCLE9BQU9pQixXQUFXQyxPQUFPLElBQ3pCaEIsbUJBQWlCRCxpQkFBaUIsQ0FBQ0QsS0FBSztRQUU5QyxPQUFPRTtJQUNULElBQ0FpQiw0QkFBNEJDLGtDQUFrQ1AsY0FBY1o7SUFFbEZDLGVBQWVtQixVQUFVLENBQUNOLGlCQUFpQkk7SUFFM0MsSUFBTUcsZ0JBQWdCcEIsZUFBZXFCLFdBQVcsSUFDMUNkLHVCQUF1QmEsZUFBZSxHQUFHO0lBRS9DLE9BQU9iO0FBQ1Q7QUFFQSxTQUFTRCx5QkFBeUJOLGNBQWMsRUFBRUQsaUJBQWlCLEVBQUU7SUFDbkUsSUFBTVksZUFBZVgsZUFBZVksZUFBZSxJQUM3Q1AsOEJBQThCTSxhQUFhVyxlQUFlLENBQUMsU0FBQ1AsWUFBZTtRQUN6RSxJQUFNakIsT0FBT2lCLFdBQVdDLE9BQU8sSUFDekJiLGtCQUFrQk4sY0FBY0MsTUFBTUM7UUFFNUMsSUFBSUksaUJBQWlCO1lBQ25CLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSDtJQUVOLE9BQU9FO0FBQ1Q7QUFFQSxTQUFTYSxrQ0FBa0NQLFlBQVksRUFBRVosaUJBQWlCLEVBQWtDO1FBQWhDa0IsNEJBQUFBLGlFQUE0QixFQUFFO0lBQ3hHTixhQUFhWSxpQkFBaUIsQ0FBQyxTQUFDUixZQUFlO1FBQzdDLElBQU1TLGlCQUFpQlQsV0FBV0MsT0FBTyxJQUNuQ1Msd0JBQXdCRCxnQkFDeEJFLDJCQUEyQjNCLGlCQUFpQixDQUFDMEIsc0JBQXNCLEVBQ25FRSw0REFBNERWLDBCQUEwQlcsUUFBUSxDQUFDRjtRQUVyRyxJQUFJLENBQUNDLDJEQUEyRDtZQUM5RCxJQUFNM0IsaUJBQWlCMEIsMEJBQ2pCZixpQkFBZVgsZUFBZVksZUFBZTtZQUVuRE0sa0NBQWtDUCxnQkFBY1osbUJBQW1Ca0I7WUFFbkVBLDBCQUEwQlksSUFBSSxDQUFDSDtRQUNqQyxDQUFDO0lBQ0g7SUFFQSxPQUFPVDtBQUNUIn0=