"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyRelease;
    }
});
var _necessary = require("necessary");
var _files = /*#__PURE__*/ _interopRequireDefault(require("../verify/files"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var log = _necessary.loggingUtilities.log;
function verifyRelease(releaseName, releaseContextMap) {
    var releaseContexts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    var releaseContext = releaseContextMap[releaseName];
    var releaseVerified = releaseContext.isReleaseVerified();
    if (!releaseVerified) {
        log.debug("Verifying the '".concat(releaseName, "' package..."));
        var dependencyReleaseNames = releaseContext.getDependencyReleaseNames(), dependencyReleasesVVerified = dependencyReleaseNames.every(function(dependencyReleaseName) {
            var _$releaseName = dependencyReleaseName, releaseVerified = verifyRelease(_$releaseName, releaseContextMap, releaseContexts);
            if (releaseVerified) {
                return true;
            }
        });
        if (dependencyReleasesVVerified) {
            var releaseNames = dependencyReleaseNames, releaseContexts1 = releaseNames.map(function(releaseName) {
                var releaseContext = releaseContextMap[releaseName];
                return releaseContext;
            });
            var dependencyReleaseContexts = retrieveDependencyReleaseContexts(dependencyReleaseNames, releaseContextMap);
            releaseContext.initialise(releaseContexts1, dependencyReleaseContexts);
            var filesVerified = (0, _files.default)(releaseContext);
            releaseVerified = filesVerified; ///
            if (releaseVerified) {
                releaseContexts1.push(releaseContext);
                log.info("Verified the '".concat(releaseName, "' release."));
            }
        }
    }
    return releaseVerified;
}
function retrieveDependencyReleaseContexts(dependencyReleaseNames, releaseContextMap) {
    var dependencyReleaseContexts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    dependencyReleaseNames.forEach(function(dependencyReleaseName) {
        var dependencyReleaseContext = releaseContextMap[dependencyReleaseName], dependencyReleaseContextsIncludesDependencyReleaseContext = dependencyReleaseContexts.includes(dependencyReleaseContext);
        if (!dependencyReleaseContextsIncludesDependencyReleaseContext) {
            var releaseContext = dependencyReleaseContext, _$dependencyReleaseNames = releaseContext.getDependencyReleaseNames();
            retrieveDependencyReleaseContexts(_$dependencyReleaseNames, releaseContextMap, dependencyReleaseContexts);
            dependencyReleaseContexts.push(dependencyReleaseContext);
        }
    });
    return dependencyReleaseContexts;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvcmVsZWFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgbG9nZ2luZ1V0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHZlcmlmeUZpbGVzIGZyb20gXCIuLi92ZXJpZnkvZmlsZXNcIjtcblxuY29uc3QgeyBsb2cgfSA9IGxvZ2dpbmdVdGlsaXRpZXM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVJlbGVhc2UocmVsZWFzZU5hbWUsIHJlbGVhc2VDb250ZXh0TWFwLCByZWxlYXNlQ29udGV4dHMgPSBbXSkge1xuICBjb25zdCByZWxlYXNlQ29udGV4dCA9IHJlbGVhc2VDb250ZXh0TWFwW3JlbGVhc2VOYW1lXTtcblxuICBsZXQgcmVsZWFzZVZlcmlmaWVkID0gcmVsZWFzZUNvbnRleHQuaXNSZWxlYXNlVmVyaWZpZWQoKTtcblxuICBpZiAoIXJlbGVhc2VWZXJpZmllZCkge1xuICAgIGxvZy5kZWJ1ZyhgVmVyaWZ5aW5nIHRoZSAnJHtyZWxlYXNlTmFtZX0nIHBhY2thZ2UuLi5gKTtcblxuICAgIGNvbnN0IGRlcGVuZGVuY3lSZWxlYXNlTmFtZXMgPSByZWxlYXNlQ29udGV4dC5nZXREZXBlbmRlbmN5UmVsZWFzZU5hbWVzKCksXG4gICAgICAgICAgZGVwZW5kZW5jeVJlbGVhc2VzVlZlcmlmaWVkID0gZGVwZW5kZW5jeVJlbGVhc2VOYW1lcy5ldmVyeSgoZGVwZW5kZW5jeVJlbGVhc2VOYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWxlYXNlTmFtZSA9IGRlcGVuZGVuY3lSZWxlYXNlTmFtZSwgIC8vL1xuICAgICAgICAgICAgICAgICAgcmVsZWFzZVZlcmlmaWVkID0gdmVyaWZ5UmVsZWFzZShyZWxlYXNlTmFtZSwgcmVsZWFzZUNvbnRleHRNYXAsIHJlbGVhc2VDb250ZXh0cyk7XG5cbiAgICAgICAgICAgIGlmIChyZWxlYXNlVmVyaWZpZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICBpZiAoZGVwZW5kZW5jeVJlbGVhc2VzVlZlcmlmaWVkKSB7XG4gICAgICBjb25zdCByZWxlYXNlTmFtZXMgPSBkZXBlbmRlbmN5UmVsZWFzZU5hbWVzLCAgLy8vXG4gICAgICAgICAgICByZWxlYXNlQ29udGV4dHMgPSByZWxlYXNlTmFtZXMubWFwKChyZWxlYXNlTmFtZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCByZWxlYXNlQ29udGV4dCA9IHJlbGVhc2VDb250ZXh0TWFwW3JlbGVhc2VOYW1lXTtcblxuICAgICAgICAgICAgICByZXR1cm4gcmVsZWFzZUNvbnRleHQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgY29uc3QgZGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0cyA9IHJldHJpZXZlRGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0cyhkZXBlbmRlbmN5UmVsZWFzZU5hbWVzLCByZWxlYXNlQ29udGV4dE1hcCk7XG5cbiAgICAgIHJlbGVhc2VDb250ZXh0LmluaXRpYWxpc2UocmVsZWFzZUNvbnRleHRzLCBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzKTtcblxuICAgICAgY29uc3QgZmlsZXNWZXJpZmllZCA9IHZlcmlmeUZpbGVzKHJlbGVhc2VDb250ZXh0KTtcblxuICAgICAgcmVsZWFzZVZlcmlmaWVkID0gZmlsZXNWZXJpZmllZDsgIC8vL1xuXG4gICAgICBpZiAocmVsZWFzZVZlcmlmaWVkKSB7XG4gICAgICAgIHJlbGVhc2VDb250ZXh0cy5wdXNoKHJlbGVhc2VDb250ZXh0KTtcblxuICAgICAgICBsb2cuaW5mbyhgVmVyaWZpZWQgdGhlICcke3JlbGVhc2VOYW1lfScgcmVsZWFzZS5gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVsZWFzZVZlcmlmaWVkO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZURlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHMoZGVwZW5kZW5jeVJlbGVhc2VOYW1lcywgcmVsZWFzZUNvbnRleHRNYXAsIGRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHMgPSBbXSkge1xuICBkZXBlbmRlbmN5UmVsZWFzZU5hbWVzLmZvckVhY2goKGRlcGVuZGVuY3lSZWxlYXNlTmFtZSkgPT4ge1xuICAgIGNvbnN0IGRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dCA9IHJlbGVhc2VDb250ZXh0TWFwW2RlcGVuZGVuY3lSZWxlYXNlTmFtZV0sXG4gICAgICAgICAgZGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0c0luY2x1ZGVzRGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0ID0gZGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0cy5pbmNsdWRlcyhkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHQpO1xuXG4gICAgaWYgKCFkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzSW5jbHVkZXNEZXBlbmRlbmN5UmVsZWFzZUNvbnRleHQpIHtcbiAgICAgIGNvbnN0IHJlbGVhc2VDb250ZXh0ID0gZGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0LCAgLy8vXG4gICAgICAgICAgICBkZXBlbmRlbmN5UmVsZWFzZU5hbWVzID0gcmVsZWFzZUNvbnRleHQuZ2V0RGVwZW5kZW5jeVJlbGVhc2VOYW1lcygpO1xuXG4gICAgICByZXRyaWV2ZURlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHMoZGVwZW5kZW5jeVJlbGVhc2VOYW1lcywgcmVsZWFzZUNvbnRleHRNYXAsIGRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHMpO1xuXG4gICAgICBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzLnB1c2goZGVwZW5kZW5jeVJlbGVhc2VDb250ZXh0KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeVJlbGVhc2UiLCJsb2ciLCJsb2dnaW5nVXRpbGl0aWVzIiwicmVsZWFzZU5hbWUiLCJyZWxlYXNlQ29udGV4dE1hcCIsInJlbGVhc2VDb250ZXh0cyIsInJlbGVhc2VDb250ZXh0IiwicmVsZWFzZVZlcmlmaWVkIiwiaXNSZWxlYXNlVmVyaWZpZWQiLCJkZWJ1ZyIsImRlcGVuZGVuY3lSZWxlYXNlTmFtZXMiLCJnZXREZXBlbmRlbmN5UmVsZWFzZU5hbWVzIiwiZGVwZW5kZW5jeVJlbGVhc2VzVlZlcmlmaWVkIiwiZXZlcnkiLCJkZXBlbmRlbmN5UmVsZWFzZU5hbWUiLCJyZWxlYXNlTmFtZXMiLCJtYXAiLCJkZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzIiwicmV0cmlldmVEZXBlbmRlbmN5UmVsZWFzZUNvbnRleHRzIiwiaW5pdGlhbGlzZSIsImZpbGVzVmVyaWZpZWQiLCJ2ZXJpZnlGaWxlcyIsInB1c2giLCJpbmZvIiwiZm9yRWFjaCIsImRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dCIsImRlcGVuZGVuY3lSZWxlYXNlQ29udGV4dHNJbmNsdWRlc0RlcGVuZGVuY3lSZWxlYXNlQ29udGV4dCIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFRQTs7O2VBQXdCQTs7O3lCQU5TOzBEQUVUOzs7Ozs7QUFFeEIsSUFBTSxBQUFFQyxNQUFRQywyQkFBZ0IsQ0FBeEJEO0FBRU8sU0FBU0QsY0FBY0csV0FBVyxFQUFFQyxpQkFBaUIsRUFBd0I7UUFBdEJDLGtCQUFBQSxpRUFBa0IsRUFBRTtJQUN4RixJQUFNQyxpQkFBaUJGLGlCQUFpQixDQUFDRCxZQUFZO0lBRXJELElBQUlJLGtCQUFrQkQsZUFBZUUsaUJBQWlCO0lBRXRELElBQUksQ0FBQ0QsaUJBQWlCO1FBQ3BCTixJQUFJUSxLQUFLLENBQUMsQUFBQyxrQkFBNkIsT0FBWk4sYUFBWTtRQUV4QyxJQUFNTyx5QkFBeUJKLGVBQWVLLHlCQUF5QixJQUNqRUMsOEJBQThCRix1QkFBdUJHLEtBQUssQ0FBQyxTQUFDQyx1QkFBMEI7WUFDcEYsSUFBTVgsZ0JBQWNXLHVCQUNkUCxrQkFBa0JQLGNBQWNHLGVBQWFDLG1CQUFtQkM7WUFFdEUsSUFBSUUsaUJBQWlCO2dCQUNuQixPQUFPLElBQUk7WUFDYixDQUFDO1FBQ0g7UUFFTixJQUFJSyw2QkFBNkI7WUFDL0IsSUFBTUcsZUFBZUwsd0JBQ2ZMLG1CQUFrQlUsYUFBYUMsR0FBRyxDQUFDLFNBQUNiLGFBQWdCO2dCQUNsRCxJQUFNRyxpQkFBaUJGLGlCQUFpQixDQUFDRCxZQUFZO2dCQUVyRCxPQUFPRztZQUNUO1lBRU4sSUFBTVcsNEJBQTRCQyxrQ0FBa0NSLHdCQUF3Qk47WUFFNUZFLGVBQWVhLFVBQVUsQ0FBQ2Qsa0JBQWlCWTtZQUUzQyxJQUFNRyxnQkFBZ0JDLElBQUFBLGNBQVcsRUFBQ2Y7WUFFbENDLGtCQUFrQmEsZUFBZ0IsR0FBRztZQUVyQyxJQUFJYixpQkFBaUI7Z0JBQ25CRixpQkFBZ0JpQixJQUFJLENBQUNoQjtnQkFFckJMLElBQUlzQixJQUFJLENBQUMsQUFBQyxpQkFBNEIsT0FBWnBCLGFBQVk7WUFDeEMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBT0k7QUFDVDtBQUVBLFNBQVNXLGtDQUFrQ1Isc0JBQXNCLEVBQUVOLGlCQUFpQixFQUFrQztRQUFoQ2EsNEJBQUFBLGlFQUE0QixFQUFFO0lBQ2xIUCx1QkFBdUJjLE9BQU8sQ0FBQyxTQUFDVix1QkFBMEI7UUFDeEQsSUFBTVcsMkJBQTJCckIsaUJBQWlCLENBQUNVLHNCQUFzQixFQUNuRVksNERBQTREVCwwQkFBMEJVLFFBQVEsQ0FBQ0Y7UUFFckcsSUFBSSxDQUFDQywyREFBMkQ7WUFDOUQsSUFBTXBCLGlCQUFpQm1CLDBCQUNqQmYsMkJBQXlCSixlQUFlSyx5QkFBeUI7WUFFdkVPLGtDQUFrQ1IsMEJBQXdCTixtQkFBbUJhO1lBRTdFQSwwQkFBMEJLLElBQUksQ0FBQ0c7UUFDakMsQ0FBQztJQUNIO0lBRUEsT0FBT1I7QUFDVCJ9