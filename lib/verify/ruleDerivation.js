"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyRuleDerivation;
    }
});
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../step/metaproof"));
var _premise = /*#__PURE__*/ _interopRequireDefault(require("../verify/premise"));
var _metaproof1 = /*#__PURE__*/ _interopRequireDefault(require("../context/metaproof"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/qualified"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var childNodesQuery = (0, _query.nodesQuery)("/ruleDerivation|ruleSubDerivation/*"), premiseNodesQuery = (0, _query.nodesQuery)("/ruleSubproof/premise"), metastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement|unqualifiedMetastatement/metastatement!"), ruleSubDerivationNodeQuery = (0, _query.nodeQuery)("/ruleSubproof/ruleSubDerivation");
function verifyRuleDerivation(ruleDerivationNode, metaproofContext) {
    var ruleDerivationVerified;
    metaproofContext.begin(ruleDerivationNode);
    var childNodes = childNodesQuery(ruleDerivationNode);
    ruleDerivationVerified = childNodes.every(function(childNode) {
        var childVerified = verifyChild(childNode, metaproofContext);
        if (childVerified) {
            return true;
        }
    });
    ruleDerivationVerified ? metaproofContext.complete(ruleDerivationNode) : metaproofContext.halt(ruleDerivationNode);
    return ruleDerivationVerified;
}
function verifyRuleSubDerivation(ruleSubDerivationNode, metaproofContext) {
    var ruleSubDerivationVerified;
    metaproofContext.begin(ruleSubDerivationNode);
    var childNodes = childNodesQuery(ruleSubDerivationNode);
    ruleSubDerivationVerified = childNodes.every(function(childNode) {
        var childVerified = verifyChild(childNode, metaproofContext);
        if (childVerified) {
            return true;
        }
    });
    ruleSubDerivationVerified ? metaproofContext.complete(ruleSubDerivationNode) : metaproofContext.halt(ruleSubDerivationNode);
    return ruleSubDerivationVerified;
}
function verifyRuleSubproof(ruleSubproofNode, metaproofContext) {
    var ruleSubproofVerified = false;
    metaproofContext = _metaproof1.default.fromMetaproofContext(metaproofContext); ///
    var premises = [], premiseNodes = premiseNodesQuery(ruleSubproofNode), premisesVerified = premiseNodes.every(function(premiseNode) {
        var premiseVerified = (0, _premise.default)(premiseNode, premises, metaproofContext);
        if (premiseVerified) {
            return true;
        }
    });
    if (premisesVerified) {
        var ruleSubDerivationNode = ruleSubDerivationNodeQuery(ruleSubproofNode), ruleSubDerivationVerified = verifyRuleSubDerivation(ruleSubDerivationNode, metaproofContext);
        if (ruleSubDerivationVerified) {
            ruleSubproofVerified = true;
        }
    }
    return ruleSubproofVerified;
}
function verifyChild(childNode, metaproofContext) {
    var childVerified;
    var childNodeRuleName = childNode.getRuleName();
    switch(childNodeRuleName){
        case _ruleNames.RULE_SUBPROOF_RULE_NAME:
            {
                var ruleSubproofNode = childNode, ruleSubproofVerified = verifyRuleSubproof(ruleSubproofNode, metaproofContext);
                if (ruleSubproofVerified) {
                    var metaproofStep = _metaproof.default.fromRuleSubproofNode(ruleSubproofNode);
                    metaproofContext.addMetaproofStep(metaproofStep);
                    childVerified = true;
                }
                break;
            }
        case _ruleNames.QUALIFIED_METASTATEMENT_RULE_NAME:
            {
                var qualifiedMetastatementNode = childNode, qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, metaproofContext);
                if (qualifiedMetastatementVerified) {
                    var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metaproofStep1 = _metaproof.default.fromMetastatementNode(metastatementNode);
                    metaproofContext.addMetaproofStep(metaproofStep1);
                    childVerified = qualifiedMetastatementVerified; ///
                }
                break;
            }
        case _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME:
            {
                var unqualifiedMetastatementNode = childNode, unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
                if (unqualifiedMetastatementVerified) {
                    var metastatementNode1 = metastatementNodeQuery(unqualifiedMetastatementNode), metaproofStep2 = _metaproof.default.fromMetastatementNode(metastatementNode1);
                    metaproofContext.addMetaproofStep(metaproofStep2);
                    childVerified = true;
                }
                break;
            }
    }
    return childVerified;
}

//# sourceMappingURL=data:application/json;base64,