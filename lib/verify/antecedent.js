"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyAntecedent;
    }
});
var _assertion = /*#__PURE__*/ _interopRequireDefault(require("../assertion"));
var _antecedent = /*#__PURE__*/ _interopRequireDefault(require("../antecedent"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/unqualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/antecedent/unqualifiedStatement");
function verifyAntecedent(antecedentNode, antecedents, proofContext) {
    var antecedentOrAntecedentsVerified;
    proofContext.begin(antecedentNode);
    var unqualifiedStatementNode = unqualifiedStatementNodeQuery(antecedentNode), unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, proofContext);
    if (unqualifiedStatementVerified) {
        var statementNode = statementNodeQuery(unqualifiedStatementNode), assertion = _assertion.default.fromUnqualifiedStatementNode(unqualifiedStatementNode), antecedent = _antecedent.default.fromStatementNode(statementNode);
        antecedents.push(antecedent);
        proofContext.addAssertion(assertion);
        antecedentOrAntecedentsVerified = true;
    }
    antecedentOrAntecedentsVerified ? proofContext.complete(antecedentNode) : proofContext.halt(antecedentNode);
    return antecedentOrAntecedentsVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvYW50ZWNlZGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IEFzc2VydGlvbiBmcm9tIFwiLi4vYXNzZXJ0aW9uXCI7XG5pbXBvcnQgQW50ZWNlZGVudCBmcm9tIFwiLi4vYW50ZWNlZGVudFwiO1xuaW1wb3J0IHZlcmlmeVVucXVhbGlmaWVkU3RhdGVtZW50IGZyb20gXCIuLi92ZXJpZnkvc3RhdGVtZW50L3VucXVhbGlmaWVkXCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3Qgc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3VucXVhbGlmaWVkU3RhdGVtZW50L3N0YXRlbWVudFwiKSxcbiAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2FudGVjZWRlbnQvdW5xdWFsaWZpZWRTdGF0ZW1lbnRcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeUFudGVjZWRlbnQoYW50ZWNlZGVudE5vZGUsIGFudGVjZWRlbnRzLCBwcm9vZkNvbnRleHQpIHtcbiAgbGV0IGFudGVjZWRlbnRPckFudGVjZWRlbnRzVmVyaWZpZWQ7XG5cbiAgcHJvb2ZDb250ZXh0LmJlZ2luKGFudGVjZWRlbnROb2RlKTtcblxuICBjb25zdCB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUgPSB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeShhbnRlY2VkZW50Tm9kZSksXG4gICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUsIHByb29mQ29udGV4dCk7XG5cbiAgaWYgKHVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgYXNzZXJ0aW9uID0gQXNzZXJ0aW9uLmZyb21VbnF1YWxpZmllZFN0YXRlbWVudE5vZGUodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICBhbnRlY2VkZW50ID0gQW50ZWNlZGVudC5mcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKTtcblxuICAgIGFudGVjZWRlbnRzLnB1c2goYW50ZWNlZGVudCk7XG5cbiAgICBwcm9vZkNvbnRleHQuYWRkQXNzZXJ0aW9uKGFzc2VydGlvbik7XG5cbiAgICBhbnRlY2VkZW50T3JBbnRlY2VkZW50c1ZlcmlmaWVkID0gdHJ1ZTtcbiAgfVxuXG4gIGFudGVjZWRlbnRPckFudGVjZWRlbnRzVmVyaWZpZWQgP1xuICAgIHByb29mQ29udGV4dC5jb21wbGV0ZShhbnRlY2VkZW50Tm9kZSkgOlxuICAgICAgcHJvb2ZDb250ZXh0LmhhbHQoYW50ZWNlZGVudE5vZGUpO1xuXG4gIHJldHVybiBhbnRlY2VkZW50T3JBbnRlY2VkZW50c1ZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeUFudGVjZWRlbnQiLCJzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSIsImFudGVjZWRlbnROb2RlIiwiYW50ZWNlZGVudHMiLCJwcm9vZkNvbnRleHQiLCJhbnRlY2VkZW50T3JBbnRlY2VkZW50c1ZlcmlmaWVkIiwiYmVnaW4iLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUiLCJ1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRTdGF0ZW1lbnQiLCJzdGF0ZW1lbnROb2RlIiwiYXNzZXJ0aW9uIiwiQXNzZXJ0aW9uIiwiZnJvbVVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSIsImFudGVjZWRlbnQiLCJBbnRlY2VkZW50IiwiZnJvbVN0YXRlbWVudE5vZGUiLCJwdXNoIiwiYWRkQXNzZXJ0aW9uIiwiY29tcGxldGUiLCJoYWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFXQTs7O2VBQXdCQTs7OzhEQVRGOytEQUNDO2dFQUNnQjtxQkFFYjs7Ozs7O0FBRTFCLElBQU1DLHFCQUFxQkMsSUFBQUEsZ0JBQVMsRUFBQyxvQ0FDL0JDLGdDQUFnQ0QsSUFBQUEsZ0JBQVMsRUFBQztBQUVqQyxTQUFTRixpQkFBaUJJLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUU7SUFDbEYsSUFBSUM7SUFFSkQsYUFBYUUsS0FBSyxDQUFDSjtJQUVuQixJQUFNSywyQkFBMkJOLDhCQUE4QkMsaUJBQ3pETSwrQkFBK0JDLElBQUFBLG9CQUEwQixFQUFDRiwwQkFBMEJIO0lBRTFGLElBQUlJLDhCQUE4QjtRQUNoQyxJQUFNRSxnQkFBZ0JYLG1CQUFtQlEsMkJBQ25DSSxZQUFZQyxrQkFBUyxDQUFDQyw0QkFBNEIsQ0FBQ04sMkJBQ25ETyxhQUFhQyxtQkFBVSxDQUFDQyxpQkFBaUIsQ0FBQ047UUFFaERQLFlBQVljLElBQUksQ0FBQ0g7UUFFakJWLGFBQWFjLFlBQVksQ0FBQ1A7UUFFMUJOLGtDQUFrQyxJQUFJO0lBQ3hDLENBQUM7SUFFREEsa0NBQ0VELGFBQWFlLFFBQVEsQ0FBQ2pCLGtCQUNwQkUsYUFBYWdCLElBQUksQ0FBQ2xCLGVBQWU7SUFFckMsT0FBT0c7QUFDVCJ9