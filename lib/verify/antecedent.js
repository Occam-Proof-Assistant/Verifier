"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyAntecedent;
    }
});
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../step/proof"));
var _antecedent = /*#__PURE__*/ _interopRequireDefault(require("../antecedent"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/unqualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/antecedent/unqualifiedStatement");
function verifyAntecedent(antecedentNode, antecedents, proofContext) {
    var antecedentOrAntecedentsVerified;
    proofContext.begin(antecedentNode);
    var unqualifiedStatementNode = unqualifiedStatementNodeQuery(antecedentNode), unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, proofContext);
    if (unqualifiedStatementVerified) {
        var statementNode = statementNodeQuery(unqualifiedStatementNode), proofStep = _proof.default.fromStatementNode(statementNode), antecedent = _antecedent.default.fromStatementNode(statementNode);
        antecedents.push(antecedent);
        proofContext.addProofStep(proofStep);
        antecedentOrAntecedentsVerified = true;
    }
    antecedentOrAntecedentsVerified ? proofContext.complete(antecedentNode) : proofContext.halt(antecedentNode);
    return antecedentOrAntecedentsVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvYW50ZWNlZGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFByb29mU3RlcCBmcm9tIFwiLi4vc3RlcC9wcm9vZlwiO1xuaW1wb3J0IEFudGVjZWRlbnQgZnJvbSBcIi4uL2FudGVjZWRlbnRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L3N0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZFN0YXRlbWVudC9zdGF0ZW1lbnRcIiksXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9hbnRlY2VkZW50L3VucXVhbGlmaWVkU3RhdGVtZW50XCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlBbnRlY2VkZW50KGFudGVjZWRlbnROb2RlLCBhbnRlY2VkZW50cywgcHJvb2ZDb250ZXh0KSB7XG4gIGxldCBhbnRlY2VkZW50T3JBbnRlY2VkZW50c1ZlcmlmaWVkO1xuXG4gIHByb29mQ29udGV4dC5iZWdpbihhbnRlY2VkZW50Tm9kZSk7XG5cbiAgY29uc3QgdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlID0gdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkoYW50ZWNlZGVudE5vZGUpLFxuICAgICAgICB1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkID0gdmVyaWZ5VW5xdWFsaWZpZWRTdGF0ZW1lbnQodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlLCBwcm9vZkNvbnRleHQpO1xuXG4gIGlmICh1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgY29uc3Qgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudE5vZGVRdWVyeSh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgIHByb29mU3RlcCA9IFByb29mU3RlcC5mcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICBhbnRlY2VkZW50ID0gQW50ZWNlZGVudC5mcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKTtcblxuICAgIGFudGVjZWRlbnRzLnB1c2goYW50ZWNlZGVudCk7XG5cbiAgICBwcm9vZkNvbnRleHQuYWRkUHJvb2ZTdGVwKHByb29mU3RlcCk7XG5cbiAgICBhbnRlY2VkZW50T3JBbnRlY2VkZW50c1ZlcmlmaWVkID0gdHJ1ZTtcbiAgfVxuXG4gIGFudGVjZWRlbnRPckFudGVjZWRlbnRzVmVyaWZpZWQgP1xuICAgIHByb29mQ29udGV4dC5jb21wbGV0ZShhbnRlY2VkZW50Tm9kZSkgOlxuICAgICAgcHJvb2ZDb250ZXh0LmhhbHQoYW50ZWNlZGVudE5vZGUpO1xuXG4gIHJldHVybiBhbnRlY2VkZW50T3JBbnRlY2VkZW50c1ZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeUFudGVjZWRlbnQiLCJzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSIsImFudGVjZWRlbnROb2RlIiwiYW50ZWNlZGVudHMiLCJwcm9vZkNvbnRleHQiLCJhbnRlY2VkZW50T3JBbnRlY2VkZW50c1ZlcmlmaWVkIiwiYmVnaW4iLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUiLCJ1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRTdGF0ZW1lbnQiLCJzdGF0ZW1lbnROb2RlIiwicHJvb2ZTdGVwIiwiUHJvb2ZTdGVwIiwiZnJvbVN0YXRlbWVudE5vZGUiLCJhbnRlY2VkZW50IiwiQW50ZWNlZGVudCIsInB1c2giLCJhZGRQcm9vZlN0ZXAiLCJjb21wbGV0ZSIsImhhbHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVdBOzs7ZUFBd0JBOzs7MERBVEY7K0RBQ0M7Z0VBQ2dCO3FCQUViOzs7Ozs7QUFFMUIsSUFBTUMscUJBQXFCQyxJQUFBQSxnQkFBUyxFQUFDLG9DQUMvQkMsZ0NBQWdDRCxJQUFBQSxnQkFBUyxFQUFDO0FBRWpDLFNBQVNGLGlCQUFpQkksY0FBYyxFQUFFQyxXQUFXLEVBQUVDLFlBQVksRUFBRTtJQUNsRixJQUFJQztJQUVKRCxhQUFhRSxLQUFLLENBQUNKO0lBRW5CLElBQU1LLDJCQUEyQk4sOEJBQThCQyxpQkFDekRNLCtCQUErQkMsSUFBQUEsb0JBQTBCLEVBQUNGLDBCQUEwQkg7SUFFMUYsSUFBSUksOEJBQThCO1FBQ2hDLElBQU1FLGdCQUFnQlgsbUJBQW1CUSwyQkFDbkNJLFlBQVlDLGNBQVMsQ0FBQ0MsaUJBQWlCLENBQUNILGdCQUN4Q0ksYUFBYUMsbUJBQVUsQ0FBQ0YsaUJBQWlCLENBQUNIO1FBRWhEUCxZQUFZYSxJQUFJLENBQUNGO1FBRWpCVixhQUFhYSxZQUFZLENBQUNOO1FBRTFCTixrQ0FBa0MsSUFBSTtJQUN4QyxDQUFDO0lBRURBLGtDQUNFRCxhQUFhYyxRQUFRLENBQUNoQixrQkFDcEJFLGFBQWFlLElBQUksQ0FBQ2pCLGVBQWU7SUFFckMsT0FBT0c7QUFDVCJ9