"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyAntecedent;
    }
});
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../step/proof"));
var _antecedent = /*#__PURE__*/ _interopRequireDefault(require("../antecedent"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/unqualified"));
var _query = require("../utilities/query");
var _string = require("../utilities/string");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/antecedent/unqualifiedStatement!/statement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/");
function verifyAntecedent(antecedentNode, antecedents, proofContext) {
    var antecedentVerified;
    proofContext.begin(antecedentNode);
    var antecedentString = (0, _string.nodeAsString)(antecedentNode);
    proofContext.debug("Verifying the ".concat(antecedentString, " antecedent..."));
    var statementNode = statementNodeQuery(antecedentNode);
    if (statementNode !== null) {
        var proofStep = _proof.default.fromStatementNode(statementNode), antecedent = _antecedent.default.fromStatementNode(statementNode);
        antecedents.push(antecedent);
        proofContext.addProofStep(proofStep);
        antecedentVerified = true;
    }
    antecedentVerified ? proofContext.complete(antecedentNode) : proofContext.halt(antecedentNode);
    return antecedentVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvYW50ZWNlZGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFByb29mU3RlcCBmcm9tIFwiLi4vc3RlcC9wcm9vZlwiO1xuaW1wb3J0IEFudGVjZWRlbnQgZnJvbSBcIi4uL2FudGVjZWRlbnRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L3N0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5pbXBvcnQgeyBub2RlQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuXG5jb25zdCBzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvYW50ZWNlZGVudC91bnF1YWxpZmllZFN0YXRlbWVudCEvc3RhdGVtZW50IVwiKSxcbiAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL1wiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5QW50ZWNlZGVudChhbnRlY2VkZW50Tm9kZSwgYW50ZWNlZGVudHMsIHByb29mQ29udGV4dCkge1xuICBsZXQgYW50ZWNlZGVudFZlcmlmaWVkO1xuXG4gIHByb29mQ29udGV4dC5iZWdpbihhbnRlY2VkZW50Tm9kZSk7XG5cbiAgY29uc3QgYW50ZWNlZGVudFN0cmluZyA9IG5vZGVBc1N0cmluZyhhbnRlY2VkZW50Tm9kZSk7XG5cbiAgcHJvb2ZDb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICR7YW50ZWNlZGVudFN0cmluZ30gYW50ZWNlZGVudC4uLmApO1xuXG4gIGNvbnN0IHN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlUXVlcnkoYW50ZWNlZGVudE5vZGUpO1xuXG4gIGlmIChzdGF0ZW1lbnROb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcHJvb2ZTdGVwID0gUHJvb2ZTdGVwLmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgIGFudGVjZWRlbnQgPSBBbnRlY2VkZW50LmZyb21TdGF0ZW1lbnROb2RlKHN0YXRlbWVudE5vZGUpO1xuXG4gICAgYW50ZWNlZGVudHMucHVzaChhbnRlY2VkZW50KTtcblxuICAgIHByb29mQ29udGV4dC5hZGRQcm9vZlN0ZXAocHJvb2ZTdGVwKTtcblxuICAgIGFudGVjZWRlbnRWZXJpZmllZCA9IHRydWU7XG4gIH1cblxuICBhbnRlY2VkZW50VmVyaWZpZWQgP1xuICAgIHByb29mQ29udGV4dC5jb21wbGV0ZShhbnRlY2VkZW50Tm9kZSkgOlxuICAgICAgcHJvb2ZDb250ZXh0LmhhbHQoYW50ZWNlZGVudE5vZGUpO1xuXG4gIHJldHVybiBhbnRlY2VkZW50VmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5QW50ZWNlZGVudCIsInN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5IiwiYW50ZWNlZGVudE5vZGUiLCJhbnRlY2VkZW50cyIsInByb29mQ29udGV4dCIsImFudGVjZWRlbnRWZXJpZmllZCIsImJlZ2luIiwiYW50ZWNlZGVudFN0cmluZyIsIm5vZGVBc1N0cmluZyIsImRlYnVnIiwic3RhdGVtZW50Tm9kZSIsInByb29mU3RlcCIsIlByb29mU3RlcCIsImZyb21TdGF0ZW1lbnROb2RlIiwiYW50ZWNlZGVudCIsIkFudGVjZWRlbnQiLCJwdXNoIiwiYWRkUHJvb2ZTdGVwIiwiY29tcGxldGUiLCJoYWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFZQTs7O2VBQXdCQTs7OzBEQVZGOytEQUNDO2dFQUNnQjtxQkFFYjtzQkFDRzs7Ozs7O0FBRTdCLElBQU1DLHFCQUFxQkMsSUFBQUEsZ0JBQVMsRUFBQyxpREFDL0JDLGdDQUFnQ0QsSUFBQUEsZ0JBQVMsRUFBQztBQUVqQyxTQUFTRixpQkFBaUJJLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUU7SUFDbEYsSUFBSUM7SUFFSkQsYUFBYUUsS0FBSyxDQUFDSjtJQUVuQixJQUFNSyxtQkFBbUJDLElBQUFBLG9CQUFZLEVBQUNOO0lBRXRDRSxhQUFhSyxLQUFLLENBQUMsQUFBQyxpQkFBaUMsT0FBakJGLGtCQUFpQjtJQUVyRCxJQUFNRyxnQkFBZ0JYLG1CQUFtQkc7SUFFekMsSUFBSVEsa0JBQWtCLElBQUksRUFBRTtRQUMxQixJQUFNQyxZQUFZQyxjQUFTLENBQUNDLGlCQUFpQixDQUFDSCxnQkFDeENJLGFBQWFDLG1CQUFVLENBQUNGLGlCQUFpQixDQUFDSDtRQUVoRFAsWUFBWWEsSUFBSSxDQUFDRjtRQUVqQlYsYUFBYWEsWUFBWSxDQUFDTjtRQUUxQk4scUJBQXFCLElBQUk7SUFDM0IsQ0FBQztJQUVEQSxxQkFDRUQsYUFBYWMsUUFBUSxDQUFDaEIsa0JBQ3BCRSxhQUFhZSxJQUFJLENBQUNqQixlQUFlO0lBRXJDLE9BQU9HO0FBQ1QifQ==