"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConditionalIndicative;
    }
});
var _consequent = /*#__PURE__*/ _interopRequireDefault(require("../verify/consequent"));
var _antecedent = /*#__PURE__*/ _interopRequireDefault(require("../verify/antecedent"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var consequentNodeQuery = (0, _query.nodeQuery)("/conditionalIndicative/consequent!"), antecedentsNodeQuery = (0, _query.nodesQuery)("/conditionalIndicative/antecedent");
function verifyConditionalIndicative(conditionalIndicativeNode, antecedents, consequents, proofContext) {
    var conditionalIndicativeVerified = false;
    proofContext.begin(conditionalIndicativeNode);
    var consequentNode = consequentNodeQuery(conditionalIndicativeNode), antecedentNodes = antecedentsNodeQuery(conditionalIndicativeNode), antecedentsVerified = antecedentNodes.every(function(antecedentNode) {
        var antecedentVerified = (0, _antecedent.default)(antecedentNode, antecedents, proofContext);
        if (antecedentVerified) {
            return true;
        }
    });
    if (antecedentsVerified) {
        var consequentVerified = (0, _consequent.default)(consequentNode, consequents, proofContext);
        conditionalIndicativeVerified = consequentVerified; ///
    }
    conditionalIndicativeVerified ? proofContext.complete(conditionalIndicativeNode) : proofContext.halt(conditionalIndicativeNode);
    return conditionalIndicativeVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uZGl0aW9uYWxJbmRpY2F0aXZlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgdmVyaWZ5Q29uc2VxdWVudCBmcm9tIFwiLi4vdmVyaWZ5L2NvbnNlcXVlbnRcIjtcbmltcG9ydCB2ZXJpZnlBbnRlY2VkZW50IGZyb20gXCIuLi92ZXJpZnkvYW50ZWNlZGVudFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGNvbnNlcXVlbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvY29uZGl0aW9uYWxJbmRpY2F0aXZlL2NvbnNlcXVlbnQhXCIpLFxuICAgICAgYW50ZWNlZGVudHNOb2RlUXVlcnkgPSBub2Rlc1F1ZXJ5KFwiL2NvbmRpdGlvbmFsSW5kaWNhdGl2ZS9hbnRlY2VkZW50XCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlDb25kaXRpb25hbEluZGljYXRpdmUoY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSwgYW50ZWNlZGVudHMsIGNvbnNlcXVlbnRzLCBwcm9vZkNvbnRleHQpIHtcbiAgbGV0IGNvbmRpdGlvbmFsSW5kaWNhdGl2ZVZlcmlmaWVkID0gZmFsc2U7XG5cbiAgcHJvb2ZDb250ZXh0LmJlZ2luKGNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUpO1xuXG4gIGNvbnN0IGNvbnNlcXVlbnROb2RlID0gY29uc2VxdWVudE5vZGVRdWVyeShjb25kaXRpb25hbEluZGljYXRpdmVOb2RlKSxcbiAgICAgICAgYW50ZWNlZGVudE5vZGVzID0gYW50ZWNlZGVudHNOb2RlUXVlcnkoY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSksXG4gICAgICAgIGFudGVjZWRlbnRzVmVyaWZpZWQgPSBhbnRlY2VkZW50Tm9kZXMuZXZlcnkoKGFudGVjZWRlbnROb2RlKSA9PiB7XG4gICAgICAgICAgY29uc3QgYW50ZWNlZGVudFZlcmlmaWVkID0gdmVyaWZ5QW50ZWNlZGVudChhbnRlY2VkZW50Tm9kZSwgYW50ZWNlZGVudHMsIHByb29mQ29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoYW50ZWNlZGVudFZlcmlmaWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gIGlmIChhbnRlY2VkZW50c1ZlcmlmaWVkKSB7XG4gICAgY29uc3QgY29uc2VxdWVudFZlcmlmaWVkID0gdmVyaWZ5Q29uc2VxdWVudChjb25zZXF1ZW50Tm9kZSwgY29uc2VxdWVudHMsIHByb29mQ29udGV4dCk7XG5cbiAgICBjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCA9IGNvbnNlcXVlbnRWZXJpZmllZDsgIC8vL1xuICB9XG5cbiAgY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQgP1xuICAgIHByb29mQ29udGV4dC5jb21wbGV0ZShjb25kaXRpb25hbEluZGljYXRpdmVOb2RlKSA6XG4gICAgICBwcm9vZkNvbnRleHQuaGFsdChjb25kaXRpb25hbEluZGljYXRpdmVOb2RlKTtcblxuICByZXR1cm4gY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5Q29uZGl0aW9uYWxJbmRpY2F0aXZlIiwiY29uc2VxdWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImFudGVjZWRlbnRzTm9kZVF1ZXJ5Iiwibm9kZXNRdWVyeSIsImNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUiLCJhbnRlY2VkZW50cyIsImNvbnNlcXVlbnRzIiwicHJvb2ZDb250ZXh0IiwiY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQiLCJiZWdpbiIsImNvbnNlcXVlbnROb2RlIiwiYW50ZWNlZGVudE5vZGVzIiwiYW50ZWNlZGVudHNWZXJpZmllZCIsImV2ZXJ5IiwiYW50ZWNlZGVudE5vZGUiLCJhbnRlY2VkZW50VmVyaWZpZWQiLCJ2ZXJpZnlBbnRlY2VkZW50IiwiY29uc2VxdWVudFZlcmlmaWVkIiwidmVyaWZ5Q29uc2VxdWVudCIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVUE7OztlQUF3QkE7OzsrREFSSzsrREFDQTtxQkFFUzs7Ozs7O0FBRXRDLElBQU1DLHNCQUFzQkMsSUFBQUEsZ0JBQVMsRUFBQyx1Q0FDaENDLHVCQUF1QkMsSUFBQUEsaUJBQVUsRUFBQztBQUV6QixTQUFTSiw0QkFBNEJLLHlCQUF5QixFQUFFQyxXQUFXLEVBQUVDLFdBQVcsRUFBRUMsWUFBWSxFQUFFO0lBQ3JILElBQUlDLGdDQUFnQyxLQUFLO0lBRXpDRCxhQUFhRSxLQUFLLENBQUNMO0lBRW5CLElBQU1NLGlCQUFpQlYsb0JBQW9CSSw0QkFDckNPLGtCQUFrQlQscUJBQXFCRSw0QkFDdkNRLHNCQUFzQkQsZ0JBQWdCRSxLQUFLLENBQUMsU0FBQ0MsZ0JBQW1CO1FBQzlELElBQU1DLHFCQUFxQkMsSUFBQUEsbUJBQWdCLEVBQUNGLGdCQUFnQlQsYUFBYUU7UUFFekUsSUFBSVEsb0JBQW9CO1lBQ3RCLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSDtJQUVOLElBQUlILHFCQUFxQjtRQUN2QixJQUFNSyxxQkFBcUJDLElBQUFBLG1CQUFnQixFQUFDUixnQkFBZ0JKLGFBQWFDO1FBRXpFQyxnQ0FBZ0NTLG9CQUFxQixHQUFHO0lBQzFELENBQUM7SUFFRFQsZ0NBQ0VELGFBQWFZLFFBQVEsQ0FBQ2YsNkJBQ3BCRyxhQUFhYSxJQUFJLENBQUNoQiwwQkFBMEI7SUFFaEQsT0FBT0k7QUFDVCJ9