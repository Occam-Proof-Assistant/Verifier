"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaConsequent;
    }
});
var _metaConsequent = /*#__PURE__*/ _interop_require_default(require("../metaConsequent"));
var _unqualified = /*#__PURE__*/ _interop_require_default(require("./metastatement/unqualified"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaConsequent/unqualifiedMetastatement!");
function verifyMetaConsequent(metaConsequentNode, metaConsequents, substitutions, localMetaContext) {
    var metaConsequentVerified = false;
    var metaConsequentString = localMetaContext.nodeAsString(metaConsequentNode);
    localMetaContext.trace("Verifying the '".concat(metaConsequentString, "' meta-consequent..."), metaConsequentNode);
    var derived = false, assignments = [], unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(metaConsequentNode), unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, assignments, derived, localMetaContext);
    if (unqualifiedMetastatementVerified) {
        metaConsequentVerified = true;
    }
    if (metaConsequentVerified) {
        var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaConsequent = _metaConsequent.default.fromMetastatementNode(metastatementNode);
        metaConsequents.push(metaConsequent);
        localMetaContext.debug("...verified the '".concat(metaConsequentString, "' meta-consequent."), metaConsequentNode);
    }
    return metaConsequentVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YUNvbnNlcXVlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBNZXRhQ29uc2VxdWVudCBmcm9tIFwiLi4vbWV0YUNvbnNlcXVlbnRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQgZnJvbSBcIi4vbWV0YXN0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50L21ldGFzdGF0ZW1lbnQhXCIpLFxuICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL21ldGFDb25zZXF1ZW50L3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeU1ldGFDb25zZXF1ZW50KG1ldGFDb25zZXF1ZW50Tm9kZSwgbWV0YUNvbnNlcXVlbnRzLCBzdWJzdGl0dXRpb25zLCBsb2NhbE1ldGFDb250ZXh0KSB7XG4gIGxldCBtZXRhQ29uc2VxdWVudFZlcmlmaWVkID0gZmFsc2U7XG5cbiAgY29uc3QgbWV0YUNvbnNlcXVlbnRTdHJpbmcgPSBsb2NhbE1ldGFDb250ZXh0Lm5vZGVBc1N0cmluZyhtZXRhQ29uc2VxdWVudE5vZGUpO1xuXG4gIGxvY2FsTWV0YUNvbnRleHQudHJhY2UoYFZlcmlmeWluZyB0aGUgJyR7bWV0YUNvbnNlcXVlbnRTdHJpbmd9JyBtZXRhLWNvbnNlcXVlbnQuLi5gLCBtZXRhQ29uc2VxdWVudE5vZGUpO1xuXG4gIGNvbnN0IGRlcml2ZWQgPSBmYWxzZSxcbiAgICAgICAgYXNzaWdubWVudHMgPSBbXSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeShtZXRhQ29uc2VxdWVudE5vZGUpLFxuICAgICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCA9IHZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlLCBhc3NpZ25tZW50cywgZGVyaXZlZCwgbG9jYWxNZXRhQ29udGV4dCk7XG5cbiAgaWYgKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgbWV0YUNvbnNlcXVlbnRWZXJpZmllZCA9IHRydWU7XG4gIH1cblxuICBpZiAobWV0YUNvbnNlcXVlbnRWZXJpZmllZCkge1xuICAgIGNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlID0gbWV0YXN0YXRlbWVudE5vZGVRdWVyeSh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICBtZXRhQ29uc2VxdWVudCA9IE1ldGFDb25zZXF1ZW50LmZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZSk7XG5cbiAgICBtZXRhQ29uc2VxdWVudHMucHVzaChtZXRhQ29uc2VxdWVudCk7XG5cbiAgICBsb2NhbE1ldGFDb250ZXh0LmRlYnVnKGAuLi52ZXJpZmllZCB0aGUgJyR7bWV0YUNvbnNlcXVlbnRTdHJpbmd9JyBtZXRhLWNvbnNlcXVlbnQuYCwgbWV0YUNvbnNlcXVlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBtZXRhQ29uc2VxdWVudFZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeU1ldGFDb25zZXF1ZW50IiwibWV0YXN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeSIsIm1ldGFDb25zZXF1ZW50Tm9kZSIsIm1ldGFDb25zZXF1ZW50cyIsInN1YnN0aXR1dGlvbnMiLCJsb2NhbE1ldGFDb250ZXh0IiwibWV0YUNvbnNlcXVlbnRWZXJpZmllZCIsIm1ldGFDb25zZXF1ZW50U3RyaW5nIiwibm9kZUFzU3RyaW5nIiwidHJhY2UiLCJkZXJpdmVkIiwiYXNzaWdubWVudHMiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlIiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQiLCJtZXRhc3RhdGVtZW50Tm9kZSIsIm1ldGFDb25zZXF1ZW50IiwiTWV0YUNvbnNlcXVlbnQiLCJmcm9tTWV0YXN0YXRlbWVudE5vZGUiLCJwdXNoIiwiZGVidWciXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVVBOzs7ZUFBd0JBOzs7cUVBUkc7a0VBQ2dCO3FCQUVqQjs7Ozs7O0FBRTFCLElBQU1DLHlCQUF5QkMsSUFBQUEsZ0JBQVMsRUFBQyw2Q0FDbkNDLG9DQUFvQ0QsSUFBQUEsZ0JBQVMsRUFBQztBQUVyQyxTQUFTRixxQkFBcUJJLGtCQUFrQixFQUFFQyxlQUFlLEVBQUVDLGFBQWEsRUFBRUMsZ0JBQWdCO0lBQy9HLElBQUlDLHlCQUF5QjtJQUU3QixJQUFNQyx1QkFBdUJGLGlCQUFpQkcsWUFBWSxDQUFDTjtJQUUzREcsaUJBQWlCSSxLQUFLLENBQUMsQUFBQyxrQkFBc0MsT0FBckJGLHNCQUFxQix5QkFBdUJMO0lBRXJGLElBQU1RLFVBQVUsT0FDVkMsY0FBYyxFQUFFLEVBQ2hCQywrQkFBK0JYLGtDQUFrQ0MscUJBQ2pFVyxtQ0FBbUNDLElBQUFBLG9CQUE4QixFQUFDRiw4QkFBOEJELGFBQWFELFNBQVNMO0lBRTVILElBQUlRLGtDQUFrQztRQUNwQ1AseUJBQXlCO0lBQzNCO0lBRUEsSUFBSUEsd0JBQXdCO1FBQzFCLElBQU1TLG9CQUFvQmhCLHVCQUF1QmEsK0JBQzNDSSxpQkFBaUJDLHVCQUFjLENBQUNDLHFCQUFxQixDQUFDSDtRQUU1RFosZ0JBQWdCZ0IsSUFBSSxDQUFDSDtRQUVyQlgsaUJBQWlCZSxLQUFLLENBQUMsQUFBQyxvQkFBd0MsT0FBckJiLHNCQUFxQix1QkFBcUJMO0lBQ3ZGO0lBRUEsT0FBT0k7QUFDVCJ9