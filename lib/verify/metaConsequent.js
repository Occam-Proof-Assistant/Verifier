"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaConsequent;
    }
});
var _metaConsequent = /*#__PURE__*/ _interop_require_default(require("../metaConsequent"));
var _unqualified = /*#__PURE__*/ _interop_require_default(require("./statement/unqualified"));
var _unqualified1 = /*#__PURE__*/ _interop_require_default(require("./metastatement/unqualified"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/metaConsequent/unqualifiedStatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaConsequent/unqualifiedMetastatement!");
function verifyMetaConsequent(metaConsequentNode, metaConsequents, substitutions, localContext) {
    var metaConsequentVerified = false;
    var metaConsequentString = localContext.nodeAsString(metaConsequentNode);
    localContext.trace("Verifying the '".concat(metaConsequentString, "' meta-consequent..."), metaConsequentNode);
    var unqualifiedStatementNode = unqualifiedStatementNodeQuery(metaConsequentNode), unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(metaConsequentNode);
    if (unqualifiedStatementNode !== null) {
        var derived = false, assignments = [], unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, assignments, derived, localContext);
        metaConsequentVerified = unqualifiedStatementVerified; ///
    }
    if (unqualifiedMetastatementNode !== null) {
        var derived1 = false, assignments1 = [], unqualifiedMetastatementVerified = (0, _unqualified1.default)(unqualifiedMetastatementNode, assignments1, derived1, localContext);
        metaConsequentVerified = unqualifiedMetastatementVerified; ///
    }
    if (metaConsequentVerified) {
        var metaConsequent;
        if (unqualifiedStatementNode !== null) {
            var statementNode = statementNodeQuery(unqualifiedStatementNode);
            metaConsequent = _metaConsequent.default.fromStatementNode(statementNode);
        }
        if (unqualifiedMetastatementNode !== null) {
            var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode);
            metaConsequent = _metaConsequent.default.fromMetastatementNode(metastatementNode);
        }
        metaConsequents.push(metaConsequent);
        localContext.debug("...verified the '".concat(metaConsequentString, "' meta-consequent."), metaConsequentNode);
    }
    return metaConsequentVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YUNvbnNlcXVlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBNZXRhQ29uc2VxdWVudCBmcm9tIFwiLi4vbWV0YUNvbnNlcXVlbnRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi9zdGF0ZW1lbnQvdW5xdWFsaWZpZWRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQgZnJvbSBcIi4vbWV0YXN0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZFN0YXRlbWVudC9zdGF0ZW1lbnQhXCIpLFxuICAgICAgbWV0YXN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQvbWV0YXN0YXRlbWVudCFcIiksXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9tZXRhQ29uc2VxdWVudC91bnF1YWxpZmllZFN0YXRlbWVudCFcIiksXG4gICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvbWV0YUNvbnNlcXVlbnQvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5TWV0YUNvbnNlcXVlbnQobWV0YUNvbnNlcXVlbnROb2RlLCBtZXRhQ29uc2VxdWVudHMsIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dCkge1xuICBsZXQgbWV0YUNvbnNlcXVlbnRWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGNvbnN0IG1ldGFDb25zZXF1ZW50U3RyaW5nID0gbG9jYWxDb250ZXh0Lm5vZGVBc1N0cmluZyhtZXRhQ29uc2VxdWVudE5vZGUpO1xuXG4gIGxvY2FsQ29udGV4dC50cmFjZShgVmVyaWZ5aW5nIHRoZSAnJHttZXRhQ29uc2VxdWVudFN0cmluZ30nIG1ldGEtY29uc2VxdWVudC4uLmAsIG1ldGFDb25zZXF1ZW50Tm9kZSk7XG5cbiAgY29uc3QgdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlID0gdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkobWV0YUNvbnNlcXVlbnROb2RlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeShtZXRhQ29uc2VxdWVudE5vZGUpO1xuXG4gIGlmICh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBkZXJpdmVkID0gZmFsc2UsXG4gICAgICAgICAgYXNzaWdubWVudHMgPSBbXSxcbiAgICAgICAgICB1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkID0gdmVyaWZ5VW5xdWFsaWZpZWRTdGF0ZW1lbnQodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlLCBhc3NpZ25tZW50cywgZGVyaXZlZCwgbG9jYWxDb250ZXh0KTtcblxuICAgIG1ldGFDb25zZXF1ZW50VmVyaWZpZWQgPSB1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkOyAvLy9cbiAgfVxuXG4gIGlmICh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgZGVyaXZlZCA9IGZhbHNlLFxuICAgICAgICAgIGFzc2lnbm1lbnRzID0gW10sXG4gICAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSwgYXNzaWdubWVudHMsIGRlcml2ZWQsIGxvY2FsQ29udGV4dCk7XG5cbiAgICBtZXRhQ29uc2VxdWVudFZlcmlmaWVkID0gdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQ7IC8vL1xuICB9XG5cbiAgaWYgKG1ldGFDb25zZXF1ZW50VmVyaWZpZWQpIHtcbiAgICBsZXQgbWV0YUNvbnNlcXVlbnQ7XG5cbiAgICBpZiAodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSk7XG5cbiAgICAgIG1ldGFDb25zZXF1ZW50ID0gTWV0YUNvbnNlcXVlbnQuZnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlID0gbWV0YXN0YXRlbWVudE5vZGVRdWVyeSh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgbWV0YUNvbnNlcXVlbnQgPSBNZXRhQ29uc2VxdWVudC5mcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGUpO1xuICAgIH1cblxuICAgIG1ldGFDb25zZXF1ZW50cy5wdXNoKG1ldGFDb25zZXF1ZW50KTtcblxuICAgIGxvY2FsQ29udGV4dC5kZWJ1ZyhgLi4udmVyaWZpZWQgdGhlICcke21ldGFDb25zZXF1ZW50U3RyaW5nfScgbWV0YS1jb25zZXF1ZW50LmAsIG1ldGFDb25zZXF1ZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbWV0YUNvbnNlcXVlbnRWZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlNZXRhQ29uc2VxdWVudCIsInN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsIm1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeSIsIm1ldGFDb25zZXF1ZW50Tm9kZSIsIm1ldGFDb25zZXF1ZW50cyIsInN1YnN0aXR1dGlvbnMiLCJsb2NhbENvbnRleHQiLCJtZXRhQ29uc2VxdWVudFZlcmlmaWVkIiwibWV0YUNvbnNlcXVlbnRTdHJpbmciLCJub2RlQXNTdHJpbmciLCJ0cmFjZSIsInVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUiLCJkZXJpdmVkIiwiYXNzaWdubWVudHMiLCJ1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRTdGF0ZW1lbnQiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCIsIm1ldGFDb25zZXF1ZW50Iiwic3RhdGVtZW50Tm9kZSIsIk1ldGFDb25zZXF1ZW50IiwiZnJvbVN0YXRlbWVudE5vZGUiLCJtZXRhc3RhdGVtZW50Tm9kZSIsImZyb21NZXRhc3RhdGVtZW50Tm9kZSIsInB1c2giLCJkZWJ1ZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBYUE7OztlQUF3QkE7OztxRUFYRztrRUFDWTttRUFDSTtxQkFFakI7Ozs7OztBQUUxQixJQUFNQyxxQkFBcUJDLElBQUFBLGdCQUFTLEVBQUMscUNBQy9CQyx5QkFBeUJELElBQUFBLGdCQUFTLEVBQUMsNkNBQ25DRSxnQ0FBZ0NGLElBQUFBLGdCQUFTLEVBQUMsMENBQzFDRyxvQ0FBb0NILElBQUFBLGdCQUFTLEVBQUM7QUFFckMsU0FBU0YscUJBQXFCTSxrQkFBa0IsRUFBRUMsZUFBZSxFQUFFQyxhQUFhLEVBQUVDLFlBQVk7SUFDM0csSUFBSUMseUJBQXlCO0lBRTdCLElBQU1DLHVCQUF1QkYsYUFBYUcsWUFBWSxDQUFDTjtJQUV2REcsYUFBYUksS0FBSyxDQUFDLEFBQUMsa0JBQXNDLE9BQXJCRixzQkFBcUIseUJBQXVCTDtJQUVqRixJQUFNUSwyQkFBMkJWLDhCQUE4QkUscUJBQ3pEUywrQkFBK0JWLGtDQUFrQ0M7SUFFdkUsSUFBSVEsNkJBQTZCLE1BQU07UUFDckMsSUFBTUUsVUFBVSxPQUNWQyxjQUFjLEVBQUUsRUFDaEJDLCtCQUErQkMsSUFBQUEsb0JBQTBCLEVBQUNMLDBCQUEwQkcsYUFBYUQsU0FBU1A7UUFFaEhDLHlCQUF5QlEsOEJBQThCLEdBQUc7SUFDNUQ7SUFFQSxJQUFJSCxpQ0FBaUMsTUFBTTtRQUN6QyxJQUFNQyxXQUFVLE9BQ1ZDLGVBQWMsRUFBRSxFQUNoQkcsbUNBQW1DQyxJQUFBQSxxQkFBOEIsRUFBQ04sOEJBQThCRSxjQUFhRCxVQUFTUDtRQUU1SEMseUJBQXlCVSxrQ0FBa0MsR0FBRztJQUNoRTtJQUVBLElBQUlWLHdCQUF3QjtRQUMxQixJQUFJWTtRQUVKLElBQUlSLDZCQUE2QixNQUFNO1lBQ3JDLElBQU1TLGdCQUFnQnRCLG1CQUFtQmE7WUFFekNRLGlCQUFpQkUsdUJBQWMsQ0FBQ0MsaUJBQWlCLENBQUNGO1FBQ3BEO1FBRUEsSUFBSVIsaUNBQWlDLE1BQU07WUFDekMsSUFBTVcsb0JBQW9CdkIsdUJBQXVCWTtZQUVqRE8saUJBQWlCRSx1QkFBYyxDQUFDRyxxQkFBcUIsQ0FBQ0Q7UUFDeEQ7UUFFQW5CLGdCQUFnQnFCLElBQUksQ0FBQ047UUFFckJiLGFBQWFvQixLQUFLLENBQUMsQUFBQyxvQkFBd0MsT0FBckJsQixzQkFBcUIsdUJBQXFCTDtJQUNuRjtJQUVBLE9BQU9JO0FBQ1QifQ==