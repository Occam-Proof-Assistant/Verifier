"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaConsequent;
    }
});
var _metaConsequent = /*#__PURE__*/ _interop_require_default(require("../metaConsequent"));
var _unqualified = /*#__PURE__*/ _interop_require_default(require("./metastatement/unqualified"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaConsequent/unqualifiedMetastatement!");
function verifyMetaConsequent(metaConsequentNode, metaConsequents, localContext) {
    var metaConsequentVerified = false;
    var metaConsequentString = localContext.nodeAsString(metaConsequentNode);
    localContext.trace("Verifying the '".concat(metaConsequentString, "' meta-consequent..."), metaConsequentNode);
    var derived = false, unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(metaConsequentNode), unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, derived, localContext);
    if (unqualifiedMetastatementVerified) {
        metaConsequentVerified = true;
    }
    if (metaConsequentVerified) {
        var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaConsequent = _metaConsequent.default.fromMetastatementNode(metastatementNode);
        metaConsequents.push(metaConsequent);
        localContext.debug("...verified the '".concat(metaConsequentString, "' meta-consequent."), metaConsequentNode);
    }
    return metaConsequentVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YUNvbnNlcXVlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBNZXRhQ29uc2VxdWVudCBmcm9tIFwiLi4vbWV0YUNvbnNlcXVlbnRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQgZnJvbSBcIi4vbWV0YXN0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IG1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50L21ldGFzdGF0ZW1lbnQhXCIpLFxuICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL21ldGFDb25zZXF1ZW50L3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeU1ldGFDb25zZXF1ZW50KG1ldGFDb25zZXF1ZW50Tm9kZSwgbWV0YUNvbnNlcXVlbnRzLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IG1ldGFDb25zZXF1ZW50VmVyaWZpZWQgPSBmYWxzZTtcblxuICBjb25zdCBtZXRhQ29uc2VxdWVudFN0cmluZyA9IGxvY2FsQ29udGV4dC5ub2RlQXNTdHJpbmcobWV0YUNvbnNlcXVlbnROb2RlKTtcblxuICBsb2NhbENvbnRleHQudHJhY2UoYFZlcmlmeWluZyB0aGUgJyR7bWV0YUNvbnNlcXVlbnRTdHJpbmd9JyBtZXRhLWNvbnNlcXVlbnQuLi5gLCBtZXRhQ29uc2VxdWVudE5vZGUpO1xuXG4gIGNvbnN0IGRlcml2ZWQgPSBmYWxzZSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeShtZXRhQ29uc2VxdWVudE5vZGUpLFxuICAgICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCA9IHZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlLCBkZXJpdmVkLCBsb2NhbENvbnRleHQpO1xuXG4gIGlmICh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgIG1ldGFDb25zZXF1ZW50VmVyaWZpZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG1ldGFDb25zZXF1ZW50VmVyaWZpZWQpIHtcbiAgICBjb25zdCBtZXRhc3RhdGVtZW50Tm9kZSA9IG1ldGFzdGF0ZW1lbnROb2RlUXVlcnkodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgbWV0YUNvbnNlcXVlbnQgPSBNZXRhQ29uc2VxdWVudC5mcm9tTWV0YXN0YXRlbWVudE5vZGUobWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgbWV0YUNvbnNlcXVlbnRzLnB1c2gobWV0YUNvbnNlcXVlbnQpO1xuXG4gICAgbG9jYWxDb250ZXh0LmRlYnVnKGAuLi52ZXJpZmllZCB0aGUgJyR7bWV0YUNvbnNlcXVlbnRTdHJpbmd9JyBtZXRhLWNvbnNlcXVlbnQuYCwgbWV0YUNvbnNlcXVlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBtZXRhQ29uc2VxdWVudFZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeU1ldGFDb25zZXF1ZW50IiwibWV0YXN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeSIsIm1ldGFDb25zZXF1ZW50Tm9kZSIsIm1ldGFDb25zZXF1ZW50cyIsImxvY2FsQ29udGV4dCIsIm1ldGFDb25zZXF1ZW50VmVyaWZpZWQiLCJtZXRhQ29uc2VxdWVudFN0cmluZyIsIm5vZGVBc1N0cmluZyIsInRyYWNlIiwiZGVyaXZlZCIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCIsIm1ldGFzdGF0ZW1lbnROb2RlIiwibWV0YUNvbnNlcXVlbnQiLCJNZXRhQ29uc2VxdWVudCIsImZyb21NZXRhc3RhdGVtZW50Tm9kZSIsInB1c2giLCJkZWJ1ZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVUE7OztlQUF3QkE7OztxRUFSRztrRUFDZ0I7cUJBRWpCOzs7Ozs7QUFFMUIsSUFBTUMseUJBQXlCQyxJQUFBQSxnQkFBUyxFQUFDLDZDQUNuQ0Msb0NBQW9DRCxJQUFBQSxnQkFBUyxFQUFDO0FBRXJDLFNBQVNGLHFCQUFxQkksa0JBQWtCLEVBQUVDLGVBQWUsRUFBRUMsWUFBWTtJQUM1RixJQUFJQyx5QkFBeUI7SUFFN0IsSUFBTUMsdUJBQXVCRixhQUFhRyxZQUFZLENBQUNMO0lBRXZERSxhQUFhSSxLQUFLLENBQUMsQUFBQyxrQkFBc0MsT0FBckJGLHNCQUFxQix5QkFBdUJKO0lBRWpGLElBQU1PLFVBQVUsT0FDVkMsK0JBQStCVCxrQ0FBa0NDLHFCQUNqRVMsbUNBQW1DQyxJQUFBQSxvQkFBOEIsRUFBQ0YsOEJBQThCRCxTQUFTTDtJQUUvRyxJQUFJTyxrQ0FBa0M7UUFDcENOLHlCQUF5QjtJQUMzQjtJQUVBLElBQUlBLHdCQUF3QjtRQUMxQixJQUFNUSxvQkFBb0JkLHVCQUF1QlcsK0JBQzNDSSxpQkFBaUJDLHVCQUFjLENBQUNDLHFCQUFxQixDQUFDSDtRQUU1RFYsZ0JBQWdCYyxJQUFJLENBQUNIO1FBRXJCVixhQUFhYyxLQUFLLENBQUMsQUFBQyxvQkFBd0MsT0FBckJaLHNCQUFxQix1QkFBcUJKO0lBQ25GO0lBRUEsT0FBT0c7QUFDVCJ9