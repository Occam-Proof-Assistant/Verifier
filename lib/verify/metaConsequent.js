"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaConsequent;
    }
});
var _metaConsequent = /*#__PURE__*/ _interop_require_default(require("../metaConsequent"));
var _unqualified = /*#__PURE__*/ _interop_require_default(require("./statement/unqualified"));
var _unqualified1 = /*#__PURE__*/ _interop_require_default(require("./metastatement/unqualified"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/unqualifiedStatement/statement!"), metastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement/metastatement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/metaConsequent/unqualifiedStatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaConsequent/unqualifiedMetastatement!");
function verifyMetaConsequent(metaConsequentNode, metaConsequents, substitutions, localMetaContext) {
    var metaConsequentVerified = false;
    var metaConsequentString = localMetaContext.nodeAsString(metaConsequentNode);
    localMetaContext.trace("Verifying the '".concat(metaConsequentString, "' meta-consequent..."), metaConsequentNode);
    var unqualifiedStatementNode = unqualifiedStatementNodeQuery(metaConsequentNode), unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(metaConsequentNode);
    if (unqualifiedStatementNode !== null) {
        var derived = false, assignments = [], localContext = localMetaContext, unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, assignments, derived, localContext);
        metaConsequentVerified = unqualifiedStatementVerified; ///
    }
    if (unqualifiedMetastatementNode !== null) {
        var derived1 = false, assignments1 = [], unqualifiedMetastatementVerified = (0, _unqualified1.default)(unqualifiedMetastatementNode, assignments1, derived1, localMetaContext);
        metaConsequentVerified = unqualifiedMetastatementVerified; ///
    }
    if (metaConsequentVerified) {
        var metaConsequent;
        if (unqualifiedStatementNode !== null) {
            var statementNode = statementNodeQuery(unqualifiedStatementNode);
            metaConsequent = _metaConsequent.default.fromStatementNode(statementNode);
        }
        if (unqualifiedMetastatementNode !== null) {
            var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode);
            metaConsequent = _metaConsequent.default.fromMetastatementNode(metastatementNode);
        }
        metaConsequents.push(metaConsequent);
        localMetaContext.debug("...verified the '".concat(metaConsequentString, "' meta-consequent."), metaConsequentNode);
    }
    return metaConsequentVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YUNvbnNlcXVlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBNZXRhQ29uc2VxdWVudCBmcm9tIFwiLi4vbWV0YUNvbnNlcXVlbnRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi9zdGF0ZW1lbnQvdW5xdWFsaWZpZWRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQgZnJvbSBcIi4vbWV0YXN0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZFN0YXRlbWVudC9zdGF0ZW1lbnQhXCIpLFxuICAgICAgbWV0YXN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi91bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQvbWV0YXN0YXRlbWVudCFcIiksXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9tZXRhQ29uc2VxdWVudC91bnF1YWxpZmllZFN0YXRlbWVudCFcIiksXG4gICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvbWV0YUNvbnNlcXVlbnQvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5TWV0YUNvbnNlcXVlbnQobWV0YUNvbnNlcXVlbnROb2RlLCBtZXRhQ29uc2VxdWVudHMsIHN1YnN0aXR1dGlvbnMsIGxvY2FsTWV0YUNvbnRleHQpIHtcbiAgbGV0IG1ldGFDb25zZXF1ZW50VmVyaWZpZWQgPSBmYWxzZTtcblxuICBjb25zdCBtZXRhQ29uc2VxdWVudFN0cmluZyA9IGxvY2FsTWV0YUNvbnRleHQubm9kZUFzU3RyaW5nKG1ldGFDb25zZXF1ZW50Tm9kZSk7XG5cbiAgbG9jYWxNZXRhQ29udGV4dC50cmFjZShgVmVyaWZ5aW5nIHRoZSAnJHttZXRhQ29uc2VxdWVudFN0cmluZ30nIG1ldGEtY29uc2VxdWVudC4uLmAsIG1ldGFDb25zZXF1ZW50Tm9kZSk7XG5cbiAgY29uc3QgdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlID0gdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkobWV0YUNvbnNlcXVlbnROb2RlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeShtZXRhQ29uc2VxdWVudE5vZGUpO1xuXG4gIGlmICh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBkZXJpdmVkID0gZmFsc2UsXG4gICAgICAgICAgYXNzaWdubWVudHMgPSBbXSxcbiAgICAgICAgICBsb2NhbENvbnRleHQgPSBsb2NhbE1ldGFDb250ZXh0LCAgLy8vXG4gICAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCA9IHZlcmlmeVVucXVhbGlmaWVkU3RhdGVtZW50KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSwgYXNzaWdubWVudHMsIGRlcml2ZWQsIGxvY2FsQ29udGV4dCk7XG5cbiAgICBtZXRhQ29uc2VxdWVudFZlcmlmaWVkID0gdW5xdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZDsgLy8vXG4gIH1cblxuICBpZiAodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRlcml2ZWQgPSBmYWxzZSxcbiAgICAgICAgICBhc3NpZ25tZW50cyA9IFtdLFxuICAgICAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkID0gdmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUsIGFzc2lnbm1lbnRzLCBkZXJpdmVkLCBsb2NhbE1ldGFDb250ZXh0KTtcblxuICAgIG1ldGFDb25zZXF1ZW50VmVyaWZpZWQgPSB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZDsgLy8vXG4gIH1cblxuICBpZiAobWV0YUNvbnNlcXVlbnRWZXJpZmllZCkge1xuICAgIGxldCBtZXRhQ29uc2VxdWVudDtcblxuICAgIGlmICh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlUXVlcnkodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlKTtcblxuICAgICAgbWV0YUNvbnNlcXVlbnQgPSBNZXRhQ29uc2VxdWVudC5mcm9tU3RhdGVtZW50Tm9kZShzdGF0ZW1lbnROb2RlKTtcbiAgICB9XG5cbiAgICBpZiAodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgbWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgICBtZXRhQ29uc2VxdWVudCA9IE1ldGFDb25zZXF1ZW50LmZyb21NZXRhc3RhdGVtZW50Tm9kZShtZXRhc3RhdGVtZW50Tm9kZSk7XG4gICAgfVxuXG4gICAgbWV0YUNvbnNlcXVlbnRzLnB1c2gobWV0YUNvbnNlcXVlbnQpO1xuXG4gICAgbG9jYWxNZXRhQ29udGV4dC5kZWJ1ZyhgLi4udmVyaWZpZWQgdGhlICcke21ldGFDb25zZXF1ZW50U3RyaW5nfScgbWV0YS1jb25zZXF1ZW50LmAsIG1ldGFDb25zZXF1ZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbWV0YUNvbnNlcXVlbnRWZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlNZXRhQ29uc2VxdWVudCIsInN0YXRlbWVudE5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsIm1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeSIsIm1ldGFDb25zZXF1ZW50Tm9kZSIsIm1ldGFDb25zZXF1ZW50cyIsInN1YnN0aXR1dGlvbnMiLCJsb2NhbE1ldGFDb250ZXh0IiwibWV0YUNvbnNlcXVlbnRWZXJpZmllZCIsIm1ldGFDb25zZXF1ZW50U3RyaW5nIiwibm9kZUFzU3RyaW5nIiwidHJhY2UiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlIiwiZGVyaXZlZCIsImFzc2lnbm1lbnRzIiwibG9jYWxDb250ZXh0IiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeVVucXVhbGlmaWVkU3RhdGVtZW50IiwidW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQiLCJtZXRhQ29uc2VxdWVudCIsInN0YXRlbWVudE5vZGUiLCJNZXRhQ29uc2VxdWVudCIsImZyb21TdGF0ZW1lbnROb2RlIiwibWV0YXN0YXRlbWVudE5vZGUiLCJmcm9tTWV0YXN0YXRlbWVudE5vZGUiLCJwdXNoIiwiZGVidWciXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWFBOzs7ZUFBd0JBOzs7cUVBWEc7a0VBQ1k7bUVBQ0k7cUJBRWpCOzs7Ozs7QUFFMUIsSUFBTUMscUJBQXFCQyxJQUFBQSxnQkFBUyxFQUFDLHFDQUMvQkMseUJBQXlCRCxJQUFBQSxnQkFBUyxFQUFDLDZDQUNuQ0UsZ0NBQWdDRixJQUFBQSxnQkFBUyxFQUFDLDBDQUMxQ0csb0NBQW9DSCxJQUFBQSxnQkFBUyxFQUFDO0FBRXJDLFNBQVNGLHFCQUFxQk0sa0JBQWtCLEVBQUVDLGVBQWUsRUFBRUMsYUFBYSxFQUFFQyxnQkFBZ0I7SUFDL0csSUFBSUMseUJBQXlCO0lBRTdCLElBQU1DLHVCQUF1QkYsaUJBQWlCRyxZQUFZLENBQUNOO0lBRTNERyxpQkFBaUJJLEtBQUssQ0FBQyxBQUFDLGtCQUFzQyxPQUFyQkYsc0JBQXFCLHlCQUF1Qkw7SUFFckYsSUFBTVEsMkJBQTJCViw4QkFBOEJFLHFCQUN6RFMsK0JBQStCVixrQ0FBa0NDO0lBRXZFLElBQUlRLDZCQUE2QixNQUFNO1FBQ3JDLElBQU1FLFVBQVUsT0FDVkMsY0FBYyxFQUFFLEVBQ2hCQyxlQUFlVCxrQkFDZlUsK0JBQStCQyxJQUFBQSxvQkFBMEIsRUFBQ04sMEJBQTBCRyxhQUFhRCxTQUFTRTtRQUVoSFIseUJBQXlCUyw4QkFBOEIsR0FBRztJQUM1RDtJQUVBLElBQUlKLGlDQUFpQyxNQUFNO1FBQ3pDLElBQU1DLFdBQVUsT0FDVkMsZUFBYyxFQUFFLEVBQ2hCSSxtQ0FBbUNDLElBQUFBLHFCQUE4QixFQUFDUCw4QkFBOEJFLGNBQWFELFVBQVNQO1FBRTVIQyx5QkFBeUJXLGtDQUFrQyxHQUFHO0lBQ2hFO0lBRUEsSUFBSVgsd0JBQXdCO1FBQzFCLElBQUlhO1FBRUosSUFBSVQsNkJBQTZCLE1BQU07WUFDckMsSUFBTVUsZ0JBQWdCdkIsbUJBQW1CYTtZQUV6Q1MsaUJBQWlCRSx1QkFBYyxDQUFDQyxpQkFBaUIsQ0FBQ0Y7UUFDcEQ7UUFFQSxJQUFJVCxpQ0FBaUMsTUFBTTtZQUN6QyxJQUFNWSxvQkFBb0J4Qix1QkFBdUJZO1lBRWpEUSxpQkFBaUJFLHVCQUFjLENBQUNHLHFCQUFxQixDQUFDRDtRQUN4RDtRQUVBcEIsZ0JBQWdCc0IsSUFBSSxDQUFDTjtRQUVyQmQsaUJBQWlCcUIsS0FBSyxDQUFDLEFBQUMsb0JBQXdDLE9BQXJCbkIsc0JBQXFCLHVCQUFxQkw7SUFDdkY7SUFFQSxPQUFPSTtBQUNUIn0=