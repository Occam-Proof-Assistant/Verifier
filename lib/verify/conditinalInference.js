"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConditionalInference;
    }
});
var _premise = /*#__PURE__*/ _interopRequireDefault(require("../verify/premise"));
var _conclusion = /*#__PURE__*/ _interopRequireDefault(require("../verify/conclusion"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var premisesNodeQuery = (0, _query.nodesQuery)("/conditionalInference/premise"), conclusionNodeQuery = (0, _query.nodeQuery)("/conditionalInference/conclusion!");
function verifyConditionalInference(conditionalInferenceNode, premises, conclusions, metaproofContext) {
    var conditionalInferenceVerified = false;
    metaproofContext.begin(conditionalInferenceNode);
    var conclusionNode = conclusionNodeQuery(conditionalInferenceNode), premiseNodes = premisesNodeQuery(conditionalInferenceNode), premisesVerified = premiseNodes.every(function(premiseNode) {
        var premiseVerified = (0, _premise.default)(premiseNode, premises, metaproofContext);
        if (premiseVerified) {
            return true;
        }
    });
    if (premisesVerified) {
        var conclusionVerified = (0, _conclusion.default)(conclusionNode, conclusions, metaproofContext);
        conditionalInferenceVerified = conclusionVerified; ///
    }
    conditionalInferenceVerified ? metaproofContext.complete(conditionalInferenceNode) : metaproofContext.halt(conditionalInferenceNode);
    return conditionalInferenceVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uZGl0aW5hbEluZmVyZW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHZlcmlmeVByZW1pc2UgZnJvbSBcIi4uL3ZlcmlmeS9wcmVtaXNlXCI7XG5pbXBvcnQgdmVyaWZ5Q29uY2x1c2lvbiBmcm9tIFwiLi4vdmVyaWZ5L2NvbmNsdXNpb25cIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5LCBub2Rlc1F1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBwcmVtaXNlc05vZGVRdWVyeSA9IG5vZGVzUXVlcnkoXCIvY29uZGl0aW9uYWxJbmZlcmVuY2UvcHJlbWlzZVwiKSxcbiAgICAgIGNvbmNsdXNpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvY29uZGl0aW9uYWxJbmZlcmVuY2UvY29uY2x1c2lvbiFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeUNvbmRpdGlvbmFsSW5mZXJlbmNlKGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSwgcHJlbWlzZXMsIGNvbmNsdXNpb25zLCBtZXRhcHJvb2ZDb250ZXh0KSB7XG4gIGxldCBjb25kaXRpb25hbEluZmVyZW5jZVZlcmlmaWVkID0gZmFsc2U7XG5cbiAgbWV0YXByb29mQ29udGV4dC5iZWdpbihjb25kaXRpb25hbEluZmVyZW5jZU5vZGUpO1xuXG4gIGNvbnN0IGNvbmNsdXNpb25Ob2RlID0gY29uY2x1c2lvbk5vZGVRdWVyeShjb25kaXRpb25hbEluZmVyZW5jZU5vZGUpLFxuICAgICAgICBwcmVtaXNlTm9kZXMgPSBwcmVtaXNlc05vZGVRdWVyeShjb25kaXRpb25hbEluZmVyZW5jZU5vZGUpLFxuICAgICAgICBwcmVtaXNlc1ZlcmlmaWVkID0gcHJlbWlzZU5vZGVzLmV2ZXJ5KChwcmVtaXNlTm9kZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHByZW1pc2VWZXJpZmllZCA9IHZlcmlmeVByZW1pc2UocHJlbWlzZU5vZGUsIHByZW1pc2VzLCBtZXRhcHJvb2ZDb250ZXh0KTtcblxuICAgICAgICAgIGlmIChwcmVtaXNlVmVyaWZpZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgaWYgKHByZW1pc2VzVmVyaWZpZWQpIHtcbiAgICBjb25zdCBjb25jbHVzaW9uVmVyaWZpZWQgPSB2ZXJpZnlDb25jbHVzaW9uKGNvbmNsdXNpb25Ob2RlLCBjb25jbHVzaW9ucywgbWV0YXByb29mQ29udGV4dCk7XG5cbiAgICBjb25kaXRpb25hbEluZmVyZW5jZVZlcmlmaWVkID0gY29uY2x1c2lvblZlcmlmaWVkOyAgLy8vXG4gIH1cblxuICBjb25kaXRpb25hbEluZmVyZW5jZVZlcmlmaWVkID9cbiAgICBtZXRhcHJvb2ZDb250ZXh0LmNvbXBsZXRlKGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSkgOlxuICAgICAgbWV0YXByb29mQ29udGV4dC5oYWx0KGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSk7XG5cbiAgcmV0dXJuIGNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5Q29uZGl0aW9uYWxJbmZlcmVuY2UiLCJwcmVtaXNlc05vZGVRdWVyeSIsIm5vZGVzUXVlcnkiLCJjb25jbHVzaW9uTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlIiwicHJlbWlzZXMiLCJjb25jbHVzaW9ucyIsIm1ldGFwcm9vZkNvbnRleHQiLCJjb25kaXRpb25hbEluZmVyZW5jZVZlcmlmaWVkIiwiYmVnaW4iLCJjb25jbHVzaW9uTm9kZSIsInByZW1pc2VOb2RlcyIsInByZW1pc2VzVmVyaWZpZWQiLCJldmVyeSIsInByZW1pc2VOb2RlIiwicHJlbWlzZVZlcmlmaWVkIiwidmVyaWZ5UHJlbWlzZSIsImNvbmNsdXNpb25WZXJpZmllZCIsInZlcmlmeUNvbmNsdXNpb24iLCJjb21wbGV0ZSIsImhhbHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVVBOzs7ZUFBd0JBOzs7NERBUkU7K0RBQ0c7cUJBRVM7Ozs7OztBQUV0QyxJQUFNQyxvQkFBb0JDLElBQUFBLGlCQUFVLEVBQUMsa0NBQy9CQyxzQkFBc0JDLElBQUFBLGdCQUFTLEVBQUM7QUFFdkIsU0FBU0osMkJBQTJCSyx3QkFBd0IsRUFBRUMsUUFBUSxFQUFFQyxXQUFXLEVBQUVDLGdCQUFnQixFQUFFO0lBQ3BILElBQUlDLCtCQUErQixLQUFLO0lBRXhDRCxpQkFBaUJFLEtBQUssQ0FBQ0w7SUFFdkIsSUFBTU0saUJBQWlCUixvQkFBb0JFLDJCQUNyQ08sZUFBZVgsa0JBQWtCSSwyQkFDakNRLG1CQUFtQkQsYUFBYUUsS0FBSyxDQUFDLFNBQUNDLGFBQWdCO1FBQ3JELElBQU1DLGtCQUFrQkMsSUFBQUEsZ0JBQWEsRUFBQ0YsYUFBYVQsVUFBVUU7UUFFN0QsSUFBSVEsaUJBQWlCO1lBQ25CLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSDtJQUVOLElBQUlILGtCQUFrQjtRQUNwQixJQUFNSyxxQkFBcUJDLElBQUFBLG1CQUFnQixFQUFDUixnQkFBZ0JKLGFBQWFDO1FBRXpFQywrQkFBK0JTLG9CQUFxQixHQUFHO0lBQ3pELENBQUM7SUFFRFQsK0JBQ0VELGlCQUFpQlksUUFBUSxDQUFDZiw0QkFDeEJHLGlCQUFpQmEsSUFBSSxDQUFDaEIseUJBQXlCO0lBRW5ELE9BQU9JO0FBQ1QifQ==