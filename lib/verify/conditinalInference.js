"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConditionalInference;
    }
});
var _conclusion = /*#__PURE__*/ _interopRequireDefault(require("../verify/conclusion"));
var _premise = /*#__PURE__*/ _interopRequireDefault(require("../verify/premise"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var premisesNodeQuery = (0, _query.nodesQuery)("/conditionalInference/premise"), conclusionNodeQuery = (0, _query.nodeQuery)("/conditionalInference/conclusion!");
function verifyConditionalInference(conditionalInferenceNode, premises, conclusions, metaproofContext) {
    var conditionalInferenceVerified = false;
    metaproofContext.begin(conditionalInferenceNode);
    var conclusionNode = conclusionNodeQuery(conditionalInferenceNode), premiseNodes = premisesNodeQuery(conditionalInferenceNode), premisesVerified = premiseNodes.every(function(premiseNode) {
        var premiseVerified = (0, _premise.default)(premiseNode, premises, metaproofContext);
        if (premiseVerified) {
            return true;
        }
    });
    if (premisesVerified) {
        var conclusionVerified = (0, _conclusion.default)(conclusionNode, conclusions, metaproofContext);
        conditionalInferenceVerified = conclusionVerified; ///
    }
    conditionalInferenceVerified ? metaproofContext.complete(conditionalInferenceNode) : metaproofContext.halt(conditionalInferenceNode);
    return conditionalInferenceVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uZGl0aW5hbEluZmVyZW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHZlcmlmeUNvbmNsdXNpb24gZnJvbSBcIi4uL3ZlcmlmeS9jb25jbHVzaW9uXCI7XG5pbXBvcnQgdmVyaWZ5UHJtaXNlIGZyb20gXCIuLi92ZXJpZnkvcHJlbWlzZVwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHByZW1pc2VzTm9kZVF1ZXJ5ID0gbm9kZXNRdWVyeShcIi9jb25kaXRpb25hbEluZmVyZW5jZS9wcmVtaXNlXCIpLFxuICAgICAgY29uY2x1c2lvbk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9jb25kaXRpb25hbEluZmVyZW5jZS9jb25jbHVzaW9uIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5Q29uZGl0aW9uYWxJbmZlcmVuY2UoY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlLCBwcmVtaXNlcywgY29uY2x1c2lvbnMsIG1ldGFwcm9vZkNvbnRleHQpIHtcbiAgbGV0IGNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgPSBmYWxzZTtcblxuICBtZXRhcHJvb2ZDb250ZXh0LmJlZ2luKGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSk7XG5cbiAgY29uc3QgY29uY2x1c2lvbk5vZGUgPSBjb25jbHVzaW9uTm9kZVF1ZXJ5KGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSksXG4gICAgICAgIHByZW1pc2VOb2RlcyA9IHByZW1pc2VzTm9kZVF1ZXJ5KGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSksXG4gICAgICAgIHByZW1pc2VzVmVyaWZpZWQgPSBwcmVtaXNlTm9kZXMuZXZlcnkoKHByZW1pc2VOb2RlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcHJlbWlzZVZlcmlmaWVkID0gdmVyaWZ5UHJtaXNlKHByZW1pc2VOb2RlLCBwcmVtaXNlcywgbWV0YXByb29mQ29udGV4dCk7XG5cbiAgICAgICAgICBpZiAocHJlbWlzZVZlcmlmaWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gIGlmIChwcmVtaXNlc1ZlcmlmaWVkKSB7XG4gICAgY29uc3QgY29uY2x1c2lvblZlcmlmaWVkID0gdmVyaWZ5Q29uY2x1c2lvbihjb25jbHVzaW9uTm9kZSwgY29uY2x1c2lvbnMsIG1ldGFwcm9vZkNvbnRleHQpO1xuXG4gICAgY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCA9IGNvbmNsdXNpb25WZXJpZmllZDsgIC8vL1xuICB9XG5cbiAgY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCA/XG4gICAgbWV0YXByb29mQ29udGV4dC5jb21wbGV0ZShjb25kaXRpb25hbEluZmVyZW5jZU5vZGUpIDpcbiAgICAgIG1ldGFwcm9vZkNvbnRleHQuaGFsdChjb25kaXRpb25hbEluZmVyZW5jZU5vZGUpO1xuXG4gIHJldHVybiBjb25kaXRpb25hbEluZmVyZW5jZVZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeUNvbmRpdGlvbmFsSW5mZXJlbmNlIiwicHJlbWlzZXNOb2RlUXVlcnkiLCJub2Rlc1F1ZXJ5IiwiY29uY2x1c2lvbk5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSIsInByZW1pc2VzIiwiY29uY2x1c2lvbnMiLCJtZXRhcHJvb2ZDb250ZXh0IiwiY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCIsImJlZ2luIiwiY29uY2x1c2lvbk5vZGUiLCJwcmVtaXNlTm9kZXMiLCJwcmVtaXNlc1ZlcmlmaWVkIiwiZXZlcnkiLCJwcmVtaXNlTm9kZSIsInByZW1pc2VWZXJpZmllZCIsInZlcmlmeVBybWlzZSIsImNvbmNsdXNpb25WZXJpZmllZCIsInZlcmlmeUNvbmNsdXNpb24iLCJjb21wbGV0ZSIsImhhbHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVVBOzs7ZUFBd0JBOzs7K0RBUks7NERBQ0o7cUJBRWE7Ozs7OztBQUV0QyxJQUFNQyxvQkFBb0JDLElBQUFBLGlCQUFVLEVBQUMsa0NBQy9CQyxzQkFBc0JDLElBQUFBLGdCQUFTLEVBQUM7QUFFdkIsU0FBU0osMkJBQTJCSyx3QkFBd0IsRUFBRUMsUUFBUSxFQUFFQyxXQUFXLEVBQUVDLGdCQUFnQixFQUFFO0lBQ3BILElBQUlDLCtCQUErQixLQUFLO0lBRXhDRCxpQkFBaUJFLEtBQUssQ0FBQ0w7SUFFdkIsSUFBTU0saUJBQWlCUixvQkFBb0JFLDJCQUNyQ08sZUFBZVgsa0JBQWtCSSwyQkFDakNRLG1CQUFtQkQsYUFBYUUsS0FBSyxDQUFDLFNBQUNDLGFBQWdCO1FBQ3JELElBQU1DLGtCQUFrQkMsSUFBQUEsZ0JBQVksRUFBQ0YsYUFBYVQsVUFBVUU7UUFFNUQsSUFBSVEsaUJBQWlCO1lBQ25CLE9BQU8sSUFBSTtRQUNiLENBQUM7SUFDSDtJQUVOLElBQUlILGtCQUFrQjtRQUNwQixJQUFNSyxxQkFBcUJDLElBQUFBLG1CQUFnQixFQUFDUixnQkFBZ0JKLGFBQWFDO1FBRXpFQywrQkFBK0JTLG9CQUFxQixHQUFHO0lBQ3pELENBQUM7SUFFRFQsK0JBQ0VELGlCQUFpQlksUUFBUSxDQUFDZiw0QkFDeEJHLGlCQUFpQmEsSUFBSSxDQUFDaEIseUJBQXlCO0lBRW5ELE9BQU9JO0FBQ1QifQ==