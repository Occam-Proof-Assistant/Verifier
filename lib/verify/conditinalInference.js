"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConditionalInference;
    }
});
var _conclusion = /*#__PURE__*/ _interopRequireDefault(require("../verify/conclusion"));
var _premiseOrPremises = /*#__PURE__*/ _interopRequireDefault(require("../verify/premiseOrPremises"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var conclusionNodeQuery = (0, _query.nodeQuery)("/conditionalInference/conclusion!"), premiseOrPremisesNodeQuery = (0, _query.nodeQuery)("/conditionalInference/premise|premises!");
function verifyConditionalInference(conditionalInferenceNode, premises, conclusions, context) {
    var conditionalInferenceVerified = false;
    context.begin(conditionalInferenceNode);
    var conclusionNode = conclusionNodeQuery(conditionalInferenceNode), premiseOrPremisesNode = premiseOrPremisesNodeQuery(conditionalInferenceNode), premiseOrPremisesVerified = (0, _premiseOrPremises.default)(premiseOrPremisesNode, premises, context);
    if (premiseOrPremisesVerified) {
        var conclusionVerified = (0, _conclusion.default)(conclusionNode, conclusions, context);
        conditionalInferenceVerified = conclusionVerified; ///
    }
    conditionalInferenceVerified ? context.complete(conditionalInferenceNode) : context.halt(conditionalInferenceNode);
    return conditionalInferenceVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uZGl0aW5hbEluZmVyZW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHZlcmlmeUNvbmNsdXNpb24gZnJvbSBcIi4uL3ZlcmlmeS9jb25jbHVzaW9uXCI7XG5pbXBvcnQgdmVyaWZ5UHJlbWlzZU9yUHJlbWlzZXMgZnJvbSBcIi4uL3ZlcmlmeS9wcmVtaXNlT3JQcmVtaXNlc1wiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGNvbmNsdXNpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvY29uZGl0aW9uYWxJbmZlcmVuY2UvY29uY2x1c2lvbiFcIiksXG4gICAgICBwcmVtaXNlT3JQcmVtaXNlc05vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9jb25kaXRpb25hbEluZmVyZW5jZS9wcmVtaXNlfHByZW1pc2VzIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5Q29uZGl0aW9uYWxJbmZlcmVuY2UoY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlLCBwcmVtaXNlcywgY29uY2x1c2lvbnMsIGNvbnRleHQpIHtcbiAgbGV0IGNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgPSBmYWxzZTtcblxuICBjb250ZXh0LmJlZ2luKGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSk7XG5cbiAgY29uc3QgY29uY2x1c2lvbk5vZGUgPSBjb25jbHVzaW9uTm9kZVF1ZXJ5KGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSksXG4gICAgICAgIHByZW1pc2VPclByZW1pc2VzTm9kZSA9IHByZW1pc2VPclByZW1pc2VzTm9kZVF1ZXJ5KGNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSksXG4gICAgICAgIHByZW1pc2VPclByZW1pc2VzVmVyaWZpZWQgPSB2ZXJpZnlQcmVtaXNlT3JQcmVtaXNlcyhwcmVtaXNlT3JQcmVtaXNlc05vZGUsIHByZW1pc2VzLCBjb250ZXh0KTtcblxuICBpZiAocHJlbWlzZU9yUHJlbWlzZXNWZXJpZmllZCkge1xuICAgIGNvbnN0IGNvbmNsdXNpb25WZXJpZmllZCA9IHZlcmlmeUNvbmNsdXNpb24oY29uY2x1c2lvbk5vZGUsIGNvbmNsdXNpb25zLCBjb250ZXh0KTtcblxuICAgIGNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgPSBjb25jbHVzaW9uVmVyaWZpZWQ7ICAvLy9cbiAgfVxuXG4gIGNvbmRpdGlvbmFsSW5mZXJlbmNlVmVyaWZpZWQgP1xuICAgIGNvbnRleHQuY29tcGxldGUoY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlKSA6XG4gICAgICBjb250ZXh0LmhhbHQoY29uZGl0aW9uYWxJbmZlcmVuY2VOb2RlKTtcblxuICByZXR1cm4gY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlDb25kaXRpb25hbEluZmVyZW5jZSIsImNvbmNsdXNpb25Ob2RlUXVlcnkiLCJub2RlUXVlcnkiLCJwcmVtaXNlT3JQcmVtaXNlc05vZGVRdWVyeSIsImNvbmRpdGlvbmFsSW5mZXJlbmNlTm9kZSIsInByZW1pc2VzIiwiY29uY2x1c2lvbnMiLCJjb250ZXh0IiwiY29uZGl0aW9uYWxJbmZlcmVuY2VWZXJpZmllZCIsImJlZ2luIiwiY29uY2x1c2lvbk5vZGUiLCJwcmVtaXNlT3JQcmVtaXNlc05vZGUiLCJwcmVtaXNlT3JQcmVtaXNlc1ZlcmlmaWVkIiwidmVyaWZ5UHJlbWlzZU9yUHJlbWlzZXMiLCJjb25jbHVzaW9uVmVyaWZpZWQiLCJ2ZXJpZnlDb25jbHVzaW9uIiwiY29tcGxldGUiLCJoYWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFVQTs7O2VBQXdCQTs7OytEQVJLO3NFQUNPO3FCQUVWOzs7Ozs7QUFFMUIsSUFBTUMsc0JBQXNCQyxJQUFBQSxnQkFBUyxFQUFDLHNDQUNoQ0MsNkJBQTZCRCxJQUFBQSxnQkFBUyxFQUFDO0FBRTlCLFNBQVNGLDJCQUEyQkksd0JBQXdCLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUU7SUFDM0csSUFBSUMsK0JBQStCLEtBQUs7SUFFeENELFFBQVFFLEtBQUssQ0FBQ0w7SUFFZCxJQUFNTSxpQkFBaUJULG9CQUFvQkcsMkJBQ3JDTyx3QkFBd0JSLDJCQUEyQkMsMkJBQ25EUSw0QkFBNEJDLElBQUFBLDBCQUF1QixFQUFDRix1QkFBdUJOLFVBQVVFO0lBRTNGLElBQUlLLDJCQUEyQjtRQUM3QixJQUFNRSxxQkFBcUJDLElBQUFBLG1CQUFnQixFQUFDTCxnQkFBZ0JKLGFBQWFDO1FBRXpFQywrQkFBK0JNLG9CQUFxQixHQUFHO0lBQ3pELENBQUM7SUFFRE4sK0JBQ0VELFFBQVFTLFFBQVEsQ0FBQ1osNEJBQ2ZHLFFBQVFVLElBQUksQ0FBQ2IseUJBQXlCO0lBRTFDLE9BQU9JO0FBQ1QifQ==