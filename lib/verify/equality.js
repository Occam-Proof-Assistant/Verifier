"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyEquality;
    }
});
var _equality = /*#__PURE__*/ _interopRequireDefault(require("../equality"));
var _term = /*#__PURE__*/ _interopRequireDefault(require("../verify/term"));
var _query = require("../utilities/query");
var _string = require("../utilities/string");
var _array = require("../utilities/array");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var leftTermNodeQuery = (0, _query.nodeQuery)("/equality/term[0]"), rightTermNodeQuery = (0, _query.nodeQuery)("/equality/term[1]");
function verifyEquality(equalityNode, proofContext) {
    var equalityVerified = false;
    proofContext.begin(equalityNode);
    var equalityString = (0, _string.nodeAsString)(equalityNode);
    proofContext.debug("Verifying the '".concat(equalityString, "' equality..."));
    var equalityTypesVerified = verifyEqualityTypes(equalityNode, proofContext);
    if (equalityTypesVerified) {
        var derived = proofContext.isDerived();
        if (derived) {
            var equality = _equality.default.fromEqualityNode(equalityNode), proofSteps = proofContext.getProofSteps(), equalities = proofSteps.reduce(function(equalities, proofStep) {
                var equality = _equality.default.fromProofStep(proofStep);
                if (equality !== null) {
                    equalities.push(equality);
                }
                return equalities;
            }, []), equalityTermsEqual = equality.areTermsEqual(equalities, proofContext);
            equalityVerified = equalityTermsEqual; ///
        } else {
            equalityVerified = true;
        }
    }
    if (equalityVerified) {
        proofContext.info("Verified the '".concat(equalityString, "' equality."));
    }
    equalityVerified ? proofContext.complete(equalityNode) : proofContext.halt(equalityNode);
    return equalityVerified;
}
function verifyEqualityTypes(equalityNode, proofContext) {
    var equalityTypesVerified = false;
    var types = [], context = proofContext, leftTermNode = leftTermNodeQuery(equalityNode), rightTermNode = rightTermNodeQuery(equalityNode), leftTermVerified = (0, _term.default)(leftTermNode, types, context), rightTermVerified = (0, _term.default)(rightTermNode, types, context);
    if (leftTermVerified && rightTermVerified) {
        var firstType = (0, _array.first)(types), secondType = (0, _array.second)(types), leftType = firstType, rightType = secondType, leftTypeEqualToSubTypeOfOrSuperTypeOfRightType = leftType.isEqualToSubTypeOfOrSuperTypeOf(rightType);
        if (leftTypeEqualToSubTypeOfOrSuperTypeOfRightType) {
            equalityTypesVerified = true;
        }
    }
    return equalityTypesVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvZXF1YWxpdHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBFcXVhbGl0eSBmcm9tIFwiLi4vZXF1YWxpdHlcIjtcbmltcG9ydCB2ZXJpZnlUZXJtIGZyb20gXCIuLi92ZXJpZnkvdGVybVwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5pbXBvcnQgeyBub2RlQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuaW1wb3J0IHsgZmlyc3QsIHNlY29uZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcblxuY29uc3QgbGVmdFRlcm1Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvZXF1YWxpdHkvdGVybVswXVwiKSxcbiAgICAgIHJpZ2h0VGVybU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9lcXVhbGl0eS90ZXJtWzFdXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlFcXVhbGl0eShlcXVhbGl0eU5vZGUsIHByb29mQ29udGV4dCkge1xuICBsZXQgZXF1YWxpdHlWZXJpZmllZCA9IGZhbHNlO1xuXG4gIHByb29mQ29udGV4dC5iZWdpbihlcXVhbGl0eU5vZGUpO1xuXG4gIGNvbnN0IGVxdWFsaXR5U3RyaW5nID0gbm9kZUFzU3RyaW5nKGVxdWFsaXR5Tm9kZSk7XG5cbiAgcHJvb2ZDb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICcke2VxdWFsaXR5U3RyaW5nfScgZXF1YWxpdHkuLi5gKTtcblxuICBjb25zdCBlcXVhbGl0eVR5cGVzVmVyaWZpZWQgPSB2ZXJpZnlFcXVhbGl0eVR5cGVzKGVxdWFsaXR5Tm9kZSwgcHJvb2ZDb250ZXh0KTtcblxuICBpZiAoZXF1YWxpdHlUeXBlc1ZlcmlmaWVkKSB7XG4gICAgY29uc3QgZGVyaXZlZCA9IHByb29mQ29udGV4dC5pc0Rlcml2ZWQoKTtcblxuICAgIGlmIChkZXJpdmVkKSB7XG4gICAgICBjb25zdCBlcXVhbGl0eSA9IEVxdWFsaXR5LmZyb21FcXVhbGl0eU5vZGUoZXF1YWxpdHlOb2RlKSxcbiAgICAgICAgICAgIHByb29mU3RlcHMgPSBwcm9vZkNvbnRleHQuZ2V0UHJvb2ZTdGVwcygpLFxuICAgICAgICAgICAgZXF1YWxpdGllcyA9IHByb29mU3RlcHMucmVkdWNlKChlcXVhbGl0aWVzLCBwcm9vZlN0ZXApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVxdWFsaXR5ID0gRXF1YWxpdHkuZnJvbVByb29mU3RlcChwcm9vZlN0ZXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXF1YWxpdHkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1YWxpdGllcy5wdXNoKGVxdWFsaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVxdWFsaXRpZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSwgW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGVxdWFsaXR5VGVybXNFcXVhbCA9IGVxdWFsaXR5LmFyZVRlcm1zRXF1YWwoZXF1YWxpdGllcywgcHJvb2ZDb250ZXh0KTtcblxuICAgICAgZXF1YWxpdHlWZXJpZmllZCA9IGVxdWFsaXR5VGVybXNFcXVhbDsgIC8vL1xuICAgIH0gZWxzZSB7XG4gICAgICBlcXVhbGl0eVZlcmlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZXF1YWxpdHlWZXJpZmllZCkge1xuICAgIHByb29mQ29udGV4dC5pbmZvKGBWZXJpZmllZCB0aGUgJyR7ZXF1YWxpdHlTdHJpbmd9JyBlcXVhbGl0eS5gKTtcbiAgfVxuXG4gIGVxdWFsaXR5VmVyaWZpZWQgP1xuICAgIHByb29mQ29udGV4dC5jb21wbGV0ZShlcXVhbGl0eU5vZGUpIDpcbiAgICAgIHByb29mQ29udGV4dC5oYWx0KGVxdWFsaXR5Tm9kZSk7XG5cbiAgcmV0dXJuIGVxdWFsaXR5VmVyaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeUVxdWFsaXR5VHlwZXMoZXF1YWxpdHlOb2RlLCBwcm9vZkNvbnRleHQpIHtcbiAgbGV0IGVxdWFsaXR5VHlwZXNWZXJpZmllZCA9IGZhbHNlO1xuXG4gIGNvbnN0IHR5cGVzID0gW10sXG4gICAgICAgIGNvbnRleHQgPSBwcm9vZkNvbnRleHQsICAvLy9cbiAgICAgICAgbGVmdFRlcm1Ob2RlID0gbGVmdFRlcm1Ob2RlUXVlcnkoZXF1YWxpdHlOb2RlKSxcbiAgICAgICAgcmlnaHRUZXJtTm9kZSA9IHJpZ2h0VGVybU5vZGVRdWVyeShlcXVhbGl0eU5vZGUpLFxuICAgICAgICBsZWZ0VGVybVZlcmlmaWVkID0gdmVyaWZ5VGVybShsZWZ0VGVybU5vZGUsIHR5cGVzLCBjb250ZXh0KSxcbiAgICAgICAgcmlnaHRUZXJtVmVyaWZpZWQgPSB2ZXJpZnlUZXJtKHJpZ2h0VGVybU5vZGUsIHR5cGVzLCBjb250ZXh0KTtcblxuICBpZiAobGVmdFRlcm1WZXJpZmllZCAmJiByaWdodFRlcm1WZXJpZmllZCkge1xuICAgIGNvbnN0IGZpcnN0VHlwZSA9IGZpcnN0KHR5cGVzKSxcbiAgICAgICAgICBzZWNvbmRUeXBlID0gc2Vjb25kKHR5cGVzKSxcbiAgICAgICAgICBsZWZ0VHlwZSA9IGZpcnN0VHlwZSwgLy8vXG4gICAgICAgICAgcmlnaHRUeXBlID0gc2Vjb25kVHlwZSwgLy8vXG4gICAgICAgICAgbGVmdFR5cGVFcXVhbFRvU3ViVHlwZU9mT3JTdXBlclR5cGVPZlJpZ2h0VHlwZSA9IGxlZnRUeXBlLmlzRXF1YWxUb1N1YlR5cGVPZk9yU3VwZXJUeXBlT2YocmlnaHRUeXBlKTtcblxuICAgIGlmIChsZWZ0VHlwZUVxdWFsVG9TdWJUeXBlT2ZPclN1cGVyVHlwZU9mUmlnaHRUeXBlKSB7XG4gICAgICBlcXVhbGl0eVR5cGVzVmVyaWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlcXVhbGl0eVR5cGVzVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5RXF1YWxpdHkiLCJsZWZ0VGVybU5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInJpZ2h0VGVybU5vZGVRdWVyeSIsImVxdWFsaXR5Tm9kZSIsInByb29mQ29udGV4dCIsImVxdWFsaXR5VmVyaWZpZWQiLCJiZWdpbiIsImVxdWFsaXR5U3RyaW5nIiwibm9kZUFzU3RyaW5nIiwiZGVidWciLCJlcXVhbGl0eVR5cGVzVmVyaWZpZWQiLCJ2ZXJpZnlFcXVhbGl0eVR5cGVzIiwiZGVyaXZlZCIsImlzRGVyaXZlZCIsImVxdWFsaXR5IiwiRXF1YWxpdHkiLCJmcm9tRXF1YWxpdHlOb2RlIiwicHJvb2ZTdGVwcyIsImdldFByb29mU3RlcHMiLCJlcXVhbGl0aWVzIiwicmVkdWNlIiwicHJvb2ZTdGVwIiwiZnJvbVByb29mU3RlcCIsInB1c2giLCJlcXVhbGl0eVRlcm1zRXF1YWwiLCJhcmVUZXJtc0VxdWFsIiwiaW5mbyIsImNvbXBsZXRlIiwiaGFsdCIsInR5cGVzIiwiY29udGV4dCIsImxlZnRUZXJtTm9kZSIsInJpZ2h0VGVybU5vZGUiLCJsZWZ0VGVybVZlcmlmaWVkIiwidmVyaWZ5VGVybSIsInJpZ2h0VGVybVZlcmlmaWVkIiwiZmlyc3RUeXBlIiwiZmlyc3QiLCJzZWNvbmRUeXBlIiwic2Vjb25kIiwibGVmdFR5cGUiLCJyaWdodFR5cGUiLCJsZWZ0VHlwZUVxdWFsVG9TdWJUeXBlT2ZPclN1cGVyVHlwZU9mUmlnaHRUeXBlIiwiaXNFcXVhbFRvU3ViVHlwZU9mT3JTdXBlclR5cGVPZiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBWUE7OztlQUF3QkE7Ozs2REFWSDt5REFDRTtxQkFFRztzQkFDRztxQkFDQzs7Ozs7O0FBRTlCLElBQU1DLG9CQUFvQkMsSUFBQUEsZ0JBQVMsRUFBQyxzQkFDOUJDLHFCQUFxQkQsSUFBQUEsZ0JBQVMsRUFBQztBQUV0QixTQUFTRixlQUFlSSxZQUFZLEVBQUVDLFlBQVksRUFBRTtJQUNqRSxJQUFJQyxtQkFBbUIsS0FBSztJQUU1QkQsYUFBYUUsS0FBSyxDQUFDSDtJQUVuQixJQUFNSSxpQkFBaUJDLElBQUFBLG9CQUFZLEVBQUNMO0lBRXBDQyxhQUFhSyxLQUFLLENBQUMsQUFBQyxrQkFBZ0MsT0FBZkYsZ0JBQWU7SUFFcEQsSUFBTUcsd0JBQXdCQyxvQkFBb0JSLGNBQWNDO0lBRWhFLElBQUlNLHVCQUF1QjtRQUN6QixJQUFNRSxVQUFVUixhQUFhUyxTQUFTO1FBRXRDLElBQUlELFNBQVM7WUFDWCxJQUFNRSxXQUFXQyxpQkFBUSxDQUFDQyxnQkFBZ0IsQ0FBQ2IsZUFDckNjLGFBQWFiLGFBQWFjLGFBQWEsSUFDdkNDLGFBQWFGLFdBQVdHLE1BQU0sQ0FBQyxTQUFDRCxZQUFZRSxXQUFjO2dCQUMzQyxJQUFNUCxXQUFXQyxpQkFBUSxDQUFDTyxhQUFhLENBQUNEO2dCQUV4QyxJQUFJUCxhQUFhLElBQUksRUFBRTtvQkFDckJLLFdBQVdJLElBQUksQ0FBQ1Q7Z0JBQ2xCLENBQUM7Z0JBRUQsT0FBT0s7WUFDVCxHQUFHLEVBQUUsR0FDTEsscUJBQXFCVixTQUFTVyxhQUFhLENBQUNOLFlBQVlmO1lBRTNFQyxtQkFBbUJtQixvQkFBcUIsR0FBRztRQUM3QyxPQUFPO1lBQ0xuQixtQkFBbUIsSUFBSTtRQUN6QixDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUlBLGtCQUFrQjtRQUNwQkQsYUFBYXNCLElBQUksQ0FBQyxBQUFDLGlCQUErQixPQUFmbkIsZ0JBQWU7SUFDcEQsQ0FBQztJQUVERixtQkFDRUQsYUFBYXVCLFFBQVEsQ0FBQ3hCLGdCQUNwQkMsYUFBYXdCLElBQUksQ0FBQ3pCLGFBQWE7SUFFbkMsT0FBT0U7QUFDVDtBQUVBLFNBQVNNLG9CQUFvQlIsWUFBWSxFQUFFQyxZQUFZLEVBQUU7SUFDdkQsSUFBSU0sd0JBQXdCLEtBQUs7SUFFakMsSUFBTW1CLFFBQVEsRUFBRSxFQUNWQyxVQUFVMUIsY0FDVjJCLGVBQWUvQixrQkFBa0JHLGVBQ2pDNkIsZ0JBQWdCOUIsbUJBQW1CQyxlQUNuQzhCLG1CQUFtQkMsSUFBQUEsYUFBVSxFQUFDSCxjQUFjRixPQUFPQyxVQUNuREssb0JBQW9CRCxJQUFBQSxhQUFVLEVBQUNGLGVBQWVILE9BQU9DO0lBRTNELElBQUlHLG9CQUFvQkUsbUJBQW1CO1FBQ3pDLElBQU1DLFlBQVlDLElBQUFBLFlBQUssRUFBQ1IsUUFDbEJTLGFBQWFDLElBQUFBLGFBQU0sRUFBQ1YsUUFDcEJXLFdBQVdKLFdBQ1hLLFlBQVlILFlBQ1pJLGlEQUFpREYsU0FBU0csK0JBQStCLENBQUNGO1FBRWhHLElBQUlDLGdEQUFnRDtZQUNsRGhDLHdCQUF3QixJQUFJO1FBQzlCLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBT0E7QUFDVCJ9