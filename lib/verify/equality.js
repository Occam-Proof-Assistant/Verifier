"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyEquality;
    }
});
var _terms = /*#__PURE__*/ _interop_require_default(require("../verify/terms"));
var _query = require("../utilities/query");
var _array = require("../utilities/array");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var leftTermNodeQuery = (0, _query.nodeQuery)("/equality/argument[0]/term!"), rightTermNodeQuery = (0, _query.nodeQuery)("/equality/argument[1]/term!");
function verifyEquality(equalityNode, assignments, derived, context, verifyAhead) {
    var equalityVerified;
    var equalityString = context.nodeAsString(equalityNode);
    context.trace("Verifying the '".concat(equalityString, "' equality..."), equalityNode);
    var verifyEqualityFunctions = [
        verifyDerivedEquality,
        verifyStandaloneEquality
    ];
    equalityVerified = verifyEqualityFunctions.some(function(verifyEqualityFunction) {
        var equalityVerified = verifyEqualityFunction(equalityNode, derived, context, verifyAhead);
        if (equalityVerified) {
            return true;
        }
    });
    if (equalityVerified) {
        context.debug("...verified the '".concat(equalityString, "' equality."), equalityNode);
    }
    return equalityVerified;
}
function verifyDerivedEquality(equalityNode, derived, context, verifyAhead) {
    var derivedEqualityVerified = false;
    if (derived) {
        var equalityString = context.nodeAsString(equalityNode);
        context.trace("Verifying the '".concat(equalityString, "' derived equality..."), equalityNode);
        var types = [], leftTermNode = leftTermNodeQuery(equalityNode), rightTermNode = rightTermNodeQuery(equalityNode), termsVerified = (0, _terms.default)(leftTermNode, rightTermNode, types, context, function() {
            var verifiedAhead;
            var secondType = (0, _array.second)(types), firstType = (0, _array.first)(types), rightType = secondType, leftType = firstType, derivedEqualityTermsVerified = verifyDerivedEqualityTerms(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead);
            verifiedAhead = derivedEqualityTermsVerified; ///
            return verifiedAhead;
        });
        derivedEqualityVerified = termsVerified; ///
        if (derivedEqualityVerified) {
            context.trace("...verified the '".concat(equalityString, "' derived equality."), equalityNode);
        }
    }
    return derivedEqualityVerified;
}
function verifyDerivedEqualityTerms(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead) {
    var derivedEqualityTermsVerified;
    var leftTermString = context.nodeAsString(leftTermNode), rightTermString = context.nodeAsString(rightTermNode);
    context.trace("Verifying the '".concat(leftTermString, "' and '").concat(rightTermString, "' derived equality terms..."), leftTermNode);
    var verifyDerivedEqualityTermsFunctions = [
        verifyReflexiveDerivedEqualityTerms,
        verifyNonReflexiveDerivedEqualityTerms
    ];
    derivedEqualityTermsVerified = verifyDerivedEqualityTermsFunctions.some(function(verifyDerivedEqualityTermsFunction) {
        derivedEqualityTermsVerified = verifyDerivedEqualityTermsFunction(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead);
        if (derivedEqualityTermsVerified) {
            return true;
        }
    });
    if (derivedEqualityTermsVerified) {
        context.debug("...verified the '".concat(leftTermString, "' and '").concat(rightTermString, "' derived equality terms."), leftTermNode);
    }
    return derivedEqualityTermsVerified;
}
function verifyReflexiveDerivedEqualityTerms(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead) {
    var reflexiveDerivedEqualityTermsVerified = false;
    var leftTermNodeMatchesRightTermNode = leftTermNode.match(rightTermNode);
    if (leftTermNodeMatchesRightTermNode) {
        var verifiedAhead;
        var leftTermString = context.nodeAsString(leftTermNode), rightTermString = context.nodeAsString(rightTermNode);
        context.trace("Verifying the '".concat(leftTermString, "' and '").concat(rightTermString, "' reflexive derived equality terms..."), leftTermNode);
        verifiedAhead = verifyAhead();
        reflexiveDerivedEqualityTermsVerified = verifiedAhead; ///
        if (reflexiveDerivedEqualityTermsVerified) {
            context.debug("...verified the '".concat(leftTermString, "' and '").concat(rightTermString, "' reflexive derived equality terms."), leftTermNode);
        }
    }
    return reflexiveDerivedEqualityTermsVerified;
}
function verifyNonReflexiveDerivedEqualityTerms(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead) {
    var nonReflexiveDerivedEqualityTermsVerified = false;
    var leftTermNodeMatchesRightTermNode = leftTermNode.match(rightTermNode);
    if (!leftTermNodeMatchesRightTermNode) {
        var verifiedAhead;
        var leftTermString = context.nodeAsString(leftTermNode), rightTermString = context.nodeAsString(rightTermNode);
        context.trace("Verifying the '".concat(leftTermString, "' and '").concat(rightTermString, "' non-reflexive derived equality terms..."), leftTermNode);
        debugger;
        verifiedAhead = verifyAhead();
        nonReflexiveDerivedEqualityTermsVerified = verifiedAhead; ///
        if (nonReflexiveDerivedEqualityTermsVerified) {
            context.debug("...verified the '".concat(leftTermString, "' and '").concat(rightTermString, "' non-reflexive derived equality terms."), leftTermNode);
        }
    }
    return nonReflexiveDerivedEqualityTermsVerified;
}
function verifyStandaloneEquality(equalityNode, derived, context, verifyAhead) {
    var standaloneEqualityVerified = false;
    if (!derived) {
        var equalityString = context.nodeAsString(equalityNode);
        context.trace("Verifying the '".concat(equalityString, "' standalone equality..."), equalityNode);
        var types = [], leftTermNode = leftTermNodeQuery(equalityNode), rightTermNode = rightTermNodeQuery(equalityNode), termsVerified = (0, _terms.default)(leftTermNode, rightTermNode, types, context, function() {
            var verifiedAhead;
            var secondType = (0, _array.second)(types), firstType = (0, _array.first)(types), rightType = secondType, leftType = firstType, standaloneEqualityTermsVerified = verifyStandaloneEqualityTerms(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead);
            verifiedAhead = standaloneEqualityTermsVerified; ///
            return verifiedAhead;
        });
        standaloneEqualityVerified = termsVerified; ///
        if (standaloneEqualityVerified) {
            context.trace("...verified the '".concat(equalityString, "' standalone equality."), equalityNode);
        }
    }
    return standaloneEqualityVerified;
}
function verifyStandaloneEqualityTerms(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead) {
    var standaloneEqualityTermsVerified;
    var leftTermString = context.nodeAsString(leftTermNode), rightTermString = context.nodeAsString(rightTermNode);
    context.trace("Verifying the '".concat(leftTermString, "' and '").concat(rightTermString, "' standalone equality terms..."), leftTermNode);
    var verifyStandaloneEqualityTermsFunctions = [
        verifyReflexiveStandaloneEqualityTerms,
        verifyNonReflexiveStandaloneEqualityTerms
    ];
    standaloneEqualityTermsVerified = verifyStandaloneEqualityTermsFunctions.some(function(verifyStandaloneEqualityTermsFunction) {
        standaloneEqualityTermsVerified = verifyStandaloneEqualityTermsFunction(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead);
        if (standaloneEqualityTermsVerified) {
            return true;
        }
    });
    if (standaloneEqualityTermsVerified) {
        context.debug("...verified the '".concat(leftTermString, "' and '").concat(rightTermString, "' standalone equality terms."), leftTermNode);
    }
    return standaloneEqualityTermsVerified;
}
function verifyReflexiveStandaloneEqualityTerms(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead) {
    var reflexiveStandaloneEqualityTermsVerified = false;
    var leftTermNodeMatchesRightTermNode = leftTermNode.match(rightTermNode);
    if (leftTermNodeMatchesRightTermNode) {
        var verifiedAhead;
        var leftTermString = context.nodeAsString(leftTermNode), rightTermString = context.nodeAsString(rightTermNode);
        context.trace("Verifying the '".concat(leftTermString, "' and '").concat(rightTermString, "' reflexive standalone equality terms..."), leftTermNode);
        verifiedAhead = verifyAhead();
        reflexiveStandaloneEqualityTermsVerified = verifiedAhead; ///
        if (reflexiveStandaloneEqualityTermsVerified) {
            context.debug("...verified the '".concat(leftTermString, "' and '").concat(rightTermString, "' reflexive standalone equality terms."), leftTermNode);
        }
    }
    return reflexiveStandaloneEqualityTermsVerified;
}
function verifyNonReflexiveStandaloneEqualityTerms(leftTermNode, rightTermNode, leftType, rightType, context, verifyAhead) {
    var nonReflexiveStandaloneEqualityTermsVerified = false;
    var leftTermNodeMatchesRightTermNode = leftTermNode.match(rightTermNode);
    if (!leftTermNodeMatchesRightTermNode) {
        var verifiedAhead;
        var leftTermString = context.nodeAsString(leftTermNode), rightTermString = context.nodeAsString(rightTermNode);
        context.trace("Verifying the '".concat(leftTermString, "' and '").concat(rightTermString, "' non-reflexive standalone equality terms..."), leftTermNode);
        debugger;
        verifiedAhead = verifyAhead();
        nonReflexiveStandaloneEqualityTermsVerified = verifiedAhead; ///
        if (nonReflexiveStandaloneEqualityTermsVerified) {
            context.debug("...verified the '".concat(leftTermString, "' and '").concat(rightTermString, "' non-reflexive standalone equality terms."), leftTermNode);
        }
    }
    return nonReflexiveStandaloneEqualityTermsVerified;
}

//# sourceMappingURL=data:application/json;base64,