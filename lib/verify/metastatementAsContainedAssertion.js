"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return verifyMetastatementAsContainedAssertion;
    },
    isMetastatementContainedAssertion: function() {
        return isMetastatementContainedAssertion;
    }
});
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../verifier/node/metaLevel"));
var _constants = require("../constants");
var _query = require("../utilities/query");
var _verify = require("../utilities/verify");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var termNodeQuery = (0, _query.nodeQuery)("/metastatement/term!"), operatorTerminalNodesQuery = (0, _query.nodesQuery)("/metastatement/@operator"), metastatementTermNodesQuery = (0, _query.nodesQuery)("/metastatement/metastatement//term");
function verifyMetastatementAsContainedAssertion(metastatementNode, assignments, derived, localContext) {
    var metastatementVerifiedAsContainedAssertion;
    var metastatementContainedAssertion = isMetastatementContainedAssertion(metastatementNode);
    if (metastatementContainedAssertion) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the '".concat(metastatementString, "' metastatement as a contained assertion..."), metastatementNode);
        var metastatementFunctions = [
            verifyMetastatementAsDerivedContainedAssertion,
            verifyMetastatementAsStatedContainedAssertion
        ];
        metastatementVerifiedAsContainedAssertion = metastatementFunctions.some(function(metastatementFunction) {
            var metastatementVerifiedAsContainedAssertion = metastatementFunction(metastatementNode, assignments, derived, localContext);
            if (metastatementVerifiedAsContainedAssertion) {
                return true;
            }
        });
        if (metastatementVerifiedAsContainedAssertion) {
            localContext.debug("...verified the '".concat(metastatementString, "' metastatement as a contained assertion."), metastatementNode);
        }
    }
    return metastatementVerifiedAsContainedAssertion;
}
function verifyMetastatementAsDerivedContainedAssertion(metastatementNode, assignments, derived, localContext) {
    var metastatementVerifiedAsDefinedContainedAssertion = false;
    if (derived) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the derived '".concat(metastatementString, "' metastatement as a contained assertion..."), metastatementNode);
        var metastatementNegated = (0, _verify.isMetastatementNegated)(metastatementNode), negated = metastatementNegated, termNode = termNodeQuery(metastatementNode), metastatementTermNodes = metastatementTermNodesQuery(metastatementNode), termNodeMatchesMetaArgumentTermNode = metastatementTermNodes.some(function(metastatementTermNode) {
            var termNodeMatchesMetaArgumentTermNode = termNode.match(metastatementTermNode);
            if (termNodeMatchesMetaArgumentTermNode) {
                return true;
            }
        });
        if (!negated) {
            if (termNodeMatchesMetaArgumentTermNode) {
                metastatementVerifiedAsDefinedContainedAssertion = true;
            }
        }
        if (negated) {
            if (!termNodeMatchesMetaArgumentTermNode) {
                metastatementVerifiedAsDefinedContainedAssertion = true;
            }
        }
        if (metastatementVerifiedAsDefinedContainedAssertion) {
            localContext.debug("...verified the derived '".concat(metastatementString, "' metastatement as a contained assertion."), metastatementNode);
        }
    }
    return metastatementVerifiedAsDefinedContainedAssertion;
}
function verifyMetastatementAsStatedContainedAssertion(metastatementNode, assignments, derived, localContext) {
    var metastatementVerifiedAsStatedContainedAssertion = false;
    if (!derived) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the stated '".concat(metastatementString, "' metastatement as a contained assertion..."), metastatementNode);
        var intrinsicLevel = localContext.isIntrinsicLevel();
        if (intrinsicLevel) {
            localContext.debug("The stated '".concat(metastatementString, "' metastatement as a contained assertion cannot be verified at intrinsic level."), metastatementNode);
        } else {
            var nonTerminalNode = metastatementNode, nonTerminalNodeVerified = _metaLevel.default.verifyNonTerminalNode(nonTerminalNode, localContext, function() {
                var verifiedAhead = true;
                return verifiedAhead;
            });
            metastatementVerifiedAsStatedContainedAssertion = nonTerminalNodeVerified; ///
        }
        if (metastatementVerifiedAsStatedContainedAssertion) {
            localContext.debug("...verified the stated '".concat(metastatementString, "' metastatement as a contained assertion."), metastatementNode);
        }
    }
    return metastatementVerifiedAsStatedContainedAssertion;
}
function isMetastatementContainedAssertion(metastatementNode) {
    var operatorTerminalNodes = operatorTerminalNodesQuery(metastatementNode), metastatementContainedAssertion = operatorTerminalNodes.some(function(operatorTerminalNode) {
        var content = operatorTerminalNode.getContent(), contentContained = content === _constants.CONTAINED;
        if (contentContained) {
            return true;
        }
    });
    return metastatementContainedAssertion;
}

//# sourceMappingURL=data:application/json;base64,