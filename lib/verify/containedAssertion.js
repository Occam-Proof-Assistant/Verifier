"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyContainedAssertion;
    }
});
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../verifier/node/metaLevel"));
var _verify = require("../utilities/verify");
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var termNodeQuery = (0, _query.nodeQuery)("/statement/term!"), statementTermNodesQuery = (0, _query.nodesQuery)("/statement/metaArgument/statement//term");
function verifyContainedAssertion(containedAssertionNode, assignments, derived, localContext) {
    var statementVerifiedAsContainedAssertion;
    var statementContainedAssertion = isStatementContainedAssertion(containedAssertionNode);
    if (statementContainedAssertion) {
        var containedAssertionString = localContext.nodeAsString(containedAssertionNode);
        localContext.trace("Verifying the '".concat(containedAssertionString, "' statement as a contained assertion..."), containedAssertionNode);
        var statementFunctions = [
            verifyStatementAsDerivedContainedAssertion,
            verifyStatementAsStatedContainedAssertion
        ];
        statementVerifiedAsContainedAssertion = statementFunctions.some(function(statementFunction) {
            var statementVerifiedAsContainedAssertion = statementFunction(containedAssertionNode, assignments, derived, localContext);
            if (statementVerifiedAsContainedAssertion) {
                return true;
            }
        });
        if (statementVerifiedAsContainedAssertion) {
            localContext.debug("...verified the '".concat(containedAssertionString, "' statement as a contained assertion."), containedAssertionNode);
        }
    }
    return statementVerifiedAsContainedAssertion;
}
function verifyStatementAsDerivedContainedAssertion(containedAssertionNode, assignments, derived, localContext) {
    var statementVerifiedAsDefinedContainedAssertion = false;
    if (derived) {
        var containedAssertionString = localContext.nodeAsString(containedAssertionNode);
        localContext.trace("Verifying the '".concat(containedAssertionString, "' derived statement as a contained assertion..."), containedAssertionNode);
        var statementNegated = (0, _verify.isStatementNegated)(containedAssertionNode), termNode = termNodeQuery(containedAssertionNode), negated = statementNegated, statementTermNodes = statementTermNodesQuery(containedAssertionNode), termNodeMatchesMetaArgumentVariableNode = statementTermNodes.some(function(statementTermNode) {
            var termNodeMatchesMetaArgumentVariableNode = termNode.match(statementTermNode);
            if (termNodeMatchesMetaArgumentVariableNode) {
                return true;
            }
        });
        if (!negated) {
            if (termNodeMatchesMetaArgumentVariableNode) {
                statementVerifiedAsDefinedContainedAssertion = true;
            }
        }
        if (negated) {
            if (!termNodeMatchesMetaArgumentVariableNode) {
                statementVerifiedAsDefinedContainedAssertion = true;
            }
        }
        if (statementVerifiedAsDefinedContainedAssertion) {
            localContext.debug("...verified the '".concat(containedAssertionString, "' derived statement as a contained assertion."), containedAssertionNode);
        }
    }
    return statementVerifiedAsDefinedContainedAssertion;
}
function verifyStatementAsStatedContainedAssertion(containedAssertionNode, assignments, derived, localContext) {
    var statementVerifiedAsStatedContainedAssertion = false;
    if (!derived) {
        var containedAssertionString = localContext.nodeAsString(containedAssertionNode);
        localContext.trace("Verifying the '".concat(containedAssertionString, "' stated statement as a contained assertion..."), containedAssertionNode);
        var intrinsicLevel = localContext.isIntrinsicLevel();
        if (intrinsicLevel) {
            localContext.debug("The '".concat(containedAssertionString, "' stated statement as a contained assertion cannot be verified at intrinsic level."), containedAssertionNode);
        } else {
            var nonTerminalNode = containedAssertionNode, nonTerminalNodeVerified = _metaLevel.default.verifyNonTerminalNode(nonTerminalNode, localContext, function() {
                var verifiedAhead = true;
                return verifiedAhead;
            });
            statementVerifiedAsStatedContainedAssertion = nonTerminalNodeVerified; ///
        }
        if (statementVerifiedAsStatedContainedAssertion) {
            localContext.debug("...verified the '".concat(containedAssertionString, "' stated statement as a contained assertion."), containedAssertionNode);
        }
    }
    return statementVerifiedAsStatedContainedAssertion;
}

//# sourceMappingURL=data:application/json;base64,