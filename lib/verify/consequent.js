"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyConsequent;
    }
});
var _consequent = /*#__PURE__*/ _interopRequireDefault(require("../consequent"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/unqualified"));
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/*/statement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/consequent/unqualifiedStatement!");
function verifyConsequent(consequentNode, consequents, proofContext) {
    var consequentVerified = false;
    proofContext.begin(consequentNode);
    var unqualifiedStatementNode = unqualifiedStatementNodeQuery(consequentNode);
    if (unqualifiedStatementNode !== null) {
        var unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, proofContext);
        if (unqualifiedStatementVerified) {
            var statementNode = statementNodeQuery(unqualifiedStatementNode), consequent = _consequent.default.fromStatementNode(statementNode);
            consequents.push(consequent);
            consequentVerified = true;
        }
    }
    consequentVerified ? proofContext.complete(consequentNode) : proofContext.halt(consequentNode);
    return consequentVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvY29uc2VxdWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IENvbnNlcXVlbnQgZnJvbSBcIi4uL2NvbnNlcXVlbnRcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L3N0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi8qL3N0YXRlbWVudCFcIiksXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9jb25zZXF1ZW50L3VucXVhbGlmaWVkU3RhdGVtZW50IVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5Q29uc2VxdWVudChjb25zZXF1ZW50Tm9kZSwgY29uc2VxdWVudHMsIHByb29mQ29udGV4dCkge1xuICBsZXQgY29uc2VxdWVudFZlcmlmaWVkID0gZmFsc2U7XG5cbiAgcHJvb2ZDb250ZXh0LmJlZ2luKGNvbnNlcXVlbnROb2RlKTtcblxuICBjb25zdCB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUgPSB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeShjb25zZXF1ZW50Tm9kZSk7XG5cbiAgaWYgKHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUsIHByb29mQ29udGV4dCk7XG5cbiAgICBpZiAodW5xdWFsaWZpZWRTdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgICAgY29uc3Qgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudE5vZGVRdWVyeSh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgICAgY29uc2VxdWVudCA9IENvbnNlcXVlbnQuZnJvbVN0YXRlbWVudE5vZGUoc3RhdGVtZW50Tm9kZSk7XG5cbiAgICAgIGNvbnNlcXVlbnRzLnB1c2goY29uc2VxdWVudCk7XG5cbiAgICAgIGNvbnNlcXVlbnRWZXJpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgY29uc2VxdWVudFZlcmlmaWVkID9cbiAgICBwcm9vZkNvbnRleHQuY29tcGxldGUoY29uc2VxdWVudE5vZGUpIDpcbiAgICAgIHByb29mQ29udGV4dC5oYWx0KGNvbnNlcXVlbnROb2RlKTtcblxuICByZXR1cm4gY29uc2VxdWVudFZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeUNvbnNlcXVlbnQiLCJzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSIsImNvbnNlcXVlbnROb2RlIiwiY29uc2VxdWVudHMiLCJwcm9vZkNvbnRleHQiLCJjb25zZXF1ZW50VmVyaWZpZWQiLCJiZWdpbiIsInVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSIsInVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCIsInN0YXRlbWVudE5vZGUiLCJjb25zZXF1ZW50IiwiQ29uc2VxdWVudCIsImZyb21TdGF0ZW1lbnROb2RlIiwicHVzaCIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVUE7OztlQUF3QkE7OzsrREFSRDtnRUFDZ0I7cUJBRWI7Ozs7OztBQUUxQixJQUFNQyxxQkFBcUJDLElBQUFBLGdCQUFTLEVBQUMsa0JBQy9CQyxnQ0FBZ0NELElBQUFBLGdCQUFTLEVBQUM7QUFFakMsU0FBU0YsaUJBQWlCSSxjQUFjLEVBQUVDLFdBQVcsRUFBRUMsWUFBWSxFQUFFO0lBQ2xGLElBQUlDLHFCQUFxQixLQUFLO0lBRTlCRCxhQUFhRSxLQUFLLENBQUNKO0lBRW5CLElBQU1LLDJCQUEyQk4sOEJBQThCQztJQUUvRCxJQUFJSyw2QkFBNkIsSUFBSSxFQUFFO1FBQ3JDLElBQU1DLCtCQUErQkMsSUFBQUEsb0JBQTBCLEVBQUNGLDBCQUEwQkg7UUFFMUYsSUFBSUksOEJBQThCO1lBQ2hDLElBQU1FLGdCQUFnQlgsbUJBQW1CUSwyQkFDbkNJLGFBQWFDLG1CQUFVLENBQUNDLGlCQUFpQixDQUFDSDtZQUVoRFAsWUFBWVcsSUFBSSxDQUFDSDtZQUVqQk4scUJBQXFCLElBQUk7UUFDM0IsQ0FBQztJQUNILENBQUM7SUFFREEscUJBQ0VELGFBQWFXLFFBQVEsQ0FBQ2Isa0JBQ3BCRSxhQUFhWSxJQUFJLENBQUNkLGVBQWU7SUFFckMsT0FBT0c7QUFDVCJ9