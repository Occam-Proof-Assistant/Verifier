"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyDeclaration;
    }
});
var _shim = /*#__PURE__*/ _interop_require_default(require("../shim"));
var _declaration = /*#__PURE__*/ _interop_require_default(require("../declaration"));
var _reference = /*#__PURE__*/ _interop_require_default(require("../metaType/reference"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/declaration/statement[1]"), metavariableNodeQuery = (0, _query.nodeQuery)("/declaration/statement[0]/metavariable!");
var verifyDeclarationFunctions = [
    verifyDerivedDeclaration,
    verifyStatedDeclaration
];
function verifyDeclaration(declarationNode, declarations, stated, localContext) {
    var declarationVerified;
    var declarationString = localContext.nodeAsString(declarationNode);
    localContext.trace("Verifying the '".concat(declarationString, "' declaration..."), declarationNode);
    declarationVerified = verifyDeclarationFunctions.some(function(verifyDeclarationFunction) {
        var declarationVerified = verifyDeclarationFunction(declarationNode, declarations, stated, localContext);
        if (declarationVerified) {
            return true;
        }
    });
    if (declarationVerified) {
        localContext.debug("...verified the '".concat(declarationString, "' declaration."), declarationNode);
    }
    return declarationVerified;
}
function verifyDerivedDeclaration(declarationNode, declarations, stated, localContext) {
    var derivedDeclarationVerified;
    if (!stated) {
        var declarationString = localContext.nodeAsString(declarationNode);
        localContext.trace("Verifying the '".concat(declarationString, "' derived declaration..."), declarationNode);
        derivedDeclarationVerified = false; ///
        if (derivedDeclarationVerified) {
            localContext.debug("...verified the '".concat(declarationString, "' derived declaration."), declarationNode);
        }
    }
    return derivedDeclarationVerified;
}
function verifyStatedDeclaration(declarationNode, declarations, stated, localContext) {
    var statedDeclarationVerified = false;
    if (stated) {
        var declarationString = localContext.nodeAsString(declarationNode);
        localContext.trace("Verifying the '".concat(declarationString, "' stated declaration..."), declarationNode);
        var metavariableNode = metavariableNodeQuery(declarationNode), metavariableVerified = verifyMetavariable(metavariableNode, localContext);
        if (metavariableVerified) {
            var verifyStatement = _shim.default.verifyStatement, _$stated = true, assignments = null, statementNode = statementNodeQuery(declarationNode), statementVerified = verifyStatement(statementNode, assignments, _$stated, localContext);
            if (statementVerified) {
                var declaration = _declaration.default.fromMetavariableNodeAndStatementNode(metavariableNode, statementNode);
                declarations.push(declaration);
                statedDeclarationVerified = true;
            }
        }
        if (statedDeclarationVerified) {
            localContext.debug("...verified the '".concat(declarationString, "' stated declaration."), declarationNode);
        }
    }
    return statedDeclarationVerified;
}
function verifyMetavariable(metavariableNode, localContext) {
    var metavariableVerified = false;
    var metavariableString = localContext.nodeAsString(metavariableNode);
    localContext.trace("Verifying the '".concat(metavariableString, "' metavariable..."), metavariableNode);
    var metavariable = localContext.findMetavariableByMetavariableNode(metavariableNode);
    if (metavariable !== null) {
        var metaType = metavariable.getMetaType();
        if (metaType === _reference.default) {
            metavariableVerified = true;
        } else {
            var referenceMetaTypeName = _reference.default.getName(), metaTypeString = metaType.asString();
            localContext.debug("The '".concat(metavariableString, "' metavariable's meta-type is '").concat(metaTypeString, "' when it should be '").concat(referenceMetaTypeName, "'."), metavariableNode);
        }
    } else {
        localContext.debug("The '".concat(metavariableString, "' metavariable is not present'."), metavariableNode);
    }
    if (metavariableVerified) {
        localContext.debug("...verified the '".concat(metavariableString, "' metavariable."), metavariableNode);
    }
    return metavariableVerified;
}

//# sourceMappingURL=data:application/json;base64,