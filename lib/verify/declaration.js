"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyDeclaration;
    }
});
var _shim = /*#__PURE__*/ _interop_require_default(require("../shim"));
var _reference = /*#__PURE__*/ _interop_require_default(require("../reference"));
var _declaration = /*#__PURE__*/ _interop_require_default(require("../declaration"));
var _reference1 = /*#__PURE__*/ _interop_require_default(require("../metaType/reference"));
var _metavariableGivenMetaType = /*#__PURE__*/ _interop_require_default(require("../verify/metavariableGivenMetaType"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/declaration/statement"), metavariableNodeQuery = (0, _query.nodeQuery)("/declaration/reference/metavariable"); ///
var verifyDeclarationFunctions = [
    verifyDerivedDeclaration,
    verifyStatedDeclaration
];
function verifyDeclaration(declarationNode, declarations, stated, localContext) {
    var declarationVerified;
    var declarationString = localContext.nodeAsString(declarationNode);
    localContext.trace("Verifying the '".concat(declarationString, "' declaration..."), declarationNode);
    declarationVerified = verifyDeclarationFunctions.some(function(verifyDeclarationFunction) {
        var declarationVerified = verifyDeclarationFunction(declarationNode, declarations, stated, localContext);
        if (declarationVerified) {
            return true;
        }
    });
    if (declarationVerified) {
        localContext.debug("...verified the '".concat(declarationString, "' declaration."), declarationNode);
    }
    return declarationVerified;
}
function verifyDerivedDeclaration(declarationNode, declarations, stated, localContext) {
    var derivedDeclarationVerified;
    if (!stated) {
        var declarationString = localContext.nodeAsString(declarationNode);
        localContext.trace("Verifying the '".concat(declarationString, "' derived declaration..."), declarationNode);
        var metaType = _reference1.default, metavariableNode = metavariableNodeQuery(declarationNode), metavariableVerifiedGivenMetaType = (0, _metavariableGivenMetaType.default)(metavariableNode, metaType, localContext);
        if (metavariableVerifiedGivenMetaType) {
            var verifyStatement = _shim.default.verifyStatement, _$stated = true, assignments = null, statementNode = statementNodeQuery(declarationNode), statementVerified = verifyStatement(statementNode, assignments, _$stated, localContext);
            if (statementVerified) {
                var reference = _reference.default.fromMetavariableNode(metavariableNode), declaration = _declaration.default.fromReferenceAndStatementNode(reference, statementNode);
                declarations.push(declaration);
                derivedDeclarationVerified = true;
            }
        }
        if (derivedDeclarationVerified) {
            localContext.debug("...verified the '".concat(declarationString, "' derived declaration."), declarationNode);
        }
    }
    return derivedDeclarationVerified;
}
function verifyStatedDeclaration(declarationNode, declarations, stated, localContext) {
    var statedDeclarationVerified = false;
    if (stated) {
        var declarationString = localContext.nodeAsString(declarationNode);
        localContext.trace("Verifying the '".concat(declarationString, "' stated declaration..."), declarationNode);
        var metaType = _reference1.default, metavariableNode = metavariableNodeQuery(declarationNode), metavariableVerifiedGivenMetaType = (0, _metavariableGivenMetaType.default)(metavariableNode, metaType, localContext);
        if (metavariableVerifiedGivenMetaType) {
            var verifyStatement = _shim.default.verifyStatement, _$stated = true, assignments = null, statementNode = statementNodeQuery(declarationNode), statementVerified = verifyStatement(statementNode, assignments, _$stated, localContext);
            if (statementVerified) {
                var reference = _reference.default.fromMetavariableNode(metavariableNode), declaration = _declaration.default.fromReferenceAndStatementNode(reference, statementNode);
                declarations.push(declaration);
                statedDeclarationVerified = true;
            }
        }
        if (statedDeclarationVerified) {
            localContext.debug("...verified the '".concat(declarationString, "' stated declaration."), declarationNode);
        }
    }
    return statedDeclarationVerified;
}

//# sourceMappingURL=data:application/json;base64,