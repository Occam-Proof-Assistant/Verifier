"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _judgement = /*#__PURE__*/ _interop_require_default(require("../verify/judgement"));
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../verifier/node/metaLevel"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var judgementNodeQuery = (0, _query.nodeQuery)("/metastatement/judgement!");
function verifyMetastatement(metastatementNode, assignments, derived, localContext) {
    var metastatementVerified;
    var metastatementString = localContext.nodeAsString(metastatementNode);
    localContext.trace("Verifying the '".concat(metastatementString, "' metastatement..."), metastatementNode);
    var verifyMetaStatementFunctions = [
        verifyMetastatementAsJudgement,
        verifyMetastatementAsIs
    ];
    metastatementVerified = verifyMetaStatementFunctions.some(function(verifyStatementFunction) {
        var metastatementVerified = verifyStatementFunction(metastatementNode, assignments, derived, localContext);
        if (metastatementVerified) {
            return true;
        }
    });
    if (metastatementVerified) {
        localContext.debug("...verified the '".concat(metastatementString, "' metastatement."), metastatementNode);
    }
    return metastatementVerified;
}
Object.assign(_metaLevel.default, {
    verifyMetastatement: verifyMetastatement
});
var _default = verifyMetastatement;
function verifyMetastatementAsJudgement(metastatementNode, assignments, derived, localContext) {
    var metastatementVerifiedAsJudgement = false;
    var judgementNode = judgementNodeQuery(metastatementNode);
    if (judgementNode !== null) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the '".concat(metastatementString, "' metastatement as a judgement..."), metastatementNode);
        var judgementVerified = (0, _judgement.default)(judgementNode, assignments, derived, localContext);
        metastatementVerifiedAsJudgement = judgementVerified; ///
        if (metastatementVerifiedAsJudgement) {
            localContext.debug("...verified the '".concat(metastatementString, "' metastatement as a judgement."), metastatementNode);
        }
    }
    return metastatementVerifiedAsJudgement;
}
function verifyMetastatementAsIs(metastatementNode, assignments, derived, localContext) {
    var metastatementVerifiedAsIs;
    var judgementNode = judgementNodeQuery(metastatementNode);
    if (judgementNode === null) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the '".concat(metastatementString, "' metastatement as is..."), metastatementNode);
        var verifyMetastatementAsIsFunctions = [
            verifyDerivedMetastatementAsIs,
            verifyStatedMetastatementAsIs
        ];
        metastatementVerifiedAsIs = verifyMetastatementAsIsFunctions.some(function(verifyMetastatementAsIsFunction) {
            var metastatementVerifiedAsIs = verifyMetastatementAsIsFunction(metastatementNode, assignments, derived, localContext);
            if (metastatementVerifiedAsIs) {
                return true;
            }
        });
        if (metastatementVerifiedAsIs) {
            localContext.debug("...verified the '".concat(metastatementString, "' metastatement as is."), metastatementNode);
        }
    }
    return metastatementVerifiedAsIs;
}
function verifyDerivedMetastatementAsIs(metastatementNode, assignments, derived, localContext) {
    var derivedMetastatementVerifiedAsIs = false;
    if (derived) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.debug("Cannot verify the derived '".concat(metastatementString, "' metastatement as is."), metastatementNode);
    }
    return derivedMetastatementVerifiedAsIs;
}
function verifyStatedMetastatementAsIs(metastatementNode, assignments, derived, localContext) {
    var statedMetastatementVerifiedAsIs = false;
    if (!derived) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the stated '".concat(metastatementString, "' metastatement as is..."), metastatementNode);
        var nonTerminalNode = metastatementNode, nonTerminalNodeVerified = _metaLevel.default.verifyNonTerminalNode(nonTerminalNode, localContext, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        statedMetastatementVerifiedAsIs = nonTerminalNodeVerified; ///
        if (statedMetastatementVerifiedAsIs) {
            localContext.debug("...verified the stated '".concat(metastatementString, "' metastatement as is."), metastatementNode);
        }
    }
    return statedMetastatementVerifiedAsIs;
}

//# sourceMappingURL=data:application/json;base64,