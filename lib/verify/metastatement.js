"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _judgement = /*#__PURE__*/ _interop_require_default(require("../verify/judgement"));
var _metaEquality = /*#__PURE__*/ _interop_require_default(require("../verify/metaEquality"));
var _metastatement = /*#__PURE__*/ _interop_require_default(require("../verifier/node/metastatement"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var judgementNodeQuery = (0, _query.nodeQuery)("/metastatement/judgement!"), metaEqualityNodeQuery = (0, _query.nodeQuery)("/metastatement/metaEquality!");
function verifyMetastatement(metastatementNode, derived, localMetaContext) {
    var metastatementVerified;
    var metastatementString = localMetaContext.nodeAsString(metastatementNode);
    localMetaContext.trace("Verifying the '".concat(metastatementString, "' metastatement..."), metastatementNode);
    var verifyMetaStatementFunctions = [
        verifyMetastatementAsMetaEquality,
        verifyMetastatementAsJudgement,
        verifyMetastatementAsIs
    ];
    metastatementVerified = verifyMetaStatementFunctions.some(function(verifyStatementFunction) {
        var metastatementVerified = verifyStatementFunction(metastatementNode, derived, localMetaContext);
        if (metastatementVerified) {
            return true;
        }
    });
    if (metastatementVerified) {
        localMetaContext.debug("...verified the '".concat(metastatementString, "' metastatement."), metastatementNode);
    }
    return metastatementVerified;
}
Object.assign(_metastatement.default, {
    verifyMetastatement: verifyMetastatement
});
var _default = verifyMetastatement;
function verifyMetastatementAsMetaEquality(metastatementNode, derived, localMetaContext) {
    var metastatementVerifiedAsMetaEquality = false;
    var metaEqualityNode = metaEqualityNodeQuery(metastatementNode);
    if (metaEqualityNode !== null) {
        var metastatementString = localMetaContext.nodeAsString(metastatementNode);
        localMetaContext.trace("Verifying the '".concat(metastatementString, "' metastatement as a meta-equality..."), metastatementNode);
        var metaEqualityVerified = (0, _metaEquality.default)(metaEqualityNode, derived, localMetaContext);
        metastatementVerifiedAsMetaEquality = metaEqualityVerified; ///
        if (metastatementVerifiedAsMetaEquality) {
            localMetaContext.debug("...verified the '".concat(metastatementString, "' metastatement as a meta-equality."), metastatementNode);
        }
    }
    return metastatementVerifiedAsMetaEquality;
}
function verifyMetastatementAsJudgement(metastatementNode, derived, localMetaContext) {
    var metastatementVerifiedAsJudgement = false;
    var judgementNode = judgementNodeQuery(metastatementNode);
    if (judgementNode !== null) {
        var metastatementString = localMetaContext.nodeAsString(metastatementNode);
        localMetaContext.trace("Verifying the '".concat(metastatementString, "' metastatement as a judgement..."), metastatementNode);
        var judgementVerified = (0, _judgement.default)(judgementNode, derived, localMetaContext);
        metastatementVerifiedAsJudgement = judgementVerified; ///
        if (metastatementVerifiedAsJudgement) {
            localMetaContext.debug("...verified the '".concat(metastatementString, "' metastatement as a judgement."), metastatementNode);
        }
    }
    return metastatementVerifiedAsJudgement;
}
function verifyMetastatementAsIs(metastatementNode, derived, localMetaContext) {
    var metastatementVerifiedAsIs = false;
    var judgementNode = judgementNodeQuery(metastatementNode), metaEqualityNode = metaEqualityNodeQuery(metastatementNode);
    if (judgementNode === null && metaEqualityNode === null) {
        var metastatementString = localMetaContext.nodeAsString(metastatementNode);
        localMetaContext.trace("Verifying the '".concat(metastatementString, "' metastatement as is..."), metastatementNode);
        var nonTerminalNode = metastatementNode, nonTerminalNodeVerified = _metastatement.default.verifyNonTerminalNode(nonTerminalNode, localMetaContext, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        metastatementVerifiedAsIs = nonTerminalNodeVerified; ///
        if (metastatementVerifiedAsIs) {
            localMetaContext.debug("...verified the '".concat(metastatementString, "' metastatement as is."), metastatementNode);
        }
    }
    return metastatementVerifiedAsIs;
}

//# sourceMappingURL=data:application/json;base64,