"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _judgement = /*#__PURE__*/ _interop_require_default(require("../verify/judgement"));
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../verifier/node/metaLevel"));
var _statementAsDefinedAssertion = /*#__PURE__*/ _interop_require_default(require("./statementAsDefinedAssertion"));
var _statementAsContainedAssertion = /*#__PURE__*/ _interop_require_default(require("./statementAsContainedAssertion"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var judgementNodeQuery = (0, _query.nodeQuery)("/statement/judgement!");
function verifyStatement(statementNode, assignments, derived, localContext) {
    var statementVerified;
    var statementString = localContext.nodeAsString(statementNode);
    localContext.trace("Verifying the '".concat(statementString, "' statement..."), statementNode);
    var verifyStatementFunctions = [
        verifyStatementAsJudgement,
        _statementAsDefinedAssertion.default,
        _statementAsContainedAssertion.default,
        verifyStatementAsIs
    ];
    statementVerified = verifyStatementFunctions.some(function(verifyStatementFunction) {
        var statementVerified = verifyStatementFunction(statementNode, assignments, derived, localContext);
        if (statementVerified) {
            return true;
        }
    });
    if (statementVerified) {
        localContext.debug("...verified the '".concat(statementString, "' statement."), statementNode);
    }
    return statementVerified;
}
Object.assign(_metaLevel.default, {
    verifyStatement: verifyStatement
});
var _default = verifyStatement;
function verifyStatementAsJudgement(statementNode, assignments, derived, localContext) {
    var statementVerifiedAsJudgement = false;
    var statementJudgement = isStatementJudgement(statementNode);
    if (statementJudgement) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the '".concat(statementString, "' statement as a judgement..."), statementNode);
        var judgementNode = judgementNodeQuery(statementNode), judgementVerified = (0, _judgement.default)(judgementNode, assignments, derived, localContext);
        statementVerifiedAsJudgement = judgementVerified; ///
        if (statementVerifiedAsJudgement) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a judgement."), statementNode);
        }
    }
    return statementVerifiedAsJudgement;
}
function verifyStatementAsIs(statementNode, assignments, derived, localContext) {
    var statementVerifiedAsIs;
    var statementJudgement = isStatementJudgement(statementNode);
    if (!statementJudgement) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the '".concat(statementString, "' statement as is..."), statementNode);
        var verifyStatementAsIsFunctions = [
            verifyDerivedStatementAsIs,
            verifyStatedStatementAsIs
        ];
        statementVerifiedAsIs = verifyStatementAsIsFunctions.some(function(verifyStatementAsIsFunction) {
            var statementVerifiedAsIs = verifyStatementAsIsFunction(statementNode, assignments, derived, localContext);
            if (statementVerifiedAsIs) {
                return true;
            }
        });
        if (statementVerifiedAsIs) {
            localContext.debug("...verified the '".concat(statementString, "' statement as is."), statementNode);
        }
    }
    return statementVerifiedAsIs;
}
function verifyDerivedStatementAsIs(statementNode, assignments, derived, localContext) {
    var derivedStatementVerifiedAsIs = false;
    if (derived) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.debug("Cannot verify the derived '".concat(statementString, "' statement as is."), statementNode);
    }
    return derivedStatementVerifiedAsIs;
}
function verifyStatedStatementAsIs(statementNode, assignments, derived, localContext) {
    var statedStatementVerifiedAsIs = false;
    if (!derived) {
        var statementString = localContext.nodeAsString(statementNode);
        localContext.trace("Verifying the stated '".concat(statementString, "' statement as is..."), statementNode);
        var nonTerminalNode = statementNode, nonTerminalNodeVerified = _metaLevel.default.verifyNonTerminalNode(nonTerminalNode, localContext, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        statedStatementVerifiedAsIs = nonTerminalNodeVerified; ///
        if (statedStatementVerifiedAsIs) {
            localContext.debug("...verified the stated '".concat(statementString, "' statement as is."), statementNode);
        }
    }
    return statedStatementVerifiedAsIs;
}
function isStatementJudgement(statementNode) {
    var judgementNode = judgementNodeQuery(statementNode), statementJudgement = judgementNode !== null;
    return statementJudgement;
}

//# sourceMappingURL=data:application/json;base64,