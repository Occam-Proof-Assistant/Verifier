"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _frameAssertion = /*#__PURE__*/ _interop_require_default(require("../verify/frameAssertion"));
var _metastatement = /*#__PURE__*/ _interop_require_default(require("../verifier/node/metastatement"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var frameAssertionNodeQuery = (0, _query.nodeQuery)("/metastatement/frameAssertion!");
function verifyMetastatement(metastatementNode, assignments, derived, localContext) {
    var metastatementVerified;
    var metastatementString = localContext.nodeAsString(metastatementNode);
    localContext.trace("Verifying the '".concat(metastatementString, "' metastatement..."), metastatementNode);
    var verifyMetaStatementFunctions = [
        verifyMetastatementAsFrameAssertion,
        verifyMetastatementAsIs
    ];
    metastatementVerified = verifyMetaStatementFunctions.some(function(verifyStatementFunction) {
        var metastatementVerified = verifyStatementFunction(metastatementNode, assignments, derived, localContext);
        if (metastatementVerified) {
            return true;
        }
    });
    if (metastatementVerified) {
        localContext.debug("...verified the '".concat(metastatementString, "' metastatement."), metastatementNode);
    }
    return metastatementVerified;
}
Object.assign(_metastatement.default, {
    verifyMetastatement: verifyMetastatement
});
var _default = verifyMetastatement;
function verifyMetastatementAsFrameAssertion(metastatementNode, assignments, derived, localContext) {
    var metastatementVerifiedAsFrameAssertion = false;
    var frameAssertionNode = frameAssertionNodeQuery(metastatementNode);
    if (frameAssertionNode !== null) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the '".concat(metastatementString, "' metastatement as a frame assertion..."), metastatementNode);
        var frameAssertionVerified = (0, _frameAssertion.default)(frameAssertionNode, assignments, derived, localContext);
        metastatementVerifiedAsFrameAssertion = frameAssertionVerified; ///
        if (metastatementVerifiedAsFrameAssertion) {
            localContext.debug("...verified the '".concat(metastatementString, "' metastatement as a frame assertion."), metastatementNode);
        }
    }
    return metastatementVerifiedAsFrameAssertion;
}
function verifyMetastatementAsIs(metastatementNode, assignments, derived, localContext) {
    var metastatementVerifiedAsIs;
    var frameAssertionNode = frameAssertionNodeQuery(metastatementNode);
    if (frameAssertionNode === null) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the '".concat(metastatementString, "' metastatement as is..."), metastatementNode);
        var verifyMetastatementAsIsFunctions = [
            verifyDerivedMetastatementAsIs,
            verifyStatedMetastatementAsIs
        ];
        metastatementVerifiedAsIs = verifyMetastatementAsIsFunctions.some(function(verifyMetastatementAsIsFunction) {
            var metastatementVerifiedAsIs = verifyMetastatementAsIsFunction(metastatementNode, assignments, derived, localContext);
            if (metastatementVerifiedAsIs) {
                return true;
            }
        });
        if (metastatementVerifiedAsIs) {
            localContext.debug("...verified the '".concat(metastatementString, "' metastatement as is."), metastatementNode);
        }
    }
    return metastatementVerifiedAsIs;
}
function verifyDerivedMetastatementAsIs(metastatementNode, assignments, derived, localContext) {
    var derivedMetastatementVerifiedAsIs = false;
    if (derived) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.debug("Cannot verify the derived '".concat(metastatementString, "' metastatement as is."), metastatementNode);
    }
    return derivedMetastatementVerifiedAsIs;
}
function verifyStatedMetastatementAsIs(metastatementNode, assignments, derived, localContext) {
    var statedMetastatementVerifiedAsIs = false;
    if (!derived) {
        var metastatementString = localContext.nodeAsString(metastatementNode);
        localContext.trace("Verifying the stated '".concat(metastatementString, "' metastatement as is..."), metastatementNode);
        var nonTerminalNode = metastatementNode, nonTerminalNodeVerified = _metastatement.default.verifyNonTerminalNode(nonTerminalNode, localContext, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        statedMetastatementVerifiedAsIs = nonTerminalNodeVerified; ///
        if (statedMetastatementVerifiedAsIs) {
            localContext.debug("...verified the stated '".concat(metastatementString, "' metastatement as is."), metastatementNode);
        }
    }
    return statedMetastatementVerifiedAsIs;
}

//# sourceMappingURL=data:application/json;base64,