"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaproofStep;
    }
});
var _metaproof = /*#__PURE__*/ _interop_require_default(require("../step/metaproof"));
var _metaSubproof = /*#__PURE__*/ _interop_require_default(require("../verify/metaSubproof"));
var _metaSubDerivation = /*#__PURE__*/ _interop_require_default(require("../verify/metaSubDerivation"));
var _qualified = /*#__PURE__*/ _interop_require_default(require("../verify/statement/qualified"));
var _unqualified = /*#__PURE__*/ _interop_require_default(require("../verify/statement/unqualified"));
var _qualified1 = /*#__PURE__*/ _interop_require_default(require("../verify/metastatement/qualified"));
var _unqualified1 = /*#__PURE__*/ _interop_require_default(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
var _assignments = require("../utilities/assignments");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaSubproofNodeQuery = (0, _query.nodeQuery)("/metaproofStep|lastMetaproofStep/metaSubproof!"), metastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement|unqualifiedMetastatement/metastatement!"), qualifiedStatementNodeQuery = (0, _query.nodeQuery)("/metaproofStep|lastMetaproofStep/qualifiedStatement!"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/metaproofStep|lastMetaproofStep/unqualifiedStatement!"), qualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaproofStep|lastMetaproofStep/qualifiedMetastatement!"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/metaproofStep|lastMetaproofStep/unqualifiedMetastatement!");
function verifyMetaproofStep(metaproofStepNode, substitutions, localContext) {
    var metaproofStepVerified = false;
    var metaSubproofNode = metaSubproofNodeQuery(metaproofStepNode), qualifiedStatementNode = qualifiedStatementNodeQuery(metaproofStepNode), unqualifiedStatementNode = unqualifiedStatementNodeQuery(metaproofStepNode), qualifiedMetastatementNode = qualifiedMetastatementNodeQuery(metaproofStepNode), unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(metaproofStepNode);
    if (false) {
    ///
    } else if (metaSubproofNode !== null) {
        var metaSubproofVerified;
        metaSubproofVerified = (0, _metaSubproof.default)(metaSubproofNode, substitutions, localContext);
        if (metaSubproofVerified) {
            var metaproofStep = _metaproof.default.fromMetaSubproofNode(metaSubproofNode);
            localContext.addMetaproofStep(metaproofStep);
            metaproofStepVerified = true;
        }
    } else if (qualifiedStatementNode !== null) {
        var qualifiedStatementVerified;
        var assignments = []; ///
        qualifiedStatementVerified = (0, _qualified.default)(qualifiedStatementNode, assignments, localContext);
        if (qualifiedStatementVerified) {
            var assignmentAssigned = (0, _assignments.assignAssignment)(assignments, localContext);
            qualifiedStatementVerified = assignmentAssigned; ///
        }
        if (qualifiedStatementVerified) {
            var statementNode = statementNodeQuery(qualifiedStatementNode), metaproofStep1 = _metaproof.default.fromStatementNode(statementNode);
            localContext.addMetaproofStep(metaproofStep1);
            metaproofStepVerified = true;
        }
    } else if (unqualifiedStatementNode !== null) {
        var unqualifiedStatementVerified;
        var derived = true, assignments1 = [];
        unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, assignments1, derived, localContext);
        if (unqualifiedStatementVerified) {
            var assignmentAssigned1 = (0, _assignments.assignAssignment)(assignments1, localContext);
            unqualifiedStatementVerified = assignmentAssigned1; ///
        }
        if (unqualifiedStatementVerified) {
            var statementNode1 = statementNodeQuery(unqualifiedStatementNode), metaproofStep2 = _metaproof.default.fromStatementNode(statementNode1);
            localContext.addMetaproofStep(metaproofStep2);
            metaproofStepVerified = unqualifiedStatementVerified; ///
        }
    } else if (qualifiedMetastatementNode !== null) {
        var qualifiedMetastatementVerified;
        var assignments2 = [];
        qualifiedMetastatementVerified = (0, _qualified1.default)(qualifiedMetastatementNode, substitutions, assignments2, localContext);
        if (qualifiedMetastatementVerified) {
            var assignmentAssigned2 = (0, _assignments.assignAssignment)(assignments2, localContext);
            qualifiedMetastatementVerified = assignmentAssigned2; ///
        }
        if (qualifiedMetastatementVerified) {
            var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metaproofStep3 = _metaproof.default.fromMetastatementNode(metastatementNode);
            localContext.addMetaproofStep(metaproofStep3);
            metaproofStepVerified = qualifiedMetastatementVerified; ///
        }
    } else if (unqualifiedMetastatementNode !== null) {
        var unqualifiedMetastatementVerified;
        var derived1 = true, assignments3 = [];
        unqualifiedMetastatementVerified = (0, _unqualified1.default)(unqualifiedMetastatementNode, assignments3, derived1, localContext);
        if (unqualifiedMetastatementVerified) {
            var assignmentAssigned3 = (0, _assignments.assignAssignment)(assignments3, localContext);
            unqualifiedMetastatementVerified = assignmentAssigned3; ///
        }
        if (unqualifiedMetastatementVerified) {
            var metastatementNode1 = metastatementNodeQuery(unqualifiedMetastatementNode), metaproofStep4 = _metaproof.default.fromMetastatementNode(metastatementNode1);
            localContext.addMetaproofStep(metaproofStep4);
            metaproofStepVerified = true;
        }
    }
    return metaproofStepVerified;
}
Object.assign(_metaSubDerivation.default, {
    verifyMetaproofStep: verifyMetaproofStep
});

//# sourceMappingURL=data:application/json;base64,