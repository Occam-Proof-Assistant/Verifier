"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaAntecedent;
    }
});
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../step/metaproof"));
var _metaAntecedent = /*#__PURE__*/ _interopRequireDefault(require("../metaAntecedent"));
var _metastatement = /*#__PURE__*/ _interopRequireDefault(require("./metastatement"));
var _query = require("../utilities/query");
var _string = require("../utilities/string");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/metaAntecedent/unqualifiedMetastatement!/metastatement!");
function verifyMetaAntecedent(metaAntecedentNode, metaAntecedents, metaproofContext) {
    var metaAntecedentVerified;
    metaproofContext.begin(metaAntecedentNode);
    var metaAntecedentString = (0, _string.nodeAsString)(metaAntecedentNode);
    metaproofContext.debug("Verifying the ".concat(metaAntecedentString, " metaAntecedent..."));
    var metastatementNode = metastatementNodeQuery(metaAntecedentNode);
    if (metastatementNode !== null) {
        var qualified = false, metastatementVerified = (0, _metastatement.default)(metastatementNode, qualified, metaproofContext);
        if (metastatementVerified) {
            var metaproofStep = _metaproof.default.fromMetastatementNode(metastatementNode), metaAntecedent = _metaAntecedent.default.fromMetastatementNode(metastatementNode);
            metaAntecedents.push(metaAntecedent);
            metaproofContext.addMetaproofStep(metaproofStep);
        }
        metaAntecedentVerified = true;
    }
    metaAntecedentVerified ? metaproofContext.complete(metaAntecedentNode) : metaproofContext.halt(metaAntecedentNode);
    return metaAntecedentVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YUFudGVjZWRlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBNZXRhcHJvb2ZTdGVwIGZyb20gXCIuLi9zdGVwL21ldGFwcm9vZlwiO1xuaW1wb3J0IE1ldGFBbnRlY2VkZW50IGZyb20gXCIuLi9tZXRhQW50ZWNlZGVudFwiO1xuaW1wb3J0IHZlcmlmeU1ldGFzdGF0ZW1lbnQgZnJvbSBcIi4vbWV0YXN0YXRlbWVudFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5pbXBvcnQgeyBub2RlQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuXG5jb25zdCBtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL21ldGFBbnRlY2VkZW50L3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudCEvbWV0YXN0YXRlbWVudCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeU1ldGFBbnRlY2VkZW50KG1ldGFBbnRlY2VkZW50Tm9kZSwgbWV0YUFudGVjZWRlbnRzLCBtZXRhcHJvb2ZDb250ZXh0KSB7XG4gIGxldCBtZXRhQW50ZWNlZGVudFZlcmlmaWVkO1xuXG4gIG1ldGFwcm9vZkNvbnRleHQuYmVnaW4obWV0YUFudGVjZWRlbnROb2RlKTtcblxuICBjb25zdCBtZXRhQW50ZWNlZGVudFN0cmluZyA9IG5vZGVBc1N0cmluZyhtZXRhQW50ZWNlZGVudE5vZGUpO1xuXG4gIG1ldGFwcm9vZkNvbnRleHQuZGVidWcoYFZlcmlmeWluZyB0aGUgJHttZXRhQW50ZWNlZGVudFN0cmluZ30gbWV0YUFudGVjZWRlbnQuLi5gKTtcblxuICBjb25zdCBtZXRhc3RhdGVtZW50Tm9kZSA9IG1ldGFzdGF0ZW1lbnROb2RlUXVlcnkobWV0YUFudGVjZWRlbnROb2RlKTtcblxuICBpZiAobWV0YXN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBxdWFsaWZpZWQgPSBmYWxzZSxcbiAgICAgICAgICBtZXRhc3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlNZXRhc3RhdGVtZW50KG1ldGFzdGF0ZW1lbnROb2RlLCBxdWFsaWZpZWQsIG1ldGFwcm9vZkNvbnRleHQpO1xuXG4gICAgaWYgKG1ldGFzdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgICAgY29uc3QgbWV0YXByb29mU3RlcCA9IE1ldGFwcm9vZlN0ZXAuZnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICAgIG1ldGFBbnRlY2VkZW50ID0gTWV0YUFudGVjZWRlbnQuZnJvbU1ldGFzdGF0ZW1lbnROb2RlKG1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgbWV0YUFudGVjZWRlbnRzLnB1c2gobWV0YUFudGVjZWRlbnQpO1xuXG4gICAgICBtZXRhcHJvb2ZDb250ZXh0LmFkZE1ldGFwcm9vZlN0ZXAobWV0YXByb29mU3RlcCk7XG4gICAgfVxuXG4gICAgbWV0YUFudGVjZWRlbnRWZXJpZmllZCA9IHRydWU7XG4gIH1cblxuICBtZXRhQW50ZWNlZGVudFZlcmlmaWVkID9cbiAgICBtZXRhcHJvb2ZDb250ZXh0LmNvbXBsZXRlKG1ldGFBbnRlY2VkZW50Tm9kZSkgOlxuICAgICAgbWV0YXByb29mQ29udGV4dC5oYWx0KG1ldGFBbnRlY2VkZW50Tm9kZSk7XG5cbiAgcmV0dXJuIG1ldGFBbnRlY2VkZW50VmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5TWV0YUFudGVjZWRlbnQiLCJtZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwibWV0YUFudGVjZWRlbnROb2RlIiwibWV0YUFudGVjZWRlbnRzIiwibWV0YXByb29mQ29udGV4dCIsIm1ldGFBbnRlY2VkZW50VmVyaWZpZWQiLCJiZWdpbiIsIm1ldGFBbnRlY2VkZW50U3RyaW5nIiwibm9kZUFzU3RyaW5nIiwiZGVidWciLCJtZXRhc3RhdGVtZW50Tm9kZSIsInF1YWxpZmllZCIsIm1ldGFzdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeU1ldGFzdGF0ZW1lbnQiLCJtZXRhcHJvb2ZTdGVwIiwiTWV0YXByb29mU3RlcCIsImZyb21NZXRhc3RhdGVtZW50Tm9kZSIsIm1ldGFBbnRlY2VkZW50IiwiTWV0YUFudGVjZWRlbnQiLCJwdXNoIiwiYWRkTWV0YXByb29mU3RlcCIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBV0E7OztlQUF3QkE7Ozs4REFURTttRUFDQztrRUFDSztxQkFFTjtzQkFDRzs7Ozs7O0FBRTdCLElBQU1DLHlCQUF5QkMsSUFBQUEsZ0JBQVMsRUFBQztBQUUxQixTQUFTRixxQkFBcUJHLGtCQUFrQixFQUFFQyxlQUFlLEVBQUVDLGdCQUFnQixFQUFFO0lBQ2xHLElBQUlDO0lBRUpELGlCQUFpQkUsS0FBSyxDQUFDSjtJQUV2QixJQUFNSyx1QkFBdUJDLElBQUFBLG9CQUFZLEVBQUNOO0lBRTFDRSxpQkFBaUJLLEtBQUssQ0FBQyxBQUFDLGlCQUFxQyxPQUFyQkYsc0JBQXFCO0lBRTdELElBQU1HLG9CQUFvQlYsdUJBQXVCRTtJQUVqRCxJQUFJUSxzQkFBc0IsSUFBSSxFQUFFO1FBQzlCLElBQU1DLFlBQVksS0FBSyxFQUNqQkMsd0JBQXdCQyxJQUFBQSxzQkFBbUIsRUFBQ0gsbUJBQW1CQyxXQUFXUDtRQUVoRixJQUFJUSx1QkFBdUI7WUFDekIsSUFBTUUsZ0JBQWdCQyxrQkFBYSxDQUFDQyxxQkFBcUIsQ0FBQ04sb0JBQ3BETyxpQkFBaUJDLHVCQUFjLENBQUNGLHFCQUFxQixDQUFDTjtZQUU1RFAsZ0JBQWdCZ0IsSUFBSSxDQUFDRjtZQUVyQmIsaUJBQWlCZ0IsZ0JBQWdCLENBQUNOO1FBQ3BDLENBQUM7UUFFRFQseUJBQXlCLElBQUk7SUFDL0IsQ0FBQztJQUVEQSx5QkFDRUQsaUJBQWlCaUIsUUFBUSxDQUFDbkIsc0JBQ3hCRSxpQkFBaUJrQixJQUFJLENBQUNwQixtQkFBbUI7SUFFN0MsT0FBT0c7QUFDVCJ9