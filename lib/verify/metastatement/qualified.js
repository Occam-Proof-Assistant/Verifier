"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedMetastatement;
    }
});
var _metavariableAgainstMetastatement = /*#__PURE__*/ _interop_require_default(require("../../verify/metavariableAgainstMetastatement"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement/reference!/metavariable!"), metastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement/metastatement!");
function verifyQualifiedMetastatement(qualifiedMetastatementNode, substitutions, assignments, localContext) {
    var qualifiedMetastatementVerified;
    var qualifiedMetastatementString = localContext.nodeAsString(qualifiedMetastatementNode);
    localContext.trace("Verifying the '".concat(qualifiedMetastatementString, "' qualified metastatement..."), qualifiedMetastatementNode);
    var metavariableNode = metavariableNodeQuery(qualifiedMetastatementNode), verifyQualifiedMetastatementFunctions = [
        verifyQualifiedMetastatementAAgainstRule,
        verifyQualifiedMetastatementAAgainstReference
    ];
    qualifiedMetastatementVerified = verifyQualifiedMetastatementFunctions.some(function(verifyQualifiedMetastatementFunction) {
        var qualifiedMetastatementVerified = verifyQualifiedMetastatementFunction(qualifiedMetastatementNode, metavariableNode, substitutions, localContext);
        if (qualifiedMetastatementVerified) {
            return true;
        }
    });
    if (qualifiedMetastatementVerified) {
        var derived = false, metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metastatementVerified = verifyMetastatement(metastatementNode, assignments, derived, localContext, function() {
            var verifiedAhead = true;
            return verifiedAhead;
        });
        qualifiedMetastatementVerified = metastatementVerified; ///
    }
    if (qualifiedMetastatementVerified) {
        localContext.debug("...verified the '".concat(qualifiedMetastatementString, "' qualified metastatement."), qualifiedMetastatementNode);
    }
    return qualifiedMetastatementVerified;
}
function verifyQualifiedMetastatementAAgainstRule(qualifiedMetastatementNode, metavariableNode, substitutions, localContext) {
    var qualifiedMetastatementVerifiedAgainstRule = false;
    var rule = localContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metavariableString = localContext.nodeAsString(metavariableNode), qualifiedMetastatementString = localContext.nodeAsString(qualifiedMetastatementNode);
        localContext.trace("Verifying the '".concat(qualifiedMetastatementString, "' qualified metastatement against the '").concat(metavariableString, "' rule..."), qualifiedMetastatementNode);
        var ruleMatchesMetastatement = rule.matchMetastatement(metastatementNode, localContext);
        qualifiedMetastatementVerifiedAgainstRule = ruleMatchesMetastatement; ///
        if (qualifiedMetastatementVerifiedAgainstRule) {
            localContext.debug("...verified the '".concat(qualifiedMetastatementString, "' qualified metastatement against the '").concat(metavariableString, "' rule."), qualifiedMetastatementNode);
        }
    }
    return qualifiedMetastatementVerifiedAgainstRule;
}
function verifyQualifiedMetastatementAAgainstReference(qualifiedMetastatementNode, metavariableNode, substitutions, localContext) {
    var qualifiedMetastatementVerifiedAgainstReference = false;
    if (substitutions !== null) {
        var metavariableString = localContext.nodeAsString(metavariableNode), metavariablePresent = localContext.isMetavariablePresentByMetavariableNode(metavariableNode, localContext), qualifiedMetastatementString = localContext.nodeAsString(qualifiedMetastatementNode);
        localContext.trace("Verifying the '".concat(qualifiedMetastatementString, "' qualified metastatement against the '").concat(metavariableString, "' reference..."), qualifiedMetastatementNode);
        if (metavariablePresent) {
            var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metavariableVerifiedAgainstMetastatement = (0, _metavariableAgainstMetastatement.default)(metavariableNode, metastatementNode, substitutions, function() {
                var verifiedAhead = true;
                return verifiedAhead;
            });
            qualifiedMetastatementVerifiedAgainstReference = metavariableVerifiedAgainstMetastatement; ///
        }
        if (qualifiedMetastatementVerifiedAgainstReference) {
            localContext.debug("...verified the '".concat(qualifiedMetastatementString, "' qualified metastatement against the '").concat(metavariableString, "' reference."), qualifiedMetastatementNode);
        }
    }
    return qualifiedMetastatementVerifiedAgainstReference;
}
function verifyMetastatement(metastatementNode, assignments, derived, localContext) {
    var metastatementVerified;
    var metastatementString = localContext.nodeAsString(metastatementNode);
    localContext.trace("Verifying the '".concat(metastatementString, "' metastatement..."), metastatementNode);
    var verifyMetaStatementFunctions = [];
    verifyMetaStatementFunctions.some(function(verifyStatementFunction) {
        var metastatementVerified = verifyStatementFunction(metastatementNode, assignments, derived, localContext);
        if (metastatementVerified) {
            return true;
        }
    });
    metastatementVerified = true; ///
    if (metastatementVerified) {
        localContext.debug("...verified the '".concat(metastatementString, "' metastatement."), metastatementNode);
    }
    return metastatementVerified;
}

//# sourceMappingURL=data:application/json;base64,