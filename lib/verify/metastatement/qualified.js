"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyQualifiedMetastatement;
    }
});
var _metastatement = /*#__PURE__*/ _interop_require_default(require("../../verify/metastatement"));
var _metavariableAgainstMetastatement = /*#__PURE__*/ _interop_require_default(require("../../verify/metavariableAgainstMetastatement"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement/reference!/metavariable!"), metastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement/metastatement!");
function verifyQualifiedMetastatement(qualifiedMetastatementNode, substitutions, assignments, localMetaContext) {
    var qualifiedMetastatementVerified;
    var qualifiedMetastatementString = localMetaContext.nodeAsString(qualifiedMetastatementNode);
    localMetaContext.trace("Verifying the '".concat(qualifiedMetastatementString, "' qualified metastatement..."), qualifiedMetastatementNode);
    var derived = false, metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metastatementVerified = (0, _metastatement.default)(metastatementNode, assignments, derived, localMetaContext, function() {
        var verifiedAhead = true;
        return verifiedAhead;
    });
    if (metastatementVerified) {
        var metavariableNode = metavariableNodeQuery(qualifiedMetastatementNode), verifyQualifiedMetastatementFunctions = [
            verifyQualifiedMetastatementAAgainstRule,
            verifyQualifiedMetastatementAAgainstReference
        ];
        qualifiedMetastatementVerified = verifyQualifiedMetastatementFunctions.some(function(verifyQualifiedMetastatementFunction) {
            var qualifiedMetastatementVerified = verifyQualifiedMetastatementFunction(qualifiedMetastatementNode, metavariableNode, substitutions, localMetaContext);
            if (qualifiedMetastatementVerified) {
                return true;
            }
        });
    }
    if (qualifiedMetastatementVerified) {
        localMetaContext.debug("...verified the '".concat(qualifiedMetastatementString, "' qualified metastatement."), qualifiedMetastatementNode);
    }
    return qualifiedMetastatementVerified;
}
function verifyQualifiedMetastatementAAgainstRule(qualifiedMetastatementNode, metavariableNode, substitutions, localMetaContext) {
    var qualifiedMetastatementVerifiedAgainstRule = false;
    var rule = localMetaContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metavariableString = localMetaContext.nodeAsString(metavariableNode), qualifiedMetastatementString = localMetaContext.nodeAsString(qualifiedMetastatementNode);
        localMetaContext.trace("Verifying the '".concat(qualifiedMetastatementString, "' qualified metastatement against the '").concat(metavariableString, "' rule..."), qualifiedMetastatementNode);
        var ruleMatchesMetastatement = rule.matchMetastatement(metastatementNode, localMetaContext);
        qualifiedMetastatementVerifiedAgainstRule = ruleMatchesMetastatement; ///
        if (qualifiedMetastatementVerifiedAgainstRule) {
            localMetaContext.debug("...verified the '".concat(qualifiedMetastatementString, "' qualified metastatement against the '").concat(metavariableString, "' rule."), qualifiedMetastatementNode);
        }
    }
    return qualifiedMetastatementVerifiedAgainstRule;
}
function verifyQualifiedMetastatementAAgainstReference(qualifiedMetastatementNode, metavariableNode, substitutions, localMetaContext) {
    var qualifiedMetastatementVerifiedAgainstReference = false;
    if (substitutions !== null) {
        var metavariableString = localMetaContext.nodeAsString(metavariableNode), metavariablePresent = localMetaContext.isMetavariablePresentByMetavariableNode(metavariableNode, localMetaContext), qualifiedMetastatementString = localMetaContext.nodeAsString(qualifiedMetastatementNode);
        localMetaContext.trace("Verifying the '".concat(qualifiedMetastatementString, "' qualified metastatement against the '").concat(metavariableString, "' reference..."), qualifiedMetastatementNode);
        if (metavariablePresent) {
            var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metavariableVerifiedAgainstMetastatement = (0, _metavariableAgainstMetastatement.default)(metavariableNode, metastatementNode, substitutions, function() {
                var verifiedAhead = true;
                return verifiedAhead;
            });
            qualifiedMetastatementVerifiedAgainstReference = metavariableVerifiedAgainstMetastatement; ///
        }
        if (qualifiedMetastatementVerifiedAgainstReference) {
            localMetaContext.debug("...verified the '".concat(qualifiedMetastatementString, "' qualified metastatement against the '").concat(metavariableString, "' reference."), qualifiedMetastatementNode);
        }
    }
    return qualifiedMetastatementVerifiedAgainstReference;
}

//# sourceMappingURL=data:application/json;base64,