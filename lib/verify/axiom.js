"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyAxiom;
    }
});
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/unqualified"));
var _indicativeConditional = /*#__PURE__*/ _interopRequireDefault(require("../verify/indicativeConditional"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var labelNodesQuery = (0, _query.nodesQuery)("/axiom/label"), statementNodeQuery = (0, _query.nodeQuery)("/*/statement"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/axiom/unqualifiedStatement!"), indicativeConditionalNodeQuery = (0, _query.nodeQuery)("/axiom/indicativeConditional!");
function verifyAxiom(axiomNode, context) {
    var labelNodes = labelNodesQuery(axiomNode), labelsString = (0, _string.nodesAsString)(labelNodes);
    context.debug("Verifying the '".concat(labelsString, "' axiom..."), axiomNode);
    var proofContext = _proof.default.fromContext(context);
    context = proofContext; ///
    var unqualifiedStatementNode = unqualifiedStatementNodeQuery(axiomNode), indicativeConditionalNode = indicativeConditionalNodeQuery(axiomNode);
    var axiomVerified = false;
    if (unqualifiedStatementNode !== null) {
        var unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, context);
        if (unqualifiedStatementVerified) {
            var statementNode = statementNodeQuery(unqualifiedStatementNode), labels = labelsString, axiom = Axiom.fromStatementNodeAndLabels(statementNode, labels);
            context.addAxiom(axiom);
            axiomVerified = true;
        }
    }
    if (indicativeConditionalNode !== null) {
        var statementNodes = [], indicativeConditionalVerified = (0, _indicativeConditional.default)(indicativeConditionalNode, statementNodes, context);
        if (indicativeConditionalVerified !== null) {
            var labels1 = labelsString, firstStatementNode = (0, _array.first)(statementNodes), secondStatementNode = (0, _array.second)(statementNodes), suppositionStatementNode = firstStatementNode, consequentStatementNode = secondStatementNode, axiom1 = Axiom.fromSuppositionStatementNodeConsequentStatementNodeAndLabels(suppositionStatementNode, consequentStatementNode, labels1);
            context.addAxiom(axiom1);
            axiomVerified = true;
        }
    }
    if (axiomVerified) {
        context.info("Verified the '".concat(labelsString, "' axiom."), axiomNode);
    }
    return axiomVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvYXhpb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcm9vZkNvbnRleHQgZnJvbSBcIi4uL2NvbnRleHQvcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L3N0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuaW1wb3J0IHZlcmlmeUluZGljYXRpdmVDb25kaXRpb25hbCBmcm9tIFwiLi4vdmVyaWZ5L2luZGljYXRpdmVDb25kaXRpb25hbFwiO1xuXG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgbm9kZXNBc1N0cmluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvc3RyaW5nXCI7XG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGxhYmVsTm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvYXhpb20vbGFiZWxcIiksXG4gICAgICBzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvKi9zdGF0ZW1lbnRcIiksXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9heGlvbS91bnF1YWxpZmllZFN0YXRlbWVudCFcIiksXG4gICAgICBpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvYXhpb20vaW5kaWNhdGl2ZUNvbmRpdGlvbmFsIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5QXhpb20oYXhpb21Ob2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IGxhYmVsTm9kZXMgPSBsYWJlbE5vZGVzUXVlcnkoYXhpb21Ob2RlKSxcbiAgICAgICAgbGFiZWxzU3RyaW5nID0gbm9kZXNBc1N0cmluZyhsYWJlbE5vZGVzKTtcblxuICBjb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICcke2xhYmVsc1N0cmluZ30nIGF4aW9tLi4uYCwgYXhpb21Ob2RlKTtcblxuICBjb25zdCBwcm9vZkNvbnRleHQgPSBQcm9vZkNvbnRleHQuZnJvbUNvbnRleHQoY29udGV4dCk7XG5cbiAgY29udGV4dCA9IHByb29mQ29udGV4dDsgLy8vXG5cbiAgY29uc3QgdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlID0gdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkoYXhpb21Ob2RlKSxcbiAgICAgICAgaW5kaWNhdGl2ZUNvbmRpdGlvbmFsTm9kZSA9IGluZGljYXRpdmVDb25kaXRpb25hbE5vZGVRdWVyeShheGlvbU5vZGUpO1xuXG4gIGxldCBheGlvbVZlcmlmaWVkID0gZmFsc2U7XG5cbiAgaWYgKHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQgPSB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUsIGNvbnRleHQpO1xuXG4gICAgaWYgKHVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQpIHtcbiAgICAgIGNvbnN0IHN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnROb2RlUXVlcnkodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgICAgIGxhYmVscyA9IGxhYmVsc1N0cmluZywgIC8vL1xuICAgICAgICAgICAgYXhpb20gPSBBeGlvbS5mcm9tU3RhdGVtZW50Tm9kZUFuZExhYmVscyhzdGF0ZW1lbnROb2RlLCBsYWJlbHMpO1xuXG4gICAgICBjb250ZXh0LmFkZEF4aW9tKGF4aW9tKTtcblxuICAgICAgYXhpb21WZXJpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGluZGljYXRpdmVDb25kaXRpb25hbE5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnROb2RlcyA9IFtdLFxuICAgICAgICAgIGluZGljYXRpdmVDb25kaXRpb25hbFZlcmlmaWVkID0gdmVyaWZ5SW5kaWNhdGl2ZUNvbmRpdGlvbmFsKGluZGljYXRpdmVDb25kaXRpb25hbE5vZGUsIHN0YXRlbWVudE5vZGVzLCBjb250ZXh0KTtcblxuICAgIGlmIChpbmRpY2F0aXZlQ29uZGl0aW9uYWxWZXJpZmllZCAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgbGFiZWxzID0gbGFiZWxzU3RyaW5nLCAgLy8vXG4gICAgICAgICAgICBmaXJzdFN0YXRlbWVudE5vZGUgPSBmaXJzdChzdGF0ZW1lbnROb2RlcyksXG4gICAgICAgICAgICBzZWNvbmRTdGF0ZW1lbnROb2RlID0gc2Vjb25kKHN0YXRlbWVudE5vZGVzKSxcbiAgICAgICAgICAgIHN1cHBvc2l0aW9uU3RhdGVtZW50Tm9kZSA9IGZpcnN0U3RhdGVtZW50Tm9kZSwgIC8vL1xuICAgICAgICAgICAgY29uc2VxdWVudFN0YXRlbWVudE5vZGUgPSBzZWNvbmRTdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgICAgICBheGlvbSA9IEF4aW9tLmZyb21TdXBwb3NpdGlvblN0YXRlbWVudE5vZGVDb25zZXF1ZW50U3RhdGVtZW50Tm9kZUFuZExhYmVscyhzdXBwb3NpdGlvblN0YXRlbWVudE5vZGUsIGNvbnNlcXVlbnRTdGF0ZW1lbnROb2RlLCBsYWJlbHMpO1xuXG4gICAgICBjb250ZXh0LmFkZEF4aW9tKGF4aW9tKTtcblxuICAgICAgYXhpb21WZXJpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGF4aW9tVmVyaWZpZWQpIHtcbiAgICBjb250ZXh0LmluZm8oYFZlcmlmaWVkIHRoZSAnJHtsYWJlbHNTdHJpbmd9JyBheGlvbS5gLCBheGlvbU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGF4aW9tVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5QXhpb20iLCJsYWJlbE5vZGVzUXVlcnkiLCJub2Rlc1F1ZXJ5Iiwic3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkiLCJpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlUXVlcnkiLCJheGlvbU5vZGUiLCJjb250ZXh0IiwibGFiZWxOb2RlcyIsImxhYmVsc1N0cmluZyIsIm5vZGVzQXNTdHJpbmciLCJkZWJ1ZyIsInByb29mQ29udGV4dCIsIlByb29mQ29udGV4dCIsImZyb21Db250ZXh0IiwidW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlIiwiaW5kaWNhdGl2ZUNvbmRpdGlvbmFsTm9kZSIsImF4aW9tVmVyaWZpZWQiLCJ1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkIiwidmVyaWZ5VW5xdWFsaWZpZWRTdGF0ZW1lbnQiLCJzdGF0ZW1lbnROb2RlIiwibGFiZWxzIiwiYXhpb20iLCJBeGlvbSIsImZyb21TdGF0ZW1lbnROb2RlQW5kTGFiZWxzIiwiYWRkQXhpb20iLCJzdGF0ZW1lbnROb2RlcyIsImluZGljYXRpdmVDb25kaXRpb25hbFZlcmlmaWVkIiwidmVyaWZ5SW5kaWNhdGl2ZUNvbmRpdGlvbmFsIiwiZmlyc3RTdGF0ZW1lbnROb2RlIiwiZmlyc3QiLCJzZWNvbmRTdGF0ZW1lbnROb2RlIiwic2Vjb25kIiwic3VwcG9zaXRpb25TdGF0ZW1lbnROb2RlIiwiY29uc2VxdWVudFN0YXRlbWVudE5vZGUiLCJmcm9tU3VwcG9zaXRpb25TdGF0ZW1lbnROb2RlQ29uc2VxdWVudFN0YXRlbWVudE5vZGVBbmRMYWJlbHMiLCJpbmZvIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFlQTs7O2VBQXdCQTs7OzBEQWJDO2dFQUNjOzBFQUNDO3FCQUVWO3NCQUNBO3FCQUNROzs7Ozs7QUFFdEMsSUFBTUMsa0JBQWtCQyxJQUFBQSxpQkFBVSxFQUFDLGlCQUM3QkMscUJBQXFCQyxJQUFBQSxnQkFBUyxFQUFDLGlCQUMvQkMsZ0NBQWdDRCxJQUFBQSxnQkFBUyxFQUFDLGlDQUMxQ0UsaUNBQWlDRixJQUFBQSxnQkFBUyxFQUFDO0FBRWxDLFNBQVNKLFlBQVlPLFNBQVMsRUFBRUMsT0FBTyxFQUFFO0lBQ3RELElBQU1DLGFBQWFSLGdCQUFnQk0sWUFDN0JHLGVBQWVDLElBQUFBLHFCQUFhLEVBQUNGO0lBRW5DRCxRQUFRSSxLQUFLLENBQUMsQUFBQyxrQkFBOEIsT0FBYkYsY0FBYSxlQUFhSDtJQUUxRCxJQUFNTSxlQUFlQyxjQUFZLENBQUNDLFdBQVcsQ0FBQ1A7SUFFOUNBLFVBQVVLLGNBQWMsR0FBRztJQUUzQixJQUFNRywyQkFBMkJYLDhCQUE4QkUsWUFDekRVLDRCQUE0QlgsK0JBQStCQztJQUVqRSxJQUFJVyxnQkFBZ0IsS0FBSztJQUV6QixJQUFJRiw2QkFBNkIsSUFBSSxFQUFFO1FBQ3JDLElBQU1HLCtCQUErQkMsSUFBQUEsb0JBQTBCLEVBQUNKLDBCQUEwQlI7UUFFMUYsSUFBSVcsOEJBQThCO1lBQ2hDLElBQU1FLGdCQUFnQmxCLG1CQUFtQmEsMkJBQ25DTSxTQUFTWixjQUNUYSxRQUFRQyxNQUFNQywwQkFBMEIsQ0FBQ0osZUFBZUM7WUFFOURkLFFBQVFrQixRQUFRLENBQUNIO1lBRWpCTCxnQkFBZ0IsSUFBSTtRQUN0QixDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUlELDhCQUE4QixJQUFJLEVBQUU7UUFDdEMsSUFBTVUsaUJBQWlCLEVBQUUsRUFDbkJDLGdDQUFnQ0MsSUFBQUEsOEJBQTJCLEVBQUNaLDJCQUEyQlUsZ0JBQWdCbkI7UUFFN0csSUFBSW9CLGtDQUFrQyxJQUFJLEVBQUU7WUFDMUMsSUFBTU4sVUFBU1osY0FDVG9CLHFCQUFxQkMsSUFBQUEsWUFBSyxFQUFDSixpQkFDM0JLLHNCQUFzQkMsSUFBQUEsYUFBTSxFQUFDTixpQkFDN0JPLDJCQUEyQkosb0JBQzNCSywwQkFBMEJILHFCQUMxQlQsU0FBUUMsTUFBTVksNERBQTRELENBQUNGLDBCQUEwQkMseUJBQXlCYjtZQUVwSWQsUUFBUWtCLFFBQVEsQ0FBQ0g7WUFFakJMLGdCQUFnQixJQUFJO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSUEsZUFBZTtRQUNqQlYsUUFBUTZCLElBQUksQ0FBQyxBQUFDLGlCQUE2QixPQUFiM0IsY0FBYSxhQUFXSDtJQUN4RCxDQUFDO0lBRUQsT0FBT1c7QUFDVCJ9