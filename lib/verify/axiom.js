"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyAxiom;
    }
});
var _axiom = /*#__PURE__*/ _interopRequireDefault(require("../axiom"));
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _labels = /*#__PURE__*/ _interopRequireDefault(require("../verify/labels"));
var _conditinalIndicative = /*#__PURE__*/ _interopRequireDefault(require("../verify/conditinalIndicative"));
var _unconditionalIndicative = /*#__PURE__*/ _interopRequireDefault(require("../verify/unconditionalIndicative"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var labelNodesQuery = (0, _query.nodesQuery)("/axiom/label"), conditionalIndicativeNodeQuery = (0, _query.nodeQuery)("/axiom/conditionalIndicative!"), unconditionalIndicativeNodeQuery = (0, _query.nodeQuery)("/axiom/unconditionalIndicative!");
function verifyAxiom(axiomNode, fileContext) {
    var axiomVerified = false;
    fileContext.begin(axiomNode);
    var labelNodes = labelNodesQuery(axiomNode), labelsString = (0, _string.nodesAsString)(labelNodes), proofContext = _proof.default.fromFileContext(fileContext);
    fileContext.debug("Verifying the '".concat(labelsString, "' axiom..."));
    var labels = [], labelsVerified = (0, _labels.default)(labelNodes, labels, fileContext);
    if (labelsVerified) {
        var antecedents = [], consequents = [], conditionalIndicativeNode = conditionalIndicativeNodeQuery(axiomNode), unconditionalIndicativeNode = unconditionalIndicativeNodeQuery(axiomNode);
        var conditionalIndicativeVerified = false, unconditionalIndicativeVerified = false;
        if (conditionalIndicativeNode !== null) {
            conditionalIndicativeVerified = (0, _conditinalIndicative.default)(conditionalIndicativeNode, antecedents, consequents, proofContext);
        }
        if (unconditionalIndicativeNode !== null) {
            unconditionalIndicativeVerified = (0, _unconditionalIndicative.default)(unconditionalIndicativeNode, consequents, proofContext);
        }
        if (conditionalIndicativeVerified || unconditionalIndicativeVerified) {
            var firstConsequent = (0, _array.first)(consequents), consequent = firstConsequent, axiom = _axiom.default.fromLabelsAntecedentsAndConsequent(labels, antecedents, consequent);
            fileContext.addAxiom(axiom);
            axiomVerified = true;
        }
    }
    if (axiomVerified) {
        fileContext.info("Verified the '".concat(labelsString, "' axiom."));
    }
    axiomVerified ? fileContext.complete(axiomNode) : fileContext.complete(axiomNode);
    return axiomVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvYXhpb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBBeGlvbSBmcm9tIFwiLi4vYXhpb21cIjtcbmltcG9ydCBQcm9vZkNvbnRleHQgZnJvbSBcIi4uL2NvbnRleHQvcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlMYWJlbHMgZnJvbSBcIi4uL3ZlcmlmeS9sYWJlbHNcIjtcbmltcG9ydCB2ZXJpZnlDb25kaXRpb25hbEluZGljYXRpdmUgZnJvbSBcIi4uL3ZlcmlmeS9jb25kaXRpbmFsSW5kaWNhdGl2ZVwiO1xuaW1wb3J0IHZlcmlmeVVuY29uZGl0aW9uYWxJbmRpY2F0aXZlIGZyb20gXCIuLi92ZXJpZnkvdW5jb25kaXRpb25hbEluZGljYXRpdmVcIjtcblxuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBub2Rlc0FzU3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9zdHJpbmdcIjtcbmltcG9ydCB7IG5vZGVRdWVyeSwgbm9kZXNRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgbGFiZWxOb2Rlc1F1ZXJ5ID0gbm9kZXNRdWVyeShcIi9heGlvbS9sYWJlbFwiKSxcbiAgICAgIGNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9heGlvbS9jb25kaXRpb25hbEluZGljYXRpdmUhXCIpLFxuICAgICAgdW5jb25kaXRpb25hbEluZGljYXRpdmVOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvYXhpb20vdW5jb25kaXRpb25hbEluZGljYXRpdmUhXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlBeGlvbShheGlvbU5vZGUsIGZpbGVDb250ZXh0KSB7XG4gIGxldCBheGlvbVZlcmlmaWVkID0gZmFsc2U7XG5cbiAgZmlsZUNvbnRleHQuYmVnaW4oYXhpb21Ob2RlKTtcblxuICBjb25zdCBsYWJlbE5vZGVzID0gbGFiZWxOb2Rlc1F1ZXJ5KGF4aW9tTm9kZSksXG4gICAgICAgIGxhYmVsc1N0cmluZyA9IG5vZGVzQXNTdHJpbmcobGFiZWxOb2RlcyksXG4gICAgICAgIHByb29mQ29udGV4dCA9IFByb29mQ29udGV4dC5mcm9tRmlsZUNvbnRleHQoZmlsZUNvbnRleHQpO1xuXG4gIGZpbGVDb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICcke2xhYmVsc1N0cmluZ30nIGF4aW9tLi4uYCk7XG5cbiAgY29uc3QgbGFiZWxzID0gW10sXG4gICAgICAgIGxhYmVsc1ZlcmlmaWVkID0gdmVyaWZ5TGFiZWxzKGxhYmVsTm9kZXMsIGxhYmVscywgZmlsZUNvbnRleHQpO1xuXG4gIGlmIChsYWJlbHNWZXJpZmllZCkge1xuICAgIGNvbnN0IGFudGVjZWRlbnRzID0gW10sXG4gICAgICAgICAgY29uc2VxdWVudHMgPSBbXSxcbiAgICAgICAgICBjb25kaXRpb25hbEluZGljYXRpdmVOb2RlID0gY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZVF1ZXJ5KGF4aW9tTm9kZSksXG4gICAgICAgICAgdW5jb25kaXRpb25hbEluZGljYXRpdmVOb2RlID0gdW5jb25kaXRpb25hbEluZGljYXRpdmVOb2RlUXVlcnkoYXhpb21Ob2RlKTtcblxuICAgIGxldCBjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCA9IGZhbHNlLFxuICAgICAgICB1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZVZlcmlmaWVkID0gZmFsc2U7XG5cbiAgICBpZiAoY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSAhPT0gbnVsbCkge1xuICAgICAgY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQgPSB2ZXJpZnlDb25kaXRpb25hbEluZGljYXRpdmUoY29uZGl0aW9uYWxJbmRpY2F0aXZlTm9kZSwgYW50ZWNlZGVudHMsIGNvbnNlcXVlbnRzLCBwcm9vZkNvbnRleHQpO1xuICAgIH1cblxuICAgIGlmICh1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUgIT09IG51bGwpIHtcbiAgICAgIHVuY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQgPSB2ZXJpZnlVbmNvbmRpdGlvbmFsSW5kaWNhdGl2ZSh1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUsIGNvbnNlcXVlbnRzLCBwcm9vZkNvbnRleHQpO1xuICAgIH1cblxuICAgIGlmIChjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCB8fCB1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZVZlcmlmaWVkKSB7XG4gICAgICBjb25zdCBmaXJzdENvbnNlcXVlbnQgPSBmaXJzdChjb25zZXF1ZW50cyksXG4gICAgICAgICAgICBjb25zZXF1ZW50ID0gZmlyc3RDb25zZXF1ZW50LCAvLy9cbiAgICAgICAgICAgIGF4aW9tID0gQXhpb20uZnJvbUxhYmVsc0FudGVjZWRlbnRzQW5kQ29uc2VxdWVudChsYWJlbHMsIGFudGVjZWRlbnRzLCBjb25zZXF1ZW50KTtcblxuICAgICAgZmlsZUNvbnRleHQuYWRkQXhpb20oYXhpb20pO1xuXG4gICAgICBheGlvbVZlcmlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXhpb21WZXJpZmllZCkge1xuICAgIGZpbGVDb250ZXh0LmluZm8oYFZlcmlmaWVkIHRoZSAnJHtsYWJlbHNTdHJpbmd9JyBheGlvbS5gKTtcbiAgfVxuXG4gIGF4aW9tVmVyaWZpZWQgP1xuICAgIGZpbGVDb250ZXh0LmNvbXBsZXRlKGF4aW9tTm9kZSkgOlxuICAgICAgZmlsZUNvbnRleHQuY29tcGxldGUoYXhpb21Ob2RlKTtcblxuICByZXR1cm4gYXhpb21WZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlBeGlvbSIsImxhYmVsTm9kZXNRdWVyeSIsIm5vZGVzUXVlcnkiLCJjb25kaXRpb25hbEluZGljYXRpdmVOb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGVRdWVyeSIsImF4aW9tTm9kZSIsImZpbGVDb250ZXh0IiwiYXhpb21WZXJpZmllZCIsImJlZ2luIiwibGFiZWxOb2RlcyIsImxhYmVsc1N0cmluZyIsIm5vZGVzQXNTdHJpbmciLCJwcm9vZkNvbnRleHQiLCJQcm9vZkNvbnRleHQiLCJmcm9tRmlsZUNvbnRleHQiLCJkZWJ1ZyIsImxhYmVscyIsImxhYmVsc1ZlcmlmaWVkIiwidmVyaWZ5TGFiZWxzIiwiYW50ZWNlZGVudHMiLCJjb25zZXF1ZW50cyIsImNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUiLCJ1bmNvbmRpdGlvbmFsSW5kaWNhdGl2ZU5vZGUiLCJjb25kaXRpb25hbEluZGljYXRpdmVWZXJpZmllZCIsInVuY29uZGl0aW9uYWxJbmRpY2F0aXZlVmVyaWZpZWQiLCJ2ZXJpZnlDb25kaXRpb25hbEluZGljYXRpdmUiLCJ2ZXJpZnlVbmNvbmRpdGlvbmFsSW5kaWNhdGl2ZSIsImZpcnN0Q29uc2VxdWVudCIsImZpcnN0IiwiY29uc2VxdWVudCIsImF4aW9tIiwiQXhpb20iLCJmcm9tTGFiZWxzQW50ZWNlZGVudHNBbmRDb25zZXF1ZW50IiwiYWRkQXhpb20iLCJpbmZvIiwiY29tcGxldGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWdCQTs7O2VBQXdCQTs7OzBEQWROOzBEQUNPOzJEQUNBO3lFQUNlOzRFQUNFO3FCQUVwQjtzQkFDUTtxQkFDUTs7Ozs7O0FBRXRDLElBQU1DLGtCQUFrQkMsSUFBQUEsaUJBQVUsRUFBQyxpQkFDN0JDLGlDQUFpQ0MsSUFBQUEsZ0JBQVMsRUFBQyxrQ0FDM0NDLG1DQUFtQ0QsSUFBQUEsZ0JBQVMsRUFBQztBQUVwQyxTQUFTSixZQUFZTSxTQUFTLEVBQUVDLFdBQVcsRUFBRTtJQUMxRCxJQUFJQyxnQkFBZ0IsS0FBSztJQUV6QkQsWUFBWUUsS0FBSyxDQUFDSDtJQUVsQixJQUFNSSxhQUFhVCxnQkFBZ0JLLFlBQzdCSyxlQUFlQyxJQUFBQSxxQkFBYSxFQUFDRixhQUM3QkcsZUFBZUMsY0FBWSxDQUFDQyxlQUFlLENBQUNSO0lBRWxEQSxZQUFZUyxLQUFLLENBQUMsQUFBQyxrQkFBOEIsT0FBYkwsY0FBYTtJQUVqRCxJQUFNTSxTQUFTLEVBQUUsRUFDWEMsaUJBQWlCQyxJQUFBQSxlQUFZLEVBQUNULFlBQVlPLFFBQVFWO0lBRXhELElBQUlXLGdCQUFnQjtRQUNsQixJQUFNRSxjQUFjLEVBQUUsRUFDaEJDLGNBQWMsRUFBRSxFQUNoQkMsNEJBQTRCbkIsK0JBQStCRyxZQUMzRGlCLDhCQUE4QmxCLGlDQUFpQ0M7UUFFckUsSUFBSWtCLGdDQUFnQyxLQUFLLEVBQ3JDQyxrQ0FBa0MsS0FBSztRQUUzQyxJQUFJSCw4QkFBOEIsSUFBSSxFQUFFO1lBQ3RDRSxnQ0FBZ0NFLElBQUFBLDZCQUEyQixFQUFDSiwyQkFBMkJGLGFBQWFDLGFBQWFSO1FBQ25ILENBQUM7UUFFRCxJQUFJVSxnQ0FBZ0MsSUFBSSxFQUFFO1lBQ3hDRSxrQ0FBa0NFLElBQUFBLGdDQUE2QixFQUFDSiw2QkFBNkJGLGFBQWFSO1FBQzVHLENBQUM7UUFFRCxJQUFJVyxpQ0FBaUNDLGlDQUFpQztZQUNwRSxJQUFNRyxrQkFBa0JDLElBQUFBLFlBQUssRUFBQ1IsY0FDeEJTLGFBQWFGLGlCQUNiRyxRQUFRQyxjQUFLLENBQUNDLGtDQUFrQyxDQUFDaEIsUUFBUUcsYUFBYVU7WUFFNUV2QixZQUFZMkIsUUFBUSxDQUFDSDtZQUVyQnZCLGdCQUFnQixJQUFJO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSUEsZUFBZTtRQUNqQkQsWUFBWTRCLElBQUksQ0FBQyxBQUFDLGlCQUE2QixPQUFieEIsY0FBYTtJQUNqRCxDQUFDO0lBRURILGdCQUNFRCxZQUFZNkIsUUFBUSxDQUFDOUIsYUFDbkJDLFlBQVk2QixRQUFRLENBQUM5QixVQUFVO0lBRW5DLE9BQU9FO0FBQ1QifQ==