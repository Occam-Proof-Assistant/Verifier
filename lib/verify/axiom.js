"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyAxiom;
    }
});
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/statement/unqualified"));
var _indicativeConditional = /*#__PURE__*/ _interopRequireDefault(require("../verify/indicativeConditional"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var labelNodesQuery = (0, _query.nodesQuery)("/axiom/label"), statementNodeQuery = (0, _query.nodeQuery)("/*/statement"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/axiom/unqualifiedStatement!"), indicativeConditionalNodeQuery = (0, _query.nodeQuery)("/axiom/indicativeConditional!");
function verifyAxiom(axiomNode, context) {
    var labelNodes = labelNodesQuery(axiomNode), labelsString = (0, _string.nodesAsString)(labelNodes);
    context.debug("Verifying the '".concat(labelsString, "' axiom..."));
    var proofContext = _proof.default.fromContext(context);
    context = proofContext; ///
    var unqualifiedStatementNode = unqualifiedStatementNodeQuery(axiomNode), indicativeConditionalNode = indicativeConditionalNodeQuery(axiomNode);
    var axiomVerified = false;
    if (unqualifiedStatementNode !== null) {
        var unqualifiedStatementVerified = (0, _unqualified.default)(unqualifiedStatementNode, context);
        if (unqualifiedStatementVerified) {
            var statementNode = statementNodeQuery(unqualifiedStatementNode), labels = labelsString, axiom = Axiom.fromStatementNodeAndLabels(statementNode, labels);
            context.addAxiom(axiom);
            axiomVerified = true;
        }
    }
    if (indicativeConditionalNode !== null) {
        var statementNodes = [], indicativeConditionalVerified = (0, _indicativeConditional.default)(indicativeConditionalNode, statementNodes, context);
        if (indicativeConditionalVerified !== null) {
            var labels1 = labelsString, firstStatementNode = (0, _array.first)(statementNodes), secondStatementNode = (0, _array.second)(statementNodes), suppositionStatementNode = firstStatementNode, consequentStatementNode = secondStatementNode, axiom1 = Axiom.fromSuppositionStatementNodeConsequentStatementNodeAndLabels(suppositionStatementNode, consequentStatementNode, labels1);
            context.addAxiom(axiom1);
            axiomVerified = true;
        }
    }
    if (axiomVerified) {
        context.info("Verified the '".concat(labelsString, "' axiom."));
    }
    return axiomVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvYXhpb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcm9vZkNvbnRleHQgZnJvbSBcIi4uL2NvbnRleHQvcHJvb2ZcIjtcbmltcG9ydCB2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCBmcm9tIFwiLi4vdmVyaWZ5L3N0YXRlbWVudC91bnF1YWxpZmllZFwiO1xuaW1wb3J0IHZlcmlmeUluZGljYXRpdmVDb25kaXRpb25hbCBmcm9tIFwiLi4vdmVyaWZ5L2luZGljYXRpdmVDb25kaXRpb25hbFwiO1xuXG5pbXBvcnQgeyBmaXJzdCwgc2Vjb25kIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgbm9kZXNBc1N0cmluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvc3RyaW5nXCI7XG5pbXBvcnQgeyBub2RlUXVlcnksIG5vZGVzUXVlcnkgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGxhYmVsTm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvYXhpb20vbGFiZWxcIiksXG4gICAgICBzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvKi9zdGF0ZW1lbnRcIiksXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9heGlvbS91bnF1YWxpZmllZFN0YXRlbWVudCFcIiksXG4gICAgICBpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvYXhpb20vaW5kaWNhdGl2ZUNvbmRpdGlvbmFsIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5QXhpb20oYXhpb21Ob2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IGxhYmVsTm9kZXMgPSBsYWJlbE5vZGVzUXVlcnkoYXhpb21Ob2RlKSxcbiAgICAgICAgbGFiZWxzU3RyaW5nID0gbm9kZXNBc1N0cmluZyhsYWJlbE5vZGVzKTtcblxuICBjb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICcke2xhYmVsc1N0cmluZ30nIGF4aW9tLi4uYCk7XG5cbiAgY29uc3QgcHJvb2ZDb250ZXh0ID0gUHJvb2ZDb250ZXh0LmZyb21Db250ZXh0KGNvbnRleHQpO1xuXG4gIGNvbnRleHQgPSBwcm9vZkNvbnRleHQ7IC8vL1xuXG4gIGNvbnN0IHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5KGF4aW9tTm9kZSksXG4gICAgICAgIGluZGljYXRpdmVDb25kaXRpb25hbE5vZGUgPSBpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlUXVlcnkoYXhpb21Ob2RlKTtcblxuICBsZXQgYXhpb21WZXJpZmllZCA9IGZhbHNlO1xuXG4gIGlmICh1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCB1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkID0gdmVyaWZ5VW5xdWFsaWZpZWRTdGF0ZW1lbnQodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlLCBjb250ZXh0KTtcblxuICAgIGlmICh1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgICBsYWJlbHMgPSBsYWJlbHNTdHJpbmcsICAvLy9cbiAgICAgICAgICAgIGF4aW9tID0gQXhpb20uZnJvbVN0YXRlbWVudE5vZGVBbmRMYWJlbHMoc3RhdGVtZW50Tm9kZSwgbGFiZWxzKTtcblxuICAgICAgY29udGV4dC5hZGRBeGlvbShheGlvbSk7XG5cbiAgICAgIGF4aW9tVmVyaWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3RhdGVtZW50Tm9kZXMgPSBbXSxcbiAgICAgICAgICBpbmRpY2F0aXZlQ29uZGl0aW9uYWxWZXJpZmllZCA9IHZlcmlmeUluZGljYXRpdmVDb25kaXRpb25hbChpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlLCBzdGF0ZW1lbnROb2RlcywgY29udGV4dCk7XG5cbiAgICBpZiAoaW5kaWNhdGl2ZUNvbmRpdGlvbmFsVmVyaWZpZWQgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGxhYmVscyA9IGxhYmVsc1N0cmluZywgIC8vL1xuICAgICAgICAgICAgZmlyc3RTdGF0ZW1lbnROb2RlID0gZmlyc3Qoc3RhdGVtZW50Tm9kZXMpLFxuICAgICAgICAgICAgc2Vjb25kU3RhdGVtZW50Tm9kZSA9IHNlY29uZChzdGF0ZW1lbnROb2RlcyksXG4gICAgICAgICAgICBzdXBwb3NpdGlvblN0YXRlbWVudE5vZGUgPSBmaXJzdFN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgICAgIGNvbnNlcXVlbnRTdGF0ZW1lbnROb2RlID0gc2Vjb25kU3RhdGVtZW50Tm9kZSwgIC8vL1xuICAgICAgICAgICAgYXhpb20gPSBBeGlvbS5mcm9tU3VwcG9zaXRpb25TdGF0ZW1lbnROb2RlQ29uc2VxdWVudFN0YXRlbWVudE5vZGVBbmRMYWJlbHMoc3VwcG9zaXRpb25TdGF0ZW1lbnROb2RlLCBjb25zZXF1ZW50U3RhdGVtZW50Tm9kZSwgbGFiZWxzKTtcblxuICAgICAgY29udGV4dC5hZGRBeGlvbShheGlvbSk7XG5cbiAgICAgIGF4aW9tVmVyaWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChheGlvbVZlcmlmaWVkKSB7XG4gICAgY29udGV4dC5pbmZvKGBWZXJpZmllZCB0aGUgJyR7bGFiZWxzU3RyaW5nfScgYXhpb20uYCk7XG4gIH1cblxuICByZXR1cm4gYXhpb21WZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlBeGlvbSIsImxhYmVsTm9kZXNRdWVyeSIsIm5vZGVzUXVlcnkiLCJzdGF0ZW1lbnROb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGVRdWVyeSIsImluZGljYXRpdmVDb25kaXRpb25hbE5vZGVRdWVyeSIsImF4aW9tTm9kZSIsImNvbnRleHQiLCJsYWJlbE5vZGVzIiwibGFiZWxzU3RyaW5nIiwibm9kZXNBc1N0cmluZyIsImRlYnVnIiwicHJvb2ZDb250ZXh0IiwiUHJvb2ZDb250ZXh0IiwiZnJvbUNvbnRleHQiLCJ1bnF1YWxpZmllZFN0YXRlbWVudE5vZGUiLCJpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlIiwiYXhpb21WZXJpZmllZCIsInVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCIsInN0YXRlbWVudE5vZGUiLCJsYWJlbHMiLCJheGlvbSIsIkF4aW9tIiwiZnJvbVN0YXRlbWVudE5vZGVBbmRMYWJlbHMiLCJhZGRBeGlvbSIsInN0YXRlbWVudE5vZGVzIiwiaW5kaWNhdGl2ZUNvbmRpdGlvbmFsVmVyaWZpZWQiLCJ2ZXJpZnlJbmRpY2F0aXZlQ29uZGl0aW9uYWwiLCJmaXJzdFN0YXRlbWVudE5vZGUiLCJmaXJzdCIsInNlY29uZFN0YXRlbWVudE5vZGUiLCJzZWNvbmQiLCJzdXBwb3NpdGlvblN0YXRlbWVudE5vZGUiLCJjb25zZXF1ZW50U3RhdGVtZW50Tm9kZSIsImZyb21TdXBwb3NpdGlvblN0YXRlbWVudE5vZGVDb25zZXF1ZW50U3RhdGVtZW50Tm9kZUFuZExhYmVscyIsImluZm8iXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWVBOzs7ZUFBd0JBOzs7MERBYkM7Z0VBQ2M7MEVBQ0M7cUJBRVY7c0JBQ0E7cUJBQ1E7Ozs7OztBQUV0QyxJQUFNQyxrQkFBa0JDLElBQUFBLGlCQUFVLEVBQUMsaUJBQzdCQyxxQkFBcUJDLElBQUFBLGdCQUFTLEVBQUMsaUJBQy9CQyxnQ0FBZ0NELElBQUFBLGdCQUFTLEVBQUMsaUNBQzFDRSxpQ0FBaUNGLElBQUFBLGdCQUFTLEVBQUM7QUFFbEMsU0FBU0osWUFBWU8sU0FBUyxFQUFFQyxPQUFPLEVBQUU7SUFDdEQsSUFBTUMsYUFBYVIsZ0JBQWdCTSxZQUM3QkcsZUFBZUMsSUFBQUEscUJBQWEsRUFBQ0Y7SUFFbkNELFFBQVFJLEtBQUssQ0FBQyxBQUFDLGtCQUE4QixPQUFiRixjQUFhO0lBRTdDLElBQU1HLGVBQWVDLGNBQVksQ0FBQ0MsV0FBVyxDQUFDUDtJQUU5Q0EsVUFBVUssY0FBYyxHQUFHO0lBRTNCLElBQU1HLDJCQUEyQlgsOEJBQThCRSxZQUN6RFUsNEJBQTRCWCwrQkFBK0JDO0lBRWpFLElBQUlXLGdCQUFnQixLQUFLO0lBRXpCLElBQUlGLDZCQUE2QixJQUFJLEVBQUU7UUFDckMsSUFBTUcsK0JBQStCQyxJQUFBQSxvQkFBMEIsRUFBQ0osMEJBQTBCUjtRQUUxRixJQUFJVyw4QkFBOEI7WUFDaEMsSUFBTUUsZ0JBQWdCbEIsbUJBQW1CYSwyQkFDbkNNLFNBQVNaLGNBQ1RhLFFBQVFDLE1BQU1DLDBCQUEwQixDQUFDSixlQUFlQztZQUU5RGQsUUFBUWtCLFFBQVEsQ0FBQ0g7WUFFakJMLGdCQUFnQixJQUFJO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSUQsOEJBQThCLElBQUksRUFBRTtRQUN0QyxJQUFNVSxpQkFBaUIsRUFBRSxFQUNuQkMsZ0NBQWdDQyxJQUFBQSw4QkFBMkIsRUFBQ1osMkJBQTJCVSxnQkFBZ0JuQjtRQUU3RyxJQUFJb0Isa0NBQWtDLElBQUksRUFBRTtZQUMxQyxJQUFNTixVQUFTWixjQUNUb0IscUJBQXFCQyxJQUFBQSxZQUFLLEVBQUNKLGlCQUMzQkssc0JBQXNCQyxJQUFBQSxhQUFNLEVBQUNOLGlCQUM3Qk8sMkJBQTJCSixvQkFDM0JLLDBCQUEwQkgscUJBQzFCVCxTQUFRQyxNQUFNWSw0REFBNEQsQ0FBQ0YsMEJBQTBCQyx5QkFBeUJiO1lBRXBJZCxRQUFRa0IsUUFBUSxDQUFDSDtZQUVqQkwsZ0JBQWdCLElBQUk7UUFDdEIsQ0FBQztJQUNILENBQUM7SUFFRCxJQUFJQSxlQUFlO1FBQ2pCVixRQUFRNkIsSUFBSSxDQUFDLEFBQUMsaUJBQTZCLE9BQWIzQixjQUFhO0lBQzdDLENBQUM7SUFFRCxPQUFPUTtBQUNUIn0=