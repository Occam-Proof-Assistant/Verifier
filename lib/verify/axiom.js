"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyAxiom;
    }
});
var _proof = /*#__PURE__*/ _interopRequireDefault(require("../context/proof"));
var _array = require("../utilities/array");
var _string = require("../utilities/string");
var _query = require("../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var labelNodesQuery = (0, _query.nodesQuery)("/axiom/label"), statementNodeQuery = (0, _query.nodeQuery)("/*/statement"), unqualifiedStatementNodeQuery = (0, _query.nodeQuery)("/axiom/unqualifiedStatement!"), indicativeConditionalNodeQuery = (0, _query.nodeQuery)("/axiom/indicativeConditional!");
function verifyAxiom(axiomNode) {
    var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;
    var axiomVerified = false;
    context.begin(axiomNode);
    var labelNodes = labelNodesQuery(axiomNode), labelsString = (0, _string.nodesAsString)(labelNodes), proofContext = _proof.default.fromContext(context), unqualifiedStatementNode = unqualifiedStatementNodeQuery(axiomNode), indicativeConditionalNode = indicativeConditionalNodeQuery(axiomNode);
    context.debug("Verifying the '".concat(labelsString, "' axiom..."));
    if (unqualifiedStatementNode !== null) {
        var unqualifiedStatementVerified = proofContext.verifyUnqualifiedStatement(unqualifiedStatementNode);
        if (unqualifiedStatementVerified) {
            var statementNode = statementNodeQuery(unqualifiedStatementNode), labels = labelsString, axiom = Axiom.fromStatementNodeAndLabels(statementNode, labels);
            context.addAxiom(axiom);
            axiomVerified = true;
        }
    }
    if (indicativeConditionalNode !== null) {
        var statementNodes = [], indicativeConditionalVerified = proofContext.verifyIndicativeConditional(indicativeConditionalNode, statementNodes);
        if (indicativeConditionalVerified !== null) {
            var labels1 = labelsString, firstStatementNode = (0, _array.first)(statementNodes), secondStatementNode = (0, _array.second)(statementNodes), suppositionStatementNode = firstStatementNode, consequentStatementNode = secondStatementNode, axiom1 = Axiom.fromSuppositionStatementNodeConsequentStatementNodeAndLabels(suppositionStatementNode, consequentStatementNode, labels1);
            context.addAxiom(axiom1);
            axiomVerified = true;
        }
    }
    axiomVerified ? context.complete(axiomNode) : context.halt(axiomNode);
    return axiomVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvYXhpb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBQcm9vZkNvbnRleHQgZnJvbSBcIi4uL2NvbnRleHQvcHJvb2ZcIjtcblxuaW1wb3J0IHsgZmlyc3QsIHNlY29uZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IG5vZGVzQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N0cmluZ1wiO1xuaW1wb3J0IHsgbm9kZVF1ZXJ5LCBub2Rlc1F1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBsYWJlbE5vZGVzUXVlcnkgPSBub2Rlc1F1ZXJ5KFwiL2F4aW9tL2xhYmVsXCIpLFxuICAgICAgc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiLyovc3RhdGVtZW50XCIpLFxuICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvYXhpb20vdW5xdWFsaWZpZWRTdGF0ZW1lbnQhXCIpLFxuICAgICAgaW5kaWNhdGl2ZUNvbmRpdGlvbmFsTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL2F4aW9tL2luZGljYXRpdmVDb25kaXRpb25hbCFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeUF4aW9tKGF4aW9tTm9kZSwgY29udGV4dCA9IHRoaXMpIHtcbiAgbGV0IGF4aW9tVmVyaWZpZWQgPSBmYWxzZTtcblxuICBjb250ZXh0LmJlZ2luKGF4aW9tTm9kZSk7XG5cbiAgY29uc3QgbGFiZWxOb2RlcyA9IGxhYmVsTm9kZXNRdWVyeShheGlvbU5vZGUpLFxuICAgICAgICBsYWJlbHNTdHJpbmcgPSBub2Rlc0FzU3RyaW5nKGxhYmVsTm9kZXMpLFxuICAgICAgICBwcm9vZkNvbnRleHQgPSBQcm9vZkNvbnRleHQuZnJvbUNvbnRleHQoY29udGV4dCksXG4gICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZVF1ZXJ5KGF4aW9tTm9kZSksXG4gICAgICAgIGluZGljYXRpdmVDb25kaXRpb25hbE5vZGUgPSBpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlUXVlcnkoYXhpb21Ob2RlKTtcblxuICBjb250ZXh0LmRlYnVnKGBWZXJpZnlpbmcgdGhlICcke2xhYmVsc1N0cmluZ30nIGF4aW9tLi4uYCk7XG5cbiAgaWYgKHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQgPSBwcm9vZkNvbnRleHQudmVyaWZ5VW5xdWFsaWZpZWRTdGF0ZW1lbnQodW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlKTtcblxuICAgIGlmICh1bnF1YWxpZmllZFN0YXRlbWVudFZlcmlmaWVkKSB7XG4gICAgICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50Tm9kZVF1ZXJ5KHVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSksXG4gICAgICAgICAgICBsYWJlbHMgPSBsYWJlbHNTdHJpbmcsICAvLy9cbiAgICAgICAgICAgIGF4aW9tID0gQXhpb20uZnJvbVN0YXRlbWVudE5vZGVBbmRMYWJlbHMoc3RhdGVtZW50Tm9kZSwgbGFiZWxzKTtcblxuICAgICAgY29udGV4dC5hZGRBeGlvbShheGlvbSk7XG5cbiAgICAgIGF4aW9tVmVyaWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3RhdGVtZW50Tm9kZXMgPSBbXSxcbiAgICAgICAgICBpbmRpY2F0aXZlQ29uZGl0aW9uYWxWZXJpZmllZCA9IHByb29mQ29udGV4dC52ZXJpZnlJbmRpY2F0aXZlQ29uZGl0aW9uYWwoaW5kaWNhdGl2ZUNvbmRpdGlvbmFsTm9kZSwgc3RhdGVtZW50Tm9kZXMpO1xuXG4gICAgaWYgKGluZGljYXRpdmVDb25kaXRpb25hbFZlcmlmaWVkICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBsYWJlbHMgPSBsYWJlbHNTdHJpbmcsICAvLy9cbiAgICAgICAgICAgIGZpcnN0U3RhdGVtZW50Tm9kZSA9IGZpcnN0KHN0YXRlbWVudE5vZGVzKSxcbiAgICAgICAgICAgIHNlY29uZFN0YXRlbWVudE5vZGUgPSBzZWNvbmQoc3RhdGVtZW50Tm9kZXMpLFxuICAgICAgICAgICAgc3VwcG9zaXRpb25TdGF0ZW1lbnROb2RlID0gZmlyc3RTdGF0ZW1lbnROb2RlLCAgLy8vXG4gICAgICAgICAgICBjb25zZXF1ZW50U3RhdGVtZW50Tm9kZSA9IHNlY29uZFN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgICAgIGF4aW9tID0gQXhpb20uZnJvbVN1cHBvc2l0aW9uU3RhdGVtZW50Tm9kZUNvbnNlcXVlbnRTdGF0ZW1lbnROb2RlQW5kTGFiZWxzKHN1cHBvc2l0aW9uU3RhdGVtZW50Tm9kZSwgY29uc2VxdWVudFN0YXRlbWVudE5vZGUsIGxhYmVscyk7XG5cbiAgICAgIGNvbnRleHQuYWRkQXhpb20oYXhpb20pO1xuXG4gICAgICBheGlvbVZlcmlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBheGlvbVZlcmlmaWVkID9cbiAgICBjb250ZXh0LmNvbXBsZXRlKGF4aW9tTm9kZSkgOlxuICAgICAgY29udGV4dC5oYWx0KGF4aW9tTm9kZSk7XG5cbiAgcmV0dXJuIGF4aW9tVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5QXhpb20iLCJsYWJlbE5vZGVzUXVlcnkiLCJub2Rlc1F1ZXJ5Iiwic3RhdGVtZW50Tm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidW5xdWFsaWZpZWRTdGF0ZW1lbnROb2RlUXVlcnkiLCJpbmRpY2F0aXZlQ29uZGl0aW9uYWxOb2RlUXVlcnkiLCJheGlvbU5vZGUiLCJjb250ZXh0IiwiYXhpb21WZXJpZmllZCIsImJlZ2luIiwibGFiZWxOb2RlcyIsImxhYmVsc1N0cmluZyIsIm5vZGVzQXNTdHJpbmciLCJwcm9vZkNvbnRleHQiLCJQcm9vZkNvbnRleHQiLCJmcm9tQ29udGV4dCIsInVucXVhbGlmaWVkU3RhdGVtZW50Tm9kZSIsImluZGljYXRpdmVDb25kaXRpb25hbE5vZGUiLCJkZWJ1ZyIsInVucXVhbGlmaWVkU3RhdGVtZW50VmVyaWZpZWQiLCJ2ZXJpZnlVbnF1YWxpZmllZFN0YXRlbWVudCIsInN0YXRlbWVudE5vZGUiLCJsYWJlbHMiLCJheGlvbSIsIkF4aW9tIiwiZnJvbVN0YXRlbWVudE5vZGVBbmRMYWJlbHMiLCJhZGRBeGlvbSIsInN0YXRlbWVudE5vZGVzIiwiaW5kaWNhdGl2ZUNvbmRpdGlvbmFsVmVyaWZpZWQiLCJ2ZXJpZnlJbmRpY2F0aXZlQ29uZGl0aW9uYWwiLCJmaXJzdFN0YXRlbWVudE5vZGUiLCJmaXJzdCIsInNlY29uZFN0YXRlbWVudE5vZGUiLCJzZWNvbmQiLCJzdXBwb3NpdGlvblN0YXRlbWVudE5vZGUiLCJjb25zZXF1ZW50U3RhdGVtZW50Tm9kZSIsImZyb21TdXBwb3NpdGlvblN0YXRlbWVudE5vZGVDb25zZXF1ZW50U3RhdGVtZW50Tm9kZUFuZExhYmVscyIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBYUE7OztlQUF3QkE7OzswREFYQztxQkFFSztzQkFDQTtxQkFDUTs7Ozs7O0FBRXRDLElBQU1DLGtCQUFrQkMsSUFBQUEsaUJBQVUsRUFBQyxpQkFDN0JDLHFCQUFxQkMsSUFBQUEsZ0JBQVMsRUFBQyxpQkFDL0JDLGdDQUFnQ0QsSUFBQUEsZ0JBQVMsRUFBQyxpQ0FDMUNFLGlDQUFpQ0YsSUFBQUEsZ0JBQVMsRUFBQztBQUVsQyxTQUFTSixZQUFZTyxTQUFTLEVBQWtCO1FBQWhCQyxVQUFBQSxpRUFBVSxJQUFJO0lBQzNELElBQUlDLGdCQUFnQixLQUFLO0lBRXpCRCxRQUFRRSxLQUFLLENBQUNIO0lBRWQsSUFBTUksYUFBYVYsZ0JBQWdCTSxZQUM3QkssZUFBZUMsSUFBQUEscUJBQWEsRUFBQ0YsYUFDN0JHLGVBQWVDLGNBQVksQ0FBQ0MsV0FBVyxDQUFDUixVQUN4Q1MsMkJBQTJCWiw4QkFBOEJFLFlBQ3pEVyw0QkFBNEJaLCtCQUErQkM7SUFFakVDLFFBQVFXLEtBQUssQ0FBQyxBQUFDLGtCQUE4QixPQUFiUCxjQUFhO0lBRTdDLElBQUlLLDZCQUE2QixJQUFJLEVBQUU7UUFDckMsSUFBTUcsK0JBQStCTixhQUFhTywwQkFBMEIsQ0FBQ0o7UUFFN0UsSUFBSUcsOEJBQThCO1lBQ2hDLElBQU1FLGdCQUFnQm5CLG1CQUFtQmMsMkJBQ25DTSxTQUFTWCxjQUNUWSxRQUFRQyxNQUFNQywwQkFBMEIsQ0FBQ0osZUFBZUM7WUFFOURmLFFBQVFtQixRQUFRLENBQUNIO1lBRWpCZixnQkFBZ0IsSUFBSTtRQUN0QixDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUlTLDhCQUE4QixJQUFJLEVBQUU7UUFDdEMsSUFBTVUsaUJBQWlCLEVBQUUsRUFDbkJDLGdDQUFnQ2YsYUFBYWdCLDJCQUEyQixDQUFDWiwyQkFBMkJVO1FBRTFHLElBQUlDLGtDQUFrQyxJQUFJLEVBQUU7WUFDMUMsSUFBTU4sVUFBU1gsY0FDVG1CLHFCQUFxQkMsSUFBQUEsWUFBSyxFQUFDSixpQkFDM0JLLHNCQUFzQkMsSUFBQUEsYUFBTSxFQUFDTixpQkFDN0JPLDJCQUEyQkosb0JBQzNCSywwQkFBMEJILHFCQUMxQlQsU0FBUUMsTUFBTVksNERBQTRELENBQUNGLDBCQUEwQkMseUJBQXlCYjtZQUVwSWYsUUFBUW1CLFFBQVEsQ0FBQ0g7WUFFakJmLGdCQUFnQixJQUFJO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0lBRURBLGdCQUNFRCxRQUFROEIsUUFBUSxDQUFDL0IsYUFDZkMsUUFBUStCLElBQUksQ0FBQ2hDLFVBQVU7SUFFM0IsT0FBT0U7QUFDVCJ9