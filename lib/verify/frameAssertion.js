"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyFrameAssertion;
    }
});
var _frame = /*#__PURE__*/ _interop_require_default(require("../verify/frame"));
var _frame1 = /*#__PURE__*/ _interop_require_default(require("../metaType/frame"));
var _frameAssertion = /*#__PURE__*/ _interop_require_default(require("../frameAssertion"));
var _frameAssertion1 = /*#__PURE__*/ _interop_require_default(require("../assignment/frameAssertion"));
var _array = require("../utilities/array");
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var frameNodeQuery = (0, _query.nodeQuery)("/frameAssertion/frame!"), metavariableNodeQuery = (0, _query.nodeQuery)("/frameAssertion/metavariable!");
function verifyFrameAssertion(frameAssertionNode, assignments, derived, localMetaContext) {
    var frameAssertionVerified;
    var frameAssertionString = localMetaContext.nodeAsString(frameAssertionNode);
    localMetaContext.trace("Verifying the '".concat(frameAssertionString, "' frame assertion..."), frameAssertionNode);
    var verifyFrameAssertionFunctions = [
        verifyDerivedFrameAssertion,
        verifyStatedFrameAssertion
    ];
    frameAssertionVerified = verifyFrameAssertionFunctions.some(function(verifyFrameAssertionFunction) {
        var frameAssertionVerified = verifyFrameAssertionFunction(frameAssertionNode, assignments, derived, localMetaContext);
        if (frameAssertionVerified) {
            return true;
        }
    });
    if (frameAssertionVerified) {
        localMetaContext.debug("...verified the '".concat(frameAssertionString, "' frame assertion."), frameAssertionNode);
    }
    return frameAssertionVerified;
}
function verifyDerivedFrameAssertion(frameAssertionNode, assignments, derived, localMetaContext) {
    var derivedFrameAssertionVerified = false;
    if (derived) {
        var frameAssertionString = localMetaContext.nodeAsString(frameAssertionNode);
        localMetaContext.trace("Verifying the '".concat(frameAssertionString, "' derived frame assertion..."), frameAssertionNode);
        var metavariableNode = metavariableNodeQuery(frameAssertionNode), metavariableVerified = verifyMetavariable(metavariableNode, localMetaContext);
        if (metavariableVerified) {
            var frameAssertion = localMetaContext.findFrameAssertionByMetavariableNode(metavariableNode);
            if (frameAssertion !== null) {
                var frames = [], frameNode = frameNodeQuery(frameAssertionNode), frameVerified = (0, _frame.default)(frameNode, frames, assignments, derived, localMetaContext);
                if (frameVerified) {
                    var firstFrame = (0, _array.first)(frames), frame = firstFrame, frameSingular = frame.isSingular();
                    if (frameSingular) {
                        var declaration = frame.getDeclaration(), metavariableNode1 = declaration.getMetavariableNode(), metaLemma = localMetaContext.findMetaLemmaByMetavariableNode(metavariableNode1), metatheorem = localMetaContext.findMetatheoremByMetavariableNode(metavariableNode1), metaLemmaMetatheorem = metaLemma || metatheorem; ///
                        if (metaLemmaMetatheorem !== null) {
                            var declarationMatchesMetaLemmaMetatheorem = declaration.matchMetaLemmaOrMetaTheorem(metaLemmaMetatheorem), frameAssertionMatchesMetaLemmaMetatheorem = frameAssertion.matchMetaLemmaOrMetaTheorem(metaLemmaMetatheorem);
                            derivedFrameAssertionVerified = declarationMatchesMetaLemmaMetatheorem && frameAssertionMatchesMetaLemmaMetatheorem;
                        } else {
                            var metavariableString = localMetaContext.nodeAsString(metavariableNode1);
                            localMetaContext.debug("There are no meta-lemmas or metatheorems corresponding to the '".concat(metavariableString, "' metavariable."), frameAssertionNode);
                        }
                    } else {
                        var frameString = localMetaContext.nodeAsString(frameNode);
                        localMetaContext.debug("The '".concat(frameString, "' is not singular."), frameAssertionNode);
                    }
                }
            } else {
                var metavariableString1 = localMetaContext.nodeAsString(metavariableNode);
                localMetaContext.debug("There is no frameAssertion present for the '".concat(metavariableString1, "' metavariable."), frameAssertionNode);
            }
        }
        if (derivedFrameAssertionVerified) {
            localMetaContext.debug("...verified the '".concat(frameAssertionString, "' derived frame assertion."), frameAssertionNode);
        }
    }
    return derivedFrameAssertionVerified;
}
function verifyStatedFrameAssertion(frameAssertionNode, assignments, derived, localMetaContext) {
    var statedFrameAssertionVerified = false;
    if (!derived) {
        var frameAssertionString = localMetaContext.nodeAsString(frameAssertionNode);
        localMetaContext.trace("Verifying the '".concat(frameAssertionString, "' stated frame assertion..."), frameAssertionNode);
        var metavariableNode = metavariableNodeQuery(frameAssertionNode), metavariableVerified = verifyMetavariable(metavariableNode, localMetaContext);
        if (metavariableVerified) {
            var frames = [], frameNode = frameNodeQuery(frameAssertionNode), frameVerified = (0, _frame.default)(frameNode, frames, assignments, derived, localMetaContext);
            if (frameVerified) {
                var firstFrame = (0, _array.first)(frames), frame = firstFrame, frameAssertion = _frameAssertion.default.fromFrameAssertionNodeFrameAndMetavariableNode(frameAssertionNode, frame, metavariableNode), frameAssertionAssignment = _frameAssertion1.default.fromFrameAssertion(frameAssertion), assignment = frameAssertionAssignment;
                assignments.push(assignment);
                statedFrameAssertionVerified = true;
            }
        }
        if (statedFrameAssertionVerified) {
            localMetaContext.debug("...verified the '".concat(frameAssertionString, "' stated frame assertion."), frameAssertionNode);
        }
    }
    return statedFrameAssertionVerified;
}
function verifyMetavariable(metavariableNode, localMetaContext) {
    var metavariableVerified = false;
    var metavariableString = localMetaContext.nodeAsString(metavariableNode);
    localMetaContext.trace("Verifying the '".concat(metavariableString, "' metavariable..."), metavariableNode);
    var metavariable = localMetaContext.findMetavariableByMetavariableNode(metavariableNode, localMetaContext);
    if (metavariable !== null) {
        var metaType = metavariable.getMetaType();
        if (metaType === _frame1.default) {
            metavariableVerified = true;
        } else {
            var frameMetaTypeName = _frame1.default.getName(), metaTypeString = metaType.asString();
            localMetaContext.debug("The '".concat(metavariableString, "' metavariable's meta-type is '").concat(metaTypeString, "' when it should be '").concat(frameMetaTypeName, "'."), metavariableNode);
        }
    } else {
        localMetaContext.debug("The '".concat(metavariableString, "' metavariable is not present'."), metavariableNode);
    }
    if (metavariableVerified) {
        localMetaContext.debug("...verified the '".concat(metavariableString, "' metavariable."), metavariableNode);
    }
    return metavariableVerified;
}

//# sourceMappingURL=data:application/json;base64,