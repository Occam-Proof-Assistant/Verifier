"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaDerivation;
    }
});
var _metaAssertion = /*#__PURE__*/ _interopRequireDefault(require("../metaAssertion"));
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../context/metaproof"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/qualified"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/unqualified"));
var _array = require("../utilities/array");
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaDerivationNodeQuery = (0, _query.nodeQuery)("/metaSubproof/metaDerivation!"), metaDerivationChildNodesQuery = (0, _query.nodesQuery)("/metaDerivation/*"), qualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement!"), qualifiedOrUnqualifiedMetastatementNodesQuery = (0, _query.nodesQuery)("/metaSubproof/qualifiedMetastatement|unqualifiedMetastatement");
function verifyMetaDerivation(metaDerivationNode, metaproofContext) {
    var metaDerivationVerified, derived;
    metaproofContext.begin(metaDerivationNode);
    derived = true;
    metaproofContext.setDerived(derived);
    var metaDerivationChildNodes = metaDerivationChildNodesQuery(metaDerivationNode);
    metaDerivationVerified = metaDerivationChildNodes.every(function(metaDerivationChildNode) {
        var metaDerivationChildVerified = verifyMetaDerivationChild(metaDerivationChildNode, metaproofContext);
        if (metaDerivationChildVerified) {
            return true;
        }
    });
    derived = false;
    metaproofContext.setDerived(derived);
    metaDerivationVerified ? metaproofContext.complete(metaDerivationNode) : metaproofContext.halt(metaDerivationNode);
    return metaDerivationVerified;
}
function verifyMetaDerivationChild(metaDerivationChildNode, metaproofContext) {
    var metaDerivationChildVerified;
    var ruleName = metaDerivationChildNode.getRuleName();
    switch(ruleName){
        case _ruleNames.META_SUBPROOF_RULE_NAME:
            {
                var metaSubproofNode = metaDerivationChildNode, metaSubproofVerified = verifyMetaSubproof(metaSubproofNode, metaproofContext);
                if (metaSubproofVerified) {
                    var metaAssertion = _metaAssertion.default.fromMetaSubproofNode(metaSubproofNode);
                    metaproofContext.addMetaAssertion(metaAssertion);
                    metaDerivationChildVerified = true;
                }
                break;
            }
        case _ruleNames.QUALIFIED_METASTATEMENT_RULE_NAME:
            {
                var qualifiedMetastatementNode = metaDerivationChildNode, qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, metaproofContext);
                if (qualifiedMetastatementVerified) {
                    var metaAssertion1 = _metaAssertion.default.fromQualifiedMetastatementNode(qualifiedMetastatementNode);
                    metaproofContext.addMetaAssertion(metaAssertion1);
                    metaDerivationChildVerified = qualifiedMetastatementVerified; ///
                }
                break;
            }
        case _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME:
            {
                var unqualifiedMetastatementNode = metaDerivationChildNode, unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
                if (unqualifiedMetastatementVerified) {
                    var metaAssertion2 = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode);
                    metaproofContext.addMetaAssertion(metaAssertion2);
                    metaDerivationChildVerified = true;
                }
                break;
            }
    }
    return metaDerivationChildVerified;
}
function verifyMetaSubproof(metaSubproofNode, metaproofContext) {
    var metaSubproofVerified = false;
    metaproofContext = _metaproof.default.fromMetaproofContext(metaproofContext); ///
    var qualifiedOrUnqualifiedMetastatementNodes = qualifiedOrUnqualifiedMetastatementNodesQuery(metaSubproofNode), frontQualifiedOrUnqualifiedMetastatementNodes = (0, _array.front)(qualifiedOrUnqualifiedMetastatementNodes), unqualifiedMetastatementNodes = frontQualifiedOrUnqualifiedMetastatementNodes, unqualifiedMetastatementsVerified = unqualifiedMetastatementNodes.every(function(unqualifiedMetastatementNode) {
        var unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
        if (unqualifiedMetastatementVerified) {
            return true;
        }
    });
    if (unqualifiedMetastatementsVerified) {
        unqualifiedMetastatementNodes.forEach(function(unqualifiedMetastatementNode) {
            var metaAssertion = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode);
            metaproofContext.addMetaAssertion(metaAssertion);
        });
        var metaDerivationVerified = true;
        var metaDerivationNode = metaDerivationNodeQuery(metaSubproofNode);
        if (metaDerivationNode !== null) {
            metaDerivationVerified = verifyMetaDerivation(metaDerivationNode, metaproofContext);
        }
        if (metaDerivationVerified) {
            var lastQualifiedOrUnqualifiedMetastatementNode = (0, _array.last)(qualifiedOrUnqualifiedMetastatementNodes), qualifiedOrUnqualifiedMetastatementNode = lastQualifiedOrUnqualifiedMetastatementNode, qualifiedMetastatementNode = qualifiedMetastatementNodeQuery(qualifiedOrUnqualifiedMetastatementNode), unqualifiedMetastatementNode = unqualifiedMetastatementNodeQuery(qualifiedOrUnqualifiedMetastatementNode);
            if (qualifiedMetastatementNode !== null) {
                var qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, metaproofContext);
                metaSubproofVerified = qualifiedMetastatementVerified; ///
            }
            if (unqualifiedMetastatementNode !== null) {
                var unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
                metaSubproofVerified = unqualifiedMetastatementVerified; ///
            }
        }
    }
    return metaSubproofVerified;
}

//# sourceMappingURL=data:application/json;base64,