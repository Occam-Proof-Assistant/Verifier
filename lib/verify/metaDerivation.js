"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaDerivation;
    }
});
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../step/metaproof"));
var _metaproof1 = /*#__PURE__*/ _interopRequireDefault(require("../context/metaproof"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/qualified"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/unqualified"));
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement|unqualifiedMetastatement/metastatement!"), metaDerivationNodeQuery = (0, _query.nodeQuery)("/metaSubproof/metaDerivation|abridgedMetaDerivation!"), metaDerivationChildNodesQuery = (0, _query.nodesQuery)("/metaDerivation|abridgedMetaDerivation/*"), unqualifiedMetastatementNodesQuery = (0, _query.nodesQuery)("/metaSubproof/unqualifiedMetastatement");
function verifyMetaDerivation(metaDerivationNode, metaproofContext) {
    var metaDerivationVerified;
    metaproofContext.begin(metaDerivationNode);
    metaproofContext.setDerived();
    var metaDerivationChildNodes = metaDerivationChildNodesQuery(metaDerivationNode);
    metaDerivationVerified = metaDerivationChildNodes.every(function(metaDerivationChildNode) {
        var metaDerivationChildVerified = verifyMetaDerivationChild(metaDerivationChildNode, metaproofContext);
        if (metaDerivationChildVerified) {
            return true;
        }
    });
    metaproofContext.resetDerived();
    metaDerivationVerified ? metaproofContext.complete(metaDerivationNode) : metaproofContext.halt(metaDerivationNode);
    return metaDerivationVerified;
}
function verifyMetaDerivationChild(metaDerivationChildNode, metaproofContext) {
    var metaDerivationChildVerified;
    var ruleName = metaDerivationChildNode.getRuleName();
    switch(ruleName){
        case _ruleNames.META_SUBPROOF_RULE_NAME:
            {
                var metaSubproofNode = metaDerivationChildNode, metaSubproofVerified = verifyMetaSubproof(metaSubproofNode, metaproofContext);
                if (metaSubproofVerified) {
                    var metaproofStep = _metaproof.default.fromMetaSubproofNode(metaSubproofNode);
                    metaproofContext.addMetaproofStep(metaproofStep);
                    metaDerivationChildVerified = true;
                }
                break;
            }
        case _ruleNames.QUALIFIED_METASTATEMENT_RULE_NAME:
            {
                var qualifiedMetastatementNode = metaDerivationChildNode, qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, metaproofContext);
                if (qualifiedMetastatementVerified) {
                    var metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metaproofStep1 = _metaproof.default.fromMetastatementNode(metastatementNode);
                    metaproofContext.addMetaproofStep(metaproofStep1);
                    metaDerivationChildVerified = qualifiedMetastatementVerified; ///
                }
                break;
            }
        case _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME:
            {
                var unqualifiedMetastatementNode = metaDerivationChildNode, unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
                if (unqualifiedMetastatementVerified) {
                    var metastatementNode1 = metastatementNodeQuery(unqualifiedMetastatementNode), metaproofStep2 = _metaproof.default.fromMetastatementNode(metastatementNode1);
                    metaproofContext.addMetaproofStep(metaproofStep2);
                    metaDerivationChildVerified = true;
                }
                break;
            }
    }
    return metaDerivationChildVerified;
}
function verifyMetaSubproof(metaSubproofNode, metaproofContext) {
    var metaSubproofVerified = false;
    metaproofContext = _metaproof1.default.fromMetaproofContext(metaproofContext); ///
    var unqualifiedMetastatementNodes = unqualifiedMetastatementNodesQuery(metaSubproofNode), unqualifiedMetastatementsVerified = unqualifiedMetastatementNodes.every(function(unqualifiedMetastatementNode) {
        var unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, metaproofContext);
        if (unqualifiedMetastatementVerified) {
            return true;
        }
    });
    if (unqualifiedMetastatementsVerified) {
        unqualifiedMetastatementNodes.forEach(function(unqualifiedMetastatementNode) {
            var metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaproofStep = _metaproof.default.fromMetastatementNode(metastatementNode);
            metaproofContext.addMetaproofStep(metaproofStep);
        });
        var metaDerivationNode = metaDerivationNodeQuery(metaSubproofNode), metaDerivationVerified = verifyMetaDerivation(metaDerivationNode, metaproofContext);
        if (metaDerivationVerified) {
            metaSubproofVerified = true;
        }
    }
    return metaSubproofVerified;
}

//# sourceMappingURL=data:application/json;base64,