"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaDerivation;
    }
});
var _metaAssertion = /*#__PURE__*/ _interopRequireDefault(require("../metaAssertion"));
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../context/metaproof"));
var _qualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/qualified"));
var _unqualified = /*#__PURE__*/ _interopRequireDefault(require("../verify/metastatement/unqualified"));
var _array = require("../utilities/array");
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaDerivationNodeQuery = (0, _query.nodeQuery)("/metaSubproof/metaDerivation!"), metaDerivationChildNodesQuery = (0, _query.nodesQuery)("/metaDerivation/*"), qualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement!"), qualifiedOrUnqualifiedMetastatementNodesQuery = (0, _query.nodesQuery)("/metaSubproof/qualifiedMetastatement|unqualifiedMetastatement");
function verifyMetaDerivation(metaDerivationNode, context) {
    var derived = true;
    context.setDerived(derived);
    var metaDerivationChildNodes = metaDerivationChildNodesQuery(metaDerivationNode), metaDerivationChildNodesVerified = metaDerivationChildNodes.every(function(metaDerivationChildNode) {
        var metaDerivationChildNodeVerified;
        var ruleName = metaDerivationChildNode.getRuleName();
        switch(ruleName){
            case _ruleNames.META_SUBPROOF_RULE_NAME:
                {
                    var metaSubproofNode = metaDerivationChildNode, metaSubproofVerified = verifyMetaSubproof(metaSubproofNode, context);
                    if (metaSubproofVerified) {
                        var metaAssertion = _metaAssertion.default.fromMetaSubproofNode(metaSubproofNode);
                        context.addMetaAssertion(metaAssertion);
                        metaDerivationChildNodeVerified = true;
                    }
                    break;
                }
            case _ruleNames.QUALIFIED_METASTATEMENT_RULE_NAME:
                {
                    var qualifiedMetastatementNode = metaDerivationChildNode, qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, context);
                    if (qualifiedMetastatementVerified) {
                        var metaAssertion1 = _metaAssertion.default.fromQualifiedMetastatementNode(qualifiedMetastatementNode);
                        context.addMetaAssertion(metaAssertion1);
                        metaDerivationChildNodeVerified = qualifiedMetastatementVerified; ///
                    }
                    break;
                }
            case _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME:
                {
                    var unqualifiedMetastatementNode = metaDerivationChildNode, unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, context);
                    if (unqualifiedMetastatementVerified) {
                        var metaAssertion2 = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode);
                        context.addMetaAssertion(metaAssertion2);
                        metaDerivationChildNodeVerified = true;
                    }
                    break;
                }
        }
        return metaDerivationChildNodeVerified;
    }), metaDerivationVerified = metaDerivationChildNodesVerified; ///
    return metaDerivationVerified;
}
function verifyMetaSubproof(metaSubproofNode, context) {
    var metaSubproofVerified = false;
    var metaproofContext = _metaproof.default.fromContext(context);
    context = metaproofContext; ///
    var qualifiedOrUnqualifiedMetastatementNodes = qualifiedOrUnqualifiedMetastatementNodesQuery(metaSubproofNode), firstQualifiedOrUnqualifiedMetastatementNode = (0, _array.first)(qualifiedOrUnqualifiedMetastatementNodes), unqualifiedMetastatementNode = firstQualifiedOrUnqualifiedMetastatementNode, unqualifiedMetastatementVerified = (0, _unqualified.default)(unqualifiedMetastatementNode, context);
    if (unqualifiedMetastatementVerified) {
        var metaAssertion = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode);
        context.addMetaAssertion(metaAssertion);
        var metaDerivationVerified = true;
        var metaDerivationNode = metaDerivationNodeQuery(metaSubproofNode);
        if (metaDerivationNode !== null) {
            metaDerivationVerified = verifyMetaDerivation(metaDerivationNode, context);
        }
        if (metaDerivationVerified) {
            var secondQualifiedOrUnqualifiedMetastatementNode = (0, _array.second)(qualifiedOrUnqualifiedMetastatementNodes), qualifiedOrUnqualifiedMetastatementNode = secondQualifiedOrUnqualifiedMetastatementNode, qualifiedMetastatementNode = qualifiedMetastatementNodeQuery(qualifiedOrUnqualifiedMetastatementNode), unqualifiedMetastatementNode1 = unqualifiedMetastatementNodeQuery(qualifiedOrUnqualifiedMetastatementNode);
            if (qualifiedMetastatementNode !== null) {
                var qualifiedMetastatementVerified = (0, _qualified.default)(qualifiedMetastatementNode, context);
                metaSubproofVerified = qualifiedMetastatementVerified; ///
            }
            if (unqualifiedMetastatementNode1 !== null) {
                var unqualifiedMetastatementVerified1 = (0, _unqualified.default)(unqualifiedMetastatementNode1, context);
                metaSubproofVerified = unqualifiedMetastatementVerified1; ///
            }
        }
    }
    return metaSubproofVerified;
}

//# sourceMappingURL=data:application/json;base64,