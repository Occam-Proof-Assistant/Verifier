"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyMetaDerivation;
    }
});
var _metaAssertion = /*#__PURE__*/ _interopRequireDefault(require("../metaAssertion"));
var _metaproof = /*#__PURE__*/ _interopRequireDefault(require("../context/metaproof"));
var _array = require("../utilities/array");
var _query = require("../utilities/query");
var _ruleNames = require("../ruleNames");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var metaDerivationNodeQuery = (0, _query.nodeQuery)("/metaSubproof/metaDerivation!"), metaDerivationChildNodesQuery = (0, _query.nodesQuery)("/metaDerivation/*"), qualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/qualifiedMetastatement"), unqualifiedMetastatementNodeQuery = (0, _query.nodeQuery)("/unqualifiedMetastatement!"), qualifiedOrUnqualifiedMetastatementNodesQuery = (0, _query.nodesQuery)("/metaSubproof/qualifiedMetastatement|unqualifiedMetastatement");
function verifyMetaDerivation(metaDerivationNode) {
    var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;
    var metaDerivationVerified;
    context.begin(metaDerivationNode);
    var derived = true;
    context.setDerived(derived);
    var metaDerivationChildNodes = metaDerivationChildNodesQuery(metaDerivationNode), metaDerivationChildNodesVerified = metaDerivationChildNodes.every(function(metaDerivationChildNode) {
        var metaDerivationChildNodeVerified;
        var ruleName = metaDerivationChildNode.getRuleName();
        switch(ruleName){
            case _ruleNames.META_SUBPROOF_RULE_NAME:
                {
                    var metaSubproofNode = metaDerivationChildNode, metaSubproofVerified = verifyMetaSubproof(metaSubproofNode, context);
                    if (metaSubproofVerified) {
                        var metaAssertion = _metaAssertion.default.fromMetaSubproofNode(metaSubproofNode);
                        context.addMetaAssertion(metaAssertion);
                        metaDerivationChildNodeVerified = true;
                    }
                    break;
                }
            case _ruleNames.QUALIFIED_METASTATEMENT_RULE_NAME:
                {
                    var qualifiedMetastatementNode = metaDerivationChildNode, qualifiedMetastatementVerified = context.verifyQualifiedMetastatement(qualifiedMetastatementNode);
                    if (qualifiedMetastatementVerified) {
                        var metaAssertion1 = _metaAssertion.default.fromQualifiedMetastatementNode(qualifiedMetastatementNode);
                        context.addMetaAssertion(metaAssertion1);
                        metaDerivationChildNodeVerified = qualifiedMetastatementVerified; ///
                    }
                    break;
                }
            case _ruleNames.UNQUALIFIED_METASTATEMENT_RULE_NAME:
                {
                    var unqualifiedMetastatementNode = metaDerivationChildNode, unqualifiedMetastatementVerified = context.verifyUnqualifiedMetastatement(unqualifiedMetastatementNode);
                    if (unqualifiedMetastatementVerified) {
                        var metaAssertion2 = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode);
                        context.addMetaAssertion(metaAssertion2);
                        metaDerivationChildNodeVerified = true;
                    }
                    break;
                }
        }
        return metaDerivationChildNodeVerified;
    });
    metaDerivationVerified = metaDerivationChildNodesVerified; ///
    metaDerivationVerified ? context.complete(metaDerivationNode) : context.halt(metaDerivationNode);
    return metaDerivationVerified;
}
function verifyMetaSubproof(metaSubproofNode, context) {
    var metaSubproofVerified = false;
    var metaproofContext = _metaproof.default.fromContext(context);
    context = metaproofContext; ///
    var qualifiedOrUnqualifiedMetastatementNodes = qualifiedOrUnqualifiedMetastatementNodesQuery(metaSubproofNode), firstQualifiedOrUnqualifiedMetastatementNode = (0, _array.first)(qualifiedOrUnqualifiedMetastatementNodes), unqualifiedMetastatementNode = firstQualifiedOrUnqualifiedMetastatementNode, unqualifiedMetastatementVerified = context.verifyUnqualifiedMetastatement(unqualifiedMetastatementNode);
    if (unqualifiedMetastatementVerified) {
        var metaAssertion = _metaAssertion.default.fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode);
        context.addMetaAssertion(metaAssertion);
        var metaDerivationVerified = true;
        var metaDerivationNode = metaDerivationNodeQuery(metaSubproofNode);
        if (metaDerivationNode !== null) {
            metaDerivationVerified = context.verifyMetaDerivation(metaDerivationNode);
        }
        if (metaDerivationVerified) {
            var secondQualifiedOrUnqualifiedMetastatementNode = (0, _array.second)(qualifiedOrUnqualifiedMetastatementNodes), qualifiedOrUnqualifiedMetastatementNode = secondQualifiedOrUnqualifiedMetastatementNode, qualifiedMetastatementNode = qualifiedMetastatementNodeQuery(qualifiedOrUnqualifiedMetastatementNode), unqualifiedMetastatementNode1 = unqualifiedMetastatementNodeQuery(qualifiedOrUnqualifiedMetastatementNode);
            if (qualifiedMetastatementNode !== null) {
                var qualifiedMetastatementVerified = context.verifyQualifiedMetastatement(qualifiedMetastatementNode);
                metaSubproofVerified = qualifiedMetastatementVerified; ///
            }
            if (unqualifiedMetastatementNode1 !== null) {
                var unqualifiedMetastatementVerified1 = context.verifyUnqualifiedMetastatement(unqualifiedMetastatementNode1);
                metaSubproofVerified = unqualifiedMetastatementVerified1; ///
            }
        }
    }
    return metaSubproofVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92ZXJpZnkvbWV0YURlcml2YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBNZXRhQXNzZXJ0aW9uIGZyb20gXCIuLi9tZXRhQXNzZXJ0aW9uXCI7XG5pbXBvcnQgTWV0YXByb29mQ29udGV4dCBmcm9tIFwiLi4vY29udGV4dC9tZXRhcHJvb2ZcIjtcblxuaW1wb3J0IHsgZmlyc3QsIHNlY29uZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IG5vZGVRdWVyeSwgbm9kZXNRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcbmltcG9ydCB7IE1FVEFfU1VCUFJPT0ZfUlVMRV9OQU1FLCBRVUFMSUZJRURfTUVUQVNUQVRFTUVOVF9SVUxFX05BTUUsIFVOUVVBTElGSUVEX01FVEFTVEFURU1FTlRfUlVMRV9OQU1FIH0gZnJvbSBcIi4uL3J1bGVOYW1lc1wiO1xuXG5jb25zdCBtZXRhRGVyaXZhdGlvbk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi9tZXRhU3VicHJvb2YvbWV0YURlcml2YXRpb24hXCIpLFxuICAgICAgbWV0YURlcml2YXRpb25DaGlsZE5vZGVzUXVlcnkgPSBub2Rlc1F1ZXJ5KFwiL21ldGFEZXJpdmF0aW9uLypcIiksXG4gICAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3F1YWxpZmllZE1ldGFzdGF0ZW1lbnRcIiksXG4gICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50IVwiKSxcbiAgICAgIHF1YWxpZmllZE9yVW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvbWV0YVN1YnByb29mL3F1YWxpZmllZE1ldGFzdGF0ZW1lbnR8dW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50XCIpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeU1ldGFEZXJpdmF0aW9uKG1ldGFEZXJpdmF0aW9uTm9kZSwgY29udGV4dCA9IHRoaXMpIHtcbiAgbGV0IG1ldGFEZXJpdmF0aW9uVmVyaWZpZWQ7XG5cbiAgY29udGV4dC5iZWdpbihtZXRhRGVyaXZhdGlvbk5vZGUpO1xuXG4gIGNvbnN0IGRlcml2ZWQgPSB0cnVlO1xuXG4gIGNvbnRleHQuc2V0RGVyaXZlZChkZXJpdmVkKTtcblxuICBjb25zdCBtZXRhRGVyaXZhdGlvbkNoaWxkTm9kZXMgPSBtZXRhRGVyaXZhdGlvbkNoaWxkTm9kZXNRdWVyeShtZXRhRGVyaXZhdGlvbk5vZGUpLFxuICAgICAgICBtZXRhRGVyaXZhdGlvbkNoaWxkTm9kZXNWZXJpZmllZCA9IG1ldGFEZXJpdmF0aW9uQ2hpbGROb2Rlcy5ldmVyeSgobWV0YURlcml2YXRpb25DaGlsZE5vZGUpID0+IHtcbiAgICAgICAgICBsZXQgbWV0YURlcml2YXRpb25DaGlsZE5vZGVWZXJpZmllZDtcblxuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gbWV0YURlcml2YXRpb25DaGlsZE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICAgICAgICAgIHN3aXRjaCAocnVsZU5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgTUVUQV9TVUJQUk9PRl9SVUxFX05BTUU6IHtcbiAgICAgICAgICAgICAgY29uc3QgbWV0YVN1YnByb29mTm9kZSA9IG1ldGFEZXJpdmF0aW9uQ2hpbGROb2RlLCAgLy8vXG4gICAgICAgICAgICAgICAgICAgIG1ldGFTdWJwcm9vZlZlcmlmaWVkID0gdmVyaWZ5TWV0YVN1YnByb29mKG1ldGFTdWJwcm9vZk5vZGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgICAgIGlmIChtZXRhU3VicHJvb2ZWZXJpZmllZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFBc3NlcnRpb24gPSBNZXRhQXNzZXJ0aW9uLmZyb21NZXRhU3VicHJvb2ZOb2RlKG1ldGFTdWJwcm9vZk5vZGUpO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5hZGRNZXRhQXNzZXJ0aW9uKG1ldGFBc3NlcnRpb24pO1xuXG4gICAgICAgICAgICAgICAgbWV0YURlcml2YXRpb25DaGlsZE5vZGVWZXJpZmllZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSBRVUFMSUZJRURfTUVUQVNUQVRFTUVOVF9SVUxFX05BTUU6IHtcbiAgICAgICAgICAgICAgY29uc3QgcXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUgPSBtZXRhRGVyaXZhdGlvbkNoaWxkTm9kZSwgIC8vL1xuICAgICAgICAgICAgICAgICAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQgPSBjb250ZXh0LnZlcmlmeVF1YWxpZmllZE1ldGFzdGF0ZW1lbnQocXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgICAgICAgICAgIGlmIChxdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhQXNzZXJ0aW9uID0gTWV0YUFzc2VydGlvbi5mcm9tUXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUocXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5hZGRNZXRhQXNzZXJ0aW9uKG1ldGFBc3NlcnRpb24pO1xuXG4gICAgICAgICAgICAgICAgbWV0YURlcml2YXRpb25DaGlsZE5vZGVWZXJpZmllZCA9IHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZDsgLy8vXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSBVTlFVQUxJRklFRF9NRVRBU1RBVEVNRU5UX1JVTEVfTkFNRToge1xuICAgICAgICAgICAgICBjb25zdCB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlID0gbWV0YURlcml2YXRpb25DaGlsZE5vZGUsICAvLy9cbiAgICAgICAgICAgICAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQgPSBjb250ZXh0LnZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgICAgICAgICBpZiAodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhQXNzZXJ0aW9uID0gTWV0YUFzc2VydGlvbi5mcm9tVW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQuYWRkTWV0YUFzc2VydGlvbihtZXRhQXNzZXJ0aW9uKTtcblxuICAgICAgICAgICAgICAgIG1ldGFEZXJpdmF0aW9uQ2hpbGROb2RlVmVyaWZpZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG1ldGFEZXJpdmF0aW9uQ2hpbGROb2RlVmVyaWZpZWQ7XG4gICAgICAgIH0pO1xuXG4gIG1ldGFEZXJpdmF0aW9uVmVyaWZpZWQgPSBtZXRhRGVyaXZhdGlvbkNoaWxkTm9kZXNWZXJpZmllZDsgIC8vL1xuXG4gIG1ldGFEZXJpdmF0aW9uVmVyaWZpZWQgP1xuICAgIGNvbnRleHQuY29tcGxldGUobWV0YURlcml2YXRpb25Ob2RlKSA6XG4gICAgICBjb250ZXh0LmhhbHQobWV0YURlcml2YXRpb25Ob2RlKTtcblxuICByZXR1cm4gbWV0YURlcml2YXRpb25WZXJpZmllZDtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5TWV0YVN1YnByb29mKG1ldGFTdWJwcm9vZk5vZGUsIGNvbnRleHQpIHtcbiAgbGV0IG1ldGFTdWJwcm9vZlZlcmlmaWVkID0gZmFsc2U7XG5cbiAgY29uc3QgbWV0YXByb29mQ29udGV4dCA9IE1ldGFwcm9vZkNvbnRleHQuZnJvbUNvbnRleHQoY29udGV4dCk7XG5cbiAgY29udGV4dCA9IG1ldGFwcm9vZkNvbnRleHQ7IC8vL1xuXG4gIGNvbnN0IHF1YWxpZmllZE9yVW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXMgPSBxdWFsaWZpZWRPclVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzUXVlcnkobWV0YVN1YnByb29mTm9kZSksXG4gICAgICAgIGZpcnN0UXVhbGlmaWVkT3JVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlID0gZmlyc3QocXVhbGlmaWVkT3JVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlcyksXG4gICAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUgPSBmaXJzdFF1YWxpZmllZE9yVW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSwgIC8vL1xuICAgICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCA9IGNvbnRleHQudmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gIGlmICh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCkge1xuICAgIGNvbnN0IG1ldGFBc3NlcnRpb24gPSBNZXRhQXNzZXJ0aW9uLmZyb21VbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgY29udGV4dC5hZGRNZXRhQXNzZXJ0aW9uKG1ldGFBc3NlcnRpb24pO1xuXG4gICAgbGV0IG1ldGFEZXJpdmF0aW9uVmVyaWZpZWQgPSB0cnVlO1xuXG4gICAgY29uc3QgbWV0YURlcml2YXRpb25Ob2RlID0gbWV0YURlcml2YXRpb25Ob2RlUXVlcnkobWV0YVN1YnByb29mTm9kZSk7XG5cbiAgICBpZiAobWV0YURlcml2YXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgICBtZXRhRGVyaXZhdGlvblZlcmlmaWVkID0gY29udGV4dC52ZXJpZnlNZXRhRGVyaXZhdGlvbihtZXRhRGVyaXZhdGlvbk5vZGUpO1xuICAgIH1cblxuICAgIGlmIChtZXRhRGVyaXZhdGlvblZlcmlmaWVkKSB7XG4gICAgICBjb25zdCBzZWNvbmRRdWFsaWZpZWRPclVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUgPSBzZWNvbmQocXVhbGlmaWVkT3JVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlcyksXG4gICAgICAgICAgICBxdWFsaWZpZWRPclVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUgPSBzZWNvbmRRdWFsaWZpZWRPclVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgICAgIHF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlID0gcXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeShxdWFsaWZpZWRPclVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpLFxuICAgICAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSA9IHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVRdWVyeShxdWFsaWZpZWRPclVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgICBpZiAocXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgcXVhbGlmaWVkTWV0YXN0YXRlbWVudFZlcmlmaWVkID0gY29udGV4dC52ZXJpZnlRdWFsaWZpZWRNZXRhc3RhdGVtZW50KHF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlKTtcblxuICAgICAgICBtZXRhU3VicHJvb2ZWZXJpZmllZCA9IHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZDsgIC8vL1xuICAgICAgfVxuXG4gICAgICBpZiAodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCA9IGNvbnRleHQudmVyaWZ5VW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50KHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUpO1xuXG4gICAgICAgIG1ldGFTdWJwcm9vZlZlcmlmaWVkID0gdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50VmVyaWZpZWQ7ICAvLy9cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWV0YVN1YnByb29mVmVyaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidmVyaWZ5TWV0YURlcml2YXRpb24iLCJtZXRhRGVyaXZhdGlvbk5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsIm1ldGFEZXJpdmF0aW9uQ2hpbGROb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlUXVlcnkiLCJxdWFsaWZpZWRPclVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGVzUXVlcnkiLCJtZXRhRGVyaXZhdGlvbk5vZGUiLCJjb250ZXh0IiwibWV0YURlcml2YXRpb25WZXJpZmllZCIsImJlZ2luIiwiZGVyaXZlZCIsInNldERlcml2ZWQiLCJtZXRhRGVyaXZhdGlvbkNoaWxkTm9kZXMiLCJtZXRhRGVyaXZhdGlvbkNoaWxkTm9kZXNWZXJpZmllZCIsImV2ZXJ5IiwibWV0YURlcml2YXRpb25DaGlsZE5vZGUiLCJtZXRhRGVyaXZhdGlvbkNoaWxkTm9kZVZlcmlmaWVkIiwicnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsIk1FVEFfU1VCUFJPT0ZfUlVMRV9OQU1FIiwibWV0YVN1YnByb29mTm9kZSIsIm1ldGFTdWJwcm9vZlZlcmlmaWVkIiwidmVyaWZ5TWV0YVN1YnByb29mIiwibWV0YUFzc2VydGlvbiIsIk1ldGFBc3NlcnRpb24iLCJmcm9tTWV0YVN1YnByb29mTm9kZSIsImFkZE1ldGFBc3NlcnRpb24iLCJRVUFMSUZJRURfTUVUQVNUQVRFTUVOVF9SVUxFX05BTUUiLCJxdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeVF1YWxpZmllZE1ldGFzdGF0ZW1lbnQiLCJmcm9tUXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUiLCJVTlFVQUxJRklFRF9NRVRBU1RBVEVNRU5UX1JVTEVfTkFNRSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudE5vZGUiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRWZXJpZmllZCIsInZlcmlmeVVucXVhbGlmaWVkTWV0YXN0YXRlbWVudCIsImZyb21VbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlIiwiY29tcGxldGUiLCJoYWx0IiwibWV0YXByb29mQ29udGV4dCIsIk1ldGFwcm9vZkNvbnRleHQiLCJmcm9tQ29udGV4dCIsInF1YWxpZmllZE9yVW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZXMiLCJmaXJzdFF1YWxpZmllZE9yVW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Tm9kZSIsImZpcnN0Iiwic2Vjb25kUXVhbGlmaWVkT3JVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlIiwic2Vjb25kIiwicXVhbGlmaWVkT3JVbnF1YWxpZmllZE1ldGFzdGF0ZW1lbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFlQTs7O2VBQXdCQTs7O2tFQWJFOzhEQUNHO3FCQUVDO3FCQUNRO3lCQUMwRTs7Ozs7O0FBRWhILElBQU1DLDBCQUEwQkMsSUFBQUEsZ0JBQVMsRUFBQyxrQ0FDcENDLGdDQUFnQ0MsSUFBQUEsaUJBQVUsRUFBQyxzQkFDM0NDLGtDQUFrQ0gsSUFBQUEsZ0JBQVMsRUFBQyw0QkFDNUNJLG9DQUFvQ0osSUFBQUEsZ0JBQVMsRUFBQywrQkFDOUNLLGdEQUFnREgsSUFBQUEsaUJBQVUsRUFBQztBQUVsRCxTQUFTSixxQkFBcUJRLGtCQUFrQixFQUFrQjtRQUFoQkMsVUFBQUEsaUVBQVUs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