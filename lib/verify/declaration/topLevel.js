"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyTopLevelDeclaration;
    }
});
var _rule = /*#__PURE__*/ _interopRequireDefault(require("../../verify/rule"));
var _axiom = /*#__PURE__*/ _interopRequireDefault(require("../../verify/axiom"));
var _type = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/type"));
var _variable = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/variable"));
var _combinator = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/combinator"));
var _constructor = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/constructor"));
var _query = require("../../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/rule!"), axiomNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/axiom!"), typeDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/typeDeclaration!"), variableDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/variableDeclaration!"), combinatorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/combinatorDeclaration!"), constructorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/constructorDeclaration!");
function verifyTopLevelDeclaration(topLevelDeclarationNode, context) {
    var topLevelDeclarationVerified = false;
    context.begin(topLevelDeclarationNode);
    var node = topLevelDeclarationNode, ruleNode = ruleNodeQuery(node), axiomNode = axiomNodeQuery(node), typeDeclarationNode = typeDeclarationNodeQuery(node), variableDeclarationNode = variableDeclarationNodeQuery(node), combinatorDeclarationNode = combinatorDeclarationNodeQuery(node), constructorDeclarationNode = constructorDeclarationNodeQuery(node);
    if (false) {
    ///
    } else if (ruleNode !== null) {
        var ruleVerified = (0, _rule.default)(ruleNode, context);
        topLevelDeclarationVerified = ruleVerified; ///
    } else if (axiomNode !== null) {
        var axiomVerified = (0, _axiom.default)(axiomNode, context);
        topLevelDeclarationVerified = axiomVerified; ///
    } else if (typeDeclarationNode !== null) {
        var typeDeclarationVerified = (0, _type.default)(typeDeclarationNode, context);
        topLevelDeclarationVerified = typeDeclarationVerified; ///
    } else if (variableDeclarationNode !== null) {
        var variableDeclarationVerified = (0, _variable.default)(variableDeclarationNode, context);
        topLevelDeclarationVerified = variableDeclarationVerified; ///
    } else if (combinatorDeclarationNode !== null) {
        var combinatorDeclarationVerified = (0, _combinator.default)(combinatorDeclarationNode, context);
        topLevelDeclarationVerified = combinatorDeclarationVerified; ///
    } else if (constructorDeclarationNode !== null) {
        var constructorDeclarationVerified = (0, _constructor.default)(constructorDeclarationNode, context);
        topLevelDeclarationVerified = constructorDeclarationVerified; ///
    }
    topLevelDeclarationVerified ? context.complete(topLevelDeclarationNode) : context.halt(topLevelDeclarationNode);
    return topLevelDeclarationVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92ZXJpZnkvZGVjbGFyYXRpb24vdG9wTGV2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB2ZXJpZnlSdWxlIGZyb20gXCIuLi8uLi92ZXJpZnkvcnVsZVwiO1xuaW1wb3J0IHZlcmlmeUF4aW9tIGZyb20gXCIuLi8uLi92ZXJpZnkvYXhpb21cIjtcbmltcG9ydCB2ZXJpZnlUeXBlRGVjbGFyYXRpb24gZnJvbSBcIi4uLy4uL3ZlcmlmeS9kZWNsYXJhdGlvbi90eXBlXCI7XG5pbXBvcnQgdmVyaWZ5VmFyaWFibGVEZWNsYXJhdGlvbiBmcm9tIFwiLi4vLi4vdmVyaWZ5L2RlY2xhcmF0aW9uL3ZhcmlhYmxlXCI7XG5pbXBvcnQgdmVyaWZ5Q29tYmluYXRvckRlY2xhcmF0aW9uIGZyb20gXCIuLi8uLi92ZXJpZnkvZGVjbGFyYXRpb24vY29tYmluYXRvclwiO1xuaW1wb3J0IHZlcmlmeUNvbnN0cnVjdG9yRGVjbGFyYXRpb24gZnJvbSBcIi4uLy4uL3ZlcmlmeS9kZWNsYXJhdGlvbi9jb25zdHJ1Y3RvclwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHJ1bGVOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdG9wTGV2ZWxEZWNsYXJhdGlvbi9ydWxlIVwiKSxcbiAgICAgIGF4aW9tTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vYXhpb20hXCIpLFxuICAgICAgdHlwZURlY2xhcmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vdHlwZURlY2xhcmF0aW9uIVwiKSxcbiAgICAgIHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdG9wTGV2ZWxEZWNsYXJhdGlvbi92YXJpYWJsZURlY2xhcmF0aW9uIVwiKSxcbiAgICAgIGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90b3BMZXZlbERlY2xhcmF0aW9uL2NvbWJpbmF0b3JEZWNsYXJhdGlvbiFcIiksXG4gICAgICBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vY29uc3RydWN0b3JEZWNsYXJhdGlvbiFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVRvcExldmVsRGVjbGFyYXRpb24odG9wTGV2ZWxEZWNsYXJhdGlvbk5vZGUsIGNvbnRleHQpIHtcbiAgbGV0IHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IGZhbHNlO1xuXG4gIGNvbnRleHQuYmVnaW4odG9wTGV2ZWxEZWNsYXJhdGlvbk5vZGUpO1xuXG4gIGNvbnN0IG5vZGUgPSB0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSwgLy8vXG4gICAgICAgIHJ1bGVOb2RlID0gcnVsZU5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgYXhpb21Ob2RlID0gYXhpb21Ob2RlUXVlcnkobm9kZSksXG4gICAgICAgIHR5cGVEZWNsYXJhdGlvbk5vZGUgPSB0eXBlRGVjbGFyYXRpb25Ob2RlUXVlcnkobm9kZSksXG4gICAgICAgIHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlID0gdmFyaWFibGVEZWNsYXJhdGlvbk5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSA9IGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5KG5vZGUpO1xuXG4gIGlmIChmYWxzZSkge1xuICAgIC8vL1xuICB9IGVsc2UgaWYgKHJ1bGVOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcnVsZVZlcmlmaWVkID0gdmVyaWZ5UnVsZShydWxlTm9kZSwgY29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBydWxlVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmIChheGlvbU5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBheGlvbVZlcmlmaWVkID0gdmVyaWZ5QXhpb20oYXhpb21Ob2RlLCBjb250ZXh0KTtcblxuICAgIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IGF4aW9tVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmICh0eXBlRGVjbGFyYXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHlwZURlY2xhcmF0aW9uVmVyaWZpZWQgPSB2ZXJpZnlUeXBlRGVjbGFyYXRpb24odHlwZURlY2xhcmF0aW9uTm9kZSwgY29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSB0eXBlRGVjbGFyYXRpb25WZXJpZmllZDsgIC8vL1xuICB9IGVsc2UgaWYgKHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgdmFyaWFibGVEZWNsYXJhdGlvblZlcmlmaWVkID0gdmVyaWZ5VmFyaWFibGVEZWNsYXJhdGlvbih2YXJpYWJsZURlY2xhcmF0aW9uTm9kZSwgY29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSB2YXJpYWJsZURlY2xhcmF0aW9uVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmIChjb21iaW5hdG9yRGVjbGFyYXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgY29tYmluYXRvckRlY2xhcmF0aW9uVmVyaWZpZWQgPSB2ZXJpZnlDb21iaW5hdG9yRGVjbGFyYXRpb24oY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSwgY29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBjb21iaW5hdG9yRGVjbGFyYXRpb25WZXJpZmllZDsgIC8vL1xuICB9IGVsc2UgaWYgKGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgY29uc3RydWN0b3JEZWNsYXJhdGlvblZlcmlmaWVkID0gdmVyaWZ5Q29uc3RydWN0b3JEZWNsYXJhdGlvbihjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZSwgY29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVmVyaWZpZWQ7ICAvLy9cbiAgfVxuXG4gIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA/XG4gICAgY29udGV4dC5jb21wbGV0ZSh0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSkgOlxuICAgICAgY29udGV4dC5oYWx0KHRvcExldmVsRGVjbGFyYXRpb25Ob2RlKTtcblxuICByZXR1cm4gdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeVRvcExldmVsRGVjbGFyYXRpb24iLCJydWxlTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiYXhpb21Ob2RlUXVlcnkiLCJ0eXBlRGVjbGFyYXRpb25Ob2RlUXVlcnkiLCJ2YXJpYWJsZURlY2xhcmF0aW9uTm9kZVF1ZXJ5IiwiY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5IiwiY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeSIsInRvcExldmVsRGVjbGFyYXRpb25Ob2RlIiwiY29udGV4dCIsInRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCIsImJlZ2luIiwibm9kZSIsInJ1bGVOb2RlIiwiYXhpb21Ob2RlIiwidHlwZURlY2xhcmF0aW9uTm9kZSIsInZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlIiwiY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlIiwicnVsZVZlcmlmaWVkIiwidmVyaWZ5UnVsZSIsImF4aW9tVmVyaWZpZWQiLCJ2ZXJpZnlBeGlvbSIsInR5cGVEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5VHlwZURlY2xhcmF0aW9uIiwidmFyaWFibGVEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5VmFyaWFibGVEZWNsYXJhdGlvbiIsImNvbWJpbmF0b3JEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5Q29tYmluYXRvckRlY2xhcmF0aW9uIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5Q29uc3RydWN0b3JEZWNsYXJhdGlvbiIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBa0JBOzs7ZUFBd0JBOzs7eURBaEJEOzBEQUNDO3lEQUNVOzZEQUNJOytEQUNFO2dFQUNDO3FCQUVmOzs7Ozs7QUFFMUIsSUFBTUMsZ0JBQWdCQyxJQUFBQSxnQkFBUyxFQUFDLCtCQUMxQkMsaUJBQWlCRCxJQUFBQSxnQkFBUyxFQUFDLGdDQUMzQkUsMkJBQTJCRixJQUFBQSxnQkFBUyxFQUFDLDBDQUNyQ0csK0JBQStCSCxJQUFBQSxnQkFBUyxFQUFDLDhDQUN6Q0ksaUNBQWlDSixJQUFBQSxnQkFBUyxFQUFDLGdEQUMzQ0ssa0NBQWtDTCxJQUFBQSxnQkFBUyxFQUFDO0FBRW5DLFNBQVNGLDBCQUEwQlEsdUJBQXVCLEVBQUVDLE9BQU8sRUFBRTtJQUNsRixJQUFJQyw4QkFBOEIsS0FBSztJQUV2Q0QsUUFBUUUsS0FBSyxDQUFDSDtJQUVkLElBQU1JLE9BQU9KLHlCQUNQSyxXQUFXWixjQUFjVyxPQUN6QkUsWUFBWVgsZUFBZVMsT0FDM0JHLHNCQUFzQlgseUJBQXlCUSxPQUMvQ0ksMEJBQTBCWCw2QkFBNkJPLE9BQ3ZESyw0QkFBNEJYLCtCQUErQk0sT0FDM0RNLDZCQUE2QlgsZ0NBQWdDSztJQUVuRSxJQUFJLEtBQUssRUFBRTtJQUNULEdBQUc7SUFDTCxPQUFPLElBQUlDLGFBQWEsSUFBSSxFQUFFO1FBQzVCLElBQU1NLGVBQWVDLElBQUFBLGFBQVUsRUFBQ1AsVUFBVUo7UUFFMUNDLDhCQUE4QlMsY0FBZSxHQUFHO0lBQ2xELE9BQU8sSUFBSUwsY0FBYyxJQUFJLEVBQUU7UUFDN0IsSUFBTU8sZ0JBQWdCQyxJQUFBQSxjQUFXLEVBQUNSLFdBQVdMO1FBRTdDQyw4QkFBOEJXLGVBQWdCLEdBQUc7SUFDbkQsT0FBTyxJQUFJTix3QkFBd0IsSUFBSSxFQUFFO1FBQ3ZDLElBQU1RLDBCQUEwQkMsSUFBQUEsYUFBcUIsRUFBQ1QscUJBQXFCTjtRQUUzRUMsOEJBQThCYSx5QkFBMEIsR0FBRztJQUM3RCxPQUFPLElBQUlQLDRCQUE0QixJQUFJLEVBQUU7UUFDM0MsSUFBTVMsOEJBQThCQyxJQUFBQSxpQkFBeUIsRUFBQ1YseUJBQXlCUDtRQUV2RkMsOEJBQThCZSw2QkFBOEIsR0FBRztJQUNqRSxPQUFPLElBQUlSLDhCQUE4QixJQUFJLEVBQUU7UUFDN0MsSUFBTVUsZ0NBQWdDQyxJQUFBQSxtQkFBMkIsRUFBQ1gsMkJBQTJCUjtRQUU3RkMsOEJBQThCaUIsK0JBQWdDLEdBQUc7SUFDbkUsT0FBTyxJQUFJVCwrQkFBK0IsSUFBSSxFQUFFO1FBQzlDLElBQU1XLGlDQUFpQ0MsSUFBQUEsb0JBQTRCLEVBQUNaLDRCQUE0QlQ7UUFFaEdDLDhCQUE4Qm1CLGdDQUFpQyxHQUFHO0lBQ3BFLENBQUM7SUFFRG5CLDhCQUNFRCxRQUFRc0IsUUFBUSxDQUFDdkIsMkJBQ2ZDLFFBQVF1QixJQUFJLENBQUN4Qix3QkFBd0I7SUFFekMsT0FBT0U7QUFDVCJ9