"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyTopLevelDeclaration;
    }
});
var _rule = /*#__PURE__*/ _interopRequireDefault(require("../../verify/rule"));
var _axiom = /*#__PURE__*/ _interopRequireDefault(require("../../verify/axiom"));
var _lemma = /*#__PURE__*/ _interopRequireDefault(require("../../verify/lemma"));
var _type = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/type"));
var _variable = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/variable"));
var _combinator = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/combinator"));
var _constructor = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/constructor"));
var _query = require("../../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/rule!"), axiomNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/axiom!"), lemmaNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/lemma!"), typeDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/typeDeclaration!"), variableDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/variableDeclaration!"), combinatorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/combinatorDeclaration!"), constructorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/constructorDeclaration!");
function verifyTopLevelDeclaration(topLevelDeclarationNode, fileContext) {
    var topLevelDeclarationVerified = false;
    fileContext.begin(topLevelDeclarationNode);
    var node = topLevelDeclarationNode, ruleNode = ruleNodeQuery(node), axiomNode = axiomNodeQuery(node), lemmaNode = lemmaNodeQuery(node), typeDeclarationNode = typeDeclarationNodeQuery(node), variableDeclarationNode = variableDeclarationNodeQuery(node), combinatorDeclarationNode = combinatorDeclarationNodeQuery(node), constructorDeclarationNode = constructorDeclarationNodeQuery(node);
    if (false) {
    ///
    } else if (ruleNode !== null) {
        var ruleVerified = (0, _rule.default)(ruleNode, fileContext);
        topLevelDeclarationVerified = ruleVerified; ///
    } else if (axiomNode !== null) {
        var axiomVerified = (0, _axiom.default)(axiomNode, fileContext);
        topLevelDeclarationVerified = axiomVerified; ///
    } else if (lemmaNode !== null) {
        var lemmaVerified = (0, _lemma.default)(lemmaNode, fileContext);
        topLevelDeclarationVerified = lemmaVerified; ///
    } else if (typeDeclarationNode !== null) {
        var typeDeclarationVerified = (0, _type.default)(typeDeclarationNode, fileContext);
        topLevelDeclarationVerified = typeDeclarationVerified; ///
    } else if (variableDeclarationNode !== null) {
        var variableDeclarationVerified = (0, _variable.default)(variableDeclarationNode, fileContext);
        topLevelDeclarationVerified = variableDeclarationVerified; ///
    } else if (combinatorDeclarationNode !== null) {
        var combinatorDeclarationVerified = (0, _combinator.default)(combinatorDeclarationNode, fileContext);
        topLevelDeclarationVerified = combinatorDeclarationVerified; ///
    } else if (constructorDeclarationNode !== null) {
        var constructorDeclarationVerified = (0, _constructor.default)(constructorDeclarationNode, fileContext);
        topLevelDeclarationVerified = constructorDeclarationVerified; ///
    }
    topLevelDeclarationVerified ? fileContext.complete(topLevelDeclarationNode) : fileContext.halt(topLevelDeclarationNode);
    return topLevelDeclarationVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92ZXJpZnkvZGVjbGFyYXRpb24vdG9wTGV2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB2ZXJpZnlSdWxlIGZyb20gXCIuLi8uLi92ZXJpZnkvcnVsZVwiO1xuaW1wb3J0IHZlcmlmeUF4aW9tIGZyb20gXCIuLi8uLi92ZXJpZnkvYXhpb21cIjtcbmltcG9ydCB2ZXJpZnlMZW1tYSBmcm9tIFwiLi4vLi4vdmVyaWZ5L2xlbW1hXCI7XG5pbXBvcnQgdmVyaWZ5VHlwZURlY2xhcmF0aW9uIGZyb20gXCIuLi8uLi92ZXJpZnkvZGVjbGFyYXRpb24vdHlwZVwiO1xuaW1wb3J0IHZlcmlmeVZhcmlhYmxlRGVjbGFyYXRpb24gZnJvbSBcIi4uLy4uL3ZlcmlmeS9kZWNsYXJhdGlvbi92YXJpYWJsZVwiO1xuaW1wb3J0IHZlcmlmeUNvbWJpbmF0b3JEZWNsYXJhdGlvbiBmcm9tIFwiLi4vLi4vdmVyaWZ5L2RlY2xhcmF0aW9uL2NvbWJpbmF0b3JcIjtcbmltcG9ydCB2ZXJpZnlDb25zdHJ1Y3RvckRlY2xhcmF0aW9uIGZyb20gXCIuLi8uLi92ZXJpZnkvZGVjbGFyYXRpb24vY29uc3RydWN0b3JcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCBydWxlTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vcnVsZSFcIiksXG4gICAgICBheGlvbU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90b3BMZXZlbERlY2xhcmF0aW9uL2F4aW9tIVwiKSxcbiAgICAgIGxlbW1hTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vbGVtbWEhXCIpLFxuICAgICAgdHlwZURlY2xhcmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vdHlwZURlY2xhcmF0aW9uIVwiKSxcbiAgICAgIHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdG9wTGV2ZWxEZWNsYXJhdGlvbi92YXJpYWJsZURlY2xhcmF0aW9uIVwiKSxcbiAgICAgIGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90b3BMZXZlbERlY2xhcmF0aW9uL2NvbWJpbmF0b3JEZWNsYXJhdGlvbiFcIiksXG4gICAgICBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vY29uc3RydWN0b3JEZWNsYXJhdGlvbiFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVRvcExldmVsRGVjbGFyYXRpb24odG9wTGV2ZWxEZWNsYXJhdGlvbk5vZGUsIGZpbGVDb250ZXh0KSB7XG4gIGxldCB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBmYWxzZTtcblxuICBmaWxlQ29udGV4dC5iZWdpbih0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSk7XG5cbiAgY29uc3Qgbm9kZSA9IHRvcExldmVsRGVjbGFyYXRpb25Ob2RlLCAvLy9cbiAgICAgICAgcnVsZU5vZGUgPSBydWxlTm9kZVF1ZXJ5KG5vZGUpLFxuICAgICAgICBheGlvbU5vZGUgPSBheGlvbU5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgbGVtbWFOb2RlID0gbGVtbWFOb2RlUXVlcnkobm9kZSksXG4gICAgICAgIHR5cGVEZWNsYXJhdGlvbk5vZGUgPSB0eXBlRGVjbGFyYXRpb25Ob2RlUXVlcnkobm9kZSksXG4gICAgICAgIHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlID0gdmFyaWFibGVEZWNsYXJhdGlvbk5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSA9IGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5KG5vZGUpO1xuXG4gIGlmIChmYWxzZSkge1xuICAgIC8vL1xuICB9IGVsc2UgaWYgKHJ1bGVOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcnVsZVZlcmlmaWVkID0gdmVyaWZ5UnVsZShydWxlTm9kZSwgZmlsZUNvbnRleHQpO1xuXG4gICAgdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkID0gcnVsZVZlcmlmaWVkOyAgLy8vXG4gIH0gZWxzZSBpZiAoYXhpb21Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgYXhpb21WZXJpZmllZCA9IHZlcmlmeUF4aW9tKGF4aW9tTm9kZSwgZmlsZUNvbnRleHQpO1xuXG4gICAgdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkID0gYXhpb21WZXJpZmllZDsgIC8vL1xuICB9IGVsc2UgaWYgKGxlbW1hTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGxlbW1hVmVyaWZpZWQgPSB2ZXJpZnlMZW1tYShsZW1tYU5vZGUsIGZpbGVDb250ZXh0KTtcblxuICAgIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IGxlbW1hVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmICh0eXBlRGVjbGFyYXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHlwZURlY2xhcmF0aW9uVmVyaWZpZWQgPSB2ZXJpZnlUeXBlRGVjbGFyYXRpb24odHlwZURlY2xhcmF0aW9uTm9kZSwgZmlsZUNvbnRleHQpO1xuXG4gICAgdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkID0gdHlwZURlY2xhcmF0aW9uVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmICh2YXJpYWJsZURlY2xhcmF0aW9uTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHZhcmlhYmxlRGVjbGFyYXRpb25WZXJpZmllZCA9IHZlcmlmeVZhcmlhYmxlRGVjbGFyYXRpb24odmFyaWFibGVEZWNsYXJhdGlvbk5vZGUsIGZpbGVDb250ZXh0KTtcblxuICAgIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IHZhcmlhYmxlRGVjbGFyYXRpb25WZXJpZmllZDsgIC8vL1xuICB9IGVsc2UgaWYgKGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBjb21iaW5hdG9yRGVjbGFyYXRpb25WZXJpZmllZCA9IHZlcmlmeUNvbWJpbmF0b3JEZWNsYXJhdGlvbihjb21iaW5hdG9yRGVjbGFyYXRpb25Ob2RlLCBmaWxlQ29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBjb21iaW5hdG9yRGVjbGFyYXRpb25WZXJpZmllZDsgIC8vL1xuICB9IGVsc2UgaWYgKGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgY29uc3RydWN0b3JEZWNsYXJhdGlvblZlcmlmaWVkID0gdmVyaWZ5Q29uc3RydWN0b3JEZWNsYXJhdGlvbihjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZSwgZmlsZUNvbnRleHQpO1xuXG4gICAgdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkID0gY29uc3RydWN0b3JEZWNsYXJhdGlvblZlcmlmaWVkOyAgLy8vXG4gIH1cblxuICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgP1xuICAgIGZpbGVDb250ZXh0LmNvbXBsZXRlKHRvcExldmVsRGVjbGFyYXRpb25Ob2RlKSA6XG4gICAgICBmaWxlQ29udGV4dC5oYWx0KHRvcExldmVsRGVjbGFyYXRpb25Ob2RlKTtcblxuICByZXR1cm4gdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeVRvcExldmVsRGVjbGFyYXRpb24iLCJydWxlTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiYXhpb21Ob2RlUXVlcnkiLCJsZW1tYU5vZGVRdWVyeSIsInR5cGVEZWNsYXJhdGlvbk5vZGVRdWVyeSIsInZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlUXVlcnkiLCJjb21iaW5hdG9yRGVjbGFyYXRpb25Ob2RlUXVlcnkiLCJjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5IiwidG9wTGV2ZWxEZWNsYXJhdGlvbk5vZGUiLCJmaWxlQ29udGV4dCIsInRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCIsImJlZ2luIiwibm9kZSIsInJ1bGVOb2RlIiwiYXhpb21Ob2RlIiwibGVtbWFOb2RlIiwidHlwZURlY2xhcmF0aW9uTm9kZSIsInZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlIiwiY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlIiwicnVsZVZlcmlmaWVkIiwidmVyaWZ5UnVsZSIsImF4aW9tVmVyaWZpZWQiLCJ2ZXJpZnlBeGlvbSIsImxlbW1hVmVyaWZpZWQiLCJ2ZXJpZnlMZW1tYSIsInR5cGVEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5VHlwZURlY2xhcmF0aW9uIiwidmFyaWFibGVEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5VmFyaWFibGVEZWNsYXJhdGlvbiIsImNvbWJpbmF0b3JEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5Q29tYmluYXRvckRlY2xhcmF0aW9uIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5Q29uc3RydWN0b3JEZWNsYXJhdGlvbiIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBb0JBOzs7ZUFBd0JBOzs7eURBbEJEOzBEQUNDOzBEQUNBO3lEQUNVOzZEQUNJOytEQUNFO2dFQUNDO3FCQUVmOzs7Ozs7QUFFMUIsSUFBTUMsZ0JBQWdCQyxJQUFBQSxnQkFBUyxFQUFDLCtCQUMxQkMsaUJBQWlCRCxJQUFBQSxnQkFBUyxFQUFDLGdDQUMzQkUsaUJBQWlCRixJQUFBQSxnQkFBUyxFQUFDLGdDQUMzQkcsMkJBQTJCSCxJQUFBQSxnQkFBUyxFQUFDLDBDQUNyQ0ksK0JBQStCSixJQUFBQSxnQkFBUyxFQUFDLDhDQUN6Q0ssaUNBQWlDTCxJQUFBQSxnQkFBUyxFQUFDLGdEQUMzQ00sa0NBQWtDTixJQUFBQSxnQkFBUyxFQUFDO0FBRW5DLFNBQVNGLDBCQUEwQlMsdUJBQXVCLEVBQUVDLFdBQVcsRUFBRTtJQUN0RixJQUFJQyw4QkFBOEIsS0FBSztJQUV2Q0QsWUFBWUUsS0FBSyxDQUFDSDtJQUVsQixJQUFNSSxPQUFPSix5QkFDUEssV0FBV2IsY0FBY1ksT0FDekJFLFlBQVlaLGVBQWVVLE9BQzNCRyxZQUFZWixlQUFlUyxPQUMzQkksc0JBQXNCWix5QkFBeUJRLE9BQy9DSywwQkFBMEJaLDZCQUE2Qk8sT0FDdkRNLDRCQUE0QlosK0JBQStCTSxPQUMzRE8sNkJBQTZCWixnQ0FBZ0NLO0lBRW5FLElBQUksS0FBSyxFQUFFO0lBQ1QsR0FBRztJQUNMLE9BQU8sSUFBSUMsYUFBYSxJQUFJLEVBQUU7UUFDNUIsSUFBTU8sZUFBZUMsSUFBQUEsYUFBVSxFQUFDUixVQUFVSjtRQUUxQ0MsOEJBQThCVSxjQUFlLEdBQUc7SUFDbEQsT0FBTyxJQUFJTixjQUFjLElBQUksRUFBRTtRQUM3QixJQUFNUSxnQkFBZ0JDLElBQUFBLGNBQVcsRUFBQ1QsV0FBV0w7UUFFN0NDLDhCQUE4QlksZUFBZ0IsR0FBRztJQUNuRCxPQUFPLElBQUlQLGNBQWMsSUFBSSxFQUFFO1FBQzdCLElBQU1TLGdCQUFnQkMsSUFBQUEsY0FBVyxFQUFDVixXQUFXTjtRQUU3Q0MsOEJBQThCYyxlQUFnQixHQUFHO0lBQ25ELE9BQU8sSUFBSVIsd0JBQXdCLElBQUksRUFBRTtRQUN2QyxJQUFNVSwwQkFBMEJDLElBQUFBLGFBQXFCLEVBQUNYLHFCQUFxQlA7UUFFM0VDLDhCQUE4QmdCLHlCQUEwQixHQUFHO0lBQzdELE9BQU8sSUFBSVQsNEJBQTRCLElBQUksRUFBRTtRQUMzQyxJQUFNVyw4QkFBOEJDLElBQUFBLGlCQUF5QixFQUFDWix5QkFBeUJSO1FBRXZGQyw4QkFBOEJrQiw2QkFBOEIsR0FBRztJQUNqRSxPQUFPLElBQUlWLDhCQUE4QixJQUFJLEVBQUU7UUFDN0MsSUFBTVksZ0NBQWdDQyxJQUFBQSxtQkFBMkIsRUFBQ2IsMkJBQTJCVDtRQUU3RkMsOEJBQThCb0IsK0JBQWdDLEdBQUc7SUFDbkUsT0FBTyxJQUFJWCwrQkFBK0IsSUFBSSxFQUFFO1FBQzlDLElBQU1hLGlDQUFpQ0MsSUFBQUEsb0JBQTRCLEVBQUNkLDRCQUE0QlY7UUFFaEdDLDhCQUE4QnNCLGdDQUFpQyxHQUFHO0lBQ3BFLENBQUM7SUFFRHRCLDhCQUNFRCxZQUFZeUIsUUFBUSxDQUFDMUIsMkJBQ25CQyxZQUFZMEIsSUFBSSxDQUFDM0Isd0JBQXdCO0lBRTdDLE9BQU9FO0FBQ1QifQ==