"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyTopLevelDeclaration;
    }
});
var _rule = /*#__PURE__*/ _interopRequireDefault(require("../../verify/rule"));
var _axiom = /*#__PURE__*/ _interopRequireDefault(require("../../verify/axiom"));
var _type = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/type"));
var _variable = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/variable"));
var _combinator = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/combinator"));
var _constructor = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/constructor"));
var _query = require("../../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/rule!"), axiomNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/axiom!"), typeDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/typeDeclaration!"), variableDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/variableDeclaration!"), combinatorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/combinatorDeclaration!"), constructorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/constructorDeclaration!");
function verifyTopLevelDeclaration(topLevelDeclarationNode, fileContext) {
    var topLevelDeclarationVerified = false;
    fileContext.begin(topLevelDeclarationNode);
    var node = topLevelDeclarationNode, ruleNode = ruleNodeQuery(node), axiomNode = axiomNodeQuery(node), typeDeclarationNode = typeDeclarationNodeQuery(node), variableDeclarationNode = variableDeclarationNodeQuery(node), combinatorDeclarationNode = combinatorDeclarationNodeQuery(node), constructorDeclarationNode = constructorDeclarationNodeQuery(node);
    if (false) {
    ///
    } else if (ruleNode !== null) {
        var ruleVerified = (0, _rule.default)(ruleNode, fileContext);
        topLevelDeclarationVerified = ruleVerified; ///
    } else if (axiomNode !== null) {
        var axiomVerified = (0, _axiom.default)(axiomNode, fileContext);
        topLevelDeclarationVerified = axiomVerified; ///
    } else if (typeDeclarationNode !== null) {
        var typeDeclarationVerified = (0, _type.default)(typeDeclarationNode, fileContext);
        topLevelDeclarationVerified = typeDeclarationVerified; ///
    } else if (variableDeclarationNode !== null) {
        var variableDeclarationVerified = (0, _variable.default)(variableDeclarationNode, fileContext);
        topLevelDeclarationVerified = variableDeclarationVerified; ///
    } else if (combinatorDeclarationNode !== null) {
        var combinatorDeclarationVerified = (0, _combinator.default)(combinatorDeclarationNode, fileContext);
        topLevelDeclarationVerified = combinatorDeclarationVerified; ///
    } else if (constructorDeclarationNode !== null) {
        var constructorDeclarationVerified = (0, _constructor.default)(constructorDeclarationNode, fileContext);
        topLevelDeclarationVerified = constructorDeclarationVerified; ///
    }
    topLevelDeclarationVerified ? fileContext.complete(topLevelDeclarationNode) : fileContext.halt(topLevelDeclarationNode);
    return topLevelDeclarationVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92ZXJpZnkvZGVjbGFyYXRpb24vdG9wTGV2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB2ZXJpZnlSdWxlIGZyb20gXCIuLi8uLi92ZXJpZnkvcnVsZVwiO1xuaW1wb3J0IHZlcmlmeUF4aW9tIGZyb20gXCIuLi8uLi92ZXJpZnkvYXhpb21cIjtcbmltcG9ydCB2ZXJpZnlUeXBlRGVjbGFyYXRpb24gZnJvbSBcIi4uLy4uL3ZlcmlmeS9kZWNsYXJhdGlvbi90eXBlXCI7XG5pbXBvcnQgdmVyaWZ5VmFyaWFibGVEZWNsYXJhdGlvbiBmcm9tIFwiLi4vLi4vdmVyaWZ5L2RlY2xhcmF0aW9uL3ZhcmlhYmxlXCI7XG5pbXBvcnQgdmVyaWZ5Q29tYmluYXRvckRlY2xhcmF0aW9uIGZyb20gXCIuLi8uLi92ZXJpZnkvZGVjbGFyYXRpb24vY29tYmluYXRvclwiO1xuaW1wb3J0IHZlcmlmeUNvbnN0cnVjdG9yRGVjbGFyYXRpb24gZnJvbSBcIi4uLy4uL3ZlcmlmeS9kZWNsYXJhdGlvbi9jb25zdHJ1Y3RvclwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHJ1bGVOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdG9wTGV2ZWxEZWNsYXJhdGlvbi9ydWxlIVwiKSxcbiAgICAgIGF4aW9tTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vYXhpb20hXCIpLFxuICAgICAgdHlwZURlY2xhcmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vdHlwZURlY2xhcmF0aW9uIVwiKSxcbiAgICAgIHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdG9wTGV2ZWxEZWNsYXJhdGlvbi92YXJpYWJsZURlY2xhcmF0aW9uIVwiKSxcbiAgICAgIGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90b3BMZXZlbERlY2xhcmF0aW9uL2NvbWJpbmF0b3JEZWNsYXJhdGlvbiFcIiksXG4gICAgICBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vY29uc3RydWN0b3JEZWNsYXJhdGlvbiFcIik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVRvcExldmVsRGVjbGFyYXRpb24odG9wTGV2ZWxEZWNsYXJhdGlvbk5vZGUsIGZpbGVDb250ZXh0KSB7XG4gIGxldCB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBmYWxzZTtcblxuICBmaWxlQ29udGV4dC5iZWdpbih0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSk7XG5cbiAgY29uc3Qgbm9kZSA9IHRvcExldmVsRGVjbGFyYXRpb25Ob2RlLCAvLy9cbiAgICAgICAgcnVsZU5vZGUgPSBydWxlTm9kZVF1ZXJ5KG5vZGUpLFxuICAgICAgICBheGlvbU5vZGUgPSBheGlvbU5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgdHlwZURlY2xhcmF0aW9uTm9kZSA9IHR5cGVEZWNsYXJhdGlvbk5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgdmFyaWFibGVEZWNsYXJhdGlvbk5vZGUgPSB2YXJpYWJsZURlY2xhcmF0aW9uTm9kZVF1ZXJ5KG5vZGUpLFxuICAgICAgICBjb21iaW5hdG9yRGVjbGFyYXRpb25Ob2RlID0gY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5KG5vZGUpLFxuICAgICAgICBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZSA9IGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlUXVlcnkobm9kZSk7XG5cbiAgaWYgKGZhbHNlKSB7XG4gICAgLy8vXG4gIH0gZWxzZSBpZiAocnVsZU5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBydWxlVmVyaWZpZWQgPSB2ZXJpZnlSdWxlKHJ1bGVOb2RlLCBmaWxlQ29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBydWxlVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmIChheGlvbU5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBheGlvbVZlcmlmaWVkID0gdmVyaWZ5QXhpb20oYXhpb21Ob2RlLCBmaWxlQ29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBheGlvbVZlcmlmaWVkOyAgLy8vXG4gIH0gZWxzZSBpZiAodHlwZURlY2xhcmF0aW9uTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHR5cGVEZWNsYXJhdGlvblZlcmlmaWVkID0gdmVyaWZ5VHlwZURlY2xhcmF0aW9uKHR5cGVEZWNsYXJhdGlvbk5vZGUsIGZpbGVDb250ZXh0KTtcblxuICAgIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IHR5cGVEZWNsYXJhdGlvblZlcmlmaWVkOyAgLy8vXG4gIH0gZWxzZSBpZiAodmFyaWFibGVEZWNsYXJhdGlvbk5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCB2YXJpYWJsZURlY2xhcmF0aW9uVmVyaWZpZWQgPSB2ZXJpZnlWYXJpYWJsZURlY2xhcmF0aW9uKHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlLCBmaWxlQ29udGV4dCk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSB2YXJpYWJsZURlY2xhcmF0aW9uVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmIChjb21iaW5hdG9yRGVjbGFyYXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgY29tYmluYXRvckRlY2xhcmF0aW9uVmVyaWZpZWQgPSB2ZXJpZnlDb21iaW5hdG9yRGVjbGFyYXRpb24oY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSwgZmlsZUNvbnRleHQpO1xuXG4gICAgdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkID0gY29tYmluYXRvckRlY2xhcmF0aW9uVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmIChjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yRGVjbGFyYXRpb25WZXJpZmllZCA9IHZlcmlmeUNvbnN0cnVjdG9yRGVjbGFyYXRpb24oY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUsIGZpbGVDb250ZXh0KTtcblxuICAgIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IGNvbnN0cnVjdG9yRGVjbGFyYXRpb25WZXJpZmllZDsgIC8vL1xuICB9XG5cbiAgdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkID9cbiAgICBmaWxlQ29udGV4dC5jb21wbGV0ZSh0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSkgOlxuICAgICAgZmlsZUNvbnRleHQuaGFsdCh0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSk7XG5cbiAgcmV0dXJuIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ2ZXJpZnlUb3BMZXZlbERlY2xhcmF0aW9uIiwicnVsZU5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsImF4aW9tTm9kZVF1ZXJ5IiwidHlwZURlY2xhcmF0aW9uTm9kZVF1ZXJ5IiwidmFyaWFibGVEZWNsYXJhdGlvbk5vZGVRdWVyeSIsImNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeSIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlUXVlcnkiLCJ0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSIsImZpbGVDb250ZXh0IiwidG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkIiwiYmVnaW4iLCJub2RlIiwicnVsZU5vZGUiLCJheGlvbU5vZGUiLCJ0eXBlRGVjbGFyYXRpb25Ob2RlIiwidmFyaWFibGVEZWNsYXJhdGlvbk5vZGUiLCJjb21iaW5hdG9yRGVjbGFyYXRpb25Ob2RlIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUiLCJydWxlVmVyaWZpZWQiLCJ2ZXJpZnlSdWxlIiwiYXhpb21WZXJpZmllZCIsInZlcmlmeUF4aW9tIiwidHlwZURlY2xhcmF0aW9uVmVyaWZpZWQiLCJ2ZXJpZnlUeXBlRGVjbGFyYXRpb24iLCJ2YXJpYWJsZURlY2xhcmF0aW9uVmVyaWZpZWQiLCJ2ZXJpZnlWYXJpYWJsZURlY2xhcmF0aW9uIiwiY29tYmluYXRvckRlY2xhcmF0aW9uVmVyaWZpZWQiLCJ2ZXJpZnlDb21iaW5hdG9yRGVjbGFyYXRpb24iLCJjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVmVyaWZpZWQiLCJ2ZXJpZnlDb25zdHJ1Y3RvckRlY2xhcmF0aW9uIiwiY29tcGxldGUiLCJoYWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFrQkE7OztlQUF3QkE7Ozt5REFoQkQ7MERBQ0M7eURBQ1U7NkRBQ0k7K0RBQ0U7Z0VBQ0M7cUJBRWY7Ozs7OztBQUUxQixJQUFNQyxnQkFBZ0JDLElBQUFBLGdCQUFTLEVBQUMsK0JBQzFCQyxpQkFBaUJELElBQUFBLGdCQUFTLEVBQUMsZ0NBQzNCRSwyQkFBMkJGLElBQUFBLGdCQUFTLEVBQUMsMENBQ3JDRywrQkFBK0JILElBQUFBLGdCQUFTLEVBQUMsOENBQ3pDSSxpQ0FBaUNKLElBQUFBLGdCQUFTLEVBQUMsZ0RBQzNDSyxrQ0FBa0NMLElBQUFBLGdCQUFTLEVBQUM7QUFFbkMsU0FBU0YsMEJBQTBCUSx1QkFBdUIsRUFBRUMsV0FBVyxFQUFFO0lBQ3RGLElBQUlDLDhCQUE4QixLQUFLO0lBRXZDRCxZQUFZRSxLQUFLLENBQUNIO0lBRWxCLElBQU1JLE9BQU9KLHlCQUNQSyxXQUFXWixjQUFjVyxPQUN6QkUsWUFBWVgsZUFBZVMsT0FDM0JHLHNCQUFzQlgseUJBQXlCUSxPQUMvQ0ksMEJBQTBCWCw2QkFBNkJPLE9BQ3ZESyw0QkFBNEJYLCtCQUErQk0sT0FDM0RNLDZCQUE2QlgsZ0NBQWdDSztJQUVuRSxJQUFJLEtBQUssRUFBRTtJQUNULEdBQUc7SUFDTCxPQUFPLElBQUlDLGFBQWEsSUFBSSxFQUFFO1FBQzVCLElBQU1NLGVBQWVDLElBQUFBLGFBQVUsRUFBQ1AsVUFBVUo7UUFFMUNDLDhCQUE4QlMsY0FBZSxHQUFHO0lBQ2xELE9BQU8sSUFBSUwsY0FBYyxJQUFJLEVBQUU7UUFDN0IsSUFBTU8sZ0JBQWdCQyxJQUFBQSxjQUFXLEVBQUNSLFdBQVdMO1FBRTdDQyw4QkFBOEJXLGVBQWdCLEdBQUc7SUFDbkQsT0FBTyxJQUFJTix3QkFBd0IsSUFBSSxFQUFFO1FBQ3ZDLElBQU1RLDBCQUEwQkMsSUFBQUEsYUFBcUIsRUFBQ1QscUJBQXFCTjtRQUUzRUMsOEJBQThCYSx5QkFBMEIsR0FBRztJQUM3RCxPQUFPLElBQUlQLDRCQUE0QixJQUFJLEVBQUU7UUFDM0MsSUFBTVMsOEJBQThCQyxJQUFBQSxpQkFBeUIsRUFBQ1YseUJBQXlCUDtRQUV2RkMsOEJBQThCZSw2QkFBOEIsR0FBRztJQUNqRSxPQUFPLElBQUlSLDhCQUE4QixJQUFJLEVBQUU7UUFDN0MsSUFBTVUsZ0NBQWdDQyxJQUFBQSxtQkFBMkIsRUFBQ1gsMkJBQTJCUjtRQUU3RkMsOEJBQThCaUIsK0JBQWdDLEdBQUc7SUFDbkUsT0FBTyxJQUFJVCwrQkFBK0IsSUFBSSxFQUFFO1FBQzlDLElBQU1XLGlDQUFpQ0MsSUFBQUEsb0JBQTRCLEVBQUNaLDRCQUE0QlQ7UUFFaEdDLDhCQUE4Qm1CLGdDQUFpQyxHQUFHO0lBQ3BFLENBQUM7SUFFRG5CLDhCQUNFRCxZQUFZc0IsUUFBUSxDQUFDdkIsMkJBQ25CQyxZQUFZdUIsSUFBSSxDQUFDeEIsd0JBQXdCO0lBRTdDLE9BQU9FO0FBQ1QifQ==