"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyTopLevelDeclaration;
    }
});
var _query = require("../../utilities/query");
var ruleNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/rule!"), axiomNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/axiom!"), typeDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/typeDeclaration!"), variableDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/variableDeclaration!"), combinatorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/combinatorDeclaration!"), constructorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/constructorDeclaration!");
function verifyTopLevelDeclaration(topLevelDeclarationNode) {
    var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;
    var topLevelDeclarationVerified = false;
    context.begin(topLevelDeclarationNode);
    var node = topLevelDeclarationNode, ruleNode = ruleNodeQuery(node), axiomNode = axiomNodeQuery(node), typeDeclarationNode = typeDeclarationNodeQuery(node), variableDeclarationNode = variableDeclarationNodeQuery(node), combinatorDeclarationNode = combinatorDeclarationNodeQuery(node), constructorDeclarationNode = constructorDeclarationNodeQuery(node);
    if (false) {
    ///
    } else if (ruleNode !== null) {
        var ruleVerified = context.verifyRule(ruleNode);
        topLevelDeclarationVerified = ruleVerified; ///
    } else if (axiomNode !== null) {
        var axiomVerified = context.verifyAxiom(axiomNode);
        topLevelDeclarationVerified = axiomVerified; ///
    } else if (typeDeclarationNode !== null) {
        var typeDeclarationVerified = context.verifyTypeDeclaration(typeDeclarationNode);
        topLevelDeclarationVerified = typeDeclarationVerified; ///
    } else if (variableDeclarationNode !== null) {
        var variableDeclarationVerified = context.verifyVariableDeclaration(variableDeclarationNode);
        topLevelDeclarationVerified = variableDeclarationVerified; ///
    } else if (combinatorDeclarationNode !== null) {
        var combinatorDeclarationVerified = context.verifyCombinatorDeclaration(combinatorDeclarationNode);
        topLevelDeclarationVerified = combinatorDeclarationVerified; ///
    } else if (constructorDeclarationNode !== null) {
        var constructorDeclarationVerified = context.verifyConstructorDeclaration(constructorDeclarationNode);
        topLevelDeclarationVerified = constructorDeclarationVerified; ///
    }
    topLevelDeclarationVerified ? context.complete(topLevelDeclarationNode) : context.halt(topLevelDeclarationNode);
    return topLevelDeclarationVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92ZXJpZnkvZGVjbGFyYXRpb24vdG9wTGV2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgcnVsZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90b3BMZXZlbERlY2xhcmF0aW9uL3J1bGUhXCIpLFxuICAgICAgYXhpb21Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdG9wTGV2ZWxEZWNsYXJhdGlvbi9heGlvbSFcIiksXG4gICAgICB0eXBlRGVjbGFyYXRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdG9wTGV2ZWxEZWNsYXJhdGlvbi90eXBlRGVjbGFyYXRpb24hXCIpLFxuICAgICAgdmFyaWFibGVEZWNsYXJhdGlvbk5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi90b3BMZXZlbERlY2xhcmF0aW9uL3ZhcmlhYmxlRGVjbGFyYXRpb24hXCIpLFxuICAgICAgY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3RvcExldmVsRGVjbGFyYXRpb24vY29tYmluYXRvckRlY2xhcmF0aW9uIVwiKSxcbiAgICAgIGNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdG9wTGV2ZWxEZWNsYXJhdGlvbi9jb25zdHJ1Y3RvckRlY2xhcmF0aW9uIVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmVyaWZ5VG9wTGV2ZWxEZWNsYXJhdGlvbih0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSwgY29udGV4dCA9IHRoaXMpIHtcbiAgbGV0IHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IGZhbHNlO1xuXG4gIGNvbnRleHQuYmVnaW4odG9wTGV2ZWxEZWNsYXJhdGlvbk5vZGUpO1xuXG4gIGNvbnN0IG5vZGUgPSB0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSwgLy8vXG4gICAgICAgIHJ1bGVOb2RlID0gcnVsZU5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgYXhpb21Ob2RlID0gYXhpb21Ob2RlUXVlcnkobm9kZSksXG4gICAgICAgIHR5cGVEZWNsYXJhdGlvbk5vZGUgPSB0eXBlRGVjbGFyYXRpb25Ob2RlUXVlcnkobm9kZSksXG4gICAgICAgIHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlID0gdmFyaWFibGVEZWNsYXJhdGlvbk5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSA9IGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeShub2RlKSxcbiAgICAgICAgY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGUgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5KG5vZGUpO1xuXG4gIGlmIChmYWxzZSkge1xuICAgIC8vL1xuICB9IGVsc2UgaWYgKHJ1bGVOb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcnVsZVZlcmlmaWVkID0gY29udGV4dC52ZXJpZnlSdWxlKHJ1bGVOb2RlKTtcblxuICAgIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IHJ1bGVWZXJpZmllZDsgIC8vL1xuICB9IGVsc2UgaWYgKGF4aW9tTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGF4aW9tVmVyaWZpZWQgPSBjb250ZXh0LnZlcmlmeUF4aW9tKGF4aW9tTm9kZSk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBheGlvbVZlcmlmaWVkOyAgLy8vXG4gIH0gZWxzZSBpZiAodHlwZURlY2xhcmF0aW9uTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHR5cGVEZWNsYXJhdGlvblZlcmlmaWVkID0gY29udGV4dC52ZXJpZnlUeXBlRGVjbGFyYXRpb24odHlwZURlY2xhcmF0aW9uTm9kZSk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSB0eXBlRGVjbGFyYXRpb25WZXJpZmllZDsgIC8vL1xuICB9IGVsc2UgaWYgKHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgdmFyaWFibGVEZWNsYXJhdGlvblZlcmlmaWVkID0gY29udGV4dC52ZXJpZnlWYXJpYWJsZURlY2xhcmF0aW9uKHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlKTtcblxuICAgIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA9IHZhcmlhYmxlRGVjbGFyYXRpb25WZXJpZmllZDsgIC8vL1xuICB9IGVsc2UgaWYgKGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBjb21iaW5hdG9yRGVjbGFyYXRpb25WZXJpZmllZCA9IGNvbnRleHQudmVyaWZ5Q29tYmluYXRvckRlY2xhcmF0aW9uKGNvbWJpbmF0b3JEZWNsYXJhdGlvbk5vZGUpO1xuXG4gICAgdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkID0gY29tYmluYXRvckRlY2xhcmF0aW9uVmVyaWZpZWQ7ICAvLy9cbiAgfSBlbHNlIGlmIChjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yRGVjbGFyYXRpb25WZXJpZmllZCA9IGNvbnRleHQudmVyaWZ5Q29uc3RydWN0b3JEZWNsYXJhdGlvbihjb25zdHJ1Y3RvckRlY2xhcmF0aW9uTm9kZSk7XG5cbiAgICB0b3BMZXZlbERlY2xhcmF0aW9uVmVyaWZpZWQgPSBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uVmVyaWZpZWQ7ICAvLy9cbiAgfVxuXG4gIHRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCA/XG4gICAgY29udGV4dC5jb21wbGV0ZSh0b3BMZXZlbERlY2xhcmF0aW9uTm9kZSkgOlxuICAgICAgY29udGV4dC5oYWx0KHRvcExldmVsRGVjbGFyYXRpb25Ob2RlKTtcblxuICByZXR1cm4gdG9wTGV2ZWxEZWNsYXJhdGlvblZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeVRvcExldmVsRGVjbGFyYXRpb24iLCJydWxlTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwiYXhpb21Ob2RlUXVlcnkiLCJ0eXBlRGVjbGFyYXRpb25Ob2RlUXVlcnkiLCJ2YXJpYWJsZURlY2xhcmF0aW9uTm9kZVF1ZXJ5IiwiY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZVF1ZXJ5IiwiY29uc3RydWN0b3JEZWNsYXJhdGlvbk5vZGVRdWVyeSIsInRvcExldmVsRGVjbGFyYXRpb25Ob2RlIiwiY29udGV4dCIsInRvcExldmVsRGVjbGFyYXRpb25WZXJpZmllZCIsImJlZ2luIiwibm9kZSIsInJ1bGVOb2RlIiwiYXhpb21Ob2RlIiwidHlwZURlY2xhcmF0aW9uTm9kZSIsInZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlIiwiY29tYmluYXRvckRlY2xhcmF0aW9uTm9kZSIsImNvbnN0cnVjdG9yRGVjbGFyYXRpb25Ob2RlIiwicnVsZVZlcmlmaWVkIiwidmVyaWZ5UnVsZSIsImF4aW9tVmVyaWZpZWQiLCJ2ZXJpZnlBeGlvbSIsInR5cGVEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5VHlwZURlY2xhcmF0aW9uIiwidmFyaWFibGVEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5VmFyaWFibGVEZWNsYXJhdGlvbiIsImNvbWJpbmF0b3JEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5Q29tYmluYXRvckRlY2xhcmF0aW9uIiwiY29uc3RydWN0b3JEZWNsYXJhdGlvblZlcmlmaWVkIiwidmVyaWZ5Q29uc3RydWN0b3JEZWNsYXJhdGlvbiIsImNvbXBsZXRlIiwiaGFsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBV0E7OztlQUF3QkE7OztxQkFURTtBQUUxQixJQUFNQyxnQkFBZ0JDLElBQUFBLGdCQUFTLEVBQUMsK0JBQzFCQyxpQkFBaUJELElBQUFBLGdCQUFTLEVBQUMsZ0NBQzNCRSwyQkFBMkJGLElBQUFBLGdCQUFTLEVBQUMsMENBQ3JDRywrQkFBK0JILElBQUFBLGdCQUFTLEVBQUMsOENBQ3pDSSxpQ0FBaUNKLElBQUFBLGdCQUFTLEVBQUMsZ0RBQzNDSyxrQ0FBa0NMLElBQUFBLGdCQUFTLEVBQUM7QUFFbkMsU0FBU0YsMEJBQTBCUSx1QkFBdUIsRUFBa0I7UUFBaEJDLFVBQUFBLGlFQUFVLElBQUk7SUFDdkYsSUFBSUMsOEJBQThCLEtBQUs7SUFFdkNELFFBQVFFLEtBQUssQ0FBQ0g7SUFFZCxJQUFNSSxPQUFPSix5QkFDUEssV0FBV1osY0FBY1csT0FDekJFLFlBQVlYLGVBQWVTLE9BQzNCRyxzQkFBc0JYLHlCQUF5QlEsT0FDL0NJLDBCQUEwQlgsNkJBQTZCTyxPQUN2REssNEJBQTRCWCwrQkFBK0JNLE9BQzNETSw2QkFBNkJYLGdDQUFnQ0s7SUFFbkUsSUFBSSxLQUFLLEVBQUU7SUFDVCxHQUFHO0lBQ0wsT0FBTyxJQUFJQyxhQUFhLElBQUksRUFBRTtRQUM1QixJQUFNTSxlQUFlVixRQUFRVyxVQUFVLENBQUNQO1FBRXhDSCw4QkFBOEJTLGNBQWUsR0FBRztJQUNsRCxPQUFPLElBQUlMLGNBQWMsSUFBSSxFQUFFO1FBQzdCLElBQU1PLGdCQUFnQlosUUFBUWEsV0FBVyxDQUFDUjtRQUUxQ0osOEJBQThCVyxlQUFnQixHQUFHO0lBQ25ELE9BQU8sSUFBSU4sd0JBQXdCLElBQUksRUFBRTtRQUN2QyxJQUFNUSwwQkFBMEJkLFFBQVFlLHFCQUFxQixDQUFDVDtRQUU5REwsOEJBQThCYSx5QkFBMEIsR0FBRztJQUM3RCxPQUFPLElBQUlQLDRCQUE0QixJQUFJLEVBQUU7UUFDM0MsSUFBTVMsOEJBQThCaEIsUUFBUWlCLHlCQUF5QixDQUFDVjtRQUV0RU4sOEJBQThCZSw2QkFBOEIsR0FBRztJQUNqRSxPQUFPLElBQUlSLDhCQUE4QixJQUFJLEVBQUU7UUFDN0MsSUFBTVUsZ0NBQWdDbEIsUUFBUW1CLDJCQUEyQixDQUFDWDtRQUUxRVAsOEJBQThCaUIsK0JBQWdDLEdBQUc7SUFDbkUsT0FBTyxJQUFJVCwrQkFBK0IsSUFBSSxFQUFFO1FBQzlDLElBQU1XLGlDQUFpQ3BCLFFBQVFxQiw0QkFBNEIsQ0FBQ1o7UUFFNUVSLDhCQUE4Qm1CLGdDQUFpQyxHQUFHO0lBQ3BFLENBQUM7SUFFRG5CLDhCQUNFRCxRQUFRc0IsUUFBUSxDQUFDdkIsMkJBQ2ZDLFFBQVF1QixJQUFJLENBQUN4Qix3QkFBd0I7SUFFekMsT0FBT0U7QUFDVCJ9