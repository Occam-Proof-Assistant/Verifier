"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyTopLevelDeclaration;
    }
});
var _rule = /*#__PURE__*/ _interopRequireDefault(require("../../verify/rule"));
var _axiom = /*#__PURE__*/ _interopRequireDefault(require("../../verify/axiom"));
var _lemma = /*#__PURE__*/ _interopRequireDefault(require("../../verify/lemma"));
var _theorem = /*#__PURE__*/ _interopRequireDefault(require("../../verify/theorem"));
var _conjecture = /*#__PURE__*/ _interopRequireDefault(require("../../verify/conjecture"));
var _type = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/type"));
var _variable = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/variable"));
var _combinator = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/combinator"));
var _constructor = /*#__PURE__*/ _interopRequireDefault(require("../../verify/declaration/constructor"));
var _query = require("../../utilities/query");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ruleNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/rule!"), axiomNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/axiom!"), lemmaNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/lemma!"), theoremNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/theorem!"), conjectureNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/conjecture!"), typeDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/typeDeclaration!"), variableDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/variableDeclaration!"), combinatorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/combinatorDeclaration!"), constructorDeclarationNodeQuery = (0, _query.nodeQuery)("/topLevelDeclaration/constructorDeclaration!");
function verifyTopLevelDeclaration(topLevelDeclarationNode, fileContext) {
    var topLevelDeclarationVerified = false;
    var node = topLevelDeclarationNode, ruleNode = ruleNodeQuery(node), axiomNode = axiomNodeQuery(node), lemmaNode = lemmaNodeQuery(node), theoremNode = theoremNodeQuery(node), conjectureNode = conjectureNodeQuery(node), typeDeclarationNode = typeDeclarationNodeQuery(node), variableDeclarationNode = variableDeclarationNodeQuery(node), combinatorDeclarationNode = combinatorDeclarationNodeQuery(node), constructorDeclarationNode = constructorDeclarationNodeQuery(node);
    if (false) {
    ///
    } else if (ruleNode !== null) {
        var ruleVerified = (0, _rule.default)(ruleNode, fileContext);
        topLevelDeclarationVerified = ruleVerified; ///
    } else if (axiomNode !== null) {
        var axiomVerified = (0, _axiom.default)(axiomNode, fileContext);
        topLevelDeclarationVerified = axiomVerified; ///
    } else if (lemmaNode !== null) {
        var lemmaVerified = (0, _lemma.default)(lemmaNode, fileContext);
        topLevelDeclarationVerified = lemmaVerified; ///
    } else if (theoremNode !== null) {
        var theoremVerified = (0, _theorem.default)(theoremNode, fileContext);
        topLevelDeclarationVerified = theoremVerified; ///
    } else if (conjectureNode !== null) {
        var conjectureVerified = (0, _conjecture.default)(conjectureNode, fileContext);
        topLevelDeclarationVerified = conjectureVerified; ///
    } else if (typeDeclarationNode !== null) {
        var typeDeclarationVerified = (0, _type.default)(typeDeclarationNode, fileContext);
        topLevelDeclarationVerified = typeDeclarationVerified; ///
    } else if (variableDeclarationNode !== null) {
        var variableDeclarationVerified = (0, _variable.default)(variableDeclarationNode, fileContext);
        topLevelDeclarationVerified = variableDeclarationVerified; ///
    } else if (combinatorDeclarationNode !== null) {
        var combinatorDeclarationVerified = (0, _combinator.default)(combinatorDeclarationNode, fileContext);
        topLevelDeclarationVerified = combinatorDeclarationVerified; ///
    } else if (constructorDeclarationNode !== null) {
        var constructorDeclarationVerified = (0, _constructor.default)(constructorDeclarationNode, fileContext);
        topLevelDeclarationVerified = constructorDeclarationVerified; ///
    }
    return topLevelDeclarationVerified;
}

//# sourceMappingURL=data:application/json;base64,