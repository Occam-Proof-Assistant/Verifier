"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return verifyVariableDeclaration;
    }
});
var _variable = /*#__PURE__*/ _interop_require_default(require("../../verify/variable"));
var _query = require("../../utilities/query");
var _constants = require("../../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var typeNodeQuery = (0, _query.nodeQuery)("/variableDeclaration/type"), variableNodeQuery = (0, _query.nodeQuery)("/variableDeclaration/variable");
function verifyVariableDeclaration(variableDeclarationNode, fileContext) {
    var variableDeclarationVerified;
    var typeNode = typeNodeQuery(variableDeclarationNode), variableNode = variableNodeQuery(variableDeclarationNode), typeString = fileContext.nodeAsString(typeNode), variableString = fileContext.nodeAsString(variableNode);
    typeString === _constants.EMPTY_STRING ? fileContext.trace("Verifying the '".concat(variableString, "' variable declaration..."), variableDeclarationNode) : fileContext.trace("Verifying the '".concat(variableString, ":").concat(typeString, "' variable declaration..."), variableDeclarationNode);
    var variableVVerified = (0, _variable.default)(variableNode, typeNode, fileContext);
    variableDeclarationVerified = variableVVerified; ///
    if (variableDeclarationVerified) {
        typeString === _constants.EMPTY_STRING ? fileContext.debug("...verified the '".concat(variableString, "' variable declaration."), variableDeclarationNode) : fileContext.debug("...verified the '".concat(variableString, ":").concat(typeString, "' variable declaration."), variableDeclarationNode);
    }
    return variableDeclarationVerified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92ZXJpZnkvZGVjbGFyYXRpb24vdmFyaWFibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB2ZXJpZnlWYXJpYWJsZSBmcm9tIFwiLi4vLi4vdmVyaWZ5L3ZhcmlhYmxlXCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvcXVlcnlcIjtcbmltcG9ydCB7IEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHNcIjtcblxuY29uc3QgdHlwZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi92YXJpYWJsZURlY2xhcmF0aW9uL3R5cGVcIiksXG4gICAgICB2YXJpYWJsZU5vZGVRdWVyeSA9IG5vZGVRdWVyeShcIi92YXJpYWJsZURlY2xhcmF0aW9uL3ZhcmlhYmxlXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlWYXJpYWJsZURlY2xhcmF0aW9uKHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlLCBmaWxlQ29udGV4dCkge1xuICBsZXQgdmFyaWFibGVEZWNsYXJhdGlvblZlcmlmaWVkO1xuXG4gIGNvbnN0IHR5cGVOb2RlID0gdHlwZU5vZGVRdWVyeSh2YXJpYWJsZURlY2xhcmF0aW9uTm9kZSksXG4gICAgICAgIHZhcmlhYmxlTm9kZSA9IHZhcmlhYmxlTm9kZVF1ZXJ5KHZhcmlhYmxlRGVjbGFyYXRpb25Ob2RlKSxcbiAgICAgICAgdHlwZVN0cmluZyA9IGZpbGVDb250ZXh0Lm5vZGVBc1N0cmluZyh0eXBlTm9kZSksXG4gICAgICAgIHZhcmlhYmxlU3RyaW5nID0gZmlsZUNvbnRleHQubm9kZUFzU3RyaW5nKHZhcmlhYmxlTm9kZSk7XG5cbiAgKHR5cGVTdHJpbmcgPT09IEVNUFRZX1NUUklORykgP1xuICAgIGZpbGVDb250ZXh0LnRyYWNlKGBWZXJpZnlpbmcgdGhlICcke3ZhcmlhYmxlU3RyaW5nfScgdmFyaWFibGUgZGVjbGFyYXRpb24uLi5gLCB2YXJpYWJsZURlY2xhcmF0aW9uTm9kZSkgOlxuICAgICAgZmlsZUNvbnRleHQudHJhY2UoYFZlcmlmeWluZyB0aGUgJyR7dmFyaWFibGVTdHJpbmd9OiR7dHlwZVN0cmluZ30nIHZhcmlhYmxlIGRlY2xhcmF0aW9uLi4uYCwgdmFyaWFibGVEZWNsYXJhdGlvbk5vZGUpO1xuXG4gIGNvbnN0IHZhcmlhYmxlVlZlcmlmaWVkID0gdmVyaWZ5VmFyaWFibGUodmFyaWFibGVOb2RlLCB0eXBlTm9kZSwgZmlsZUNvbnRleHQpO1xuXG4gIHZhcmlhYmxlRGVjbGFyYXRpb25WZXJpZmllZCA9IHZhcmlhYmxlVlZlcmlmaWVkOyAgLy8vXG5cbiAgaWYgKHZhcmlhYmxlRGVjbGFyYXRpb25WZXJpZmllZCkge1xuICAgICh0eXBlU3RyaW5nID09PSBFTVBUWV9TVFJJTkcpID9cbiAgICAgIGZpbGVDb250ZXh0LmRlYnVnKGAuLi52ZXJpZmllZCB0aGUgJyR7dmFyaWFibGVTdHJpbmd9JyB2YXJpYWJsZSBkZWNsYXJhdGlvbi5gLCB2YXJpYWJsZURlY2xhcmF0aW9uTm9kZSkgOlxuICAgICAgICBmaWxlQ29udGV4dC5kZWJ1ZyhgLi4udmVyaWZpZWQgdGhlICcke3ZhcmlhYmxlU3RyaW5nfToke3R5cGVTdHJpbmd9JyB2YXJpYWJsZSBkZWNsYXJhdGlvbi5gLCB2YXJpYWJsZURlY2xhcmF0aW9uTm9kZSk7XG4gIH1cblxuICByZXR1cm4gdmFyaWFibGVEZWNsYXJhdGlvblZlcmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInZlcmlmeVZhcmlhYmxlRGVjbGFyYXRpb24iLCJ0eXBlTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidmFyaWFibGVOb2RlUXVlcnkiLCJ2YXJpYWJsZURlY2xhcmF0aW9uTm9kZSIsImZpbGVDb250ZXh0IiwidmFyaWFibGVEZWNsYXJhdGlvblZlcmlmaWVkIiwidHlwZU5vZGUiLCJ2YXJpYWJsZU5vZGUiLCJ0eXBlU3RyaW5nIiwibm9kZUFzU3RyaW5nIiwidmFyaWFibGVTdHJpbmciLCJFTVBUWV9TVFJJTkciLCJ0cmFjZSIsInZhcmlhYmxlVlZlcmlmaWVkIiwidmVyaWZ5VmFyaWFibGUiLCJkZWJ1ZyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVUE7OztlQUF3QkE7OzsrREFSRztxQkFFRDt5QkFDRzs7Ozs7O0FBRTdCLElBQU1DLGdCQUFnQkMsSUFBQUEsZ0JBQVMsRUFBQyw4QkFDMUJDLG9CQUFvQkQsSUFBQUEsZ0JBQVMsRUFBQztBQUVyQixTQUFTRiwwQkFBMEJJLHVCQUF1QixFQUFFQyxXQUFXO0lBQ3BGLElBQUlDO0lBRUosSUFBTUMsV0FBV04sY0FBY0csMEJBQ3pCSSxlQUFlTCxrQkFBa0JDLDBCQUNqQ0ssYUFBYUosWUFBWUssWUFBWSxDQUFDSCxXQUN0Q0ksaUJBQWlCTixZQUFZSyxZQUFZLENBQUNGO0lBRS9DQyxlQUFlRyx1QkFBWSxHQUMxQlAsWUFBWVEsS0FBSyxDQUFDLEFBQUMsa0JBQWdDLE9BQWZGLGdCQUFlLDhCQUE0QlAsMkJBQzdFQyxZQUFZUSxLQUFLLENBQUMsQUFBQyxrQkFBbUNKLE9BQWxCRSxnQkFBZSxLQUFjLE9BQVhGLFlBQVcsOEJBQTRCTDtJQUVqRyxJQUFNVSxvQkFBb0JDLElBQUFBLGlCQUFjLEVBQUNQLGNBQWNELFVBQVVGO0lBRWpFQyw4QkFBOEJRLG1CQUFvQixHQUFHO0lBRXJELElBQUlSLDZCQUE2QjtRQUM5QkcsZUFBZUcsdUJBQVksR0FDMUJQLFlBQVlXLEtBQUssQ0FBQyxBQUFDLG9CQUFrQyxPQUFmTCxnQkFBZSw0QkFBMEJQLDJCQUM3RUMsWUFBWVcsS0FBSyxDQUFDLEFBQUMsb0JBQXFDUCxPQUFsQkUsZ0JBQWUsS0FBYyxPQUFYRixZQUFXLDRCQUEwQkw7SUFDbkc7SUFFQSxPQUFPRTtBQUNUIn0=