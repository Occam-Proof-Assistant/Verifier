"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    unifyWithBracketedCombinator: function() {
        return unifyWithBracketedCombinator;
    },
    unifyWithCombinators: function() {
        return unifyWithCombinators;
    }
});
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../ocmbinator/bracketed"));
var _statementWithCombinator = /*#__PURE__*/ _interop_require_default(require("../unifier/statementWithCombinator"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyWithCombinators(statement, assignments, stated, localContext) {
    var unifiedWithCombinators;
    var combinators = localContext.getCombinators();
    assignments = null; ///
    stated = true; ///
    unifiedWithCombinators = combinators.some(function(combinator) {
        var unifiedWithCombinator = unifyStatementWithCombinator(statement, combinator, assignments, stated, localContext);
        if (unifiedWithCombinator) {
            return true;
        }
    });
    return unifiedWithCombinators;
}
function unifyWithBracketedCombinator(statement, assignments, stated, localContext) {
    var unifiedWithBracketedCombinator;
    var statementNode = statement.getNode(), statementString = statement.getString(), bracketedCombinator = _bracketed.default.fromNothing(), bracketedCombinatorStatementNode = bracketedCombinator.getStatementNode(), combinatorStatementNode = bracketedCombinatorStatementNode; ///
    localContext.trace("Unifying the '".concat(statementString, "' statement with the bracketed combinator..."));
    unifiedWithBracketedCombinator = _statementWithCombinator.default.unify(statementNode, combinatorStatementNode, statement, assignments, stated, localContext);
    if (unifiedWithBracketedCombinator) {
        localContext.debug("...unified the '".concat(statementString, "' statement with the bracketed combinator."));
    }
    return unifiedWithBracketedCombinator;
}
function unifyStatementWithCombinator(statement, combinator, assignments, stated, localContext) {
    var unifiedWithCombinator;
    var statementNode = statement.getNode(), statementString = statement.getString(), combinatorString = combinator.getString(), combinatorStatementNode = combinator.getStatementNode();
    localContext.trace("Unifying the '".concat(statementString, "' statement with the '").concat(combinatorString, "' combinator..."));
    unifiedWithCombinator = _statementWithCombinator.default.unify(statementNode, combinatorStatementNode, assignments, stated, localContext);
    if (unifiedWithCombinator) {
        localContext.debug("...unified the '".concat(statementString, "' statement with the '").concat(combinatorString, "' combinator."));
    }
    return unifiedWithCombinator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvdW5pZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBCcmFja2V0ZWRDb21iaW5hdG9yIGZyb20gXCIuLi9vY21iaW5hdG9yL2JyYWNrZXRlZFwiO1xuaW1wb3J0IHN0YXRlbWVudFdpdGhDb21iaW5hdG9yVW5pZmllciBmcm9tIFwiLi4vdW5pZmllci9zdGF0ZW1lbnRXaXRoQ29tYmluYXRvclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdW5pZnlXaXRoQ29tYmluYXRvcnMoc3RhdGVtZW50LCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IHVuaWZpZWRXaXRoQ29tYmluYXRvcnM7XG5cbiAgY29uc3QgY29tYmluYXRvcnMgPSBsb2NhbENvbnRleHQuZ2V0Q29tYmluYXRvcnMoKTtcblxuICBhc3NpZ25tZW50cyA9IG51bGw7IC8vL1xuXG4gIHN0YXRlZCA9IHRydWU7ICAvLy9cblxuICB1bmlmaWVkV2l0aENvbWJpbmF0b3JzID0gY29tYmluYXRvcnMuc29tZSgoY29tYmluYXRvcikgPT4ge1xuICAgIGNvbnN0IHVuaWZpZWRXaXRoQ29tYmluYXRvciA9IHVuaWZ5U3RhdGVtZW50V2l0aENvbWJpbmF0b3Ioc3RhdGVtZW50LCBjb21iaW5hdG9yLCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpO1xuXG4gICAgaWYgKHVuaWZpZWRXaXRoQ29tYmluYXRvcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdW5pZmllZFdpdGhDb21iaW5hdG9ycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaWZ5V2l0aEJyYWNrZXRlZENvbWJpbmF0b3Ioc3RhdGVtZW50LCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IHVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvcjtcblxuICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50LmdldE5vZGUoKSxcbiAgICAgICAgc3RhdGVtZW50U3RyaW5nID0gc3RhdGVtZW50LmdldFN0cmluZygpLFxuICAgICAgICBicmFja2V0ZWRDb21iaW5hdG9yID0gQnJhY2tldGVkQ29tYmluYXRvci5mcm9tTm90aGluZygpLFxuICAgICAgICBicmFja2V0ZWRDb21iaW5hdG9yU3RhdGVtZW50Tm9kZSA9IGJyYWNrZXRlZENvbWJpbmF0b3IuZ2V0U3RhdGVtZW50Tm9kZSgpLFxuICAgICAgICBjb21iaW5hdG9yU3RhdGVtZW50Tm9kZSA9IGJyYWNrZXRlZENvbWJpbmF0b3JTdGF0ZW1lbnROb2RlOyAvLy9cblxuICBsb2NhbENvbnRleHQudHJhY2UoYFVuaWZ5aW5nIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgYnJhY2tldGVkIGNvbWJpbmF0b3IuLi5gKTtcblxuICB1bmlmaWVkV2l0aEJyYWNrZXRlZENvbWJpbmF0b3IgPSBzdGF0ZW1lbnRXaXRoQ29tYmluYXRvclVuaWZpZXIudW5pZnkoc3RhdGVtZW50Tm9kZSwgY29tYmluYXRvclN0YXRlbWVudE5vZGUsIHN0YXRlbWVudCwgYXNzaWdubWVudHMsIHN0YXRlZCwgbG9jYWxDb250ZXh0KTtcblxuICBpZiAodW5pZmllZFdpdGhCcmFja2V0ZWRDb21iaW5hdG9yKSB7XG4gICAgbG9jYWxDb250ZXh0LmRlYnVnKGAuLi51bmlmaWVkIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgYnJhY2tldGVkIGNvbWJpbmF0b3IuYCk7XG4gIH1cblxuICByZXR1cm4gdW5pZmllZFdpdGhCcmFja2V0ZWRDb21iaW5hdG9yO1xufVxuXG5mdW5jdGlvbiB1bmlmeVN0YXRlbWVudFdpdGhDb21iaW5hdG9yKHN0YXRlbWVudCwgY29tYmluYXRvciwgYXNzaWdubWVudHMsIHN0YXRlZCwgbG9jYWxDb250ZXh0KSB7XG4gIGxldCB1bmlmaWVkV2l0aENvbWJpbmF0b3I7XG5cbiAgY29uc3Qgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudC5nZXROb2RlKCksXG4gICAgICAgIHN0YXRlbWVudFN0cmluZyA9IHN0YXRlbWVudC5nZXRTdHJpbmcoKSxcbiAgICAgICAgY29tYmluYXRvclN0cmluZyA9IGNvbWJpbmF0b3IuZ2V0U3RyaW5nKCksXG4gICAgICAgIGNvbWJpbmF0b3JTdGF0ZW1lbnROb2RlID0gY29tYmluYXRvci5nZXRTdGF0ZW1lbnROb2RlKCk7XG5cbiAgbG9jYWxDb250ZXh0LnRyYWNlKGBVbmlmeWluZyB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IHdpdGggdGhlICcke2NvbWJpbmF0b3JTdHJpbmd9JyBjb21iaW5hdG9yLi4uYCk7XG5cbiAgdW5pZmllZFdpdGhDb21iaW5hdG9yID0gc3RhdGVtZW50V2l0aENvbWJpbmF0b3JVbmlmaWVyLnVuaWZ5KHN0YXRlbWVudE5vZGUsIGNvbWJpbmF0b3JTdGF0ZW1lbnROb2RlLCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpO1xuXG4gIGlmICh1bmlmaWVkV2l0aENvbWJpbmF0b3IpIHtcbiAgICBsb2NhbENvbnRleHQuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3N0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCB3aXRoIHRoZSAnJHtjb21iaW5hdG9yU3RyaW5nfScgY29tYmluYXRvci5gKTtcbiAgfVxuXG4gIHJldHVybiB1bmlmaWVkV2l0aENvbWJpbmF0b3I7XG59XG4iXSwibmFtZXMiOlsidW5pZnlXaXRoQnJhY2tldGVkQ29tYmluYXRvciIsInVuaWZ5V2l0aENvbWJpbmF0b3JzIiwic3RhdGVtZW50IiwiYXNzaWdubWVudHMiLCJzdGF0ZWQiLCJsb2NhbENvbnRleHQiLCJ1bmlmaWVkV2l0aENvbWJpbmF0b3JzIiwiY29tYmluYXRvcnMiLCJnZXRDb21iaW5hdG9ycyIsInNvbWUiLCJjb21iaW5hdG9yIiwidW5pZmllZFdpdGhDb21iaW5hdG9yIiwidW5pZnlTdGF0ZW1lbnRXaXRoQ29tYmluYXRvciIsInVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvciIsInN0YXRlbWVudE5vZGUiLCJnZXROb2RlIiwic3RhdGVtZW50U3RyaW5nIiwiZ2V0U3RyaW5nIiwiYnJhY2tldGVkQ29tYmluYXRvciIsIkJyYWNrZXRlZENvbWJpbmF0b3IiLCJmcm9tTm90aGluZyIsImJyYWNrZXRlZENvbWJpbmF0b3JTdGF0ZW1lbnROb2RlIiwiZ2V0U3RhdGVtZW50Tm9kZSIsImNvbWJpbmF0b3JTdGF0ZW1lbnROb2RlIiwidHJhY2UiLCJzdGF0ZW1lbnRXaXRoQ29tYmluYXRvclVuaWZpZXIiLCJ1bmlmeSIsImRlYnVnIiwiY29tYmluYXRvclN0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBeUJnQkEsNEJBQTRCO2VBQTVCQTs7SUFwQkFDLG9CQUFvQjtlQUFwQkE7OztnRUFIZ0I7OEVBQ1c7Ozs7OztBQUVwQyxTQUFTQSxxQkFBcUJDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLFlBQVk7SUFDL0UsSUFBSUM7SUFFSixJQUFNQyxjQUFjRixhQUFhRyxjQUFjO0lBRS9DTCxjQUFjLE1BQU0sR0FBRztJQUV2QkMsU0FBUyxNQUFPLEdBQUc7SUFFbkJFLHlCQUF5QkMsWUFBWUUsSUFBSSxDQUFDLFNBQUNDO1FBQ3pDLElBQU1DLHdCQUF3QkMsNkJBQTZCVixXQUFXUSxZQUFZUCxhQUFhQyxRQUFRQztRQUV2RyxJQUFJTSx1QkFBdUI7WUFDekIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPTDtBQUNUO0FBRU8sU0FBU04sNkJBQTZCRSxTQUFTLEVBQUVDLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxZQUFZO0lBQ3ZGLElBQUlRO0lBRUosSUFBTUMsZ0JBQWdCWixVQUFVYSxPQUFPLElBQ2pDQyxrQkFBa0JkLFVBQVVlLFNBQVMsSUFDckNDLHNCQUFzQkMsa0JBQW1CLENBQUNDLFdBQVcsSUFDckRDLG1DQUFtQ0gsb0JBQW9CSSxnQkFBZ0IsSUFDdkVDLDBCQUEwQkYsa0NBQWtDLEdBQUc7SUFFckVoQixhQUFhbUIsS0FBSyxDQUFDLEFBQUMsaUJBQWdDLE9BQWhCUixpQkFBZ0I7SUFFcERILGlDQUFpQ1ksZ0NBQThCLENBQUNDLEtBQUssQ0FBQ1osZUFBZVMseUJBQXlCckIsV0FBV0MsYUFBYUMsUUFBUUM7SUFFOUksSUFBSVEsZ0NBQWdDO1FBQ2xDUixhQUFhc0IsS0FBSyxDQUFDLEFBQUMsbUJBQWtDLE9BQWhCWCxpQkFBZ0I7SUFDeEQ7SUFFQSxPQUFPSDtBQUNUO0FBRUEsU0FBU0QsNkJBQTZCVixTQUFTLEVBQUVRLFVBQVUsRUFBRVAsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLFlBQVk7SUFDNUYsSUFBSU07SUFFSixJQUFNRyxnQkFBZ0JaLFVBQVVhLE9BQU8sSUFDakNDLGtCQUFrQmQsVUFBVWUsU0FBUyxJQUNyQ1csbUJBQW1CbEIsV0FBV08sU0FBUyxJQUN2Q00sMEJBQTBCYixXQUFXWSxnQkFBZ0I7SUFFM0RqQixhQUFhbUIsS0FBSyxDQUFDLEFBQUMsaUJBQXdESSxPQUF4Q1osaUJBQWdCLDBCQUF5QyxPQUFqQlksa0JBQWlCO0lBRTdGakIsd0JBQXdCYyxnQ0FBOEIsQ0FBQ0MsS0FBSyxDQUFDWixlQUFlUyx5QkFBeUJwQixhQUFhQyxRQUFRQztJQUUxSCxJQUFJTSx1QkFBdUI7UUFDekJOLGFBQWFzQixLQUFLLENBQUMsQUFBQyxtQkFBMERDLE9BQXhDWixpQkFBZ0IsMEJBQXlDLE9BQWpCWSxrQkFBaUI7SUFDakc7SUFFQSxPQUFPakI7QUFDVCJ9