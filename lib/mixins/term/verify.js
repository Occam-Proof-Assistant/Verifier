"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _dom = /*#__PURE__*/ _interop_require_default(require("../../dom"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var variableNodeQuery = (0, _query.nodeQuery)("/term/variable!");
function unifyWithBracketedConstructor(term, context, verifyAhead) {
    var unifiedWithBracketedConstructor;
    var BracketedConstructor = _dom.default.BracketedConstructor, bracketedConstructor = BracketedConstructor.fromNothing();
    unifiedWithBracketedConstructor = bracketedConstructor.unifyTerm(term, context, verifyAhead);
    return unifiedWithBracketedConstructor;
}
function unifyWithConstructors(term, context, verifyAhead) {
    var unifiedWithConstructors;
    var constructors = context.getConstructors();
    unifiedWithConstructors = constructors.some(function(constructor) {
        var unifiedWithConstructor = constructor.unifyTerm(term, context, verifyAhead);
        if (unifiedWithConstructor) {
            return true;
        }
    });
    return unifiedWithConstructors;
}
function verifyTermAsVariable(term, localContext, verifyAhead) {
    var termVerifiedAsVariable = false;
    var Variable = _dom.default.Variable, context = localContext, termNode = term.getNode(), variableNode = variableNodeQuery(termNode), variable = Variable.fromVariableNode(variableNode, context);
    if (variable !== null) {
        var termString = term.getString();
        localContext.trace("Verifying the '".concat(termString, "' term as a variable..."));
        var variableVerified = variable.verify(localContext);
        if (variableVerified) {
            var verifiedAhead;
            var type = variable.getType();
            term.setType(type);
            verifiedAhead = verifyAhead();
            termVerifiedAsVariable = verifiedAhead; ///
        }
        if (termVerifiedAsVariable) {
            localContext.debug("...verified the '".concat(termString, "' term as a variable."));
        }
    }
    return termVerifiedAsVariable;
}
function verifyAsPropertyRelation(term, context, verifyAhead) {
    var verifiedAsPropertyRelation = false;
    var PropertyRelation = _dom.default.PropertyRelation, termNode = term.getNode(), propertyRelation = PropertyRelation.fromTermNode(termNode, context);
    if (propertyRelation !== null) {
        var termString = term.getString();
        context.trace("Verifying the '".concat(termString, "' term as a property relation..."));
        var propertyRelationVerified = propertyRelation.verify(context);
        if (propertyRelationVerified) {
            var verifiedAhead;
            var type = propertyRelation.getType();
            term.setType(type);
            verifiedAhead = verifyAhead();
            verifiedAsPropertyRelation = verifiedAhead; ///
        }
        if (verifiedAsPropertyRelation) {
            context.debug("...verified the '".concat(termString, "' statement as a property relation."));
        }
    }
    return verifiedAsPropertyRelation;
}
var verifyMixins = [
    unifyWithBracketedConstructor,
    unifyWithConstructors,
    verifyTermAsVariable,
    verifyAsPropertyRelation
];
var _default = verifyMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvdGVybS92ZXJpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBkb20gZnJvbSBcIi4uLy4uL2RvbVwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHZhcmlhYmxlTm9kZVF1ZXJ5ID0gbm9kZVF1ZXJ5KFwiL3Rlcm0vdmFyaWFibGUhXCIpO1xuXG5mdW5jdGlvbiB1bmlmeVdpdGhCcmFja2V0ZWRDb25zdHJ1Y3Rvcih0ZXJtLCBjb250ZXh0LCB2ZXJpZnlBaGVhZCkge1xuICBsZXQgdW5pZmllZFdpdGhCcmFja2V0ZWRDb25zdHJ1Y3RvcjtcblxuICBjb25zdCB7IEJyYWNrZXRlZENvbnN0cnVjdG9yIH0gPSBkb20sXG4gICAgICAgIGJyYWNrZXRlZENvbnN0cnVjdG9yID0gQnJhY2tldGVkQ29uc3RydWN0b3IuZnJvbU5vdGhpbmcoKTtcblxuICB1bmlmaWVkV2l0aEJyYWNrZXRlZENvbnN0cnVjdG9yID0gYnJhY2tldGVkQ29uc3RydWN0b3IudW5pZnlUZXJtKHRlcm0sIGNvbnRleHQsIHZlcmlmeUFoZWFkKTtcblxuICByZXR1cm4gdW5pZmllZFdpdGhCcmFja2V0ZWRDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gdW5pZnlXaXRoQ29uc3RydWN0b3JzKHRlcm0sIGNvbnRleHQsIHZlcmlmeUFoZWFkKSB7XG4gIGxldCB1bmlmaWVkV2l0aENvbnN0cnVjdG9ycztcblxuICBjb25zdCBjb25zdHJ1Y3RvcnMgPSBjb250ZXh0LmdldENvbnN0cnVjdG9ycygpO1xuXG4gIHVuaWZpZWRXaXRoQ29uc3RydWN0b3JzID0gY29uc3RydWN0b3JzLnNvbWUoKGNvbnN0cnVjdG9yKSA9PiB7XG4gICAgY29uc3QgdW5pZmllZFdpdGhDb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yLnVuaWZ5VGVybSh0ZXJtLCBjb250ZXh0LCB2ZXJpZnlBaGVhZCk7XG5cbiAgICBpZiAodW5pZmllZFdpdGhDb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdW5pZmllZFdpdGhDb25zdHJ1Y3RvcnM7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVRlcm1Bc1ZhcmlhYmxlKHRlcm0sIGxvY2FsQ29udGV4dCwgdmVyaWZ5QWhlYWQpIHtcbiAgbGV0IHRlcm1WZXJpZmllZEFzVmFyaWFibGUgPSBmYWxzZTtcblxuICBjb25zdCB7IFZhcmlhYmxlIH0gPSBkb20sXG4gICAgICAgIGNvbnRleHQgPSBsb2NhbENvbnRleHQsIC8vL1xuICAgICAgICB0ZXJtTm9kZSA9IHRlcm0uZ2V0Tm9kZSgpLFxuICAgICAgICB2YXJpYWJsZU5vZGUgPSB2YXJpYWJsZU5vZGVRdWVyeSh0ZXJtTm9kZSksXG4gICAgICAgIHZhcmlhYmxlID0gVmFyaWFibGUuZnJvbVZhcmlhYmxlTm9kZSh2YXJpYWJsZU5vZGUsIGNvbnRleHQpO1xuXG4gIGlmICh2YXJpYWJsZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRlcm1TdHJpbmcgPSB0ZXJtLmdldFN0cmluZygpO1xuXG4gICAgbG9jYWxDb250ZXh0LnRyYWNlKGBWZXJpZnlpbmcgdGhlICcke3Rlcm1TdHJpbmd9JyB0ZXJtIGFzIGEgdmFyaWFibGUuLi5gKTtcblxuICAgIGNvbnN0IHZhcmlhYmxlVmVyaWZpZWQgPSB2YXJpYWJsZS52ZXJpZnkobG9jYWxDb250ZXh0KTtcblxuICAgIGlmICh2YXJpYWJsZVZlcmlmaWVkKSB7XG4gICAgICBsZXQgdmVyaWZpZWRBaGVhZDtcblxuICAgICAgY29uc3QgdHlwZSA9IHZhcmlhYmxlLmdldFR5cGUoKTtcblxuICAgICAgdGVybS5zZXRUeXBlKHR5cGUpO1xuXG4gICAgICB2ZXJpZmllZEFoZWFkID0gdmVyaWZ5QWhlYWQoKTtcblxuICAgICAgdGVybVZlcmlmaWVkQXNWYXJpYWJsZSA9IHZlcmlmaWVkQWhlYWQ7IC8vL1xuICAgIH1cblxuICAgIGlmICh0ZXJtVmVyaWZpZWRBc1ZhcmlhYmxlKSB7XG4gICAgICBsb2NhbENvbnRleHQuZGVidWcoYC4uLnZlcmlmaWVkIHRoZSAnJHt0ZXJtU3RyaW5nfScgdGVybSBhcyBhIHZhcmlhYmxlLmApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0ZXJtVmVyaWZpZWRBc1ZhcmlhYmxlO1xufVxuXG5mdW5jdGlvbiB2ZXJpZnlBc1Byb3BlcnR5UmVsYXRpb24odGVybSwgY29udGV4dCwgdmVyaWZ5QWhlYWQpIHtcbiAgbGV0IHZlcmlmaWVkQXNQcm9wZXJ0eVJlbGF0aW9uID0gZmFsc2U7XG5cbiAgY29uc3QgeyBQcm9wZXJ0eVJlbGF0aW9uIH0gPSBkb20sXG4gICAgICAgIHRlcm1Ob2RlID0gdGVybS5nZXROb2RlKCksXG4gICAgICAgIHByb3BlcnR5UmVsYXRpb24gPSBQcm9wZXJ0eVJlbGF0aW9uLmZyb21UZXJtTm9kZSh0ZXJtTm9kZSwgY29udGV4dCk7XG5cbiAgaWYgKHByb3BlcnR5UmVsYXRpb24gIT09IG51bGwpIHtcbiAgICBjb25zdCB0ZXJtU3RyaW5nID0gdGVybS5nZXRTdHJpbmcoKTtcblxuICAgIGNvbnRleHQudHJhY2UoYFZlcmlmeWluZyB0aGUgJyR7dGVybVN0cmluZ30nIHRlcm0gYXMgYSBwcm9wZXJ0eSByZWxhdGlvbi4uLmApO1xuXG4gICAgY29uc3QgcHJvcGVydHlSZWxhdGlvblZlcmlmaWVkID0gcHJvcGVydHlSZWxhdGlvbi52ZXJpZnkoY29udGV4dCk7XG5cbiAgICBpZiAocHJvcGVydHlSZWxhdGlvblZlcmlmaWVkKSB7XG4gICAgICBsZXQgdmVyaWZpZWRBaGVhZDtcblxuICAgICAgY29uc3QgdHlwZSA9IHByb3BlcnR5UmVsYXRpb24uZ2V0VHlwZSgpO1xuXG4gICAgICB0ZXJtLnNldFR5cGUodHlwZSk7XG5cbiAgICAgIHZlcmlmaWVkQWhlYWQgPSB2ZXJpZnlBaGVhZCgpO1xuXG4gICAgICB2ZXJpZmllZEFzUHJvcGVydHlSZWxhdGlvbiA9IHZlcmlmaWVkQWhlYWQ7IC8vL1xuICAgIH1cblxuICAgIGlmICh2ZXJpZmllZEFzUHJvcGVydHlSZWxhdGlvbikge1xuICAgICAgY29udGV4dC5kZWJ1ZyhgLi4udmVyaWZpZWQgdGhlICcke3Rlcm1TdHJpbmd9JyBzdGF0ZW1lbnQgYXMgYSBwcm9wZXJ0eSByZWxhdGlvbi5gKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmVyaWZpZWRBc1Byb3BlcnR5UmVsYXRpb247XG59XG5cbmNvbnN0IHZlcmlmeU1peGlucyA9IFtcbiAgdW5pZnlXaXRoQnJhY2tldGVkQ29uc3RydWN0b3IsXG4gIHVuaWZ5V2l0aENvbnN0cnVjdG9ycyxcbiAgdmVyaWZ5VGVybUFzVmFyaWFibGUsXG4gIHZlcmlmeUFzUHJvcGVydHlSZWxhdGlvblxuXTtcblxuZXhwb3J0IGRlZmF1bHQgdmVyaWZ5TWl4aW5zO1xuIl0sIm5hbWVzIjpbInZhcmlhYmxlTm9kZVF1ZXJ5Iiwibm9kZVF1ZXJ5IiwidW5pZnlXaXRoQnJhY2tldGVkQ29uc3RydWN0b3IiLCJ0ZXJtIiwiY29udGV4dCIsInZlcmlmeUFoZWFkIiwidW5pZmllZFdpdGhCcmFja2V0ZWRDb25zdHJ1Y3RvciIsIkJyYWNrZXRlZENvbnN0cnVjdG9yIiwiZG9tIiwiYnJhY2tldGVkQ29uc3RydWN0b3IiLCJmcm9tTm90aGluZyIsInVuaWZ5VGVybSIsInVuaWZ5V2l0aENvbnN0cnVjdG9ycyIsInVuaWZpZWRXaXRoQ29uc3RydWN0b3JzIiwiY29uc3RydWN0b3JzIiwiZ2V0Q29uc3RydWN0b3JzIiwic29tZSIsImNvbnN0cnVjdG9yIiwidW5pZmllZFdpdGhDb25zdHJ1Y3RvciIsInZlcmlmeVRlcm1Bc1ZhcmlhYmxlIiwibG9jYWxDb250ZXh0IiwidGVybVZlcmlmaWVkQXNWYXJpYWJsZSIsIlZhcmlhYmxlIiwidGVybU5vZGUiLCJnZXROb2RlIiwidmFyaWFibGVOb2RlIiwidmFyaWFibGUiLCJmcm9tVmFyaWFibGVOb2RlIiwidGVybVN0cmluZyIsImdldFN0cmluZyIsInRyYWNlIiwidmFyaWFibGVWZXJpZmllZCIsInZlcmlmeSIsInZlcmlmaWVkQWhlYWQiLCJ0eXBlIiwiZ2V0VHlwZSIsInNldFR5cGUiLCJkZWJ1ZyIsInZlcmlmeUFzUHJvcGVydHlSZWxhdGlvbiIsInZlcmlmaWVkQXNQcm9wZXJ0eVJlbGF0aW9uIiwiUHJvcGVydHlSZWxhdGlvbiIsInByb3BlcnR5UmVsYXRpb24iLCJmcm9tVGVybU5vZGUiLCJwcm9wZXJ0eVJlbGF0aW9uVmVyaWZpZWQiLCJ2ZXJpZnlNaXhpbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWdIQTs7O2VBQUE7OzswREE5R2dCO3FCQUVVOzs7Ozs7QUFFMUIsSUFBTUEsb0JBQW9CQyxJQUFBQSxnQkFBUyxFQUFDO0FBRXBDLFNBQVNDLDhCQUE4QkMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFdBQVc7SUFDL0QsSUFBSUM7SUFFSixJQUFNLEFBQUVDLHVCQUF5QkMsWUFBRyxDQUE1QkQsc0JBQ0ZFLHVCQUF1QkYscUJBQXFCRyxXQUFXO0lBRTdESixrQ0FBa0NHLHFCQUFxQkUsU0FBUyxDQUFDUixNQUFNQyxTQUFTQztJQUVoRixPQUFPQztBQUNUO0FBRUEsU0FBU00sc0JBQXNCVCxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsV0FBVztJQUN2RCxJQUFJUTtJQUVKLElBQU1DLGVBQWVWLFFBQVFXLGVBQWU7SUFFNUNGLDBCQUEwQkMsYUFBYUUsSUFBSSxDQUFDLFNBQUNDO1FBQzNDLElBQU1DLHlCQUF5QkQsWUFBWU4sU0FBUyxDQUFDUixNQUFNQyxTQUFTQztRQUVwRSxJQUFJYSx3QkFBd0I7WUFDMUIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPTDtBQUNUO0FBRUEsU0FBU00scUJBQXFCaEIsSUFBSSxFQUFFaUIsWUFBWSxFQUFFZixXQUFXO0lBQzNELElBQUlnQix5QkFBeUI7SUFFN0IsSUFBTSxBQUFFQyxXQUFhZCxZQUFHLENBQWhCYyxVQUNGbEIsVUFBVWdCLGNBQ1ZHLFdBQVdwQixLQUFLcUIsT0FBTyxJQUN2QkMsZUFBZXpCLGtCQUFrQnVCLFdBQ2pDRyxXQUFXSixTQUFTSyxnQkFBZ0IsQ0FBQ0YsY0FBY3JCO0lBRXpELElBQUlzQixhQUFhLE1BQU07UUFDckIsSUFBTUUsYUFBYXpCLEtBQUswQixTQUFTO1FBRWpDVCxhQUFhVSxLQUFLLENBQUMsQUFBQyxrQkFBNEIsT0FBWEYsWUFBVztRQUVoRCxJQUFNRyxtQkFBbUJMLFNBQVNNLE1BQU0sQ0FBQ1o7UUFFekMsSUFBSVcsa0JBQWtCO1lBQ3BCLElBQUlFO1lBRUosSUFBTUMsT0FBT1IsU0FBU1MsT0FBTztZQUU3QmhDLEtBQUtpQyxPQUFPLENBQUNGO1lBRWJELGdCQUFnQjVCO1lBRWhCZ0IseUJBQXlCWSxlQUFlLEdBQUc7UUFDN0M7UUFFQSxJQUFJWix3QkFBd0I7WUFDMUJELGFBQWFpQixLQUFLLENBQUMsQUFBQyxvQkFBOEIsT0FBWFQsWUFBVztRQUNwRDtJQUNGO0lBRUEsT0FBT1A7QUFDVDtBQUVBLFNBQVNpQix5QkFBeUJuQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsV0FBVztJQUMxRCxJQUFJa0MsNkJBQTZCO0lBRWpDLElBQU0sQUFBRUMsbUJBQXFCaEMsWUFBRyxDQUF4QmdDLGtCQUNGakIsV0FBV3BCLEtBQUtxQixPQUFPLElBQ3ZCaUIsbUJBQW1CRCxpQkFBaUJFLFlBQVksQ0FBQ25CLFVBQVVuQjtJQUVqRSxJQUFJcUMscUJBQXFCLE1BQU07UUFDN0IsSUFBTWIsYUFBYXpCLEtBQUswQixTQUFTO1FBRWpDekIsUUFBUTBCLEtBQUssQ0FBQyxBQUFDLGtCQUE0QixPQUFYRixZQUFXO1FBRTNDLElBQU1lLDJCQUEyQkYsaUJBQWlCVCxNQUFNLENBQUM1QjtRQUV6RCxJQUFJdUMsMEJBQTBCO1lBQzVCLElBQUlWO1lBRUosSUFBTUMsT0FBT08saUJBQWlCTixPQUFPO1lBRXJDaEMsS0FBS2lDLE9BQU8sQ0FBQ0Y7WUFFYkQsZ0JBQWdCNUI7WUFFaEJrQyw2QkFBNkJOLGVBQWUsR0FBRztRQUNqRDtRQUVBLElBQUlNLDRCQUE0QjtZQUM5Qm5DLFFBQVFpQyxLQUFLLENBQUMsQUFBQyxvQkFBOEIsT0FBWFQsWUFBVztRQUMvQztJQUNGO0lBRUEsT0FBT1c7QUFDVDtBQUVBLElBQU1LLGVBQWU7SUFDbkIxQztJQUNBVTtJQUNBTztJQUNBbUI7Q0FDRDtJQUVELFdBQWVNIn0=