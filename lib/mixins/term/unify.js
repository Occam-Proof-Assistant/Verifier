"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _shim = /*#__PURE__*/ _interop_require_default(require("../../shim"));
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../../constructor/bracketed"));
var _termWithConstructor = /*#__PURE__*/ _interop_require_default(require("../../unifier/termWithConstructor"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var termNodeQuery = (0, _query.nodeQuery)("/term/argument/term");
function unifyTermWithBracketedConstructor(term, localContext, verifyAhead) {
    var termUnifiedWithBracketedConstructor;
    var termString = term.getString();
    localContext.trace("Unifying the '".concat(termString, "' term with the bracketed constructor..."), term);
    var bracketedConstructor = _bracketed.default.fromNothing();
    termUnifiedWithBracketedConstructor = unifyTermWithConstructor(term, bracketedConstructor, localContext, function() {
        var verifiedAhead = false;
        var Term = _shim.default.Term, bracketedTerm = term, bracketedTermNode = bracketedTerm.getNode(), termNode = termNodeQuery(bracketedTermNode); ///
        term = Term.fromTermNode(termNode, localContext);
        if (term !== null) {
            var termVVerified = term.verify(localContext, function() {
                var verifiedAhead;
                var type = term.getType();
                bracketedTerm.setType(type);
                verifiedAhead = verifyAhead();
                return verifiedAhead;
            });
            verifiedAhead = termVVerified; ///
        }
        return verifiedAhead;
    });
    if (termUnifiedWithBracketedConstructor) {
        localContext.debug("...unified the '".concat(termString, "' term with the bracketed constructor."), term);
    }
    return termUnifiedWithBracketedConstructor;
}
function unifyTermWithConstructors(term, localContext, verifyAhead) {
    var termUnifiedWithConstructors = false;
    var constructors = localContext.getConstructors();
    termUnifiedWithConstructors = constructors.some(function(constructor) {
        var termUnifiedWithConstructor = unifyTermWithConstructor(term, constructor, localContext, verifyAhead);
        if (termUnifiedWithConstructor) {
            return true;
        }
    });
    return termUnifiedWithConstructors;
}
var unifyMixins = [
    unifyTermWithBracketedConstructor,
    unifyTermWithConstructors
];
var _default = unifyMixins;
function unifyTermWithConstructor(term, constructor, localContext, verifyAhead) {
    var termUnifiedWithConstructor = false;
    var termString = term.getString(), constructorString = constructor.getString();
    localContext.trace("Unifying the '".concat(termString, "' term with the '").concat(constructorString, "' constructor..."), term);
    var termNode = term.getNode(), constructorTerm = constructor.getTerm(), constructorTermNode = constructorTerm.getNode(), unified = _termWithConstructor.default.unify(constructorTermNode, termNode, localContext);
    if (unified) {
        var verifiedAhead;
        var type = constructor.getType();
        term.setType(type);
        verifiedAhead = verifyAhead();
        termUnifiedWithConstructor = verifiedAhead; ///
    }
    if (termUnifiedWithConstructor) {
        localContext.debug("...unified the '".concat(termString, "' term with the '").concat(constructorString, "' constructor."), term);
    }
    return termUnifiedWithConstructor;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvdGVybS91bmlmeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHNoaW0gZnJvbSBcIi4uLy4uL3NoaW1cIjtcbmltcG9ydCBCcmFja2V0ZWRDb25zdHJ1Y3RvciBmcm9tIFwiLi4vLi4vY29uc3RydWN0b3IvYnJhY2tldGVkXCI7XG5pbXBvcnQgdGVybVdpdGhDb25zdHJ1Y3RvclVuaWZpZXIgZnJvbSBcIi4uLy4uL3VuaWZpZXIvdGVybVdpdGhDb25zdHJ1Y3RvclwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IHRlcm1Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdGVybS9hcmd1bWVudC90ZXJtXCIpO1xuXG5mdW5jdGlvbiB1bmlmeVRlcm1XaXRoQnJhY2tldGVkQ29uc3RydWN0b3IodGVybSwgbG9jYWxDb250ZXh0LCB2ZXJpZnlBaGVhZCkge1xuICBsZXQgdGVybVVuaWZpZWRXaXRoQnJhY2tldGVkQ29uc3RydWN0b3I7XG5cbiAgY29uc3QgdGVybVN0cmluZyA9IHRlcm0uZ2V0U3RyaW5nKCk7XG5cbiAgbG9jYWxDb250ZXh0LnRyYWNlKGBVbmlmeWluZyB0aGUgJyR7dGVybVN0cmluZ30nIHRlcm0gd2l0aCB0aGUgYnJhY2tldGVkIGNvbnN0cnVjdG9yLi4uYCwgdGVybSk7XG5cbiAgY29uc3QgYnJhY2tldGVkQ29uc3RydWN0b3IgPSBCcmFja2V0ZWRDb25zdHJ1Y3Rvci5mcm9tTm90aGluZygpO1xuXG4gIHRlcm1VbmlmaWVkV2l0aEJyYWNrZXRlZENvbnN0cnVjdG9yID0gdW5pZnlUZXJtV2l0aENvbnN0cnVjdG9yKHRlcm0sIGJyYWNrZXRlZENvbnN0cnVjdG9yLCBsb2NhbENvbnRleHQsICgpID0+IHtcbiAgICBsZXQgdmVyaWZpZWRBaGVhZCA9IGZhbHNlO1xuXG4gICAgY29uc3QgeyBUZXJtIH0gPSBzaGltLFxuICAgICAgICAgIGJyYWNrZXRlZFRlcm0gPSB0ZXJtLCAvLy9cbiAgICAgICAgICBicmFja2V0ZWRUZXJtTm9kZSA9IGJyYWNrZXRlZFRlcm0uZ2V0Tm9kZSgpLFxuICAgICAgICAgIHRlcm1Ob2RlID0gdGVybU5vZGVRdWVyeShicmFja2V0ZWRUZXJtTm9kZSk7IC8vL1xuXG4gICAgdGVybSA9IFRlcm0uZnJvbVRlcm1Ob2RlKHRlcm1Ob2RlLCBsb2NhbENvbnRleHQpO1xuXG4gICAgaWYgKHRlcm0gIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHRlcm1WVmVyaWZpZWQgPSB0ZXJtLnZlcmlmeShsb2NhbENvbnRleHQsICgpID0+IHtcbiAgICAgICAgbGV0IHZlcmlmaWVkQWhlYWQ7XG5cbiAgICAgICAgY29uc3QgdHlwZSA9IHRlcm0uZ2V0VHlwZSgpO1xuXG4gICAgICAgIGJyYWNrZXRlZFRlcm0uc2V0VHlwZSh0eXBlKTtcblxuICAgICAgICB2ZXJpZmllZEFoZWFkID0gdmVyaWZ5QWhlYWQoKTtcblxuICAgICAgICByZXR1cm4gdmVyaWZpZWRBaGVhZDtcbiAgICAgIH0pO1xuXG4gICAgICB2ZXJpZmllZEFoZWFkID0gdGVybVZWZXJpZmllZDsgIC8vL1xuICAgIH1cblxuICAgIHJldHVybiB2ZXJpZmllZEFoZWFkO1xuICB9KTtcblxuICBpZiAodGVybVVuaWZpZWRXaXRoQnJhY2tldGVkQ29uc3RydWN0b3IpIHtcbiAgICBsb2NhbENvbnRleHQuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3Rlcm1TdHJpbmd9JyB0ZXJtIHdpdGggdGhlIGJyYWNrZXRlZCBjb25zdHJ1Y3Rvci5gLCB0ZXJtKTtcbiAgfVxuXG4gIHJldHVybiB0ZXJtVW5pZmllZFdpdGhCcmFja2V0ZWRDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gdW5pZnlUZXJtV2l0aENvbnN0cnVjdG9ycyh0ZXJtLCBsb2NhbENvbnRleHQsIHZlcmlmeUFoZWFkKSB7XG4gIGxldCB0ZXJtVW5pZmllZFdpdGhDb25zdHJ1Y3RvcnMgPSBmYWxzZTtcblxuICBjb25zdCBjb25zdHJ1Y3RvcnMgPSBsb2NhbENvbnRleHQuZ2V0Q29uc3RydWN0b3JzKCk7XG5cbiAgdGVybVVuaWZpZWRXaXRoQ29uc3RydWN0b3JzID0gY29uc3RydWN0b3JzLnNvbWUoKGNvbnN0cnVjdG9yKSA9PiB7XG4gICAgY29uc3QgdGVybVVuaWZpZWRXaXRoQ29uc3RydWN0b3IgPSB1bmlmeVRlcm1XaXRoQ29uc3RydWN0b3IodGVybSwgY29uc3RydWN0b3IsIGxvY2FsQ29udGV4dCwgdmVyaWZ5QWhlYWQpO1xuXG4gICAgaWYgKHRlcm1VbmlmaWVkV2l0aENvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0ZXJtVW5pZmllZFdpdGhDb25zdHJ1Y3RvcnM7XG59XG5cbmNvbnN0IHVuaWZ5TWl4aW5zID0gW1xuICB1bmlmeVRlcm1XaXRoQnJhY2tldGVkQ29uc3RydWN0b3IsXG4gIHVuaWZ5VGVybVdpdGhDb25zdHJ1Y3RvcnNcbl07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaWZ5TWl4aW5zO1xuXG5mdW5jdGlvbiB1bmlmeVRlcm1XaXRoQ29uc3RydWN0b3IodGVybSwgY29uc3RydWN0b3IsIGxvY2FsQ29udGV4dCwgdmVyaWZ5QWhlYWQpIHtcbiAgbGV0IHRlcm1VbmlmaWVkV2l0aENvbnN0cnVjdG9yID0gZmFsc2U7XG5cbiAgY29uc3QgdGVybVN0cmluZyA9IHRlcm0uZ2V0U3RyaW5nKCksXG4gICAgICAgIGNvbnN0cnVjdG9yU3RyaW5nID0gY29uc3RydWN0b3IuZ2V0U3RyaW5nKCk7XG5cbiAgbG9jYWxDb250ZXh0LnRyYWNlKGBVbmlmeWluZyB0aGUgJyR7dGVybVN0cmluZ30nIHRlcm0gd2l0aCB0aGUgJyR7Y29uc3RydWN0b3JTdHJpbmd9JyBjb25zdHJ1Y3Rvci4uLmAsIHRlcm0pO1xuXG4gIGNvbnN0IHRlcm1Ob2RlID0gdGVybS5nZXROb2RlKCksXG4gICAgICAgIGNvbnN0cnVjdG9yVGVybSA9IGNvbnN0cnVjdG9yLmdldFRlcm0oKSxcbiAgICAgICAgY29uc3RydWN0b3JUZXJtTm9kZSA9IGNvbnN0cnVjdG9yVGVybS5nZXROb2RlKCksXG4gICAgICAgIHVuaWZpZWQgPSB0ZXJtV2l0aENvbnN0cnVjdG9yVW5pZmllci51bmlmeShjb25zdHJ1Y3RvclRlcm1Ob2RlLCB0ZXJtTm9kZSwgbG9jYWxDb250ZXh0KTtcblxuICBpZiAodW5pZmllZCkge1xuICAgIGxldCB2ZXJpZmllZEFoZWFkO1xuXG4gICAgY29uc3QgdHlwZSA9IGNvbnN0cnVjdG9yLmdldFR5cGUoKTtcblxuICAgIHRlcm0uc2V0VHlwZSh0eXBlKTtcblxuICAgIHZlcmlmaWVkQWhlYWQgPSB2ZXJpZnlBaGVhZCgpO1xuXG4gICAgdGVybVVuaWZpZWRXaXRoQ29uc3RydWN0b3IgPSB2ZXJpZmllZEFoZWFkOyAgLy8vXG4gIH1cblxuICBpZiAodGVybVVuaWZpZWRXaXRoQ29uc3RydWN0b3IpIHtcbiAgICBsb2NhbENvbnRleHQuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3Rlcm1TdHJpbmd9JyB0ZXJtIHdpdGggdGhlICcke2NvbnN0cnVjdG9yU3RyaW5nfScgY29uc3RydWN0b3IuYCwgdGVybSk7XG4gIH1cblxuICByZXR1cm4gdGVybVVuaWZpZWRXaXRoQ29uc3RydWN0b3I7XG59XG4iXSwibmFtZXMiOlsidGVybU5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInVuaWZ5VGVybVdpdGhCcmFja2V0ZWRDb25zdHJ1Y3RvciIsInRlcm0iLCJsb2NhbENvbnRleHQiLCJ2ZXJpZnlBaGVhZCIsInRlcm1VbmlmaWVkV2l0aEJyYWNrZXRlZENvbnN0cnVjdG9yIiwidGVybVN0cmluZyIsImdldFN0cmluZyIsInRyYWNlIiwiYnJhY2tldGVkQ29uc3RydWN0b3IiLCJCcmFja2V0ZWRDb25zdHJ1Y3RvciIsImZyb21Ob3RoaW5nIiwidW5pZnlUZXJtV2l0aENvbnN0cnVjdG9yIiwidmVyaWZpZWRBaGVhZCIsIlRlcm0iLCJzaGltIiwiYnJhY2tldGVkVGVybSIsImJyYWNrZXRlZFRlcm1Ob2RlIiwiZ2V0Tm9kZSIsInRlcm1Ob2RlIiwiZnJvbVRlcm1Ob2RlIiwidGVybVZWZXJpZmllZCIsInZlcmlmeSIsInR5cGUiLCJnZXRUeXBlIiwic2V0VHlwZSIsImRlYnVnIiwidW5pZnlUZXJtV2l0aENvbnN0cnVjdG9ycyIsInRlcm1VbmlmaWVkV2l0aENvbnN0cnVjdG9ycyIsImNvbnN0cnVjdG9ycyIsImdldENvbnN0cnVjdG9ycyIsInNvbWUiLCJjb25zdHJ1Y3RvciIsInRlcm1VbmlmaWVkV2l0aENvbnN0cnVjdG9yIiwidW5pZnlNaXhpbnMiLCJjb25zdHJ1Y3RvclN0cmluZyIsImNvbnN0cnVjdG9yVGVybSIsImdldFRlcm0iLCJjb25zdHJ1Y3RvclRlcm1Ob2RlIiwidW5pZmllZCIsInRlcm1XaXRoQ29uc3RydWN0b3JVbmlmaWVyIiwidW5pZnkiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQTRFQTs7O2VBQUE7OzsyREExRWlCO2dFQUNnQjswRUFDTTtxQkFFYjs7Ozs7O0FBRTFCLElBQU1BLGdCQUFnQkMsSUFBQUEsZ0JBQVMsRUFBQztBQUVoQyxTQUFTQyxrQ0FBa0NDLElBQUksRUFBRUMsWUFBWSxFQUFFQyxXQUFXO0lBQ3hFLElBQUlDO0lBRUosSUFBTUMsYUFBYUosS0FBS0ssU0FBUztJQUVqQ0osYUFBYUssS0FBSyxDQUFDLEFBQUMsaUJBQTJCLE9BQVhGLFlBQVcsNkNBQTJDSjtJQUUxRixJQUFNTyx1QkFBdUJDLGtCQUFvQixDQUFDQyxXQUFXO0lBRTdETixzQ0FBc0NPLHlCQUF5QlYsTUFBTU8sc0JBQXNCTixjQUFjO1FBQ3ZHLElBQUlVLGdCQUFnQjtRQUVwQixJQUFNLEFBQUVDLE9BQVNDLGFBQUksQ0FBYkQsTUFDRkUsZ0JBQWdCZCxNQUNoQmUsb0JBQW9CRCxjQUFjRSxPQUFPLElBQ3pDQyxXQUFXcEIsY0FBY2tCLG9CQUFvQixHQUFHO1FBRXREZixPQUFPWSxLQUFLTSxZQUFZLENBQUNELFVBQVVoQjtRQUVuQyxJQUFJRCxTQUFTLE1BQU07WUFDakIsSUFBTW1CLGdCQUFnQm5CLEtBQUtvQixNQUFNLENBQUNuQixjQUFjO2dCQUM5QyxJQUFJVTtnQkFFSixJQUFNVSxPQUFPckIsS0FBS3NCLE9BQU87Z0JBRXpCUixjQUFjUyxPQUFPLENBQUNGO2dCQUV0QlYsZ0JBQWdCVDtnQkFFaEIsT0FBT1M7WUFDVDtZQUVBQSxnQkFBZ0JRLGVBQWdCLEdBQUc7UUFDckM7UUFFQSxPQUFPUjtJQUNUO0lBRUEsSUFBSVIscUNBQXFDO1FBQ3ZDRixhQUFhdUIsS0FBSyxDQUFDLEFBQUMsbUJBQTZCLE9BQVhwQixZQUFXLDJDQUF5Q0o7SUFDNUY7SUFFQSxPQUFPRztBQUNUO0FBRUEsU0FBU3NCLDBCQUEwQnpCLElBQUksRUFBRUMsWUFBWSxFQUFFQyxXQUFXO0lBQ2hFLElBQUl3Qiw4QkFBOEI7SUFFbEMsSUFBTUMsZUFBZTFCLGFBQWEyQixlQUFlO0lBRWpERiw4QkFBOEJDLGFBQWFFLElBQUksQ0FBQyxTQUFDQztRQUMvQyxJQUFNQyw2QkFBNkJyQix5QkFBeUJWLE1BQU04QixhQUFhN0IsY0FBY0M7UUFFN0YsSUFBSTZCLDRCQUE0QjtZQUM5QixPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU9MO0FBQ1Q7QUFFQSxJQUFNTSxjQUFjO0lBQ2xCakM7SUFDQTBCO0NBQ0Q7SUFFRCxXQUFlTztBQUVmLFNBQVN0Qix5QkFBeUJWLElBQUksRUFBRThCLFdBQVcsRUFBRTdCLFlBQVksRUFBRUMsV0FBVztJQUM1RSxJQUFJNkIsNkJBQTZCO0lBRWpDLElBQU0zQixhQUFhSixLQUFLSyxTQUFTLElBQzNCNEIsb0JBQW9CSCxZQUFZekIsU0FBUztJQUUvQ0osYUFBYUssS0FBSyxDQUFDLEFBQUMsaUJBQThDMkIsT0FBOUI3QixZQUFXLHFCQUFxQyxPQUFsQjZCLG1CQUFrQixxQkFBbUJqQztJQUV2RyxJQUFNaUIsV0FBV2pCLEtBQUtnQixPQUFPLElBQ3ZCa0Isa0JBQWtCSixZQUFZSyxPQUFPLElBQ3JDQyxzQkFBc0JGLGdCQUFnQmxCLE9BQU8sSUFDN0NxQixVQUFVQyw0QkFBMEIsQ0FBQ0MsS0FBSyxDQUFDSCxxQkFBcUJuQixVQUFVaEI7SUFFaEYsSUFBSW9DLFNBQVM7UUFDWCxJQUFJMUI7UUFFSixJQUFNVSxPQUFPUyxZQUFZUixPQUFPO1FBRWhDdEIsS0FBS3VCLE9BQU8sQ0FBQ0Y7UUFFYlYsZ0JBQWdCVDtRQUVoQjZCLDZCQUE2QnBCLGVBQWdCLEdBQUc7SUFDbEQ7SUFFQSxJQUFJb0IsNEJBQTRCO1FBQzlCOUIsYUFBYXVCLEtBQUssQ0FBQyxBQUFDLG1CQUFnRFMsT0FBOUI3QixZQUFXLHFCQUFxQyxPQUFsQjZCLG1CQUFrQixtQkFBaUJqQztJQUN6RztJQUVBLE9BQU8rQjtBQUNUIn0=