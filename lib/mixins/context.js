"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
function trace(node, message) {
    this.context.trace(node, message);
}
function debug(node, message) {
    this.context.debug(node, message);
}
function info(node, message) {
    this.context.info(node, message);
}
function warning(node, message) {
    this.context.warning(node, message);
}
function error(node, message) {
    this.context.error(node, message);
}
function fatal(node, message) {
    this.context.fatal(node, message);
}
function getAxioms() {
    return this.context.getAxioms();
}
function getLemmas() {
    return this.context.getLemmas();
}
function getTheorems() {
    return this.context.getTheorems();
}
function getConjectures() {
    return this.context.getConjectures();
}
function getCombinators() {
    return this.context.getCombinators();
}
function getConstructors() {
    return this.context.getConstructors();
}
function findTypeByTypeName(typeName) {
    return this.context.findTypeByTypeName(typeName);
}
function findLabelByTypeName(labelName) {
    return this.context.findLabelByTypeName(labelName);
}
function findRuleByReferenceName(referenceName) {
    return this.context.findRuleByReferenceName(referenceName);
}
function findAxiomByReferenceName(referenceName) {
    return this.context.findAxiomByReferenceName(referenceName);
}
function findLemmaByReferenceName(referenceName) {
    return this.context.findLemmaByReferenceName(referenceName);
}
function findTheoremByReferenceName(referenceName) {
    return this.context.findTheoremByReferenceName(referenceName);
}
function findConjectureByReferenceName(referenceName) {
    return this.context.findConjectureByReferenceName(referenceName);
}
function isLabelPresentByLabelName(labelName) {
    return this.context.isLabelPresentByLabelName(labelName);
}
function isTypePresentByTypeName(typeName) {
    return this.context.isTypePresentByTypeName(typeName);
}
function nodeAsString(node) {
    return this.context.nodeAsString(node);
}
function nodesAsString(node) {
    return this.context.nodesAsString(node);
}
var contextMixins = {
    trace: trace,
    debug: debug,
    info: info,
    warning: warning,
    error: error,
    fatal: fatal,
    getAxioms: getAxioms,
    getLemmas: getLemmas,
    getTheorems: getTheorems,
    getConjectures: getConjectures,
    getCombinators: getCombinators,
    getConstructors: getConstructors,
    findTypeByTypeName: findTypeByTypeName,
    findLabelByTypeName: findLabelByTypeName,
    findRuleByReferenceName: findRuleByReferenceName,
    findAxiomByReferenceName: findAxiomByReferenceName,
    findLemmaByReferenceName: findLemmaByReferenceName,
    findTheoremByReferenceName: findTheoremByReferenceName,
    findConjectureByReferenceName: findConjectureByReferenceName,
    isLabelPresentByLabelName: isLabelPresentByLabelName,
    isTypePresentByTypeName: isTypePresentByTypeName,
    nodeAsString: nodeAsString,
    nodesAsString: nodesAsString
};
var _default = contextMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gdHJhY2Uobm9kZSwgbWVzc2FnZSkgeyB0aGlzLmNvbnRleHQudHJhY2Uobm9kZSwgbWVzc2FnZSk7IH1cblxuZnVuY3Rpb24gZGVidWcobm9kZSwgbWVzc2FnZSkgeyB0aGlzLmNvbnRleHQuZGVidWcobm9kZSwgbWVzc2FnZSk7IH1cblxuZnVuY3Rpb24gaW5mbyhub2RlLCBtZXNzYWdlKSB7IHRoaXMuY29udGV4dC5pbmZvKG5vZGUsIG1lc3NhZ2UpOyB9XG5cbmZ1bmN0aW9uIHdhcm5pbmcobm9kZSwgbWVzc2FnZSkgeyB0aGlzLmNvbnRleHQud2FybmluZyhub2RlLCBtZXNzYWdlKTsgfVxuXG5mdW5jdGlvbiBlcnJvcihub2RlLCBtZXNzYWdlKSB7IHRoaXMuY29udGV4dC5lcnJvcihub2RlLCBtZXNzYWdlKTsgfVxuXG5mdW5jdGlvbiBmYXRhbChub2RlLCBtZXNzYWdlKSB7IHRoaXMuY29udGV4dC5mYXRhbChub2RlLCBtZXNzYWdlKTsgfVxuXG5mdW5jdGlvbiBnZXRBeGlvbXMoKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZ2V0QXhpb21zKCk7IH1cblxuZnVuY3Rpb24gZ2V0TGVtbWFzKCkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmdldExlbW1hcygpOyB9XG5cbmZ1bmN0aW9uIGdldFRoZW9yZW1zKCkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmdldFRoZW9yZW1zKCk7IH1cblxuZnVuY3Rpb24gZ2V0Q29uamVjdHVyZXMoKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZ2V0Q29uamVjdHVyZXMoKTsgfVxuXG5mdW5jdGlvbiBnZXRDb21iaW5hdG9ycygpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRDb21iaW5hdG9ycygpOyB9XG5cbmZ1bmN0aW9uIGdldENvbnN0cnVjdG9ycygpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRDb25zdHJ1Y3RvcnMoKTsgfVxuXG5mdW5jdGlvbiBmaW5kVHlwZUJ5VHlwZU5hbWUodHlwZU5hbWUpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5maW5kVHlwZUJ5VHlwZU5hbWUodHlwZU5hbWUpOyB9XG5cbmZ1bmN0aW9uIGZpbmRMYWJlbEJ5VHlwZU5hbWUobGFiZWxOYW1lKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZmluZExhYmVsQnlUeXBlTmFtZShsYWJlbE5hbWUpOyB9XG5cbmZ1bmN0aW9uIGZpbmRSdWxlQnlSZWZlcmVuY2VOYW1lKHJlZmVyZW5jZU5hbWUpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5maW5kUnVsZUJ5UmVmZXJlbmNlTmFtZShyZWZlcmVuY2VOYW1lKTsgfVxuXG5mdW5jdGlvbiBmaW5kQXhpb21CeVJlZmVyZW5jZU5hbWUocmVmZXJlbmNlTmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmZpbmRBeGlvbUJ5UmVmZXJlbmNlTmFtZShyZWZlcmVuY2VOYW1lKTsgfVxuXG5mdW5jdGlvbiBmaW5kTGVtbWFCeVJlZmVyZW5jZU5hbWUocmVmZXJlbmNlTmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmZpbmRMZW1tYUJ5UmVmZXJlbmNlTmFtZShyZWZlcmVuY2VOYW1lKTsgfVxuXG5mdW5jdGlvbiBmaW5kVGhlb3JlbUJ5UmVmZXJlbmNlTmFtZShyZWZlcmVuY2VOYW1lKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZmluZFRoZW9yZW1CeVJlZmVyZW5jZU5hbWUocmVmZXJlbmNlTmFtZSk7IH1cblxuZnVuY3Rpb24gZmluZENvbmplY3R1cmVCeVJlZmVyZW5jZU5hbWUocmVmZXJlbmNlTmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmZpbmRDb25qZWN0dXJlQnlSZWZlcmVuY2VOYW1lKHJlZmVyZW5jZU5hbWUpOyB9XG5cbmZ1bmN0aW9uIGlzTGFiZWxQcmVzZW50QnlMYWJlbE5hbWUobGFiZWxOYW1lKSB7IHJldHVybiB0aGlzLmNvbnRleHQuaXNMYWJlbFByZXNlbnRCeUxhYmVsTmFtZShsYWJlbE5hbWUpOyB9XG5cbmZ1bmN0aW9uIGlzVHlwZVByZXNlbnRCeVR5cGVOYW1lKHR5cGVOYW1lKSB7IHJldHVybiB0aGlzLmNvbnRleHQuaXNUeXBlUHJlc2VudEJ5VHlwZU5hbWUodHlwZU5hbWUpOyB9XG5cbmZ1bmN0aW9uIG5vZGVBc1N0cmluZyhub2RlKSB7IHJldHVybiB0aGlzLmNvbnRleHQubm9kZUFzU3RyaW5nKG5vZGUpOyB9XG5cbmZ1bmN0aW9uIG5vZGVzQXNTdHJpbmcobm9kZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0Lm5vZGVzQXNTdHJpbmcobm9kZSk7IH1cblxuY29uc3QgY29udGV4dE1peGlucyA9IHtcbiAgdHJhY2UsXG4gIGRlYnVnLFxuICBpbmZvLFxuICB3YXJuaW5nLFxuICBlcnJvcixcbiAgZmF0YWwsXG4gIGdldEF4aW9tcyxcbiAgZ2V0TGVtbWFzLFxuICBnZXRUaGVvcmVtcyxcbiAgZ2V0Q29uamVjdHVyZXMsXG4gIGdldENvbWJpbmF0b3JzLFxuICBnZXRDb25zdHJ1Y3RvcnMsXG4gIGZpbmRUeXBlQnlUeXBlTmFtZSxcbiAgZmluZExhYmVsQnlUeXBlTmFtZSxcbiAgZmluZFJ1bGVCeVJlZmVyZW5jZU5hbWUsXG4gIGZpbmRBeGlvbUJ5UmVmZXJlbmNlTmFtZSxcbiAgZmluZExlbW1hQnlSZWZlcmVuY2VOYW1lLFxuICBmaW5kVGhlb3JlbUJ5UmVmZXJlbmNlTmFtZSxcbiAgZmluZENvbmplY3R1cmVCeVJlZmVyZW5jZU5hbWUsXG4gIGlzTGFiZWxQcmVzZW50QnlMYWJlbE5hbWUsXG4gIGlzVHlwZVByZXNlbnRCeVR5cGVOYW1lLFxuICBub2RlQXNTdHJpbmcsXG4gIG5vZGVzQXNTdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRleHRNaXhpbnM7XG4iXSwibmFtZXMiOlsidHJhY2UiLCJub2RlIiwibWVzc2FnZSIsImNvbnRleHQiLCJkZWJ1ZyIsImluZm8iLCJ3YXJuaW5nIiwiZXJyb3IiLCJmYXRhbCIsImdldEF4aW9tcyIsImdldExlbW1hcyIsImdldFRoZW9yZW1zIiwiZ2V0Q29uamVjdHVyZXMiLCJnZXRDb21iaW5hdG9ycyIsImdldENvbnN0cnVjdG9ycyIsImZpbmRUeXBlQnlUeXBlTmFtZSIsInR5cGVOYW1lIiwiZmluZExhYmVsQnlUeXBlTmFtZSIsImxhYmVsTmFtZSIsImZpbmRSdWxlQnlSZWZlcmVuY2VOYW1lIiwicmVmZXJlbmNlTmFtZSIsImZpbmRBeGlvbUJ5UmVmZXJlbmNlTmFtZSIsImZpbmRMZW1tYUJ5UmVmZXJlbmNlTmFtZSIsImZpbmRUaGVvcmVtQnlSZWZlcmVuY2VOYW1lIiwiZmluZENvbmplY3R1cmVCeVJlZmVyZW5jZU5hbWUiLCJpc0xhYmVsUHJlc2VudEJ5TGFiZWxOYW1lIiwiaXNUeXBlUHJlc2VudEJ5VHlwZU5hbWUiLCJub2RlQXNTdHJpbmciLCJub2Rlc0FzU3RyaW5nIiwiY29udGV4dE1peGlucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBMEVBOzs7ZUFBQTs7O0FBeEVBLFNBQVNBLE1BQU1DLElBQUksRUFBRUMsT0FBTztJQUFJLElBQUksQ0FBQ0MsT0FBTyxDQUFDSCxLQUFLLENBQUNDLE1BQU1DO0FBQVU7QUFFbkUsU0FBU0UsTUFBTUgsSUFBSSxFQUFFQyxPQUFPO0lBQUksSUFBSSxDQUFDQyxPQUFPLENBQUNDLEtBQUssQ0FBQ0gsTUFBTUM7QUFBVTtBQUVuRSxTQUFTRyxLQUFLSixJQUFJLEVBQUVDLE9BQU87SUFBSSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0UsSUFBSSxDQUFDSixNQUFNQztBQUFVO0FBRWpFLFNBQVNJLFFBQVFMLElBQUksRUFBRUMsT0FBTztJQUFJLElBQUksQ0FBQ0MsT0FBTyxDQUFDRyxPQUFPLENBQUNMLE1BQU1DO0FBQVU7QUFFdkUsU0FBU0ssTUFBTU4sSUFBSSxFQUFFQyxPQUFPO0lBQUksSUFBSSxDQUFDQyxPQUFPLENBQUNJLEtBQUssQ0FBQ04sTUFBTUM7QUFBVTtBQUVuRSxTQUFTTSxNQUFNUCxJQUFJLEVBQUVDLE9BQU87SUFBSSxJQUFJ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