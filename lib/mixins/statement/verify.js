"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _dom = /*#__PURE__*/ _interop_require_default(require("../../dom"));
var _verification = require("../../utilities/verification");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function verifyAsMetavariable(statement, assignments, stated, context) {
    var verifiedAsMetavariable = false;
    var metavariable = (0, _verification.metavariableFromStatement)(statement, context);
    if (metavariable !== null) {
        var statementString = statement.getString();
        context.trace("Verifying the '".concat(statementString, "' statement as a metavariable..."));
        var metavariableVerified = metavariable.verify(context);
        verifiedAsMetavariable = metavariableVerified; ///
        if (verifiedAsMetavariable) {
            context.debug("...verified the '".concat(statementString, "' statement as a metavariable."));
        }
    }
    return verifiedAsMetavariable;
}
function verifyAsEquality(statement, assignments, stated, context) {
    var verifiedAsEquality = false;
    var equality = (0, _verification.equalityFromStatement)(statement, context);
    if (equality !== null) {
        var statementString = statement.getString();
        context.trace("Verifying the '".concat(statementString, "' statement as an equality..."));
        var equalityVerified = equality.verify(assignments, stated, context);
        verifiedAsEquality = equalityVerified; ///
        if (verifiedAsEquality) {
            context.debug("...verified the '".concat(statementString, "' statement as an equality."));
        }
    }
    return verifiedAsEquality;
}
function verifyAsJudgement(statement, assignments, stated, context) {
    var verifiedAsJudgement = false;
    var judgement = (0, _verification.judgementFromStatement)(statement, context);
    if (judgement !== null) {
        var statementString = statement.getString();
        context.trace("Verifying the '".concat(statementString, "' statement as a judgement..."));
        var judgementVerified = judgement.verify(assignments, stated, context);
        verifiedAsJudgement = judgementVerified; ///
        if (verifiedAsJudgement) {
            context.debug("...verified the '".concat(statementString, "' statement as a judgement."));
        }
    }
    return verifiedAsJudgement;
}
function verifyAsTypeAssertion(statement, assignments, stated, context) {
    var verifiedAsTypeAssertion = false;
    var typeAssertion = (0, _verification.typeAssertionFromStatement)(statement, context);
    if (typeAssertion !== null) {
        var statementString = statement.getString();
        context.trace("Verifying the '".concat(statementString, "' statement as a type assertion..."));
        var typeAssertionVerified = typeAssertion.verify(assignments, stated, context);
        verifiedAsTypeAssertion = typeAssertionVerified; ///
        if (verifiedAsTypeAssertion) {
            context.debug("...verified the '".concat(statementString, "' statement as a type assertion."));
        }
    }
    return verifiedAsTypeAssertion;
}
function verifyAsDefinedAssertion(statement, assignments, stated, context) {
    var verifiedAsDefinedAssertion = false;
    var definedAssertion = (0, _verification.definedAssertionFromStatement)(statement, context);
    if (definedAssertion !== null) {
        var statementString = statement.getString();
        context.trace("Verifying the '".concat(statementString, "' statement as a defined assertion..."));
        var definedAssertionVerified = definedAssertion.verify(assignments, stated, context);
        verifiedAsDefinedAssertion = definedAssertionVerified; ///
        if (verifiedAsDefinedAssertion) {
            context.debug("...verified the '".concat(statementString, "' statement as a defined assertion."));
        }
    }
    return verifiedAsDefinedAssertion;
}
function verifyAsContainedAssertion(statement, assignments, stated, context) {
    var verifiedAsContainedAssertion = false;
    var containedAssertion = (0, _verification.containedAssertionFromStatement)(statement, context);
    if (containedAssertion !== null) {
        var statementString = statement.getString();
        context.trace("Verifying the '".concat(statementString, "' statement as a contained assertion..."));
        var containedAssertionVerified = containedAssertion.verify(assignments, stated, context);
        verifiedAsContainedAssertion = containedAssertionVerified; ///
        if (verifiedAsContainedAssertion) {
            context.debug("...verified the '".concat(statementString, "' statement as a defined assertion."));
        }
    }
    return verifiedAsContainedAssertion;
}
function verifyAsSubproofAssertion(statement, assignments, stated, context) {
    var verifiedAsSubproofAssertion = false;
    var subproofAssertion = (0, _verification.subproofAssertionFromStatement)(statement, context);
    if (subproofAssertion !== null) {
        var statementString = statement.getString();
        context.trace("Verifying the '".concat(statementString, "' statement as a subproof assertion..."));
        var subproofAssertionVerified = subproofAssertion.verify(assignments, stated, context);
        verifiedAsSubproofAssertion = subproofAssertionVerified; ///
        if (verifiedAsSubproofAssertion) {
            context.debug("...verified the '".concat(statementString, "' statement as a subproof assertion."));
        }
    }
    return verifiedAsSubproofAssertion;
}
function unifyWithBracketedCombinator(statement, assignments, stated, context) {
    stated = true; ///
    assignments = null; ///
    var BracketedCombinator = _dom.default.BracketedCombinator, bracketedCombinator = BracketedCombinator.fromNothing(), unifiedWithBracketedCombinator = bracketedCombinator.unifyStatement(statement, assignments, stated, context);
    return unifiedWithBracketedCombinator;
}
function unifyWithCombinators(statement, assignments, stated, context) {
    stated = true; ///
    assignments = null; ///
    var combinators = context.getCombinators(), unifiedWithCombinators = combinators.some(function(combinator) {
        var unifiedWithCombinator = combinator.unifyStatement(statement, assignments, stated, context);
        if (unifiedWithCombinator) {
            return true;
        }
    });
    return unifiedWithCombinators;
}
var verifyMixins = [
    verifyAsMetavariable,
    verifyAsEquality,
    verifyAsJudgement,
    verifyAsTypeAssertion,
    verifyAsDefinedAssertion,
    verifyAsContainedAssertion,
    verifyAsSubproofAssertion,
    unifyWithBracketedCombinator,
    unifyWithCombinators
];
var _default = verifyMixins;

//# sourceMappingURL=data:application/json;base64,