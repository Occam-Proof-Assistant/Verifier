"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _equality = /*#__PURE__*/ _interop_require_default(require("../../equality"));
var _metavariable = /*#__PURE__*/ _interop_require_default(require("../../metavariable"));
var _type = /*#__PURE__*/ _interop_require_default(require("../../assertion/type"));
var _defined = /*#__PURE__*/ _interop_require_default(require("../../assertion/defined"));
var _subproof = /*#__PURE__*/ _interop_require_default(require("../../assertion/subproof"));
var _contained = /*#__PURE__*/ _interop_require_default(require("../../assertion/contained"));
var _frame = /*#__PURE__*/ _interop_require_default(require("../../verify/frame"));
var _judgement = /*#__PURE__*/ _interop_require_default(require("../../verify/judgement"));
var _declaration = /*#__PURE__*/ _interop_require_default(require("../../verify/declaration"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var frameNodeQuery = (0, _query.nodeQuery)("/statement/frame!"), equalityNodeQuery = (0, _query.nodeQuery)("/statement/equality!"), judgementNodeQuery = (0, _query.nodeQuery)("/statement/judgement!"), declarationNodeQuery = (0, _query.nodeQuery)("/statement/declaration!"), metavariableNodeQuery = (0, _query.nodeQuery)("/statement/metavariable!"), typeAssertionNodeQuery = (0, _query.nodeQuery)("/statement/typeAssertion!"), definedAssertionNodeQuery = (0, _query.nodeQuery)("/statement/definedAssertion!"), subproofAssertionNodeQuery = (0, _query.nodeQuery)("/statement/subproofAssertion!"), containedAssertionNodeQuery = (0, _query.nodeQuery)("/statement/containedAssertion!");
function verifyAsMetavariable(statement, assignments, stated, localContext) {
    var verifiedAsMetavariable = false;
    var statementNode = statement.getNode(), metavariableNode = metavariableNodeQuery(statementNode), metavariable = _metavariable.default.fromMetavariableNode(metavariableNode, localContext);
    if (metavariable !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a metavariable..."));
        var metavariableVerified = metavariable.verify(localContext);
        verifiedAsMetavariable = metavariableVerified; ///
        if (verifiedAsMetavariable) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a metavariable."));
        }
    }
    return verifiedAsMetavariable;
}
function verifyAsEquality(statement, assignments, stated, localContext) {
    var verifiedAsEquality = false;
    var statementNode = statement.getNode(), equalityNode = equalityNodeQuery(statementNode), equality = _equality.default.fromEqualityNode(equalityNode, localContext);
    if (equality !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as an equality..."));
        var equalityVerified = equality.verify(assignments, stated, localContext);
        verifiedAsEquality = equalityVerified; ///
        if (verifiedAsEquality) {
            localContext.debug("...verified the '".concat(statementString, "' statement as an equality."));
        }
    }
    return verifiedAsEquality;
}
function verifyAsFrame(statement, assignments, stated, localContext) {
    var verifiedAsFrame = false;
    var statementNode = statement.getNode(), frameNode = frameNodeQuery(statementNode);
    if (frameNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a frame..."));
        var frameVerified = (0, _frame.default)(frameNode, assignments, stated, localContext);
        verifiedAsFrame = frameVerified; ///
        if (verifiedAsFrame) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a frame."));
        }
    }
    return verifiedAsFrame;
}
function verifyAsJudgement(statement, assignments, stated, localContext) {
    var verifiedAsJudgement = false;
    var statementNode = statement.getNode(), judgementNode = judgementNodeQuery(statementNode);
    if (judgementNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a judgement..."));
        var judgementVerified = (0, _judgement.default)(judgementNode, assignments, stated, localContext);
        verifiedAsJudgement = judgementVerified; ///
        if (verifiedAsJudgement) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a judgement."));
        }
    }
    return verifiedAsJudgement;
}
function verifyAsDeclaration(statement, assignments, stated, localContext) {
    var verifiedAsDeclaration = false;
    var statementNode = statement.getNode(), declarationNode = declarationNodeQuery(statementNode);
    if (declarationNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a declaration..."));
        var declarationVerified = (0, _declaration.default)(declarationNode, assignments, stated, localContext);
        verifiedAsDeclaration = declarationVerified; ///
        if (verifiedAsDeclaration) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a declaration."));
        }
    }
    return verifiedAsDeclaration;
}
function verifyAsTypeAssertion(statement, assignments, stated, localContext) {
    var verifiedAsTypeAssertion = false;
    var statementNode = statement.getNode(), typeAssertionNode = typeAssertionNodeQuery(statementNode), typeAssertion = _type.default.fromTypeAssertionNode(typeAssertionNode, localContext);
    if (typeAssertion !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a type assertion..."));
        var typeAssertionVerified = typeAssertion.verify(assignments, stated, localContext);
        verifiedAsTypeAssertion = typeAssertionVerified; ///
        if (verifiedAsTypeAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a type assertion."));
        }
    }
    return verifiedAsTypeAssertion;
}
function verifyAsDefinedAssertion(statement, assignments, stated, localContext) {
    var verifiedAsDefinedAssertion = false;
    var statementNode = statement.getNode(), definedAssertionNode = definedAssertionNodeQuery(statementNode), definedAssertion = _defined.default.fromDefinedAssertionNode(definedAssertionNode, localContext);
    if (definedAssertion !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a defined assertion..."));
        var definedAssertionVerified = definedAssertion.verify(assignments, stated, localContext);
        verifiedAsDefinedAssertion = definedAssertionVerified; ///
        if (verifiedAsDefinedAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a defined assertion."));
        }
    }
    return verifiedAsDefinedAssertion;
}
function verifyAsSubproofAssertion(statement, assignments, stated, localContext) {
    var verifiedAsSubproofAssertion = false;
    var statementNode = statement.getNode(), subproofAssertionNode = subproofAssertionNodeQuery(statementNode), subproofAssertion = _subproof.default.fromSubproofAssertionNode(subproofAssertionNode, localContext);
    if (subproofAssertionNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a subproof assertion..."));
        var subproofAssertionVerified = subproofAssertion.verify(assignments, stated, localContext);
        verifiedAsSubproofAssertion = subproofAssertionVerified; ///
        if (verifiedAsSubproofAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a subproof assertion."));
        }
    }
    return verifiedAsSubproofAssertion;
}
function verifyAsContainedAssertion(statement, assignments, stated, localContext) {
    var verifiedAsContainedAssertion = false;
    var statementNode = statement.getNode(), containedAssertionNode = containedAssertionNodeQuery(statementNode), containedAssertion = _contained.default.fromContainedAssertionNode(containedAssertionNode, localContext);
    if (containedAssertion !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a contained assertion..."));
        var containedAssertionVerified = containedAssertion.verify(assignments, stated, localContext);
        verifiedAsContainedAssertion = containedAssertionVerified; ///
        if (verifiedAsContainedAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a contained assertion."));
        }
    }
    return verifiedAsContainedAssertion;
}
var verifyMixins = [
    verifyAsMetavariable,
    verifyAsEquality,
    verifyAsFrame,
    verifyAsJudgement,
    verifyAsDeclaration,
    verifyAsTypeAssertion,
    verifyAsDefinedAssertion,
    verifyAsSubproofAssertion,
    verifyAsContainedAssertion
];
var _default = verifyMixins;

//# sourceMappingURL=data:application/json;base64,