"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _frame = /*#__PURE__*/ _interop_require_default(require("../../verify/frame"));
var _equality = /*#__PURE__*/ _interop_require_default(require("../../verify/equality"));
var _judgement = /*#__PURE__*/ _interop_require_default(require("../../verify/judgement"));
var _declaration = /*#__PURE__*/ _interop_require_default(require("../../verify/declaration"));
var _type = /*#__PURE__*/ _interop_require_default(require("../../verify/assertion/type"));
var _metavariable = /*#__PURE__*/ _interop_require_default(require("../../unifier/metavariable"));
var _defined = /*#__PURE__*/ _interop_require_default(require("../../verify/assertion/defined"));
var _subproof = /*#__PURE__*/ _interop_require_default(require("../../verify/assertion/subproof"));
var _contained = /*#__PURE__*/ _interop_require_default(require("../../verify/assertion/contained"));
var _query = require("../../utilities/query");
var _name = require("../../utilities/name");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var frameNodeQuery = (0, _query.nodeQuery)("/statement/frame!"), equalityNodeQuery = (0, _query.nodeQuery)("/statement/equality!"), judgementNodeQuery = (0, _query.nodeQuery)("/statement/judgement!"), declarationNodeQuery = (0, _query.nodeQuery)("/statement/declaration!"), metavariableNodeQuery = (0, _query.nodeQuery)("/statement/metavariable!"), typeAssertionNodeQuery = (0, _query.nodeQuery)("/statement/typeAssertion!"), definedAssertionNodeQuery = (0, _query.nodeQuery)("/statement/definedAssertion!"), subproofAssertionNodeQuery = (0, _query.nodeQuery)("/statement/subproofAssertion!"), containedAssertionNodeQuery = (0, _query.nodeQuery)("/statement/containedAssertion!");
function verifyAsMetavariable(statement, assignments, stated, localContext) {
    var verifiedAsMetavariable = false;
    var statementNode = statement.getNode(), metavariableNode = metavariableNodeQuery(statementNode);
    if (metavariableNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a metavariable..."));
        var metavariableUnified = unifyMetavariable(metavariableNode, localContext);
        verifiedAsMetavariable = metavariableUnified; ///
        if (verifiedAsMetavariable) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a metavariable."));
        }
    }
    return verifiedAsMetavariable;
}
function verifyAsEquality(statement, assignments, stated, localContext) {
    var verifiedAsEquality = false;
    var statementNode = statement.getNode(), equalityNode = equalityNodeQuery(statementNode);
    if (equalityNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as an equality..."));
        var equalityVerified = (0, _equality.default)(equalityNode, assignments, stated, localContext);
        verifiedAsEquality = equalityVerified; ///
        if (verifiedAsEquality) {
            localContext.debug("...verified the '".concat(statementString, "' statement as an equality."));
        }
    }
    return verifiedAsEquality;
}
function verifyAsFrame(statement, assignments, stated, localContext) {
    var verifiedAsFrame = false;
    var statementNode = statement.getNode(), frameNode = frameNodeQuery(statementNode);
    if (frameNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a frame..."));
        var frameVerified = (0, _frame.default)(frameNode, assignments, stated, localContext);
        verifiedAsFrame = frameVerified; ///
        if (verifiedAsFrame) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a frame."));
        }
    }
    return verifiedAsFrame;
}
function verifyAsJudgement(statement, assignments, stated, localContext) {
    var verifiedAsJudgement = false;
    var statementNode = statement.getNode(), judgementNode = judgementNodeQuery(statementNode);
    if (judgementNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a judgement..."));
        var judgementVerified = (0, _judgement.default)(judgementNode, assignments, stated, localContext);
        verifiedAsJudgement = judgementVerified; ///
        if (verifiedAsJudgement) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a judgement."));
        }
    }
    return verifiedAsJudgement;
}
function verifyAsDeclaration(statement, assignments, stated, localContext) {
    var verifiedAsDeclaration = false;
    var statementNode = statement.getNode(), declarationNode = declarationNodeQuery(statementNode);
    if (declarationNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a declaration..."));
        var declarationVerified = (0, _declaration.default)(declarationNode, assignments, stated, localContext);
        verifiedAsDeclaration = declarationVerified; ///
        if (verifiedAsDeclaration) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a declaration."));
        }
    }
    return verifiedAsDeclaration;
}
function verifyAsTypeAssertion(statement, assignments, stated, localContext) {
    var verifiedAsTypeAssertion = false;
    var statementNode = statement.getNode(), typeAssertionNode = typeAssertionNodeQuery(statementNode);
    if (typeAssertionNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a type assertion..."));
        var typeAssertionVerified = (0, _type.default)(typeAssertionNode, assignments, stated, localContext);
        verifiedAsTypeAssertion = typeAssertionVerified; ///
        if (verifiedAsTypeAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a type assertion."));
        }
    }
    return verifiedAsTypeAssertion;
}
function verifyAsDefinedAssertion(statement, assignments, stated, localContext) {
    var verifiedAsDefinedAssertion = false;
    var statementNode = statement.getNode(), definedAssertionNode = definedAssertionNodeQuery(statementNode);
    if (definedAssertionNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a defined assertion..."));
        var definedAssertionVerified = (0, _defined.default)(definedAssertionNode, assignments, stated, localContext);
        verifiedAsDefinedAssertion = definedAssertionVerified; ///
        if (verifiedAsDefinedAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a defined assertion."));
        }
    }
    return verifiedAsDefinedAssertion;
}
function verifyAsSubproofAssertion(statement, assignments, stated, localContext) {
    var verifiedAsSubproofAssertion = false;
    var statementNode = statement.getNode(), subproofAssertionNode = subproofAssertionNodeQuery(statementNode);
    if (subproofAssertionNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a subproof assertion..."));
        var subproofAssertionVerified = (0, _subproof.default)(subproofAssertionNode, assignments, stated, localContext);
        verifiedAsSubproofAssertion = subproofAssertionVerified; ///
        if (verifiedAsSubproofAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a subproof assertion."));
        }
    }
    return verifiedAsSubproofAssertion;
}
function verifyAsContainedAssertion(statement, assignments, stated, localContext) {
    var verifiedAsContainedAssertion = false;
    var statementNode = statement.getNode(), containedAssertionNode = containedAssertionNodeQuery(statementNode);
    if (containedAssertionNode !== null) {
        var statementString = statement.getString();
        localContext.trace("Verifying the '".concat(statementString, "' statement as a contained assertion..."));
        var containedAssertionVerified = (0, _contained.default)(containedAssertionNode, assignments, stated, localContext);
        verifiedAsContainedAssertion = containedAssertionVerified; ///
        if (verifiedAsContainedAssertion) {
            localContext.debug("...verified the '".concat(statementString, "' statement as a contained assertion."));
        }
    }
    return verifiedAsContainedAssertion;
}
var verifyMixins = [
    verifyAsMetavariable,
    verifyAsEquality,
    verifyAsFrame,
    verifyAsJudgement,
    verifyAsDeclaration,
    verifyAsTypeAssertion,
    verifyAsDefinedAssertion,
    verifyAsSubproofAssertion,
    verifyAsContainedAssertion
];
var _default = verifyMixins;
function unifyMetavariable(metavariableNode, localContext) {
    var metavariableUnified;
    var metavariableString = localContext.nodeAsString(metavariableNode);
    localContext.trace("Unifying the '".concat(metavariableString, "' metavariable..."));
    var metavariableName = (0, _name.metavariableNameFromMetavariableNode)(metavariableNode), metavariable = localContext.findMetavariableByMetavariableName(metavariableName);
    if (metavariable !== null) {
        var metavariableNodeA = metavariableNode; ///
        metavariableNode = metavariable.getNode();
        var metavariableNodeB = metavariableNode; ///
        var unified = _metavariable.default.unify(metavariableNodeA, metavariableNodeB, localContext);
        metavariableUnified = unified; ///
    }
    if (metavariableUnified) {
        localContext.debug("...unified the '".concat(metavariableString, "' metavariable."));
    }
    return metavariableUnified;
}

//# sourceMappingURL=data:application/json;base64,