"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _defined = /*#__PURE__*/ _interop_require_default(require("../../assertion/defined"));
var _contained = /*#__PURE__*/ _interop_require_default(require("../../assertion/contained"));
var _query = require("../../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var definedAssertionNodeQuery = (0, _query.nodeQuery)("/statement/definedAssertion"), containedAssertionNodeQuery = (0, _query.nodeQuery)("/statement/containedAssertion");
function resolveAsDefinedAssertion(statement, substitutions, generalContext, specificContext) {
    var resolvedAsDefinedAssertion = false;
    var context = generalContext, statementNode = statement.getNode(), definedAssertionNode = definedAssertionNodeQuery(statementNode), definedAssertion = _defined.default.fromDefinedAssertionNode(definedAssertionNode, context);
    if (definedAssertion !== null) {
        var statementString = statement.getString();
        specificContext.trace("Resolving the '".concat(statementString, "' statement as a defined assertion..."));
        var definedAssertionVerified = definedAssertion.resolve(substitutions, generalContext, specificContext);
        resolvedAsDefinedAssertion = definedAssertionVerified; ///
        if (resolvedAsDefinedAssertion) {
            specificContext.debug("...resolved the '".concat(statementString, "' statement as a defined assertion."));
        }
    }
    return resolvedAsDefinedAssertion;
}
function resolveAsContainedAssertion(statement, substitutions, generalContext, specificContext) {
    var resolvedAsContainedAssertion = false;
    var context = generalContext, statementNode = statement.getNode(), containedAssertionNode = containedAssertionNodeQuery(statementNode), containedAssertion = _contained.default.fromContainedAssertionNode(containedAssertionNode, context);
    if (containedAssertion !== null) {
        var statementString = statement.getString();
        specificContext.trace("Resolving the '".concat(statementString, "' statement as a contained assertion..."));
        var containedAssertionVerified = containedAssertion.resolve(substitutions, generalContext, specificContext);
        resolvedAsContainedAssertion = containedAssertionVerified; ///
        if (resolvedAsContainedAssertion) {
            specificContext.debug("...resolved the '".concat(statementString, "' statement as a contained assertion."));
        }
    }
    return resolvedAsContainedAssertion;
}
var resolveMixins = [
    resolveAsDefinedAssertion,
    resolveAsContainedAssertion
];
var _default = resolveMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvc3RhdGVtZW50L3Jlc29sdmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBEZWZpbmVkQXNzZXJ0aW9uIGZyb20gXCIuLi8uLi9hc3NlcnRpb24vZGVmaW5lZFwiO1xuaW1wb3J0IENvbnRhaW5lZEFzc2VydGlvbiBmcm9tIFwiLi4vLi4vYXNzZXJ0aW9uL2NvbnRhaW5lZFwiO1xuXG5pbXBvcnQgeyBub2RlUXVlcnkgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL3F1ZXJ5XCI7XG5cbmNvbnN0IGRlZmluZWRBc3NlcnRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvc3RhdGVtZW50L2RlZmluZWRBc3NlcnRpb25cIiksXG4gICAgICBjb250YWluZWRBc3NlcnRpb25Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvc3RhdGVtZW50L2NvbnRhaW5lZEFzc2VydGlvblwiKTtcblxuZnVuY3Rpb24gcmVzb2x2ZUFzRGVmaW5lZEFzc2VydGlvbihzdGF0ZW1lbnQsIHN1YnN0aXR1dGlvbnMsIGdlbmVyYWxDb250ZXh0LCBzcGVjaWZpY0NvbnRleHQpIHtcbiAgbGV0IHJlc29sdmVkQXNEZWZpbmVkQXNzZXJ0aW9uID0gZmFsc2U7XG5cbiAgY29uc3QgY29udGV4dCA9IGdlbmVyYWxDb250ZXh0LCAvLy9cbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudC5nZXROb2RlKCksXG4gICAgICAgIGRlZmluZWRBc3NlcnRpb25Ob2RlID0gZGVmaW5lZEFzc2VydGlvbk5vZGVRdWVyeShzdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgZGVmaW5lZEFzc2VydGlvbiA9IERlZmluZWRBc3NlcnRpb24uZnJvbURlZmluZWRBc3NlcnRpb25Ob2RlKGRlZmluZWRBc3NlcnRpb25Ob2RlLCBjb250ZXh0KTtcblxuICBpZiAoZGVmaW5lZEFzc2VydGlvbiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0YXRlbWVudFN0cmluZyA9IHN0YXRlbWVudC5nZXRTdHJpbmcoKTtcblxuICAgIHNwZWNpZmljQ29udGV4dC50cmFjZShgUmVzb2x2aW5nIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgYXMgYSBkZWZpbmVkIGFzc2VydGlvbi4uLmApO1xuXG4gICAgY29uc3QgZGVmaW5lZEFzc2VydGlvblZlcmlmaWVkID0gZGVmaW5lZEFzc2VydGlvbi5yZXNvbHZlKHN1YnN0aXR1dGlvbnMsIGdlbmVyYWxDb250ZXh0LCBzcGVjaWZpY0NvbnRleHQpO1xuXG4gICAgcmVzb2x2ZWRBc0RlZmluZWRBc3NlcnRpb24gPSBkZWZpbmVkQXNzZXJ0aW9uVmVyaWZpZWQ7IC8vL1xuXG4gICAgaWYgKHJlc29sdmVkQXNEZWZpbmVkQXNzZXJ0aW9uKSB7XG4gICAgICBzcGVjaWZpY0NvbnRleHQuZGVidWcoYC4uLnJlc29sdmVkIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgYXMgYSBkZWZpbmVkIGFzc2VydGlvbi5gKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzb2x2ZWRBc0RlZmluZWRBc3NlcnRpb247XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc0NvbnRhaW5lZEFzc2VydGlvbihzdGF0ZW1lbnQsIHN1YnN0aXR1dGlvbnMsIGdlbmVyYWxDb250ZXh0LCBzcGVjaWZpY0NvbnRleHQpIHtcbiAgbGV0IHJlc29sdmVkQXNDb250YWluZWRBc3NlcnRpb24gPSBmYWxzZTtcblxuICBjb25zdCBjb250ZXh0ID0gZ2VuZXJhbENvbnRleHQsIC8vL1xuICAgICAgICBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50LmdldE5vZGUoKSxcbiAgICAgICAgY29udGFpbmVkQXNzZXJ0aW9uTm9kZSA9IGNvbnRhaW5lZEFzc2VydGlvbk5vZGVRdWVyeShzdGF0ZW1lbnROb2RlKSxcbiAgICAgICAgY29udGFpbmVkQXNzZXJ0aW9uID0gQ29udGFpbmVkQXNzZXJ0aW9uLmZyb21Db250YWluZWRBc3NlcnRpb25Ob2RlKGNvbnRhaW5lZEFzc2VydGlvbk5vZGUsIGNvbnRleHQpO1xuXG4gIGlmIChjb250YWluZWRBc3NlcnRpb24gIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnRTdHJpbmcgPSBzdGF0ZW1lbnQuZ2V0U3RyaW5nKCk7XG5cbiAgICBzcGVjaWZpY0NvbnRleHQudHJhY2UoYFJlc29sdmluZyB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IGFzIGEgY29udGFpbmVkIGFzc2VydGlvbi4uLmApO1xuXG4gICAgY29uc3QgY29udGFpbmVkQXNzZXJ0aW9uVmVyaWZpZWQgPSBjb250YWluZWRBc3NlcnRpb24ucmVzb2x2ZShzdWJzdGl0dXRpb25zLCBnZW5lcmFsQ29udGV4dCwgc3BlY2lmaWNDb250ZXh0KTtcblxuICAgIHJlc29sdmVkQXNDb250YWluZWRBc3NlcnRpb24gPSBjb250YWluZWRBc3NlcnRpb25WZXJpZmllZDsgLy8vXG5cbiAgICBpZiAocmVzb2x2ZWRBc0NvbnRhaW5lZEFzc2VydGlvbikge1xuICAgICAgc3BlY2lmaWNDb250ZXh0LmRlYnVnKGAuLi5yZXNvbHZlZCB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IGFzIGEgY29udGFpbmVkIGFzc2VydGlvbi5gKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzb2x2ZWRBc0NvbnRhaW5lZEFzc2VydGlvbjtcbn1cblxuY29uc3QgcmVzb2x2ZU1peGlucyA9IFtcbiAgcmVzb2x2ZUFzRGVmaW5lZEFzc2VydGlvbixcbiAgcmVzb2x2ZUFzQ29udGFpbmVkQXNzZXJ0aW9uXG5dO1xuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlTWl4aW5zO1xuIl0sIm5hbWVzIjpbImRlZmluZWRBc3NlcnRpb25Ob2RlUXVlcnkiLCJub2RlUXVlcnkiLCJjb250YWluZWRBc3NlcnRpb25Ob2RlUXVlcnkiLCJyZXNvbHZlQXNEZWZpbmVkQXNzZXJ0aW9uIiwic3RhdGVtZW50Iiwic3Vic3RpdHV0aW9ucyIsImdlbmVyYWxDb250ZXh0Iiwic3BlY2lmaWNDb250ZXh0IiwicmVzb2x2ZWRBc0RlZmluZWRBc3NlcnRpb24iLCJjb250ZXh0Iiwic3RhdGVtZW50Tm9kZSIsImdldE5vZGUiLCJkZWZpbmVkQXNzZXJ0aW9uTm9kZSIsImRlZmluZWRBc3NlcnRpb24iLCJEZWZpbmVkQXNzZXJ0aW9uIiwiZnJvbURlZmluZWRBc3NlcnRpb25Ob2RlIiwic3RhdGVtZW50U3RyaW5nIiwiZ2V0U3RyaW5nIiwidHJhY2UiLCJkZWZpbmVkQXNzZXJ0aW9uVmVyaWZpZWQiLCJyZXNvbHZlIiwiZGVidWciLCJyZXNvbHZlQXNDb250YWluZWRBc3NlcnRpb24iLCJyZXNvbHZlZEFzQ29udGFpbmVkQXNzZXJ0aW9uIiwiY29udGFpbmVkQXNzZXJ0aW9uTm9kZSIsImNvbnRhaW5lZEFzc2VydGlvbiIsIkNvbnRhaW5lZEFzc2VydGlvbiIsImZyb21Db250YWluZWRBc3NlcnRpb25Ob2RlIiwiY29udGFpbmVkQXNzZXJ0aW9uVmVyaWZpZWQiLCJyZXNvbHZlTWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFpRUE7OztlQUFBOzs7OERBL0Q2QjtnRUFDRTtxQkFFTDs7Ozs7O0FBRTFCLElBQU1BLDRCQUE0QkMsSUFBQUEsZ0JBQVMsRUFBQyxnQ0FDdENDLDhCQUE4QkQsSUFBQUEsZ0JBQVMsRUFBQztBQUU5QyxTQUFTRSwwQkFBMEJDLFNBQVMsRUFBRUMsYUFBYSxFQUFFQyxjQUFjLEVBQUVDLGVBQWU7SUFDMUYsSUFBSUMsNkJBQTZCO0lBRWpDLElBQU1DLFVBQVVILGdCQUNWSSxnQkFBZ0JOLFVBQVVPLE9BQU8sSUFDakNDLHVCQUF1QlosMEJBQTBCVSxnQkFDakRHLG1CQUFtQkMsZ0JBQWdCLENBQUNDLHdCQUF3QixDQUFDSCxzQkFBc0JIO0lBRXpGLElBQUlJLHFCQUFxQixNQUFNO1FBQzdCLElBQU1HLGtCQUFrQlosVUFBVWEsU0FBUztRQUUzQ1YsZ0JBQWdCVyxLQUFLLENBQUMsQUFBQyxrQkFBaUMsT0FBaEJGLGlCQUFnQjtRQUV4RCxJQUFNRywyQkFBMkJOLGlCQUFpQk8sT0FBTyxDQUFDZixlQUFlQyxnQkFBZ0JDO1FBRXpGQyw2QkFBNkJXLDBCQUEwQixHQUFHO1FBRTFELElBQUlYLDRCQUE0QjtZQUM5QkQsZ0JBQWdCYyxLQUFLLENBQUMsQUFBQyxvQkFBbUMsT0FBaEJMLGlCQUFnQjtRQUM1RDtJQUNGO0lBRUEsT0FBT1I7QUFDVDtBQUVBLFNBQVNjLDRCQUE0QmxCLFNBQVMsRUFBRUMsYUFBYSxFQUFFQyxjQUFjLEVBQUVDLGVBQWU7SUFDNUYsSUFBSWdCLCtCQUErQjtJQUVuQyxJQUFNZCxVQUFVSCxnQkFDVkksZ0JBQWdCTixVQUFVTyxPQUFPLElBQ2pDYSx5QkFBeUJ0Qiw0QkFBNEJRLGdCQUNyRGUscUJBQXFCQyxrQkFBa0IsQ0FBQ0MsMEJBQTBCLENBQUNILHdCQUF3QmY7SUFFakcsSUFBSWdCLHVCQUF1QixNQUFNO1FBQy9CLElBQU1ULGtCQUFrQlosVUFBVWEsU0FBUztRQUUzQ1YsZ0JBQWdCVyxLQUFLLENBQUMsQUFBQyxrQkFBaUMsT0FBaEJGLGlCQUFnQjtRQUV4RCxJQUFNWSw2QkFBNkJILG1CQUFtQkwsT0FBTyxDQUFDZixlQUFlQyxnQkFBZ0JDO1FBRTdGZ0IsK0JBQStCSyw0QkFBNEIsR0FBRztRQUU5RCxJQUFJTCw4QkFBOEI7WUFDaENoQixnQkFBZ0JjLEtBQUssQ0FBQyxBQUFDLG9CQUFtQyxPQUFoQkwsaUJBQWdCO1FBQzVEO0lBQ0Y7SUFFQSxPQUFPTztBQUNUO0FBRUEsSUFBTU0sZ0JBQWdCO0lBQ3BCMUI7SUFDQW1CO0NBQ0Q7SUFFRCxXQUFlTyJ9