"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _verification = require("../../utilities/verification");
function resolveAsDefinedAssertion(statement, substitutions, generalContext, specificContext) {
    var resolvedAsDefinedAssertion = false;
    var context = generalContext, definedAssertion = (0, _verification.definedAssertionFromStatement)(statement, context);
    if (definedAssertion !== null) {
        var statementString = statement.getString();
        specificContext.trace("Resolving the '".concat(statementString, "' statement as a defined assertion..."));
        var context1 = specificContext, definedAssertionVerified = definedAssertion.resolve(substitutions, context1);
        resolvedAsDefinedAssertion = definedAssertionVerified; ///
        if (resolvedAsDefinedAssertion) {
            specificContext.debug("...resolved the '".concat(statementString, "' statement as a defined assertion."));
        }
    }
    return resolvedAsDefinedAssertion;
}
function resolveAsContainedAssertion(statement, substitutions, generalContext, specificContext) {
    var resolvedAsContainedAssertion = false;
    var context = generalContext, containedAssertion = (0, _verification.containedAssertionFromStatement)(statement, context);
    if (containedAssertion !== null) {
        var statementString = statement.getString();
        specificContext.trace("Resolving the '".concat(statementString, "' statement as a contained assertion..."));
        var context1 = specificContext, containedAssertionVerified = containedAssertion.resolve(substitutions, context1);
        resolvedAsContainedAssertion = containedAssertionVerified; ///
        if (resolvedAsContainedAssertion) {
            specificContext.debug("...resolved the '".concat(statementString, "' statement as a contained assertion."));
        }
    }
    return resolvedAsContainedAssertion;
}
var resolveMixins = [
    resolveAsDefinedAssertion,
    resolveAsContainedAssertion
];
var _default = resolveMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvc3RhdGVtZW50L3Jlc29sdmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGRlZmluZWRBc3NlcnRpb25Gcm9tU3RhdGVtZW50LCBjb250YWluZWRBc3NlcnRpb25Gcm9tU3RhdGVtZW50IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy92ZXJpZmljYXRpb25cIjtcblxuZnVuY3Rpb24gcmVzb2x2ZUFzRGVmaW5lZEFzc2VydGlvbihzdGF0ZW1lbnQsIHN1YnN0aXR1dGlvbnMsIGdlbmVyYWxDb250ZXh0LCBzcGVjaWZpY0NvbnRleHQpIHtcbiAgbGV0IHJlc29sdmVkQXNEZWZpbmVkQXNzZXJ0aW9uID0gZmFsc2U7XG5cbiAgY29uc3QgY29udGV4dCA9IGdlbmVyYWxDb250ZXh0LCAvLy9cbiAgICAgICAgZGVmaW5lZEFzc2VydGlvbiA9IGRlZmluZWRBc3NlcnRpb25Gcm9tU3RhdGVtZW50KHN0YXRlbWVudCwgY29udGV4dCk7XG5cbiAgaWYgKGRlZmluZWRBc3NlcnRpb24gIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnRTdHJpbmcgPSBzdGF0ZW1lbnQuZ2V0U3RyaW5nKCk7XG5cbiAgICBzcGVjaWZpY0NvbnRleHQudHJhY2UoYFJlc29sdmluZyB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IGFzIGEgZGVmaW5lZCBhc3NlcnRpb24uLi5gKTtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBzcGVjaWZpY0NvbnRleHQsICAvLy9cbiAgICAgICAgICBkZWZpbmVkQXNzZXJ0aW9uVmVyaWZpZWQgPSBkZWZpbmVkQXNzZXJ0aW9uLnJlc29sdmUoc3Vic3RpdHV0aW9ucywgY29udGV4dCk7XG5cbiAgICByZXNvbHZlZEFzRGVmaW5lZEFzc2VydGlvbiA9IGRlZmluZWRBc3NlcnRpb25WZXJpZmllZDsgLy8vXG5cbiAgICBpZiAocmVzb2x2ZWRBc0RlZmluZWRBc3NlcnRpb24pIHtcbiAgICAgIHNwZWNpZmljQ29udGV4dC5kZWJ1ZyhgLi4ucmVzb2x2ZWQgdGhlICcke3N0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCBhcyBhIGRlZmluZWQgYXNzZXJ0aW9uLmApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXNvbHZlZEFzRGVmaW5lZEFzc2VydGlvbjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzQ29udGFpbmVkQXNzZXJ0aW9uKHN0YXRlbWVudCwgc3Vic3RpdHV0aW9ucywgZ2VuZXJhbENvbnRleHQsIHNwZWNpZmljQ29udGV4dCkge1xuICBsZXQgcmVzb2x2ZWRBc0NvbnRhaW5lZEFzc2VydGlvbiA9IGZhbHNlO1xuXG4gIGNvbnN0IGNvbnRleHQgPSBnZW5lcmFsQ29udGV4dCwgLy8vXG4gICAgICAgIGNvbnRhaW5lZEFzc2VydGlvbiA9IGNvbnRhaW5lZEFzc2VydGlvbkZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KTtcblxuICBpZiAoY29udGFpbmVkQXNzZXJ0aW9uICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3RhdGVtZW50U3RyaW5nID0gc3RhdGVtZW50LmdldFN0cmluZygpO1xuXG4gICAgc3BlY2lmaWNDb250ZXh0LnRyYWNlKGBSZXNvbHZpbmcgdGhlICcke3N0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCBhcyBhIGNvbnRhaW5lZCBhc3NlcnRpb24uLi5gKTtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBzcGVjaWZpY0NvbnRleHQsICAvLy9cbiAgICAgICAgICBjb250YWluZWRBc3NlcnRpb25WZXJpZmllZCA9IGNvbnRhaW5lZEFzc2VydGlvbi5yZXNvbHZlKHN1YnN0aXR1dGlvbnMsIGNvbnRleHQpO1xuXG4gICAgcmVzb2x2ZWRBc0NvbnRhaW5lZEFzc2VydGlvbiA9IGNvbnRhaW5lZEFzc2VydGlvblZlcmlmaWVkOyAvLy9cblxuICAgIGlmIChyZXNvbHZlZEFzQ29udGFpbmVkQXNzZXJ0aW9uKSB7XG4gICAgICBzcGVjaWZpY0NvbnRleHQuZGVidWcoYC4uLnJlc29sdmVkIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgYXMgYSBjb250YWluZWQgYXNzZXJ0aW9uLmApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXNvbHZlZEFzQ29udGFpbmVkQXNzZXJ0aW9uO1xufVxuXG5jb25zdCByZXNvbHZlTWl4aW5zID0gW1xuICByZXNvbHZlQXNEZWZpbmVkQXNzZXJ0aW9uLFxuICByZXNvbHZlQXNDb250YWluZWRBc3NlcnRpb25cbl07XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVNaXhpbnM7XG4iXSwibmFtZXMiOlsicmVzb2x2ZUFzRGVmaW5lZEFzc2VydGlvbiIsInN0YXRlbWVudCIsInN1YnN0aXR1dGlvbnMiLCJnZW5lcmFsQ29udGV4dCIsInNwZWNpZmljQ29udGV4dCIsInJlc29sdmVkQXNEZWZpbmVkQXNzZXJ0aW9uIiwiY29udGV4dCIsImRlZmluZWRBc3NlcnRpb24iLCJkZWZpbmVkQXNzZXJ0aW9uRnJvbVN0YXRlbWVudCIsInN0YXRlbWVudFN0cmluZyIsImdldFN0cmluZyIsInRyYWNlIiwiZGVmaW5lZEFzc2VydGlvblZlcmlmaWVkIiwicmVzb2x2ZSIsImRlYnVnIiwicmVzb2x2ZUFzQ29udGFpbmVkQXNzZXJ0aW9uIiwicmVzb2x2ZWRBc0NvbnRhaW5lZEFzc2VydGlvbiIsImNvbnRhaW5lZEFzc2VydGlvbiIsImNvbnRhaW5lZEFzc2VydGlvbkZyb21TdGF0ZW1lbnQiLCJjb250YWluZWRBc3NlcnRpb25WZXJpZmllZCIsInJlc29sdmVNaXhpbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQXlEQTs7O2VBQUE7Ozs0QkF2RCtFO0FBRS9FLFNBQVNBLDBCQUEwQkMsU0FBUyxFQUFFQyxhQUFhLEVBQUVDLGNBQWMsRUFBRUMsZUFBZTtJQUMxRixJQUFJQyw2QkFBNkI7SUFFakMsSUFBTUMsVUFBVUgsZ0JBQ1ZJLG1CQUFtQkMsSUFBQUEsMkNBQTZCLEVBQUNQLFdBQVdLO0lBRWxFLElBQUlDLHFCQUFxQixNQUFNO1FBQzdCLElBQU1FLGtCQUFrQlIsVUFBVVMsU0FBUztRQUUzQ04sZ0JBQWdCTyxLQUFLLENBQUMsQUFBQyxrQkFBaUMsT0FBaEJGLGlCQUFnQjtRQUV4RCxJQUFNSCxXQUFVRixpQkFDVlEsMkJBQTJCTCxpQkFBaUJNLE9BQU8sQ0FBQ1gsZUFBZUk7UUFFekVELDZCQUE2Qk8sMEJBQTBCLEdBQUc7UUFFMUQsSUFBSVAsNEJBQTRCO1lBQzlCRCxnQkFBZ0JVLEtBQUssQ0FBQyxBQUFDLG9CQUFtQyxPQUFoQkwsaUJBQWdCO1FBQzVEO0lBQ0Y7SUFFQSxPQUFPSjtBQUNUO0FBRUEsU0FBU1UsNEJBQTRCZCxTQUFTLEVBQUVDLGFBQWEsRUFBRUMsY0FBYyxFQUFFQyxlQUFlO0lBQzVGLElBQUlZLCtCQUErQjtJQUVuQyxJQUFNVixVQUFVSCxnQkFDVmMscUJBQXFCQyxJQUFBQSw2Q0FBK0IsRUFBQ2pCLFdBQVdLO0lBRXRFLElBQUlXLHVCQUF1QixNQUFNO1FBQy9CLElBQU1SLGtCQUFrQlIsVUFBVVMsU0FBUztRQUUzQ04sZ0JBQWdCTyxLQUFLLENBQUMsQUFBQyxrQkFBaUMsT0FBaEJGLGlCQUFnQjtRQUV4RCxJQUFNSCxXQUFVRixpQkFDVmUsNkJBQTZCRixtQkFBbUJKLE9BQU8sQ0FBQ1gsZUFBZUk7UUFFN0VVLCtCQUErQkcsNEJBQTRCLEdBQUc7UUFFOUQsSUFBSUgsOEJBQThCO1lBQ2hDWixnQkFBZ0JVLEtBQUssQ0FBQyxBQUFDLG9CQUFtQyxPQUFoQkwsaUJBQWdCO1FBQzVEO0lBQ0Y7SUFFQSxPQUFPTztBQUNUO0FBRUEsSUFBTUksZ0JBQWdCO0lBQ3BCcEI7SUFDQWU7Q0FDRDtJQUVELFdBQWVLIn0=