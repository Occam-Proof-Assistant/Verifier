"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../../combinator/bracketed"));
var _unification = require("../../utilities/unification");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyWithBracketedCombinator(statement, assignments, stated, context) {
    var unifiedWithBracketedCombinator;
    var statementString = statement.getString();
    context.trace("Unifying the '".concat(statementString, "' statement with the bracketed combinator..."));
    var bracketedCombinator = _bracketed.default.fromNothing(), combinator = bracketedCombinator, statementUnifiedWithCombinator = (0, _unification.unifyStatementWithCombinator)(statement, combinator, assignments, stated, context);
    unifiedWithBracketedCombinator = statementUnifiedWithCombinator;
    if (unifiedWithBracketedCombinator) {
        context.debug("...unified the '".concat(statementString, "' statement with the bracketed combinator."));
    }
    return unifiedWithBracketedCombinator;
}
function unifyWithCombinators(statement, assignments, stated, context) {
    var unifiedWithCombinators;
    var combinators = context.getCombinators();
    stated = true; ///
    assignments = null; ///
    unifiedWithCombinators = combinators.some(function(combinator) {
        var unifiedWithCombinator = unifyWithCombinator(statement, combinator, assignments, stated, context);
        if (unifiedWithCombinator) {
            return true;
        }
    });
    return unifiedWithCombinators;
}
var unifyMixins = [
    unifyWithBracketedCombinator,
    unifyWithCombinators
];
var _default = unifyMixins;
function unifyWithCombinator(statement, combinator, assignments, stated, context) {
    var unifiedWithCombinator;
    var statementString = statement.getString(), combinatorString = combinator.getString();
    context.trace("Unifying the '".concat(statementString, "' statement with the '").concat(combinatorString, "' combinator..."));
    var statementUnifiedWithCombinator = (0, _unification.unifyStatementWithCombinator)(statement, combinator, assignments, stated, context);
    unifiedWithCombinator = statementUnifiedWithCombinator; ///
    if (unifiedWithCombinator) {
        context.debug("...unified the '".concat(statementString, "' statement with the '").concat(combinatorString, "' combinator."));
    }
    return unifiedWithCombinator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvc3RhdGVtZW50L3VuaWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgQnJhY2tldGVkQ29tYmluYXRvciBmcm9tIFwiLi4vLi4vY29tYmluYXRvci9icmFja2V0ZWRcIjtcblxuaW1wb3J0IHsgdW5pZnlTdGF0ZW1lbnRXaXRoQ29tYmluYXRvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvdW5pZmljYXRpb25cIjtcblxuZnVuY3Rpb24gdW5pZnlXaXRoQnJhY2tldGVkQ29tYmluYXRvcihzdGF0ZW1lbnQsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGNvbnRleHQpIHtcbiAgbGV0IHVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvcjtcblxuICBjb25zdCBzdGF0ZW1lbnRTdHJpbmcgPSBzdGF0ZW1lbnQuZ2V0U3RyaW5nKCk7XG5cbiAgY29udGV4dC50cmFjZShgVW5pZnlpbmcgdGhlICcke3N0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCB3aXRoIHRoZSBicmFja2V0ZWQgY29tYmluYXRvci4uLmApO1xuXG4gIGNvbnN0IGJyYWNrZXRlZENvbWJpbmF0b3IgPSBCcmFja2V0ZWRDb21iaW5hdG9yLmZyb21Ob3RoaW5nKCksXG4gICAgICAgIGNvbWJpbmF0b3IgPSBicmFja2V0ZWRDb21iaW5hdG9yLCAvLy9cbiAgICAgICAgc3RhdGVtZW50VW5pZmllZFdpdGhDb21iaW5hdG9yID0gdW5pZnlTdGF0ZW1lbnRXaXRoQ29tYmluYXRvcihzdGF0ZW1lbnQsIGNvbWJpbmF0b3IsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGNvbnRleHQpO1xuXG4gIHVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvciA9IHN0YXRlbWVudFVuaWZpZWRXaXRoQ29tYmluYXRvcjtcblxuICBpZiAodW5pZmllZFdpdGhCcmFja2V0ZWRDb21iaW5hdG9yKSB7XG4gICAgY29udGV4dC5kZWJ1ZyhgLi4udW5pZmllZCB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IHdpdGggdGhlIGJyYWNrZXRlZCBjb21iaW5hdG9yLmApO1xuICB9XG5cbiAgcmV0dXJuIHVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvcjtcbn1cblxuZnVuY3Rpb24gdW5pZnlXaXRoQ29tYmluYXRvcnMoc3RhdGVtZW50LCBhc3NpZ25tZW50cywgc3RhdGVkLCBjb250ZXh0KSB7XG4gIGxldCB1bmlmaWVkV2l0aENvbWJpbmF0b3JzO1xuXG4gIGNvbnN0IGNvbWJpbmF0b3JzID0gY29udGV4dC5nZXRDb21iaW5hdG9ycygpO1xuXG4gIHN0YXRlZCA9IHRydWU7ICAvLy9cblxuICBhc3NpZ25tZW50cyA9IG51bGw7IC8vL1xuXG4gIHVuaWZpZWRXaXRoQ29tYmluYXRvcnMgPSBjb21iaW5hdG9ycy5zb21lKChjb21iaW5hdG9yKSA9PiB7XG4gICAgY29uc3QgdW5pZmllZFdpdGhDb21iaW5hdG9yID0gdW5pZnlXaXRoQ29tYmluYXRvcihzdGF0ZW1lbnQsIGNvbWJpbmF0b3IsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGNvbnRleHQpO1xuXG4gICAgaWYgKHVuaWZpZWRXaXRoQ29tYmluYXRvcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdW5pZmllZFdpdGhDb21iaW5hdG9ycztcbn1cblxuXG5jb25zdCB1bmlmeU1peGlucyA9IFtcbiAgdW5pZnlXaXRoQnJhY2tldGVkQ29tYmluYXRvcixcbiAgdW5pZnlXaXRoQ29tYmluYXRvcnNcbl07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaWZ5TWl4aW5zO1xuXG5mdW5jdGlvbiB1bmlmeVdpdGhDb21iaW5hdG9yKHN0YXRlbWVudCwgY29tYmluYXRvciwgYXNzaWdubWVudHMsIHN0YXRlZCwgY29udGV4dCkge1xuICBsZXQgdW5pZmllZFdpdGhDb21iaW5hdG9yO1xuXG4gIGNvbnN0IHN0YXRlbWVudFN0cmluZyA9IHN0YXRlbWVudC5nZXRTdHJpbmcoKSxcbiAgICAgICAgY29tYmluYXRvclN0cmluZyA9IGNvbWJpbmF0b3IuZ2V0U3RyaW5nKCk7XG5cbiAgY29udGV4dC50cmFjZShgVW5pZnlpbmcgdGhlICcke3N0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCB3aXRoIHRoZSAnJHtjb21iaW5hdG9yU3RyaW5nfScgY29tYmluYXRvci4uLmApO1xuXG4gIGNvbnN0IHN0YXRlbWVudFVuaWZpZWRXaXRoQ29tYmluYXRvciA9IHVuaWZ5U3RhdGVtZW50V2l0aENvbWJpbmF0b3Ioc3RhdGVtZW50LCBjb21iaW5hdG9yLCBhc3NpZ25tZW50cywgc3RhdGVkLCBjb250ZXh0KTtcblxuICB1bmlmaWVkV2l0aENvbWJpbmF0b3IgPSBzdGF0ZW1lbnRVbmlmaWVkV2l0aENvbWJpbmF0b3I7IC8vL1xuXG4gIGlmICh1bmlmaWVkV2l0aENvbWJpbmF0b3IpIHtcbiAgICBjb250ZXh0LmRlYnVnKGAuLi51bmlmaWVkIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgJyR7Y29tYmluYXRvclN0cmluZ30nIGNvbWJpbmF0b3IuYCk7XG4gIH1cblxuICByZXR1cm4gdW5pZmllZFdpdGhDb21iaW5hdG9yO1xufVxuIl0sIm5hbWVzIjpbInVuaWZ5V2l0aEJyYWNrZXRlZENvbWJpbmF0b3IiLCJzdGF0ZW1lbnQiLCJhc3NpZ25tZW50cyIsInN0YXRlZCIsImNvbnRleHQiLCJ1bmlmaWVkV2l0aEJyYWNrZXRlZENvbWJpbmF0b3IiLCJzdGF0ZW1lbnRTdHJpbmciLCJnZXRTdHJpbmciLCJ0cmFjZSIsImJyYWNrZXRlZENvbWJpbmF0b3IiLCJCcmFja2V0ZWRDb21iaW5hdG9yIiwiZnJvbU5vdGhpbmciLCJjb21iaW5hdG9yIiwic3RhdGVtZW50VW5pZmllZFdpdGhDb21iaW5hdG9yIiwidW5pZnlTdGF0ZW1lbnRXaXRoQ29tYmluYXRvciIsImRlYnVnIiwidW5pZnlXaXRoQ29tYmluYXRvcnMiLCJ1bmlmaWVkV2l0aENvbWJpbmF0b3JzIiwiY29tYmluYXRvcnMiLCJnZXRDb21iaW5hdG9ycyIsInNvbWUiLCJ1bmlmaWVkV2l0aENvbWJpbmF0b3IiLCJ1bmlmeVdpdGhDb21iaW5hdG9yIiwidW5pZnlNaXhpbnMiLCJjb21iaW5hdG9yU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFvREE7OztlQUFBOzs7Z0VBbERnQzsyQkFFYTs7Ozs7O0FBRTdDLFNBQVNBLDZCQUE2QkMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUMzRSxJQUFJQztJQUVKLElBQU1DLGtCQUFrQkwsVUFBVU0sU0FBUztJQUUzQ0gsUUFBUUksS0FBSyxDQUFDLEFBQUMsaUJBQWdDLE9BQWhCRixpQkFBZ0I7SUFFL0MsSUFBTUcsc0JBQXNCQyxrQkFBbUIsQ0FBQ0MsV0FBVyxJQUNyREMsYUFBYUgscUJBQ2JJLGlDQUFpQ0MsSUFBQUEseUNBQTRCLEVBQUNiLFdBQVdXLFlBQVlWLGFBQWFDLFFBQVFDO0lBRWhIQyxpQ0FBaUNRO0lBRWpDLElBQUlSLGdDQUFnQztRQUNsQ0QsUUFBUVcsS0FBSyxDQUFDLEFBQUMsbUJBQWtDLE9BQWhCVCxpQkFBZ0I7SUFDbkQ7SUFFQSxPQUFPRDtBQUNUO0FBRUEsU0FBU1cscUJBQXFCZixTQUFTLEVBQUVDLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ25FLElBQUlhO0lBRUosSUFBTUMsY0FBY2QsUUFBUWUsY0FBYztJQUUxQ2hCLFNBQVMsTUFBTyxHQUFHO0lBRW5CRCxjQUFjLE1BQU0sR0FBRztJQUV2QmUseUJBQXlCQyxZQUFZRSxJQUFJLENBQUMsU0FBQ1I7UUFDekMsSUFBTVMsd0JBQXdCQyxvQkFBb0JyQixXQUFXVyxZQUFZVixhQUFhQyxRQUFRQztRQUU5RixJQUFJaUIsdUJBQXVCO1lBQ3pCLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBT0o7QUFDVDtBQUdBLElBQU1NLGNBQWM7SUFDbEJ2QjtJQUNBZ0I7Q0FDRDtJQUVELFdBQWVPO0FBRWYsU0FBU0Qsb0JBQW9CckIsU0FBUyxFQUFFVyxVQUFVLEVBQUVWLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQzlFLElBQUlpQjtJQUVKLElBQU1mLGtCQUFrQkwsVUFBVU0sU0FBUyxJQUNyQ2lCLG1CQUFtQlosV0FBV0wsU0FBUztJQUU3Q0gsUUFBUUksS0FBSyxDQUFDLEFBQUMsaUJBQXdEZ0IsT0FBeENsQixpQkFBZ0IsMEJBQXlDLE9BQWpCa0Isa0JBQWlCO0lBRXhGLElBQU1YLGlDQUFpQ0MsSUFBQUEseUNBQTRCLEVBQUNiLFdBQVdXLFlBQVlWLGFBQWFDLFFBQVFDO0lBRWhIaUIsd0JBQXdCUixnQ0FBZ0MsR0FBRztJQUUzRCxJQUFJUSx1QkFBdUI7UUFDekJqQixRQUFRVyxLQUFLLENBQUMsQUFBQyxtQkFBMERTLE9BQXhDbEIsaUJBQWdCLDBCQUF5QyxPQUFqQmtCLGtCQUFpQjtJQUM1RjtJQUVBLE9BQU9IO0FBQ1QifQ==