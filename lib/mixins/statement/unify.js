"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _necessary = require("necessary");
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../../combinator/bracketed"));
var _statementWithCombinator = /*#__PURE__*/ _interop_require_default(require("../../unifier/statementWithCombinator"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var reverse = _necessary.arrayUtilities.reverse;
function unifyWithBracketedCombinator(statement, assignments, stated, localContext) {
    var unifiedWithBracketedCombinator;
    var statementNode = statement.getNode(), statementString = statement.getString(), bracketedCombinator = _bracketed.default.fromNothing(), bracketedCombinatorStatementNode = bracketedCombinator.getStatementNode(), combinatorStatementNode = bracketedCombinatorStatementNode; ///
    localContext.trace("Unifying the '".concat(statementString, "' statement with the bracketed combinator..."));
    unifiedWithBracketedCombinator = _statementWithCombinator.default.unify(statementNode, combinatorStatementNode, assignments, stated, localContext);
    if (unifiedWithBracketedCombinator) {
        localContext.debug("...unified the '".concat(statementString, "' statement with the bracketed combinator."));
    }
    return unifiedWithBracketedCombinator;
}
function unifyWithCombinators(statement, assignments, stated, localContext) {
    var unifiedWithCombinators;
    var combinators = localContext.getCombinators();
    assignments = null; ///
    stated = true; ///
    unifiedWithCombinators = combinators.some(function(combinator) {
        var unifiedWithCombinator = unifyStatementWithCombinator(statement, combinator, assignments, stated, localContext);
        if (unifiedWithCombinator) {
            return true;
        }
    });
    return unifiedWithCombinators;
}
function unifyWithProofSteps(statement, assignments, stated, localContext) {
    var unifiedWithProofSteps;
    var proofSteps = localContext.getProofSteps();
    proofSteps = reverse(proofSteps); ///
    unifiedWithProofSteps = proofSteps.some(function(proofStep) {
        var statementUnified = proofStep.unifyStatement(statement, localContext);
        if (statementUnified) {
            return true;
        }
    });
    return unifiedWithProofSteps;
}
var unifyMixins = [
    unifyWithBracketedCombinator,
    unifyWithCombinators,
    unifyWithProofSteps
];
var _default = unifyMixins;
function unifyStatementWithCombinator(statement, combinator, assignments, stated, localContext) {
    var unifiedWithCombinator;
    var statementNode = statement.getNode(), statementString = statement.getString(), combinatorString = combinator.getString(), combinatorStatementNode = combinator.getStatementNode();
    localContext.trace("Unifying the '".concat(statementString, "' statement with the '").concat(combinatorString, "' combinator..."));
    unifiedWithCombinator = _statementWithCombinator.default.unify(statementNode, combinatorStatementNode, assignments, stated, localContext);
    if (unifiedWithCombinator) {
        localContext.debug("...unified the '".concat(statementString, "' statement with the '").concat(combinatorString, "' combinator."));
    }
    return unifiedWithCombinator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvc3RhdGVtZW50L3VuaWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IEJyYWNrZXRlZENvbWJpbmF0b3IgZnJvbSBcIi4uLy4uL2NvbWJpbmF0b3IvYnJhY2tldGVkXCI7XG5pbXBvcnQgc3RhdGVtZW50V2l0aENvbWJpbmF0b3JVbmlmaWVyIGZyb20gXCIuLi8uLi91bmlmaWVyL3N0YXRlbWVudFdpdGhDb21iaW5hdG9yXCI7XG5cbmNvbnN0IHsgcmV2ZXJzZSB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmZ1bmN0aW9uIHVuaWZ5V2l0aEJyYWNrZXRlZENvbWJpbmF0b3Ioc3RhdGVtZW50LCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IHVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvcjtcblxuICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50LmdldE5vZGUoKSxcbiAgICAgICAgc3RhdGVtZW50U3RyaW5nID0gc3RhdGVtZW50LmdldFN0cmluZygpLFxuICAgICAgICBicmFja2V0ZWRDb21iaW5hdG9yID0gQnJhY2tldGVkQ29tYmluYXRvci5mcm9tTm90aGluZygpLFxuICAgICAgICBicmFja2V0ZWRDb21iaW5hdG9yU3RhdGVtZW50Tm9kZSA9IGJyYWNrZXRlZENvbWJpbmF0b3IuZ2V0U3RhdGVtZW50Tm9kZSgpLFxuICAgICAgICBjb21iaW5hdG9yU3RhdGVtZW50Tm9kZSA9IGJyYWNrZXRlZENvbWJpbmF0b3JTdGF0ZW1lbnROb2RlOyAvLy9cblxuICBsb2NhbENvbnRleHQudHJhY2UoYFVuaWZ5aW5nIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgYnJhY2tldGVkIGNvbWJpbmF0b3IuLi5gKTtcblxuICB1bmlmaWVkV2l0aEJyYWNrZXRlZENvbWJpbmF0b3IgPSBzdGF0ZW1lbnRXaXRoQ29tYmluYXRvclVuaWZpZXIudW5pZnkoc3RhdGVtZW50Tm9kZSwgY29tYmluYXRvclN0YXRlbWVudE5vZGUsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGxvY2FsQ29udGV4dCk7XG5cbiAgaWYgKHVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvcikge1xuICAgIGxvY2FsQ29udGV4dC5kZWJ1ZyhgLi4udW5pZmllZCB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IHdpdGggdGhlIGJyYWNrZXRlZCBjb21iaW5hdG9yLmApO1xuICB9XG5cbiAgcmV0dXJuIHVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvcjtcbn1cblxuZnVuY3Rpb24gdW5pZnlXaXRoQ29tYmluYXRvcnMoc3RhdGVtZW50LCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IHVuaWZpZWRXaXRoQ29tYmluYXRvcnM7XG5cbiAgY29uc3QgY29tYmluYXRvcnMgPSBsb2NhbENvbnRleHQuZ2V0Q29tYmluYXRvcnMoKTtcblxuICBhc3NpZ25tZW50cyA9IG51bGw7IC8vL1xuXG4gIHN0YXRlZCA9IHRydWU7ICAvLy9cblxuICB1bmlmaWVkV2l0aENvbWJpbmF0b3JzID0gY29tYmluYXRvcnMuc29tZSgoY29tYmluYXRvcikgPT4ge1xuICAgIGNvbnN0IHVuaWZpZWRXaXRoQ29tYmluYXRvciA9IHVuaWZ5U3RhdGVtZW50V2l0aENvbWJpbmF0b3Ioc3RhdGVtZW50LCBjb21iaW5hdG9yLCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpO1xuXG4gICAgaWYgKHVuaWZpZWRXaXRoQ29tYmluYXRvcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdW5pZmllZFdpdGhDb21iaW5hdG9ycztcbn1cblxuZnVuY3Rpb24gdW5pZnlXaXRoUHJvb2ZTdGVwcyhzdGF0ZW1lbnQsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGxvY2FsQ29udGV4dCkge1xuICBsZXQgdW5pZmllZFdpdGhQcm9vZlN0ZXBzO1xuXG4gIGxldCBwcm9vZlN0ZXBzID0gbG9jYWxDb250ZXh0LmdldFByb29mU3RlcHMoKTtcblxuICBwcm9vZlN0ZXBzID0gcmV2ZXJzZShwcm9vZlN0ZXBzKTsgLy8vXG5cbiAgdW5pZmllZFdpdGhQcm9vZlN0ZXBzID0gcHJvb2ZTdGVwcy5zb21lKChwcm9vZlN0ZXApID0+IHtcbiAgICBjb25zdCBzdGF0ZW1lbnRVbmlmaWVkID0gcHJvb2ZTdGVwLnVuaWZ5U3RhdGVtZW50KHN0YXRlbWVudCwgbG9jYWxDb250ZXh0KTtcblxuICAgIGlmIChzdGF0ZW1lbnRVbmlmaWVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB1bmlmaWVkV2l0aFByb29mU3RlcHM7XG59XG5cbmNvbnN0IHVuaWZ5TWl4aW5zID0gW1xuICB1bmlmeVdpdGhCcmFja2V0ZWRDb21iaW5hdG9yLFxuICB1bmlmeVdpdGhDb21iaW5hdG9ycyxcbiAgdW5pZnlXaXRoUHJvb2ZTdGVwc1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pZnlNaXhpbnM7XG5cbmZ1bmN0aW9uIHVuaWZ5U3RhdGVtZW50V2l0aENvbWJpbmF0b3Ioc3RhdGVtZW50LCBjb21iaW5hdG9yLCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IHVuaWZpZWRXaXRoQ29tYmluYXRvcjtcblxuICBjb25zdCBzdGF0ZW1lbnROb2RlID0gc3RhdGVtZW50LmdldE5vZGUoKSxcbiAgICAgICAgc3RhdGVtZW50U3RyaW5nID0gc3RhdGVtZW50LmdldFN0cmluZygpLFxuICAgICAgICBjb21iaW5hdG9yU3RyaW5nID0gY29tYmluYXRvci5nZXRTdHJpbmcoKSxcbiAgICAgICAgY29tYmluYXRvclN0YXRlbWVudE5vZGUgPSBjb21iaW5hdG9yLmdldFN0YXRlbWVudE5vZGUoKTtcblxuICBsb2NhbENvbnRleHQudHJhY2UoYFVuaWZ5aW5nIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgJyR7Y29tYmluYXRvclN0cmluZ30nIGNvbWJpbmF0b3IuLi5gKTtcblxuICB1bmlmaWVkV2l0aENvbWJpbmF0b3IgPSBzdGF0ZW1lbnRXaXRoQ29tYmluYXRvclVuaWZpZXIudW5pZnkoc3RhdGVtZW50Tm9kZSwgY29tYmluYXRvclN0YXRlbWVudE5vZGUsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGxvY2FsQ29udGV4dCk7XG5cbiAgaWYgKHVuaWZpZWRXaXRoQ29tYmluYXRvcikge1xuICAgIGxvY2FsQ29udGV4dC5kZWJ1ZyhgLi4udW5pZmllZCB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IHdpdGggdGhlICcke2NvbWJpbmF0b3JTdHJpbmd9JyBjb21iaW5hdG9yLmApO1xuICB9XG5cbiAgcmV0dXJuIHVuaWZpZWRXaXRoQ29tYmluYXRvcjtcbn1cbiJdLCJuYW1lcyI6WyJyZXZlcnNlIiwiYXJyYXlVdGlsaXRpZXMiLCJ1bmlmeVdpdGhCcmFja2V0ZWRDb21iaW5hdG9yIiwic3RhdGVtZW50IiwiYXNzaWdubWVudHMiLCJzdGF0ZWQiLCJsb2NhbENvbnRleHQiLCJ1bmlmaWVkV2l0aEJyYWNrZXRlZENvbWJpbmF0b3IiLCJzdGF0ZW1lbnROb2RlIiwiZ2V0Tm9kZSIsInN0YXRlbWVudFN0cmluZyIsImdldFN0cmluZyIsImJyYWNrZXRlZENvbWJpbmF0b3IiLCJCcmFja2V0ZWRDb21iaW5hdG9yIiwiZnJvbU5vdGhpbmciLCJicmFja2V0ZWRDb21iaW5hdG9yU3RhdGVtZW50Tm9kZSIsImdldFN0YXRlbWVudE5vZGUiLCJjb21iaW5hdG9yU3RhdGVtZW50Tm9kZSIsInRyYWNlIiwic3RhdGVtZW50V2l0aENvbWJpbmF0b3JVbmlmaWVyIiwidW5pZnkiLCJkZWJ1ZyIsInVuaWZ5V2l0aENvbWJpbmF0b3JzIiwidW5pZmllZFdpdGhDb21iaW5hdG9ycyIsImNvbWJpbmF0b3JzIiwiZ2V0Q29tYmluYXRvcnMiLCJzb21lIiwiY29tYmluYXRvciIsInVuaWZpZWRXaXRoQ29tYmluYXRvciIsInVuaWZ5U3RhdGVtZW50V2l0aENvbWJpbmF0b3IiLCJ1bmlmeVdpdGhQcm9vZlN0ZXBzIiwidW5pZmllZFdpdGhQcm9vZlN0ZXBzIiwicHJvb2ZTdGVwcyIsImdldFByb29mU3RlcHMiLCJwcm9vZlN0ZXAiLCJzdGF0ZW1lbnRVbmlmaWVkIiwidW5pZnlTdGF0ZW1lbnQiLCJ1bmlmeU1peGlucyIsImNvbWJpbmF0b3JTdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQXlFQTs7O2VBQUE7Ozt5QkF2RStCO2dFQUVDOzhFQUNXOzs7Ozs7QUFFM0MsSUFBTSxBQUFFQSxVQUFZQyx5QkFBYyxDQUExQkQ7QUFFUixTQUFTRSw2QkFBNkJDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLFlBQVk7SUFDaEYsSUFBSUM7SUFFSixJQUFNQyxnQkFBZ0JMLFVBQVVNLE9BQU8sSUFDakNDLGtCQUFrQlAsVUFBVVEsU0FBUyxJQUNyQ0Msc0JBQXNCQyxrQkFBbUIsQ0FBQ0MsV0FBVyxJQUNyREMsbUNBQW1DSCxvQkFBb0JJLGdCQUFnQixJQUN2RUMsMEJBQTBCRixrQ0FBa0MsR0FBRztJQUVyRVQsYUFBYVksS0FBSyxDQUFDLEFBQUMsaUJBQWdDLE9BQWhCUixpQkFBZ0I7SUFFcERILGlDQUFpQ1ksZ0NBQThCLENBQUNDLEtBQUssQ0FBQ1osZUFBZVMseUJBQXlCYixhQUFhQyxRQUFRQztJQUVuSSxJQUFJQyxnQ0FBZ0M7UUFDbENELGFBQWFlLEtBQUssQ0FBQyxBQUFDLG1CQUFrQyxPQUFoQlgsaUJBQWdCO0lBQ3hEO0lBRUEsT0FBT0g7QUFDVDtBQUVBLFNBQVNlLHFCQUFxQm5CLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLFlBQVk7SUFDeEUsSUFBSWlCO0lBRUosSUFBTUMsY0FBY2xCLGFBQWFtQixjQUFjO0lBRS9DckIsY0FBYyxNQUFNLEdBQUc7SUFFdkJDLFNBQVMsTUFBTyxHQUFHO0lBRW5Ca0IseUJBQXlCQyxZQUFZRSxJQUFJLENBQUMsU0FBQ0M7UUFDekMsSUFBTUMsd0JBQXdCQyw2QkFBNkIxQixXQUFXd0IsWUFBWXZCLGFBQWFDLFFBQVFDO1FBRXZHLElBQUlzQix1QkFBdUI7WUFDekIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPTDtBQUNUO0FBRUEsU0FBU08sb0JBQW9CM0IsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsWUFBWTtJQUN2RSxJQUFJeUI7SUFFSixJQUFJQyxhQUFhMUIsYUFBYTJCLGFBQWE7SUFFM0NELGFBQWFoQyxRQUFRZ0MsYUFBYSxHQUFHO0lBRXJDRCx3QkFBd0JDLFdBQVdOLElBQUksQ0FBQyxTQUFDUTtRQUN2QyxJQUFNQyxtQkFBbUJELFVBQVVFLGNBQWMsQ0FBQ2pDLFdBQVdHO1FBRTdELElBQUk2QixrQkFBa0I7WUFDcEIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPSjtBQUNUO0FBRUEsSUFBTU0sY0FBYztJQUNsQm5DO0lBQ0FvQjtJQUNBUTtDQUNEO0lBRUQsV0FBZU87QUFFZixTQUFTUiw2QkFBNkIxQixTQUFTLEVBQUV3QixVQUFVLEVBQUV2QixXQUFXLEVBQUVDLE1BQU0sRUFBRUMsWUFBWTtJQUM1RixJQUFJc0I7SUFFSixJQUFNcEIsZ0JBQWdCTCxVQUFVTSxPQUFPLElBQ2pDQyxrQkFBa0JQLFVBQVVRLFNBQVMsSUFDckMyQixtQkFBbUJYLFdBQVdoQixTQUFTLElBQ3ZDTSwwQkFBMEJVLFdBQVdYLGdCQUFnQjtJQUUzRFYsYUFBYVksS0FBSyxDQUFDLEFBQUMsaUJBQXdEb0IsT0FBeEM1QixpQkFBZ0IsMEJBQXlDLE9BQWpCNEIsa0JBQWlCO0lBRTdGVix3QkFBd0JULGdDQUE4QixDQUFDQyxLQUFLLENBQUNaLGVBQWVTLHlCQUF5QmIsYUFBYUMsUUFBUUM7SUFFMUgsSUFBSXNCLHVCQUF1QjtRQUN6QnRCLGFBQWFlLEtBQUssQ0FBQyxBQUFDLG1CQUEwRGlCLE9BQXhDNUIsaUJBQWdCLDBCQUF5QyxPQUFqQjRCLGtCQUFpQjtJQUNqRztJQUVBLE9BQU9WO0FBQ1QifQ==