"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../../ocmbinator/bracketed"));
var _statementWithCombinator = /*#__PURE__*/ _interop_require_default(require("../../unifier/statementWithCombinator"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyWithBracketedCombinator(statement, assignments, stated, localContext) {
    var unifiedWithBracketedCombinator;
    var statementNode = statement.getNode(), statementString = statement.getString(), bracketedCombinator = _bracketed.default.fromNothing(), bracketedCombinatorStatementNode = bracketedCombinator.getStatementNode(), combinatorStatementNode = bracketedCombinatorStatementNode; ///
    localContext.trace("Unifying the '".concat(statementString, "' statement with the bracketed combinator..."));
    unifiedWithBracketedCombinator = _statementWithCombinator.default.unify(statementNode, combinatorStatementNode, assignments, stated, localContext);
    if (unifiedWithBracketedCombinator) {
        localContext.debug("...unified the '".concat(statementString, "' statement with the bracketed combinator."));
    }
    return unifiedWithBracketedCombinator;
}
function unifyWithCombinators(statement, assignments, stated, localContext) {
    var unifiedWithCombinators;
    var combinators = localContext.getCombinators();
    assignments = null; ///
    stated = true; ///
    unifiedWithCombinators = combinators.some(function(combinator) {
        var unifiedWithCombinator = unifyStatementWithCombinator(statement, combinator, assignments, stated, localContext);
        if (unifiedWithCombinator) {
            return true;
        }
    });
    return unifiedWithCombinators;
}
var unifyMixins = [
    unifyWithBracketedCombinator,
    unifyWithCombinators
];
var _default = unifyMixins;
function unifyStatementWithCombinator(statement, combinator, assignments, stated, localContext) {
    var unifiedWithCombinator;
    var statementNode = statement.getNode(), statementString = statement.getString(), combinatorString = combinator.getString(), combinatorStatementNode = combinator.getStatementNode();
    localContext.trace("Unifying the '".concat(statementString, "' statement with the '").concat(combinatorString, "' combinator..."));
    unifiedWithCombinator = _statementWithCombinator.default.unify(statementNode, combinatorStatementNode, assignments, stated, localContext);
    if (unifiedWithCombinator) {
        localContext.debug("...unified the '".concat(statementString, "' statement with the '").concat(combinatorString, "' combinator."));
    }
    return unifiedWithCombinator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvc3RhdGVtZW50L3VuaWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgQnJhY2tldGVkQ29tYmluYXRvciBmcm9tIFwiLi4vLi4vb2NtYmluYXRvci9icmFja2V0ZWRcIjtcbmltcG9ydCBzdGF0ZW1lbnRXaXRoQ29tYmluYXRvclVuaWZpZXIgZnJvbSBcIi4uLy4uL3VuaWZpZXIvc3RhdGVtZW50V2l0aENvbWJpbmF0b3JcIjtcblxuZnVuY3Rpb24gdW5pZnlXaXRoQnJhY2tldGVkQ29tYmluYXRvcihzdGF0ZW1lbnQsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGxvY2FsQ29udGV4dCkge1xuICBsZXQgdW5pZmllZFdpdGhCcmFja2V0ZWRDb21iaW5hdG9yO1xuXG4gIGNvbnN0IHN0YXRlbWVudE5vZGUgPSBzdGF0ZW1lbnQuZ2V0Tm9kZSgpLFxuICAgICAgICBzdGF0ZW1lbnRTdHJpbmcgPSBzdGF0ZW1lbnQuZ2V0U3RyaW5nKCksXG4gICAgICAgIGJyYWNrZXRlZENvbWJpbmF0b3IgPSBCcmFja2V0ZWRDb21iaW5hdG9yLmZyb21Ob3RoaW5nKCksXG4gICAgICAgIGJyYWNrZXRlZENvbWJpbmF0b3JTdGF0ZW1lbnROb2RlID0gYnJhY2tldGVkQ29tYmluYXRvci5nZXRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgIGNvbWJpbmF0b3JTdGF0ZW1lbnROb2RlID0gYnJhY2tldGVkQ29tYmluYXRvclN0YXRlbWVudE5vZGU7IC8vL1xuXG4gIGxvY2FsQ29udGV4dC50cmFjZShgVW5pZnlpbmcgdGhlICcke3N0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCB3aXRoIHRoZSBicmFja2V0ZWQgY29tYmluYXRvci4uLmApO1xuXG4gIHVuaWZpZWRXaXRoQnJhY2tldGVkQ29tYmluYXRvciA9IHN0YXRlbWVudFdpdGhDb21iaW5hdG9yVW5pZmllci51bmlmeShzdGF0ZW1lbnROb2RlLCBjb21iaW5hdG9yU3RhdGVtZW50Tm9kZSwgYXNzaWdubWVudHMsIHN0YXRlZCwgbG9jYWxDb250ZXh0KTtcblxuICBpZiAodW5pZmllZFdpdGhCcmFja2V0ZWRDb21iaW5hdG9yKSB7XG4gICAgbG9jYWxDb250ZXh0LmRlYnVnKGAuLi51bmlmaWVkIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgYnJhY2tldGVkIGNvbWJpbmF0b3IuYCk7XG4gIH1cblxuICByZXR1cm4gdW5pZmllZFdpdGhCcmFja2V0ZWRDb21iaW5hdG9yO1xufVxuXG5mdW5jdGlvbiB1bmlmeVdpdGhDb21iaW5hdG9ycyhzdGF0ZW1lbnQsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGxvY2FsQ29udGV4dCkge1xuICBsZXQgdW5pZmllZFdpdGhDb21iaW5hdG9ycztcblxuICBjb25zdCBjb21iaW5hdG9ycyA9IGxvY2FsQ29udGV4dC5nZXRDb21iaW5hdG9ycygpO1xuXG4gIGFzc2lnbm1lbnRzID0gbnVsbDsgLy8vXG5cbiAgc3RhdGVkID0gdHJ1ZTsgIC8vL1xuXG4gIHVuaWZpZWRXaXRoQ29tYmluYXRvcnMgPSBjb21iaW5hdG9ycy5zb21lKChjb21iaW5hdG9yKSA9PiB7XG4gICAgY29uc3QgdW5pZmllZFdpdGhDb21iaW5hdG9yID0gdW5pZnlTdGF0ZW1lbnRXaXRoQ29tYmluYXRvcihzdGF0ZW1lbnQsIGNvbWJpbmF0b3IsIGFzc2lnbm1lbnRzLCBzdGF0ZWQsIGxvY2FsQ29udGV4dCk7XG5cbiAgICBpZiAodW5pZmllZFdpdGhDb21iaW5hdG9yKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB1bmlmaWVkV2l0aENvbWJpbmF0b3JzO1xufVxuXG5jb25zdCB1bmlmeU1peGlucyA9IFtcbiAgdW5pZnlXaXRoQnJhY2tldGVkQ29tYmluYXRvcixcbiAgdW5pZnlXaXRoQ29tYmluYXRvcnNcbl07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaWZ5TWl4aW5zO1xuXG5mdW5jdGlvbiB1bmlmeVN0YXRlbWVudFdpdGhDb21iaW5hdG9yKHN0YXRlbWVudCwgY29tYmluYXRvciwgYXNzaWdubWVudHMsIHN0YXRlZCwgbG9jYWxDb250ZXh0KSB7XG4gIGxldCB1bmlmaWVkV2l0aENvbWJpbmF0b3I7XG5cbiAgY29uc3Qgc3RhdGVtZW50Tm9kZSA9IHN0YXRlbWVudC5nZXROb2RlKCksXG4gICAgICAgIHN0YXRlbWVudFN0cmluZyA9IHN0YXRlbWVudC5nZXRTdHJpbmcoKSxcbiAgICAgICAgY29tYmluYXRvclN0cmluZyA9IGNvbWJpbmF0b3IuZ2V0U3RyaW5nKCksXG4gICAgICAgIGNvbWJpbmF0b3JTdGF0ZW1lbnROb2RlID0gY29tYmluYXRvci5nZXRTdGF0ZW1lbnROb2RlKCk7XG5cbiAgbG9jYWxDb250ZXh0LnRyYWNlKGBVbmlmeWluZyB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IHdpdGggdGhlICcke2NvbWJpbmF0b3JTdHJpbmd9JyBjb21iaW5hdG9yLi4uYCk7XG5cbiAgdW5pZmllZFdpdGhDb21iaW5hdG9yID0gc3RhdGVtZW50V2l0aENvbWJpbmF0b3JVbmlmaWVyLnVuaWZ5KHN0YXRlbWVudE5vZGUsIGNvbWJpbmF0b3JTdGF0ZW1lbnROb2RlLCBhc3NpZ25tZW50cywgc3RhdGVkLCBsb2NhbENvbnRleHQpO1xuXG4gIGlmICh1bmlmaWVkV2l0aENvbWJpbmF0b3IpIHtcbiAgICBsb2NhbENvbnRleHQuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3N0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCB3aXRoIHRoZSAnJHtjb21iaW5hdG9yU3RyaW5nfScgY29tYmluYXRvci5gKTtcbiAgfVxuXG4gIHJldHVybiB1bmlmaWVkV2l0aENvbWJpbmF0b3I7XG59XG4iXSwibmFtZXMiOlsidW5pZnlXaXRoQnJhY2tldGVkQ29tYmluYXRvciIsInN0YXRlbWVudCIsImFzc2lnbm1lbnRzIiwic3RhdGVkIiwibG9jYWxDb250ZXh0IiwidW5pZmllZFdpdGhCcmFja2V0ZWRDb21iaW5hdG9yIiwic3RhdGVtZW50Tm9kZSIsImdldE5vZGUiLCJzdGF0ZW1lbnRTdHJpbmciLCJnZXRTdHJpbmciLCJicmFja2V0ZWRDb21iaW5hdG9yIiwiQnJhY2tldGVkQ29tYmluYXRvciIsImZyb21Ob3RoaW5nIiwiYnJhY2tldGVkQ29tYmluYXRvclN0YXRlbWVudE5vZGUiLCJnZXRTdGF0ZW1lbnROb2RlIiwiY29tYmluYXRvclN0YXRlbWVudE5vZGUiLCJ0cmFjZSIsInN0YXRlbWVudFdpdGhDb21iaW5hdG9yVW5pZmllciIsInVuaWZ5IiwiZGVidWciLCJ1bmlmeVdpdGhDb21iaW5hdG9ycyIsInVuaWZpZWRXaXRoQ29tYmluYXRvcnMiLCJjb21iaW5hdG9ycyIsImdldENvbWJpbmF0b3JzIiwic29tZSIsImNvbWJpbmF0b3IiLCJ1bmlmaWVkV2l0aENvbWJpbmF0b3IiLCJ1bmlmeVN0YXRlbWVudFdpdGhDb21iaW5hdG9yIiwidW5pZnlNaXhpbnMiLCJjb21iaW5hdG9yU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFrREE7OztlQUFBOzs7Z0VBaERnQzs4RUFDVzs7Ozs7O0FBRTNDLFNBQVNBLDZCQUE2QkMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsWUFBWTtJQUNoRixJQUFJQztJQUVKLElBQU1DLGdCQUFnQkwsVUFBVU0sT0FBTyxJQUNqQ0Msa0JBQWtCUCxVQUFVUSxTQUFTLElBQ3JDQyxzQkFBc0JDLGtCQUFtQixDQUFDQyxXQUFXLElBQ3JEQyxtQ0FBbUNILG9CQUFvQkksZ0JBQWdCLElBQ3ZFQywwQkFBMEJGLGtDQUFrQyxHQUFHO0lBRXJFVCxhQUFhWSxLQUFLLENBQUMsQUFBQyxpQkFBZ0MsT0FBaEJSLGlCQUFnQjtJQUVwREgsaUNBQWlDWSxnQ0FBOEIsQ0FBQ0MsS0FBSyxDQUFDWixlQUFlUyx5QkFBeUJiLGFBQWFDLFFBQVFDO0lBRW5JLElBQUlDLGdDQUFnQztRQUNsQ0QsYUFBYWUsS0FBSyxDQUFDLEFBQUMsbUJBQWtDLE9BQWhCWCxpQkFBZ0I7SUFDeEQ7SUFFQSxPQUFPSDtBQUNUO0FBRUEsU0FBU2UscUJBQXFCbkIsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsWUFBWTtJQUN4RSxJQUFJaUI7SUFFSixJQUFNQyxjQUFjbEIsYUFBYW1CLGNBQWM7SUFFL0NyQixjQUFjLE1BQU0sR0FBRztJQUV2QkMsU0FBUyxNQUFPLEdBQUc7SUFFbkJrQix5QkFBeUJDLFlBQVlFLElBQUksQ0FBQyxTQUFDQztRQUN6QyxJQUFNQyx3QkFBd0JDLDZCQUE2QjFCLFdBQVd3QixZQUFZdkIsYUFBYUMsUUFBUUM7UUFFdkcsSUFBSXNCLHVCQUF1QjtZQUN6QixPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU9MO0FBQ1Q7QUFFQSxJQUFNTyxjQUFjO0lBQ2xCNUI7SUFDQW9CO0NBQ0Q7SUFFRCxXQUFlUTtBQUVmLFNBQVNELDZCQUE2QjFCLFNBQVMsRUFBRXdCLFVBQVUsRUFBRXZCLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxZQUFZO0lBQzVGLElBQUlzQjtJQUVKLElBQU1wQixnQkFBZ0JMLFVBQVVNLE9BQU8sSUFDakNDLGtCQUFrQlAsVUFBVVEsU0FBUyxJQUNyQ29CLG1CQUFtQkosV0FBV2hCLFNBQVMsSUFDdkNNLDBCQUEwQlUsV0FBV1gsZ0JBQWdCO0lBRTNEVixhQUFhWSxLQUFLLENBQUMsQUFBQyxpQkFBd0RhLE9BQXhDckIsaUJBQWdCLDBCQUF5QyxPQUFqQnFCLGtCQUFpQjtJQUU3Rkgsd0JBQXdCVCxnQ0FBOEIsQ0FBQ0MsS0FBSyxDQUFDWixlQUFlUyx5QkFBeUJiLGFBQWFDLFFBQVFDO0lBRTFILElBQUlzQix1QkFBdUI7UUFDekJ0QixhQUFhZSxLQUFLLENBQUMsQUFBQyxtQkFBMERVLE9BQXhDckIsaUJBQWdCLDBCQUF5QyxPQUFqQnFCLGtCQUFpQjtJQUNqRztJQUVBLE9BQU9IO0FBQ1QifQ==