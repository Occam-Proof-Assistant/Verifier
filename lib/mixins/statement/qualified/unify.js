"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _statement = /*#__PURE__*/ _interop_require_default(require("../../../substitution/statement"));
var _string = require("../../../utilities/string");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyAWithRule(qualifiedStatement, substitutions, context) {
    var unifiedWithRule = false;
    var reference = qualifiedStatement.getReference(), rule = context.findRuleByReference(reference);
    if (rule !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        context.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' rule..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = rule.unifyStatement(statement, context);
        unifiedWithRule = statementUnified; ///
        if (unifiedWithRule) {
            context.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' rule."));
        }
    }
    return unifiedWithRule;
}
function unifyAWithReference(qualifiedStatement, substitutions, context) {
    var unifiedWithReference = false;
    var reference = qualifiedStatement.getReference(), generalContext = context, specificContext = context, metavariableNode = reference.getMetavariableNode(), metavariablePresent = generalContext.isMetavariablePresentByMetavariableNode(metavariableNode, specificContext);
    if (metavariablePresent) {
        var statement = qualifiedStatement.getStatement(), statementString = statement.getString(), referenceString = reference.getString();
        context.trace("Unifying the '".concat(statementString, "' qualified statement with the '").concat(referenceString, "' reference..."));
        var metavariable = reference.getMetavariable(), statementSubstitution = _statement.default.fromStatementAndMetavariable(statement, metavariable, context), substitution = statementSubstitution; ///
        substitutions.addSubstitution(substitution, context);
        unifiedWithReference = true;
        if (unifiedWithReference) {
            context.debug("...unified the '".concat(statementString, "' qualified statement with the '").concat(referenceString, "' reference."));
        }
    }
    return unifiedWithReference;
}
function unifyAWithAxiomLemmaTheoremOrConjecture(qualifiedStatement, substitutions, context) {
    var unifiedWithAxiomLemmaTheoremOrConjecture = false;
    var reference = qualifiedStatement.getReference(), axiom = context.findAxiomByReference(reference), lemma = context.findLemmaByReference(reference), theorem = context.findTheoremByReference(reference), conjecture = context.findConjectureByReference(reference), axiomLemmaTheoremConjecture = axiom || lemma || theorem || conjecture;
    if (axiomLemmaTheoremConjecture !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        context.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' axiom, lemma, theorem or conjecture..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = axiomLemmaTheoremConjecture.unifyStatement(statement, context);
        if (statementUnified) {
            var metavariable = reference.getMetavariable(), statementSubstitution = _statement.default.fromStatementAndMetavariable(statement, metavariable, context), substitution = statementSubstitution; ///
            substitutions.addSubstitution(substitution, context);
            unifiedWithAxiomLemmaTheoremOrConjecture = true;
        }
        if (unifiedWithAxiomLemmaTheoremOrConjecture) {
            context.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' axiom, lemma, theorem or conjecture."));
        }
    }
    return unifiedWithAxiomLemmaTheoremOrConjecture;
}
var unifyMixins = [
    unifyAWithRule,
    unifyAWithReference,
    unifyAWithAxiomLemmaTheoremOrConjecture
];
var _default = unifyMixins;

//# sourceMappingURL=data:application/json;base64,