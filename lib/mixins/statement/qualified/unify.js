"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _statementForMetavariable = /*#__PURE__*/ _interop_require_default(require("../../../substitution/statementForMetavariable"));
var _string = require("../../../utilities/string");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyAWithRule(qualifiedStatement, substitutions, localContext) {
    var unifiedWithRule = false;
    var reference = qualifiedStatement.getReference(), rule = localContext.findRuleByReference(reference);
    if (rule !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' rule..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = rule.unifyStatement(statement, localContext);
        unifiedWithRule = statementUnified; ///
        if (unifiedWithRule) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' rule."));
        }
    }
    return unifiedWithRule;
}
function unifyAWithReference(qualifiedStatement, substitutions, localContext) {
    var unifiedWithReference = false;
    var reference = qualifiedStatement.getReference(), metavariableNode = reference.getMetavariableNode(), metavariablePresent = localContext.isMetavariablePresentByMetavariableNode(metavariableNode, localContext);
    if (metavariablePresent) {
        var statement = qualifiedStatement.getStatement(), statementString = statement.getString(), referenceString = reference.getString();
        localContext.trace("Unifying the '".concat(statementString, "' qualified statement with the '").concat(referenceString, "' reference..."));
        var metavariable = reference.getMetavariable(), statementForMetavariableSubstitution = _statementForMetavariable.default.fromStatementAndMetavariable(statement, metavariable, localContext), substitution = statementForMetavariableSubstitution; ///
        substitutions.addSubstitution(substitution, localContext);
        unifiedWithReference = true;
        if (unifiedWithReference) {
            localContext.debug("...unified the '".concat(statementString, "' qualified statement with the '").concat(referenceString, "' reference."));
        }
    }
    return unifiedWithReference;
}
function unifyAWithAxiomLemmaTheoremOrConjecture(qualifiedStatement, substitutions, localContext) {
    var unifiedWithAxiomLemmaTheoremOrConjecture = false;
    var reference = qualifiedStatement.getReference(), axiom = localContext.findAxiomByReference(reference), lemma = localContext.findLemmaByReference(reference), theorem = localContext.findTheoremByReference(reference), conjecture = localContext.findConjectureByReference(reference), axiomLemmaTheoremConjecture = axiom || lemma || theorem || conjecture;
    if (axiomLemmaTheoremConjecture !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' axiom, lemma, theorem or conjecture..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = axiomLemmaTheoremConjecture.unifyStatement(statement, localContext);
        if (statementUnified) {
            var metavariable = reference.getMetavariable(), statementForMetavariableSubstitution = _statementForMetavariable.default.fromStatementAndMetavariable(statement, metavariable, localContext), substitution = statementForMetavariableSubstitution; ///
            substitutions.addSubstitution(substitution, localContext);
            unifiedWithAxiomLemmaTheoremOrConjecture = true;
        }
        if (unifiedWithAxiomLemmaTheoremOrConjecture) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' axiom, lemma, theorem or conjecture."));
        }
    }
    return unifiedWithAxiomLemmaTheoremOrConjecture;
}
var unifyMixins = [
    unifyAWithRule,
    unifyAWithReference,
    unifyAWithAxiomLemmaTheoremOrConjecture
];
var _default = unifyMixins;

//# sourceMappingURL=data:application/json;base64,