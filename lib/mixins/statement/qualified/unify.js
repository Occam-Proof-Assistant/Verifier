"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _metavariable = /*#__PURE__*/ _interop_require_default(require("../../../unifier/metavariable"));
var _statementForMetavariable = /*#__PURE__*/ _interop_require_default(require("../../../substitution/statementForMetavariable"));
var _string = require("../../../utilities/string");
var _name = require("../../../utilities/name");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyAWithRule(qualifiedStatement, substitutions, localContext) {
    var unifiedWithRule = false;
    var reference = qualifiedStatement.getReference(), rule = localContext.findRuleByReference(reference);
    if (rule !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' rule..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = rule.unifyStatement(statement, localContext);
        unifiedWithRule = statementUnified; ///
        if (unifiedWithRule) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' rule."));
        }
    }
    return unifiedWithRule;
}
function unifyAWithAxiom(qualifiedStatement, substitutions, localContext) {
    var unifiedWithAxiom = false;
    var reference = qualifiedStatement.getReference(), axiom = localContext.findAxiomByReference(reference);
    if (axiom !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' axiom..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = axiom.unifyStatement(statement, localContext);
        unifiedWithAxiom = statementUnified; ///
        if (unifiedWithAxiom) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' axiom."));
        }
    }
    return unifiedWithAxiom;
}
function unifyAWithLemma(qualifiedStatement, substitutions, localContext) {
    var unifiedWithLemma = false;
    var reference = qualifiedStatement.getReference(), lemma = localContext.findLemmaByReference(reference);
    if (lemma !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' lemma..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = lemma.unifyStatement(statement, localContext);
        unifiedWithLemma = statementUnified; ///
        if (unifiedWithLemma) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' lemma."));
        }
    }
    return unifiedWithLemma;
}
function unifyAWithTheorem(qualifiedStatement, substitutions, localContext) {
    var unifiedWithTheorem = false;
    var reference = qualifiedStatement.getReference(), theorem = localContext.findTheoremByReference(reference);
    if (theorem !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' theorem..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = theorem.unifyStatement(statement, localContext);
        unifiedWithTheorem = statementUnified; ///
        if (unifiedWithTheorem) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' theorem."));
        }
    }
    return unifiedWithTheorem;
}
function unifyAWithConjecture(qualifiedStatement, substitutions, localContext) {
    var unifiedWithConjecture = false;
    var reference = qualifiedStatement.getReference(), conjecture = localContext.findConjectureByReference(reference);
    if (conjecture !== null) {
        var referenceString = reference.getString(), qualifiedStatementString = (0, _string.trim)(qualifiedStatement.getString()); ///
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' conjecture..."));
        var statement = qualifiedStatement.getStatement(), statementUnified = conjecture.unifyStatement(statement, localContext);
        unifiedWithConjecture = statementUnified; ///
        if (unifiedWithConjecture) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(referenceString, "' conjecture."));
        }
    }
    return unifiedWithConjecture;
}
function unifyAWithReference(qualifiedStatement, substitutions, localContext) {
    var unifiedWithReference = false;
    var reference = qualifiedStatement.getReference(), metavariableNode = reference.getMetavariableNode(), metavariableName = (0, _name.metavariableNameFromMetavariableNode)(metavariableNode), metavariable = localContext.findMetavariableByMetavariableName(metavariableName);
    if (metavariable !== null) {
        var statement = qualifiedStatement.getStatement(), statementString = statement.getString(), referenceString = reference.getString();
        localContext.trace("Unifying the '".concat(statementString, "' qualified statement with the '").concat(referenceString, "' reference..."));
        var metavariableNode1 = metavariable.getNode(), referenceMetavariableNode = reference.getMetavariableNode(), metavariableNodeA = referenceMetavariableNode, metavariableNodeB = metavariableNode1, metavariableUnified = _metavariable.default.unify(metavariableNodeA, metavariableNodeB, localContext);
        if (metavariableUnified) {
            var statementNode = statement.getNode(), metavariableNode2 = metavariableNodeA, statementForMetavariableSubstitution = _statementForMetavariable.default.fromStatementNodeAndMetavariableNode(statementNode, metavariableNode2, localContextA, localContextB), substitution = statementForMetavariableSubstitution, localContextA = localContext, localContextB = localContext; ///
            substitutions.addSubstitution(substitution, localContextA, localContextB);
            unifiedWithReference = true;
        }
        if (unifiedWithReference) {
            localContext.debug("...unified the '".concat(statementString, "' qualified statement with the '").concat(referenceString, "' reference."));
        }
    }
    return unifiedWithReference;
}
var unifyMixins = [
    unifyAWithRule,
    unifyAWithAxiom,
    unifyAWithLemma,
    unifyAWithTheorem,
    unifyAWithConjecture,
    unifyAWithReference
];
var _default = unifyMixins;

//# sourceMappingURL=data:application/json;base64,