"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _verification = require("../../utilities/verification");
function unifyIndependentlyAsDefinedAssertion(statement, substitutions, generalContext, specificContext) {
    var unifiedIndependentlyAsDefinedAssertion = false;
    var context = generalContext, definedAssertion = (0, _verification.definedAssertionFromStatement)(statement, context);
    if (definedAssertion !== null) {
        var statementString = statement.getString();
        specificContext.trace("Unifying the '".concat(statementString, "' statement as a defined assertion independently..."));
        var context1 = specificContext, definedAssertionUnifiedIndependently = definedAssertion.unifyIndependently(substitutions, context1);
        unifiedIndependentlyAsDefinedAssertion = definedAssertionUnifiedIndependently; ///
        if (unifiedIndependentlyAsDefinedAssertion) {
            specificContext.debug("...unified the '".concat(statementString, "' statement as a defined assertion independently."));
        }
    }
    return unifiedIndependentlyAsDefinedAssertion;
}
function unifyIndependentlyAsContainedAssertion(statement, substitutions, generalContext, specificContext) {
    var unifiedIndependentlyAsContainedAssertion = false;
    var context = generalContext, containedAssertion = (0, _verification.containedAssertionFromStatement)(statement, context);
    if (containedAssertion !== null) {
        var statementString = statement.getString();
        specificContext.trace("Unifying the '".concat(statementString, "' statement as a contained assertion independently..."));
        var context1 = specificContext, containedAssertionUnifiedIndependently = containedAssertion.unifyIndependently(substitutions, context1);
        unifiedIndependentlyAsContainedAssertion = containedAssertionUnifiedIndependently; ///
        if (unifiedIndependentlyAsContainedAssertion) {
            specificContext.debug("...unified the '".concat(statementString, "' statement as a contained assertion independently."));
        }
    }
    return unifiedIndependentlyAsContainedAssertion;
}
var unifyIndependentlyMixins = [
    unifyIndependentlyAsDefinedAssertion,
    unifyIndependentlyAsContainedAssertion
];
var _default = unifyIndependentlyMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9taXhpbnMvc3RhdGVtZW50L3VuaWZ5SW5kZXBlbmRlbm50bHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGRlZmluZWRBc3NlcnRpb25Gcm9tU3RhdGVtZW50LCBjb250YWluZWRBc3NlcnRpb25Gcm9tU3RhdGVtZW50IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy92ZXJpZmljYXRpb25cIjtcblxuZnVuY3Rpb24gdW5pZnlJbmRlcGVuZGVudGx5QXNEZWZpbmVkQXNzZXJ0aW9uKHN0YXRlbWVudCwgc3Vic3RpdHV0aW9ucywgZ2VuZXJhbENvbnRleHQsIHNwZWNpZmljQ29udGV4dCkge1xuICBsZXQgdW5pZmllZEluZGVwZW5kZW50bHlBc0RlZmluZWRBc3NlcnRpb24gPSBmYWxzZTtcblxuICBjb25zdCBjb250ZXh0ID0gZ2VuZXJhbENvbnRleHQsIC8vL1xuICAgICAgICBkZWZpbmVkQXNzZXJ0aW9uID0gZGVmaW5lZEFzc2VydGlvbkZyb21TdGF0ZW1lbnQoc3RhdGVtZW50LCBjb250ZXh0KTtcblxuICBpZiAoZGVmaW5lZEFzc2VydGlvbiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0YXRlbWVudFN0cmluZyA9IHN0YXRlbWVudC5nZXRTdHJpbmcoKTtcblxuICAgIHNwZWNpZmljQ29udGV4dC50cmFjZShgVW5pZnlpbmcgdGhlICcke3N0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCBhcyBhIGRlZmluZWQgYXNzZXJ0aW9uIGluZGVwZW5kZW50bHkuLi5gKTtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBzcGVjaWZpY0NvbnRleHQsICAvLy9cbiAgICAgICAgICBkZWZpbmVkQXNzZXJ0aW9uVW5pZmllZEluZGVwZW5kZW50bHkgPSBkZWZpbmVkQXNzZXJ0aW9uLnVuaWZ5SW5kZXBlbmRlbnRseShzdWJzdGl0dXRpb25zLCBjb250ZXh0KTtcblxuICAgIHVuaWZpZWRJbmRlcGVuZGVudGx5QXNEZWZpbmVkQXNzZXJ0aW9uID0gZGVmaW5lZEFzc2VydGlvblVuaWZpZWRJbmRlcGVuZGVudGx5OyAvLy9cblxuICAgIGlmICh1bmlmaWVkSW5kZXBlbmRlbnRseUFzRGVmaW5lZEFzc2VydGlvbikge1xuICAgICAgc3BlY2lmaWNDb250ZXh0LmRlYnVnKGAuLi51bmlmaWVkIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgYXMgYSBkZWZpbmVkIGFzc2VydGlvbiBpbmRlcGVuZGVudGx5LmApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmlmaWVkSW5kZXBlbmRlbnRseUFzRGVmaW5lZEFzc2VydGlvbjtcbn1cblxuZnVuY3Rpb24gdW5pZnlJbmRlcGVuZGVudGx5QXNDb250YWluZWRBc3NlcnRpb24oc3RhdGVtZW50LCBzdWJzdGl0dXRpb25zLCBnZW5lcmFsQ29udGV4dCwgc3BlY2lmaWNDb250ZXh0KSB7XG4gIGxldCB1bmlmaWVkSW5kZXBlbmRlbnRseUFzQ29udGFpbmVkQXNzZXJ0aW9uID0gZmFsc2U7XG5cbiAgY29uc3QgY29udGV4dCA9IGdlbmVyYWxDb250ZXh0LCAvLy9cbiAgICAgICAgY29udGFpbmVkQXNzZXJ0aW9uID0gY29udGFpbmVkQXNzZXJ0aW9uRnJvbVN0YXRlbWVudChzdGF0ZW1lbnQsIGNvbnRleHQpO1xuXG4gIGlmIChjb250YWluZWRBc3NlcnRpb24gIT09IG51bGwpIHtcbiAgICBjb25zdCBzdGF0ZW1lbnRTdHJpbmcgPSBzdGF0ZW1lbnQuZ2V0U3RyaW5nKCk7XG5cbiAgICBzcGVjaWZpY0NvbnRleHQudHJhY2UoYFVuaWZ5aW5nIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgYXMgYSBjb250YWluZWQgYXNzZXJ0aW9uIGluZGVwZW5kZW50bHkuLi5gKTtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBzcGVjaWZpY0NvbnRleHQsICAvLy9cbiAgICAgICAgICBjb250YWluZWRBc3NlcnRpb25VbmlmaWVkSW5kZXBlbmRlbnRseSA9IGNvbnRhaW5lZEFzc2VydGlvbi51bmlmeUluZGVwZW5kZW50bHkoc3Vic3RpdHV0aW9ucywgY29udGV4dCk7XG5cbiAgICB1bmlmaWVkSW5kZXBlbmRlbnRseUFzQ29udGFpbmVkQXNzZXJ0aW9uID0gY29udGFpbmVkQXNzZXJ0aW9uVW5pZmllZEluZGVwZW5kZW50bHk7IC8vL1xuXG4gICAgaWYgKHVuaWZpZWRJbmRlcGVuZGVudGx5QXNDb250YWluZWRBc3NlcnRpb24pIHtcbiAgICAgIHNwZWNpZmljQ29udGV4dC5kZWJ1ZyhgLi4udW5pZmllZCB0aGUgJyR7c3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50IGFzIGEgY29udGFpbmVkIGFzc2VydGlvbiBpbmRlcGVuZGVudGx5LmApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmlmaWVkSW5kZXBlbmRlbnRseUFzQ29udGFpbmVkQXNzZXJ0aW9uO1xufVxuXG5jb25zdCB1bmlmeUluZGVwZW5kZW50bHlNaXhpbnMgPSBbXG4gIHVuaWZ5SW5kZXBlbmRlbnRseUFzRGVmaW5lZEFzc2VydGlvbixcbiAgdW5pZnlJbmRlcGVuZGVudGx5QXNDb250YWluZWRBc3NlcnRpb25cbl07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaWZ5SW5kZXBlbmRlbnRseU1peGlucztcbiJdLCJuYW1lcyI6WyJ1bmlmeUluZGVwZW5kZW50bHlBc0RlZmluZWRBc3NlcnRpb24iLCJzdGF0ZW1lbnQiLCJzdWJzdGl0dXRpb25zIiwiZ2VuZXJhbENvbnRleHQiLCJzcGVjaWZpY0NvbnRleHQiLCJ1bmlmaWVkSW5kZXBlbmRlbnRseUFzRGVmaW5lZEFzc2VydGlvbiIsImNvbnRleHQiLCJkZWZpbmVkQXNzZXJ0aW9uIiwiZGVmaW5lZEFzc2VydGlvbkZyb21TdGF0ZW1lbnQiLCJzdGF0ZW1lbnRTdHJpbmciLCJnZXRTdHJpbmciLCJ0cmFjZSIsImRlZmluZWRBc3NlcnRpb25VbmlmaWVkSW5kZXBlbmRlbnRseSIsInVuaWZ5SW5kZXBlbmRlbnRseSIsImRlYnVnIiwidW5pZnlJbmRlcGVuZGVudGx5QXNDb250YWluZWRBc3NlcnRpb24iLCJ1bmlmaWVkSW5kZXBlbmRlbnRseUFzQ29udGFpbmVkQXNzZXJ0aW9uIiwiY29udGFpbmVkQXNzZXJ0aW9uIiwiY29udGFpbmVkQXNzZXJ0aW9uRnJvbVN0YXRlbWVudCIsImNvbnRhaW5lZEFzc2VydGlvblVuaWZpZWRJbmRlcGVuZGVudGx5IiwidW5pZnlJbmRlcGVuZGVudGx5TWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkF5REE7OztlQUFBOzs7NEJBdkQrRTtBQUUvRSxTQUFTQSxxQ0FBcUNDLFNBQVMsRUFBRUMsYUFBYSxFQUFFQyxjQUFjLEVBQUVDLGVBQWU7SUFDckcsSUFBSUMseUNBQXlDO0lBRTdDLElBQU1DLFVBQVVILGdCQUNWSSxtQkFBbUJDLElBQUFBLDJDQUE2QixFQUFDUCxXQUFXSztJQUVsRSxJQUFJQyxxQkFBcUIsTUFBTTtRQUM3QixJQUFNRSxrQkFBa0JSLFVBQVVTLFNBQVM7UUFFM0NOLGdCQUFnQk8sS0FBSyxDQUFDLEFBQUMsaUJBQWdDLE9BQWhCRixpQkFBZ0I7UUFFdkQsSUFBTUgsV0FBVUYsaUJBQ1ZRLHVDQUF1Q0wsaUJBQWlCTSxrQkFBa0IsQ0FBQ1gsZUFBZUk7UUFFaEdELHlDQUF5Q08sc0NBQXNDLEdBQUc7UUFFbEYsSUFBSVAsd0NBQXdDO1lBQzFDRCxnQkFBZ0JVLEtBQUssQ0FBQyxBQUFDLG1CQUFrQyxPQUFoQkwsaUJBQWdCO1FBQzNEO0lBQ0Y7SUFFQSxPQUFPSjtBQUNUO0FBRUEsU0FBU1UsdUNBQXVDZCxTQUFTLEVBQUVDLGFBQWEsRUFBRUMsY0FBYyxFQUFFQyxlQUFlO0lBQ3ZHLElBQUlZLDJDQUEyQztJQUUvQyxJQUFNVixVQUFVSCxnQkFDVmMscUJBQXFCQyxJQUFBQSw2Q0FBK0IsRUFBQ2pCLFdBQVdLO0lBRXRFLElBQUlXLHVCQUF1QixNQUFNO1FBQy9CLElBQU1SLGtCQUFrQlIsVUFBVVMsU0FBUztRQUUzQ04sZ0JBQWdCTyxLQUFLLENBQUMsQUFBQyxpQkFBZ0MsT0FBaEJGLGlCQUFnQjtRQUV2RCxJQUFNSCxXQUFVRixpQkFDVmUseUNBQXlDRixtQkFBbUJKLGtCQUFrQixDQUFDWCxlQUFlSTtRQUVwR1UsMkNBQTJDRyx3Q0FBd0MsR0FBRztRQUV0RixJQUFJSCwwQ0FBMEM7WUFDNUNaLGdCQUFnQlUsS0FBSyxDQUFDLEFBQUMsbUJBQWtDLE9BQWhCTCxpQkFBZ0I7UUFDM0Q7SUFDRjtJQUVBLE9BQU9PO0FBQ1Q7QUFFQSxJQUFNSSwyQkFBMkI7SUFDL0JwQjtJQUNBZTtDQUNEO0lBRUQsV0FBZUsifQ==