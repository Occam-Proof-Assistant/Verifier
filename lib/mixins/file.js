"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
function getAxioms() {
    return this.context.getAxioms();
}
function getLemmas() {
    return this.context.getLemmas();
}
function getTheorems() {
    return this.context.getTheorems();
}
function getConjectures() {
    return this.context.getConjectures();
}
function getCombinators() {
    return this.context.getCombinators();
}
function getConstructors() {
    return this.context.getConstructors();
}
function findTypeByTypeName(typeName) {
    return this.context.findTypeByTypeName(typeName);
}
function findLabelByTypeName(labelName) {
    return this.context.findLabelByTypeName(labelName);
}
function findRuleByReferenceName(referenceName) {
    return this.context.findRuleByReferenceName(referenceName);
}
function findAxiomByReferenceName(referenceName) {
    return this.context.findAxiomByReferenceName(referenceName);
}
function findLemmaByReferenceName(referenceName) {
    return this.context.findLemmaByReferenceName(referenceName);
}
function findTheoremByReferenceName(referenceName) {
    return this.context.findTheoremByReferenceName(referenceName);
}
function findConjectureByReferenceName(referenceName) {
    return this.context.findConjectureByReferenceName(referenceName);
}
function isLabelPresentByLabelName(labelName) {
    return this.context.isLabelPresentByLabelName(labelName);
}
function isTypePresentByTypeName(typeName) {
    return this.context.isTypePresentByTypeName(typeName);
}
function nodeAsString(node) {
    return this.context.nodeAsString(node);
}
function nodesAsString(node) {
    return this.context.nodesAsString(node);
}
var fileMixins = {
    getAxioms: getAxioms,
    getLemmas: getLemmas,
    getTheorems: getTheorems,
    getConjectures: getConjectures,
    getCombinators: getCombinators,
    getConstructors: getConstructors,
    findTypeByTypeName: findTypeByTypeName,
    findLabelByTypeName: findLabelByTypeName,
    findRuleByReferenceName: findRuleByReferenceName,
    findAxiomByReferenceName: findAxiomByReferenceName,
    findLemmaByReferenceName: findLemmaByReferenceName,
    findTheoremByReferenceName: findTheoremByReferenceName,
    findConjectureByReferenceName: findConjectureByReferenceName,
    isLabelPresentByLabelName: isLabelPresentByLabelName,
    isTypePresentByTypeName: isTypePresentByTypeName,
    nodeAsString: nodeAsString,
    nodesAsString: nodesAsString
};
var _default = fileMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZmlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZ2V0QXhpb21zKCkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmdldEF4aW9tcygpOyB9XG5cbmZ1bmN0aW9uIGdldExlbW1hcygpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRMZW1tYXMoKTsgfVxuXG5mdW5jdGlvbiBnZXRUaGVvcmVtcygpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRUaGVvcmVtcygpOyB9XG5cbmZ1bmN0aW9uIGdldENvbmplY3R1cmVzKCkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmdldENvbmplY3R1cmVzKCk7IH1cblxuZnVuY3Rpb24gZ2V0Q29tYmluYXRvcnMoKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZ2V0Q29tYmluYXRvcnMoKTsgfVxuXG5mdW5jdGlvbiBnZXRDb25zdHJ1Y3RvcnMoKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZ2V0Q29uc3RydWN0b3JzKCk7IH1cblxuZnVuY3Rpb24gZmluZFR5cGVCeVR5cGVOYW1lKHR5cGVOYW1lKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZmluZFR5cGVCeVR5cGVOYW1lKHR5cGVOYW1lKTsgfVxuXG5mdW5jdGlvbiBmaW5kTGFiZWxCeVR5cGVOYW1lKGxhYmVsTmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmZpbmRMYWJlbEJ5VHlwZU5hbWUobGFiZWxOYW1lKTsgfVxuXG5mdW5jdGlvbiBmaW5kUnVsZUJ5UmVmZXJlbmNlTmFtZShyZWZlcmVuY2VOYW1lKSB7IHJldHVybiB0aGlzLmNvbnRleHQuZmluZFJ1bGVCeVJlZmVyZW5jZU5hbWUocmVmZXJlbmNlTmFtZSk7IH1cblxuZnVuY3Rpb24gZmluZEF4aW9tQnlSZWZlcmVuY2VOYW1lKHJlZmVyZW5jZU5hbWUpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5maW5kQXhpb21CeVJlZmVyZW5jZU5hbWUocmVmZXJlbmNlTmFtZSk7IH1cblxuZnVuY3Rpb24gZmluZExlbW1hQnlSZWZlcmVuY2VOYW1lKHJlZmVyZW5jZU5hbWUpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5maW5kTGVtbWFCeVJlZmVyZW5jZU5hbWUocmVmZXJlbmNlTmFtZSk7IH1cblxuZnVuY3Rpb24gZmluZFRoZW9yZW1CeVJlZmVyZW5jZU5hbWUocmVmZXJlbmNlTmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmZpbmRUaGVvcmVtQnlSZWZlcmVuY2VOYW1lKHJlZmVyZW5jZU5hbWUpOyB9XG5cbmZ1bmN0aW9uIGZpbmRDb25qZWN0dXJlQnlSZWZlcmVuY2VOYW1lKHJlZmVyZW5jZU5hbWUpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5maW5kQ29uamVjdHVyZUJ5UmVmZXJlbmNlTmFtZShyZWZlcmVuY2VOYW1lKTsgfVxuXG5mdW5jdGlvbiBpc0xhYmVsUHJlc2VudEJ5TGFiZWxOYW1lKGxhYmVsTmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmlzTGFiZWxQcmVzZW50QnlMYWJlbE5hbWUobGFiZWxOYW1lKTsgfVxuXG5mdW5jdGlvbiBpc1R5cGVQcmVzZW50QnlUeXBlTmFtZSh0eXBlTmFtZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0LmlzVHlwZVByZXNlbnRCeVR5cGVOYW1lKHR5cGVOYW1lKTsgfVxuXG5mdW5jdGlvbiBub2RlQXNTdHJpbmcobm9kZSkgeyByZXR1cm4gdGhpcy5jb250ZXh0Lm5vZGVBc1N0cmluZyhub2RlKTsgfVxuXG5mdW5jdGlvbiBub2Rlc0FzU3RyaW5nKG5vZGUpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5ub2Rlc0FzU3RyaW5nKG5vZGUpOyB9XG5cbmNvbnN0IGZpbGVNaXhpbnMgPSB7XG4gIGdldEF4aW9tcyxcbiAgZ2V0TGVtbWFzLFxuICBnZXRUaGVvcmVtcyxcbiAgZ2V0Q29uamVjdHVyZXMsXG4gIGdldENvbWJpbmF0b3JzLFxuICBnZXRDb25zdHJ1Y3RvcnMsXG4gIGZpbmRUeXBlQnlUeXBlTmFtZSxcbiAgZmluZExhYmVsQnlUeXBlTmFtZSxcbiAgZmluZFJ1bGVCeVJlZmVyZW5jZU5hbWUsXG4gIGZpbmRBeGlvbUJ5UmVmZXJlbmNlTmFtZSxcbiAgZmluZExlbW1hQnlSZWZlcmVuY2VOYW1lLFxuICBmaW5kVGhlb3JlbUJ5UmVmZXJlbmNlTmFtZSxcbiAgZmluZENvbmplY3R1cmVCeVJlZmVyZW5jZU5hbWUsXG4gIGlzTGFiZWxQcmVzZW50QnlMYWJlbE5hbWUsXG4gIGlzVHlwZVByZXNlbnRCeVR5cGVOYW1lLFxuICBub2RlQXNTdHJpbmcsXG4gIG5vZGVzQXNTdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZpbGVNaXhpbnM7XG4iXSwibmFtZXMiOlsiZ2V0QXhpb21zIiwiY29udGV4dCIsImdldExlbW1hcyIsImdldFRoZW9yZW1zIiwiZ2V0Q29uamVjdHVyZXMiLCJnZXRDb21iaW5hdG9ycyIsImdldENvbnN0cnVjdG9ycyIsImZpbmRUeXBlQnlUeXBlTmFtZSIsInR5cGVOYW1lIiwiZmluZExhYmVsQnlUeXBlTmFtZSIsImxhYmVsTmFtZSIsImZpbmRSdWxlQnlSZWZlcmVuY2VOYW1lIiwicmVmZXJlbmNlTmFtZSIsImZpbmRBeGlvbUJ5UmVmZXJlbmNlTmFtZSIsImZpbmRMZW1tYUJ5UmVmZXJlbmNlTmFtZSIsImZpbmRUaGVvcmVtQnlSZWZlcmVuY2VOYW1lIiwiZmluZENvbmplY3R1cmVCeVJlZmVyZW5jZU5hbWUiLCJpc0xhYmVsUHJlc2VudEJ5TGFiZWxOYW1lIiwiaXNUeXBlUHJlc2VudEJ5VHlwZU5hbWUiLCJub2RlQXNTdHJpbmciLCJub2RlIiwibm9kZXNBc1N0cmluZyIsImZpbGVNaXhpbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQXdEQTs7O2VBQUE7OztBQXREQSxTQUFTQTtJQUFjLE9BQU8sSUFBSSxDQUFDQyxRQUFRRDtBQUFhO0FBRXhELFNBQVNFO0lBQWMsT0FBTyxJQUFJLENBQUNELFFBQVFDO0FBQWE7QUFFeEQsU0FBU0M7SUFBZ0IsT0FBTyxJQUFJLENBQUNGLFFBQVFFO0FBQWU7QUFFNUQsU0FBU0M7SUFBbUIsT0FBTyxJQUFJLENBQUNILFFBQVFHO0FBQWtCO0FBRWxFLFNBQVNDO0lBQW1CLE9BQU8sSUFBSSxDQUFDSixRQUFRSTtBQUFrQjtBQUVsRSxTQUFTQztJQUFvQixPQUFPLElBQUksQ0FBQ0wsUUFBUUs7QUFBbUI7QUFFcEUsU0FBU0MsbUJBQW1CQyxRQUFRO0lBQUksT0FBTyxJQUFJLENBQUNQLFFBQVFNLG1CQUFtQkM7QUFBVztBQUUxRixTQUFTQyxvQkFBb0JDLFNBQVM7SUFBSSxPQUFPLElBQUksQ0FBQ1QsUUFBUVEsb0JBQW9CQztBQUFZO0FBRTlGLFNBQVNDLHdCQUF3QkMsYUFBYTtJQUFJLE9BQU8sSUFBSSxDQUFDWCxRQUFRVSx3QkFBd0JDO0FBQWdCO0FBRTlHLFNBQVNDLHlCQUF5QkQsYUFBYTtJQUFJLE9BQU8sSUFBSSxDQUFDWCxRQUFRWSx5QkFBeUJEO0FBQWdCO0FBRWhILFNBQVNFLHlCQUF5QkYsYUFBYTtJQUFJLE9BQU8sSUFBSSxDQUFDWCxRQUFRYSx5QkFBeUJGO0FBQWdCO0FBRWhILFNBQVNHLDJCQUEyQkgsYUFBYTtJQUFJLE9BQU8sSUFBSSxDQUFDWCxRQUFRYywyQkFBMkJIO0FBQWdCO0FBRXBILFNBQVNJLDhCQUE4QkosYUFBYTtJQUFJLE9BQU8sSUFBSSxDQUFDWCxRQUFRZSw4QkFBOEJKO0FBQWdCO0FBRTFILFNBQVNLLDBCQUEwQlAsU0FBUztJQUFJLE9BQU8sSUFBSSxDQUFDVCxRQUFRZ0IsMEJBQTBCUDtBQUFZO0FBRTFHLFNBQVNRLHdCQUF3QlYsUUFBUTtJQUFJLE9BQU8sSUFBSSxDQUFDUCxRQUFRaUIsd0JBQXdCVjtBQUFXO0FBRXBHLFNBQVNXLGFBQWFDLElBQUk7SUFBSSxPQUFPLElBQUksQ0FBQ25CLFFBQVFrQixhQUFhQztBQUFPO0FBRXRFLFNBQVNDLGNBQWNELElBQUk7SUFBSSxPQUFPLElBQUksQ0FBQ25CLFFBQVFvQixjQUFjRDtBQUFPO0FBRXhFLElBQU1FLGFBQWE7SUFDakJ0QixXQUFBQTtJQUNBRSxXQUFBQTtJQUNBQyxhQUFBQTtJQUNBQyxnQkFBQUE7SUFDQUMsZ0JBQUFBO0lBQ0FDLGlCQUFBQTtJQUNBQyxvQkFBQUE7SUFDQUUscUJBQUFBO0lBQ0FFLHlCQUFBQTtJQUNBRSwwQkFBQUE7SUFDQUMsMEJBQUFBO0lBQ0FDLDRCQUFBQTtJQUNBQywrQkFBQUE7SUFDQUMsMkJBQUFBO0lBQ0FDLHlCQUFBQTtJQUNBQyxjQUFBQTtJQUNBRSxlQUFBQTtBQUNGO0lBRUEsV0FBZUMifQ==