"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _statement = /*#__PURE__*/ _interop_require_default(require("../../substitution/statement"));
var _string = require("../../utilities/string");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyAWithRule(statement, substitutions, context) {
    var unifiedWithRule = false;
    var reference = statement.getReference(), rule = context.findRuleByReference(reference);
    if (rule !== null) {
        var ruleString = rule.getString(), statementString = (0, _string.trim)(_$statement.getString()); ///
        context.trace("Unifying the '".concat(statementString, "' statement with the '").concat(ruleString, "' rule..."));
        var _$statement = _$statement.getStatement(), proofSteps = context.getProofSteps(), statementAndProofStepsUnified = rule.unifyStatementAndProofSteps(_$statement, proofSteps, context);
        unifiedWithRule = statementAndProofStepsUnified; ///
        if (unifiedWithRule) {
            context.debug("...unified the '".concat(statementString, "' statement with the '").concat(ruleString, "' rule."));
        }
    }
    return unifiedWithRule;
}
function unifyAWithReference(statement, substitutions, context) {
    var unifiedWithReference;
    var reference = statement.getReference(), statementString = statement.getString(), referenceString = reference.getString();
    context.trace("Unifying the '".concat(statementString, "' statement with the '").concat(referenceString, "' reference..."));
    var metavariable = reference.getMetavariable(), statementSubstitution = _statement.default.fromStatementAndMetavariable(statement, metavariable, context), substitution = statementSubstitution; ///
    substitutions.addSubstitution(substitution, context);
    unifiedWithReference = true;
    if (unifiedWithReference) {
        context.debug("...unified the '".concat(statementString, "' statement with the '").concat(referenceString, "' reference."));
    }
    return unifiedWithReference;
}
function unifyAWithAxiomLemmaTheoremOrConjecture(statement, substitutions, context) {
    var unifiedWithAxiomLemmaTheoremOrConjecture = false;
    var reference = statement.getReference(), axiom = context.findAxiomByReference(reference), lemma = context.findLemmaByReference(reference), theorem = context.findTheoremByReference(reference), conjecture = context.findConjectureByReference(reference), axiomLemmaTheoremConjecture = axiom || lemma || theorem || conjecture;
    if (axiomLemmaTheoremConjecture !== null) {
        var statementString = (0, _string.trim)(_$statement.getString()), axiomLemmaTheoremConjectureString = reference.getString();
        context.trace("Unifying the '".concat(statementString, "' statement with the '").concat(axiomLemmaTheoremConjectureString, "' axiom, lemma, theorem or conjecture..."));
        var _$statement = _$statement.getStatement(), proofSteps = context.getProofSteps(), statementAndProofStepsUnified = axiomLemmaTheoremConjecture.unifyStatementAndProofSteps(_$statement, proofSteps, context);
        if (statementAndProofStepsUnified) {
            var metavariable = reference.getMetavariable(), statementSubstitution = _statement.default.fromStatementAndMetavariable(_$statement, metavariable, context), substitution = statementSubstitution; ///
            substitutions.addSubstitution(substitution, context);
            unifiedWithAxiomLemmaTheoremOrConjecture = true;
        }
        if (unifiedWithAxiomLemmaTheoremOrConjecture) {
            context.debug("...unified the '".concat(statementString, "' statement with the '").concat(axiomLemmaTheoremConjectureString, "' axiom, lemma, theorem or conjecture."));
        }
    }
    return unifiedWithAxiomLemmaTheoremOrConjecture;
}
var unifyMixins = [
    unifyAWithRule,
    unifyAWithReference,
    unifyAWithAxiomLemmaTheoremOrConjecture
];
var _default = unifyMixins;

//# sourceMappingURL=data:application/json;base64,