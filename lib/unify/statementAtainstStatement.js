"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyStatementWithStatement;
    }
});
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../unifier/metaLevel"));
var _termForVariable = /*#__PURE__*/ _interop_require_default(require("../substitution/termForVariable"));
var _array = require("../utilities/array");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyStatementWithStatement(statementNodeA, statementNodeB, substitution, substitutions, localContextA, localContextB) {
    var statementUnifiedWithtatement = false;
    var termForVariableSubstitution = _termForVariable.default.fromSubstitutionAndSubstitutions(substitution, substitutions), transformed = termForVariableSubstitution.isTransformed(substitution);
    var substitutionsA = []; ///
    if (transformed) {
        var substitutionA = termForVariableSubstitution; ///
        substitutionsA.push(substitutionA);
    }
    var nodeA = statementNodeA, nodeB = statementNodeB, unified = _metaLevel.default.unify(nodeA, nodeB, substitutionsA, localContextA, localContextB);
    if (unified) {
        if (!transformed) {
            var substitutionB = termForVariableSubstitution, substitutionsB = [
                substitutionB
            ];
            substitutionsA = transformSubstitutions(substitutionsA, substitutionsB);
            (0, _array.push)(substitutions, substitutionsA);
        }
        statementUnifiedWithtatement = true;
    }
    return statementUnifiedWithtatement;
}
function transformSubstitutions(substitutionsA, substitutionsB) {
    substitutionsA = substitutionsA.map(function(substitutionA) {
        var substitution = substitutionA, substitutions = substitutionsB, termForVariableSubstitution = _termForVariable.default.fromSubstitutionAndSubstitutions(substitution, substitutions);
        substitutionA = termForVariableSubstitution; ///
        return substitutionA;
    });
    return substitutionsA;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS9zdGF0ZW1lbnRBdGFpbnN0U3RhdGVtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgbWV0YUxldmVsVW5pZmllciBmcm9tIFwiLi4vdW5pZmllci9tZXRhTGV2ZWxcIjtcbmltcG9ydCBUZXJtRm9yVmFyaWFibGVTdWJzdGl0dXRpb24gZnJvbSBcIi4uL3N1YnN0aXR1dGlvbi90ZXJtRm9yVmFyaWFibGVcIjtcblxuaW1wb3J0IHsgcHVzaCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pZnlTdGF0ZW1lbnRXaXRoU3RhdGVtZW50KHN0YXRlbWVudE5vZGVBLCBzdGF0ZW1lbnROb2RlQiwgc3Vic3RpdHV0aW9uLCBzdWJzdGl0dXRpb25zLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKSB7XG4gIGxldCBzdGF0ZW1lbnRVbmlmaWVkV2l0aHRhdGVtZW50ID0gZmFsc2U7XG5cbiAgY29uc3QgdGVybUZvclZhcmlhYmxlU3Vic3RpdHV0aW9uID0gVGVybUZvclZhcmlhYmxlU3Vic3RpdHV0aW9uLmZyb21TdWJzdGl0dXRpb25BbmRTdWJzdGl0dXRpb25zKHN1YnN0aXR1dGlvbiwgc3Vic3RpdHV0aW9ucyksXG4gICAgICAgIHRyYW5zZm9ybWVkID0gdGVybUZvclZhcmlhYmxlU3Vic3RpdHV0aW9uLmlzVHJhbnNmb3JtZWQoc3Vic3RpdHV0aW9uKTtcblxuICBsZXQgc3Vic3RpdHV0aW9uc0EgPSBbXTsgLy8vXG5cbiAgaWYgKHRyYW5zZm9ybWVkKSB7XG4gICAgY29uc3Qgc3Vic3RpdHV0aW9uQSA9IHRlcm1Gb3JWYXJpYWJsZVN1YnN0aXR1dGlvbjsgIC8vL1xuXG4gICAgc3Vic3RpdHV0aW9uc0EucHVzaChzdWJzdGl0dXRpb25BKTtcbiAgfVxuXG4gIGNvbnN0IG5vZGVBID0gc3RhdGVtZW50Tm9kZUEsICAvLy9cbiAgICAgICAgbm9kZUIgPSBzdGF0ZW1lbnROb2RlQiwgIC8vL1xuICAgICAgICB1bmlmaWVkID0gbWV0YUxldmVsVW5pZmllci51bmlmeShub2RlQSwgbm9kZUIsIHN1YnN0aXR1dGlvbnNBLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKTtcblxuICBpZiAodW5pZmllZCkge1xuICAgIGlmICghdHJhbnNmb3JtZWQpIHtcbiAgICAgIGNvbnN0IHN1YnN0aXR1dGlvbkIgPSB0ZXJtRm9yVmFyaWFibGVTdWJzdGl0dXRpb24sICAvLy9cbiAgICAgICAgICAgIHN1YnN0aXR1dGlvbnNCID0gW1xuICAgICAgICAgICAgICBzdWJzdGl0dXRpb25CXG4gICAgICAgICAgICBdO1xuXG4gICAgICBzdWJzdGl0dXRpb25zQSA9IHRyYW5zZm9ybVN1YnN0aXR1dGlvbnMoc3Vic3RpdHV0aW9uc0EsIHN1YnN0aXR1dGlvbnNCKTtcblxuICAgICAgcHVzaChzdWJzdGl0dXRpb25zLCBzdWJzdGl0dXRpb25zQSk7XG4gICAgfVxuXG4gICAgc3RhdGVtZW50VW5pZmllZFdpdGh0YXRlbWVudCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gc3RhdGVtZW50VW5pZmllZFdpdGh0YXRlbWVudDtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb25zQSwgc3Vic3RpdHV0aW9uc0IpIHtcbiAgc3Vic3RpdHV0aW9uc0EgPSBzdWJzdGl0dXRpb25zQS5tYXAoKHN1YnN0aXR1dGlvbkEpID0+IHtcbiAgICBjb25zdCBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb25BLCAgLy8vXG4gICAgICAgICAgc3Vic3RpdHV0aW9ucyA9IHN1YnN0aXR1dGlvbnNCLFxuICAgICAgICAgIHRlcm1Gb3JWYXJpYWJsZVN1YnN0aXR1dGlvbiA9IFRlcm1Gb3JWYXJpYWJsZVN1YnN0aXR1dGlvbi5mcm9tU3Vic3RpdHV0aW9uQW5kU3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb24sIHN1YnN0aXR1dGlvbnMpO1xuXG4gICAgc3Vic3RpdHV0aW9uQSA9IHRlcm1Gb3JWYXJpYWJsZVN1YnN0aXR1dGlvbjsgLy8vXG5cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uQTtcbiAgfSk7XG5cbiAgcmV0dXJuIHN1YnN0aXR1dGlvbnNBO1xufVxuIl0sIm5hbWVzIjpbInVuaWZ5U3RhdGVtZW50V2l0aFN0YXRlbWVudCIsInN0YXRlbWVudE5vZGVBIiwic3RhdGVtZW50Tm9kZUIiLCJzdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb25zIiwibG9jYWxDb250ZXh0QSIsImxvY2FsQ29udGV4dEIiLCJzdGF0ZW1lbnRVbmlmaWVkV2l0aHRhdGVtZW50IiwidGVybUZvclZhcmlhYmxlU3Vic3RpdHV0aW9uIiwiVGVybUZvclZhcmlhYmxlU3Vic3RpdHV0aW9uIiwiZnJvbVN1YnN0aXR1dGlvbkFuZFN1YnN0aXR1dGlvbnMiLCJ0cmFuc2Zvcm1lZCIsImlzVHJhbnNmb3JtZWQiLCJzdWJzdGl0dXRpb25zQSIsInN1YnN0aXR1dGlvbkEiLCJwdXNoIiwibm9kZUEiLCJub2RlQiIsInVuaWZpZWQiLCJtZXRhTGV2ZWxVbmlmaWVyIiwidW5pZnkiLCJzdWJzdGl0dXRpb25CIiwic3Vic3RpdHV0aW9uc0IiLCJ0cmFuc2Zvcm1TdWJzdGl0dXRpb25zIiwibWFwIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFPQTs7O2VBQXdCQTs7O2dFQUxLO3NFQUNXO3FCQUVuQjs7Ozs7O0FBRU4sU0FBU0EsNEJBQTRCQyxjQUFjLEVBQUVDLGNBQWMsRUFBRUMsWUFBWSxFQUFFQyxhQUFhLEVBQUVDLGFBQWEsRUFBRUMsYUFBYTtJQUMzSSxJQUFJQywrQkFBK0I7SUFFbkMsSUFBTUMsOEJBQThCQyx3QkFBMkIsQ0FBQ0MsZ0NBQWdDLENBQUNQLGNBQWNDLGdCQUN6R08sY0FBY0gsNEJBQTRCSSxhQUFhLENBQUNUO0lBRTlELElBQUlVLGlCQUFpQixFQUFFLEVBQUUsR0FBRztJQUU1QixJQUFJRixhQUFhO1FBQ2YsSUFBTUcsZ0JBQWdCTiw2QkFBOEIsR0FBRztRQUV2REssZUFBZUUsSUFBSSxDQUFDRDtJQUN0QjtJQUVBLElBQU1FLFFBQVFmLGdCQUNSZ0IsUUFBUWYsZ0JBQ1JnQixVQUFVQyxrQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDSixPQUFPQyxPQUFPSixnQkFBZ0JSLGVBQWVDO0lBRXBGLElBQUlZLFNBQVM7UUFDWCxJQUFJLENBQUNQLGFBQWE7WUFDaEIsSUFBTVUsZ0JBQWdCYiw2QkFDaEJjLGlCQUFpQjtnQkFDZkQ7YUFDRDtZQUVQUixpQkFBaUJVLHVCQUF1QlYsZ0JBQWdCUztZQUV4RFAsSUFBQUEsV0FBSSxFQUFDWCxlQUFlUztRQUN0QjtRQUVBTiwrQkFBK0I7SUFDakM7SUFFQSxPQUFPQTtBQUNUO0FBRUEsU0FBU2dCLHVCQUF1QlYsY0FBYyxFQUFFUyxjQUFjO0lBQzVEVCxpQkFBaUJBLGVBQWVXLEdBQUcsQ0FBQyxTQUFDVjtRQUNuQyxJQUFNWCxlQUFlVyxlQUNmVixnQkFBZ0JrQixnQkFDaEJkLDhCQUE4QkMsd0JBQTJCLENBQUNDLGdDQUFnQyxDQUFDUCxjQUFjQztRQUUvR1UsZ0JBQWdCTiw2QkFBNkIsR0FBRztRQUVoRCxPQUFPTTtJQUNUO0lBRUEsT0FBT0Q7QUFDVCJ9