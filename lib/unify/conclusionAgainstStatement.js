"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyConclusionAgainstStatement;
    }
});
var _local = /*#__PURE__*/ _interop_require_default(require("../context/local"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyConclusionAgainstStatement(conclusionA, statementNodeB, substitutions, fileContextA, localContextB) {
    var conclusionUnified = false;
    var conclusionAStatementNode = conclusionA.getStatementNode();
    if (conclusionAStatementNode !== null) {
        var localContextA = _local.default.fromFileContext(fileContextA), statementNodeA = conclusionAStatementNode, statementStringA = localContextA.nodeAsString(statementNodeA), statementStringB = localContextB.nodeAsString(statementNodeB);
        substitutions.snapshot();
        localContextB.trace("Unifying the '".concat(statementStringB, "' statement against the conclusion's '").concat(statementStringA, "' statement..."), statementNodeB);
        var statementUnified = conclusionA.unifyStatement(statementNodeB, substitutions, localContextA, localContextB);
        conclusionUnified = statementUnified; ///
        conclusionUnified ? substitutions.continue() : substitutions.rollback();
        if (conclusionUnified) {
            localContextB.debug("...unified the '".concat(statementStringB, "' statement against the conclusion's '").concat(statementStringA, "' statement."), statementNodeB);
        }
    }
    return conclusionUnified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS9jb25jbHVzaW9uQWdhaW5zdFN0YXRlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IExvY2FsQ29udGV4dCBmcm9tIFwiLi4vY29udGV4dC9sb2NhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlmeUNvbmNsdXNpb25BZ2FpbnN0U3RhdGVtZW50KGNvbmNsdXNpb25BLCBzdGF0ZW1lbnROb2RlQiwgc3Vic3RpdHV0aW9ucywgZmlsZUNvbnRleHRBLCBsb2NhbENvbnRleHRCKSB7XG4gIGxldCBjb25jbHVzaW9uVW5pZmllZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGNvbmNsdXNpb25BU3RhdGVtZW50Tm9kZSA9IGNvbmNsdXNpb25BLmdldFN0YXRlbWVudE5vZGUoKTtcblxuICBpZiAoY29uY2x1c2lvbkFTdGF0ZW1lbnROb2RlICE9PSBudWxsKSB7XG4gICAgY29uc3QgbG9jYWxDb250ZXh0QSA9IExvY2FsQ29udGV4dC5mcm9tRmlsZUNvbnRleHQoZmlsZUNvbnRleHRBKSxcbiAgICAgICAgICBzdGF0ZW1lbnROb2RlQSA9IGNvbmNsdXNpb25BU3RhdGVtZW50Tm9kZSwgIC8vL1xuICAgICAgICAgIHN0YXRlbWVudFN0cmluZ0EgPSBsb2NhbENvbnRleHRBLm5vZGVBc1N0cmluZyhzdGF0ZW1lbnROb2RlQSksXG4gICAgICAgICAgc3RhdGVtZW50U3RyaW5nQiA9IGxvY2FsQ29udGV4dEIubm9kZUFzU3RyaW5nKHN0YXRlbWVudE5vZGVCKTtcblxuICAgIHN1YnN0aXR1dGlvbnMuc25hcHNob3QoKTtcblxuICAgIGxvY2FsQ29udGV4dEIudHJhY2UoYFVuaWZ5aW5nIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmdCfScgc3RhdGVtZW50IGFnYWluc3QgdGhlIGNvbmNsdXNpb24ncyAnJHtzdGF0ZW1lbnRTdHJpbmdBfScgc3RhdGVtZW50Li4uYCwgc3RhdGVtZW50Tm9kZUIpO1xuXG4gICAgY29uc3Qgc3RhdGVtZW50VW5pZmllZCA9IGNvbmNsdXNpb25BLnVuaWZ5U3RhdGVtZW50KHN0YXRlbWVudE5vZGVCLCBzdWJzdGl0dXRpb25zLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKTtcblxuICAgIGNvbmNsdXNpb25VbmlmaWVkID0gc3RhdGVtZW50VW5pZmllZDsgLy8vXG5cbiAgICBjb25jbHVzaW9uVW5pZmllZCA/XG4gICAgICBzdWJzdGl0dXRpb25zLmNvbnRpbnVlKCkgOlxuICAgICAgICBzdWJzdGl0dXRpb25zLnJvbGxiYWNrKCk7XG5cbiAgICBpZiAoY29uY2x1c2lvblVuaWZpZWQpIHtcbiAgICAgIGxvY2FsQ29udGV4dEIuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3N0YXRlbWVudFN0cmluZ0J9JyBzdGF0ZW1lbnQgYWdhaW5zdCB0aGUgY29uY2x1c2lvbidzICcke3N0YXRlbWVudFN0cmluZ0F9JyBzdGF0ZW1lbnQuYCwgc3RhdGVtZW50Tm9kZUIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25jbHVzaW9uVW5pZmllZDtcbn1cbiJdLCJuYW1lcyI6WyJ1bmlmeUNvbmNsdXNpb25BZ2FpbnN0U3RhdGVtZW50IiwiY29uY2x1c2lvbkEiLCJzdGF0ZW1lbnROb2RlQiIsInN1YnN0aXR1dGlvbnMiLCJmaWxlQ29udGV4dEEiLCJsb2NhbENvbnRleHRCIiwiY29uY2x1c2lvblVuaWZpZWQiLCJjb25jbHVzaW9uQVN0YXRlbWVudE5vZGUiLCJnZXRTdGF0ZW1lbnROb2RlIiwibG9jYWxDb250ZXh0QSIsIkxvY2FsQ29udGV4dCIsImZyb21GaWxlQ29udGV4dCIsInN0YXRlbWVudE5vZGVBIiwic3RhdGVtZW50U3RyaW5nQSIsIm5vZGVBc1N0cmluZyIsInN0YXRlbWVudFN0cmluZ0IiLCJzbmFwc2hvdCIsInRyYWNlIiwic3RhdGVtZW50VW5pZmllZCIsInVuaWZ5U3RhdGVtZW50IiwiY29udGludWUiLCJyb2xsYmFjayIsImRlYnVnIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFJQTs7O2VBQXdCQTs7OzREQUZDOzs7Ozs7QUFFVixTQUFTQSxnQ0FBZ0NDLFdBQVcsRUFBRUMsY0FBYyxFQUFFQyxhQUFhLEVBQUVDLFlBQVksRUFBRUMsYUFBYTtJQUM3SCxJQUFJQyxvQkFBb0I7SUFFeEIsSUFBTUMsMkJBQTJCTixZQUFZTyxnQkFBZ0I7SUFFN0QsSUFBSUQsNkJBQTZCLE1BQU07UUFDckMsSUFBTUUsZ0JBQWdCQyxjQUFZLENBQUNDLGVBQWUsQ0FBQ1AsZUFDN0NRLGlCQUFpQkwsMEJBQ2pCTSxtQkFBbUJKLGNBQWNLLFlBQVksQ0FBQ0YsaUJBQzlDRyxtQkFBbUJWLGNBQWNTLFlBQVksQ0FBQ1o7UUFFcERDLGNBQWNhLFFBQVE7UUFFdEJYLGNBQWNZLEtBQUssQ0FBQyxBQUFDLGlCQUF5RUosT0FBekRFLGtCQUFpQiwwQ0FBeUQsT0FBakJGLGtCQUFpQixtQkFBaUJYO1FBRWhJLElBQU1nQixtQkFBbUJqQixZQUFZa0IsY0FBYyxDQUFDakIsZ0JBQWdCQyxlQUFlTSxlQUFlSjtRQUVsR0Msb0JBQW9CWSxrQkFBa0IsR0FBRztRQUV6Q1osb0JBQ0VILGNBQWNpQixRQUFRLEtBQ3BCakIsY0FBY2tCLFFBQVE7UUFFMUIsSUFBSWYsbUJBQW1CO1lBQ3JCRCxjQUFjaUIsS0FBSyxDQUFDLEFBQUMsbUJBQTJFVCxPQUF6REUsa0JBQWlCLDBDQUF5RCxPQUFqQkYsa0JBQWlCLGlCQUFlWDtRQUNsSTtJQUNGO0lBRUEsT0FBT0k7QUFDVCJ9