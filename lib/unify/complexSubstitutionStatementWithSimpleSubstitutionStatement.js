"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyComplexSubstitutionStatementWithSimpleSubstitutionStatement;
    }
});
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../unifier/metaLevel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyComplexSubstitutionStatementWithSimpleSubstitutionStatement(complexSubstitutionStatementNode, simpleSubstitutionStatementNode, substitutions, localContextA, localContextB) {
    var complexSubstitutionStatementWithSimpleSubstitutionStatement;
    var complexSubstitutionStatementString = localContextB.nodeAsString(complexSubstitutionStatementNode), simpleSubstitutionStatementString = localContextB.nodeAsString(simpleSubstitutionStatementNode);
    localContextB.trace("Unifying the complex substitution's '".concat(complexSubstitutionStatementString, "' statement with the simple substitution's '").concat(simpleSubstitutionStatementString, "' statement..."), simpleSubstitutionStatementNode);
    var nodeA = complexSubstitutionStatementNode, nodeB = simpleSubstitutionStatementNode; ///
    localContextA = localContextB; ///
    var unified = _metaLevel.default.unify(nodeA, nodeB, substitutions, localContextA, localContextB);
    complexSubstitutionStatementWithSimpleSubstitutionStatement = unified; ///
    if (complexSubstitutionStatementWithSimpleSubstitutionStatement) {
        localContextB.trace("...unified the complex substitution's '".concat(complexSubstitutionStatementString, "' statement with the simple substitution's '").concat(simpleSubstitutionStatementString, "' statement."), simpleSubstitutionStatementNode);
    }
    return complexSubstitutionStatementWithSimpleSubstitutionStatement;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS9jb21wbGV4U3Vic3RpdHV0aW9uU3RhdGVtZW50V2l0aFNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IG1ldGFMZXZlbFVuaWZpZXIgZnJvbSBcIi4uL3VuaWZpZXIvbWV0YUxldmVsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaWZ5Q29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudFdpdGhTaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnQoY29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUsIHNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUsIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpIHtcbiAgbGV0IGNvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnRXaXRoU2ltcGxlU3Vic3RpdHV0aW9uU3RhdGVtZW50O1xuXG4gIGNvbnN0IGNvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnRTdHJpbmcgPSBsb2NhbENvbnRleHRCLm5vZGVBc1N0cmluZyhjb21wbGV4U3Vic3RpdHV0aW9uU3RhdGVtZW50Tm9kZSksXG4gICAgICAgIHNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudFN0cmluZyA9IGxvY2FsQ29udGV4dEIubm9kZUFzU3RyaW5nKHNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUpO1xuXG4gIGxvY2FsQ29udGV4dEIudHJhY2UoYFVuaWZ5aW5nIHRoZSBjb21wbGV4IHN1YnN0aXR1dGlvbidzICcke2NvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnRTdHJpbmd9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgc2ltcGxlIHN1YnN0aXR1dGlvbidzICcke3NpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudC4uLmAsIHNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUpO1xuXG4gIGNvbnN0IG5vZGVBID0gY29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUsICAvLy9cbiAgICAgICAgbm9kZUIgPSBzaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnROb2RlOyAgLy8vXG5cbiAgbG9jYWxDb250ZXh0QSA9IGxvY2FsQ29udGV4dEI7ICAvLy9cblxuICBjb25zdCB1bmlmaWVkID0gbWV0YUxldmVsVW5pZmllci51bmlmeShub2RlQSwgbm9kZUIsIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpO1xuXG4gIGNvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnRXaXRoU2ltcGxlU3Vic3RpdHV0aW9uU3RhdGVtZW50ID0gdW5pZmllZDsgIC8vL1xuXG4gIGlmIChjb21wbGV4U3Vic3RpdHV0aW9uU3RhdGVtZW50V2l0aFNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudCkge1xuICAgIGxvY2FsQ29udGV4dEIudHJhY2UoYC4uLnVuaWZpZWQgdGhlIGNvbXBsZXggc3Vic3RpdHV0aW9uJ3MgJyR7Y29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudFN0cmluZ30nIHN0YXRlbWVudCB3aXRoIHRoZSBzaW1wbGUgc3Vic3RpdHV0aW9uJ3MgJyR7c2ltcGxlU3Vic3RpdHV0aW9uU3RhdGVtZW50U3RyaW5nfScgc3RhdGVtZW50LmAsIHNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnRXaXRoU2ltcGxlU3Vic3RpdHV0aW9uU3RhdGVtZW50O1xufVxuIl0sIm5hbWVzIjpbInVuaWZ5Q29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudFdpdGhTaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnQiLCJjb21wbGV4U3Vic3RpdHV0aW9uU3RhdGVtZW50Tm9kZSIsInNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUiLCJzdWJzdGl0dXRpb25zIiwibG9jYWxDb250ZXh0QSIsImxvY2FsQ29udGV4dEIiLCJjb21wbGV4U3Vic3RpdHV0aW9uU3RhdGVtZW50V2l0aFNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudCIsImNvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnRTdHJpbmciLCJub2RlQXNTdHJpbmciLCJzaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnRTdHJpbmciLCJ0cmFjZSIsIm5vZGVBIiwibm9kZUIiLCJ1bmlmaWVkIiwibWV0YUxldmVsVW5pZmllciIsInVuaWZ5Il0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFJQTs7O2VBQXdCQTs7O2dFQUZLOzs7Ozs7QUFFZCxTQUFTQSxpRUFBaUVDLGdDQUFnQyxFQUFFQywrQkFBK0IsRUFBRUMsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLGFBQWE7SUFDck0sSUFBSUM7SUFFSixJQUFNQyxxQ0FBcUNGLGNBQWNHLFlBQVksQ0FBQ1AsbUNBQ2hFUSxvQ0FBb0NKLGNBQWNHLFlBQVksQ0FBQ047SUFFckVHLGNBQWNLLEtBQUssQ0FBQyxBQUFDLHdDQUF3SEQsT0FBakZGLG9DQUFtQyxnREFBZ0YsT0FBbENFLG1DQUFrQyxtQkFBaUJQO0lBRWhNLElBQU1TLFFBQVFWLGtDQUNSVyxRQUFRVixpQ0FBa0MsR0FBRztJQUVuREUsZ0JBQWdCQyxlQUFnQixHQUFHO0lBRW5DLElBQU1RLFVBQVVDLGtCQUFnQixDQUFDQyxLQUFLLENBQUNKLE9BQU9DLE9BQU9ULGVBQWVDLGVBQWVDO0lBRW5GQyw4REFBOERPLFNBQVUsR0FBRztJQUUzRSxJQUFJUCw2REFBNkQ7UUFDL0RELGNBQWNLLEtBQUssQ0FBQyxBQUFDLDBDQUEwSEQsT0FBakZGLG9DQUFtQyxnREFBZ0YsT0FBbENFLG1DQUFrQyxpQkFBZVA7SUFDbE07SUFFQSxPQUFPSTtBQUNUIn0=