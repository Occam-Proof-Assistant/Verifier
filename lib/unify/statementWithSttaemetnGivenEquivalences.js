"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyStatementWithStatementGivenEquivalences;
    }
});
var _substitutions = /*#__PURE__*/ _interop_require_default(require("../substitutions"));
var _intrinsicLevel = /*#__PURE__*/ _interop_require_default(require("../unifier/intrinsicLevel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyStatementWithStatementGivenEquivalences(statementNodeA, statementNodeB, equivalences, localContextA, localContextB) {
    var statementUnifiedWithStatementGivenEquivalences = false;
    var statementStringA = localContextA.nodeAsString(statementNodeA), statementStringB = localContextB.nodeAsString(statementNodeB);
    localContextB.trace("Unifying the '".concat(statementStringB, "' statement with the '").concat(statementStringA, "' statement given equivalences..."), statementNodeB);
    if (!statementUnifiedWithStatementGivenEquivalences) {
        var substitutions = _substitutions.default.fromNothing(), nodeA = statementNodeA, nodeB = statementNodeB, unified = _intrinsicLevel.default.unify(nodeA, nodeB, substitutions, localContextA, localContextB);
        if (unified) {
            var substitutionsUnifiedWithEquivalences = substitutions.unifyWithEquivalences(equivalences, localContextA, localContextB);
            statementUnifiedWithStatementGivenEquivalences = substitutionsUnifiedWithEquivalences; ///
        }
    }
    if (!statementUnifiedWithStatementGivenEquivalences) {
        var localContext = localContextA; ///
        localContextA = localContextB; ///
        localContextB = localContext; ///
        var substitutions1 = _substitutions.default.fromNothing(), nodeA1 = statementNodeB, nodeB1 = statementNodeA, unified1 = _intrinsicLevel.default.unify(nodeA1, nodeB1, substitutions1, localContextA, localContextB);
        if (unified1) {
            var substitutionsUnifiedWithEquivalences1 = substitutions1.unifyWithEquivalences(equivalences, localContextA, localContextB);
            statementUnifiedWithStatementGivenEquivalences = substitutionsUnifiedWithEquivalences1; ///
        }
    }
    if (statementUnifiedWithStatementGivenEquivalences) {
        localContextB.debug("...unified the '".concat(statementStringB, "' statement with the '").concat(statementStringA, "' statement given equivalences."), statementNodeB);
    }
    return statementUnifiedWithStatementGivenEquivalences;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS9zdGF0ZW1lbnRXaXRoU3R0YWVtZXRuR2l2ZW5FcXVpdmFsZW5jZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBTdWJzdGl0dXRpb25zIGZyb20gXCIuLi9zdWJzdGl0dXRpb25zXCI7XG5pbXBvcnQgaW50cmluc2ljTGV2ZWxVbmlmaWVyIGZyb20gXCIuLi91bmlmaWVyL2ludHJpbnNpY0xldmVsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaWZ5U3RhdGVtZW50V2l0aFN0YXRlbWVudEdpdmVuRXF1aXZhbGVuY2VzKHN0YXRlbWVudE5vZGVBLCBzdGF0ZW1lbnROb2RlQiwgZXF1aXZhbGVuY2VzLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKSB7XG4gIGxldCBzdGF0ZW1lbnRVbmlmaWVkV2l0aFN0YXRlbWVudEdpdmVuRXF1aXZhbGVuY2VzID0gZmFsc2U7XG5cbiAgY29uc3Qgc3RhdGVtZW50U3RyaW5nQSA9IGxvY2FsQ29udGV4dEEubm9kZUFzU3RyaW5nKHN0YXRlbWVudE5vZGVBKSxcbiAgICAgICAgc3RhdGVtZW50U3RyaW5nQiA9IGxvY2FsQ29udGV4dEIubm9kZUFzU3RyaW5nKHN0YXRlbWVudE5vZGVCKTtcblxuICBsb2NhbENvbnRleHRCLnRyYWNlKGBVbmlmeWluZyB0aGUgJyR7c3RhdGVtZW50U3RyaW5nQn0nIHN0YXRlbWVudCB3aXRoIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmdBfScgc3RhdGVtZW50IGdpdmVuIGVxdWl2YWxlbmNlcy4uLmAsIHN0YXRlbWVudE5vZGVCKTtcblxuICBpZiAoIXN0YXRlbWVudFVuaWZpZWRXaXRoU3RhdGVtZW50R2l2ZW5FcXVpdmFsZW5jZXMpIHtcbiAgICBjb25zdCBzdWJzdGl0dXRpb25zID0gU3Vic3RpdHV0aW9ucy5mcm9tTm90aGluZygpLFxuICAgICAgICAgIG5vZGVBID0gc3RhdGVtZW50Tm9kZUEsICAvLy9cbiAgICAgICAgICBub2RlQiA9IHN0YXRlbWVudE5vZGVCLCAgLy8vXG4gICAgICAgICAgdW5pZmllZCA9IGludHJpbnNpY0xldmVsVW5pZmllci51bmlmeShub2RlQSwgbm9kZUIsIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpO1xuXG4gICAgaWYgKHVuaWZpZWQpIHtcbiAgICAgIGNvbnN0IHN1YnN0aXR1dGlvbnNVbmlmaWVkV2l0aEVxdWl2YWxlbmNlcyA9IHN1YnN0aXR1dGlvbnMudW5pZnlXaXRoRXF1aXZhbGVuY2VzKGVxdWl2YWxlbmNlcywgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qik7XG5cbiAgICAgIHN0YXRlbWVudFVuaWZpZWRXaXRoU3RhdGVtZW50R2l2ZW5FcXVpdmFsZW5jZXMgPSBzdWJzdGl0dXRpb25zVW5pZmllZFdpdGhFcXVpdmFsZW5jZXM7ICAvLy9cbiAgICB9XG4gIH1cblxuICBpZiAoIXN0YXRlbWVudFVuaWZpZWRXaXRoU3RhdGVtZW50R2l2ZW5FcXVpdmFsZW5jZXMpIHtcbiAgICBjb25zdCBsb2NhbENvbnRleHQgPSBsb2NhbENvbnRleHRBOyAvLy9cblxuICAgIGxvY2FsQ29udGV4dEEgPSBsb2NhbENvbnRleHRCOyAgLy8vXG5cbiAgICBsb2NhbENvbnRleHRCID0gbG9jYWxDb250ZXh0OyAvLy9cblxuICAgIGNvbnN0IHN1YnN0aXR1dGlvbnMgPSBTdWJzdGl0dXRpb25zLmZyb21Ob3RoaW5nKCksXG4gICAgICAgICAgbm9kZUEgPSBzdGF0ZW1lbnROb2RlQiwgIC8vL1xuICAgICAgICAgIG5vZGVCID0gc3RhdGVtZW50Tm9kZUEsICAvLy9cbiAgICAgICAgICB1bmlmaWVkID0gaW50cmluc2ljTGV2ZWxVbmlmaWVyLnVuaWZ5KG5vZGVBLCBub2RlQiwgc3Vic3RpdHV0aW9ucywgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qik7XG5cbiAgICBpZiAodW5pZmllZCkge1xuICAgICAgY29uc3Qgc3Vic3RpdHV0aW9uc1VuaWZpZWRXaXRoRXF1aXZhbGVuY2VzID0gc3Vic3RpdHV0aW9ucy51bmlmeVdpdGhFcXVpdmFsZW5jZXMoZXF1aXZhbGVuY2VzLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKTtcblxuICAgICAgc3RhdGVtZW50VW5pZmllZFdpdGhTdGF0ZW1lbnRHaXZlbkVxdWl2YWxlbmNlcyA9IHN1YnN0aXR1dGlvbnNVbmlmaWVkV2l0aEVxdWl2YWxlbmNlczsgIC8vL1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZW1lbnRVbmlmaWVkV2l0aFN0YXRlbWVudEdpdmVuRXF1aXZhbGVuY2VzKSB7XG4gICAgbG9jYWxDb250ZXh0Qi5kZWJ1ZyhgLi4udW5pZmllZCB0aGUgJyR7c3RhdGVtZW50U3RyaW5nQn0nIHN0YXRlbWVudCB3aXRoIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmdBfScgc3RhdGVtZW50IGdpdmVuIGVxdWl2YWxlbmNlcy5gLCBzdGF0ZW1lbnROb2RlQik7XG4gIH1cblxuICByZXR1cm4gc3RhdGVtZW50VW5pZmllZFdpdGhTdGF0ZW1lbnRHaXZlbkVxdWl2YWxlbmNlcztcbn0iXSwibmFtZXMiOlsidW5pZnlTdGF0ZW1lbnRXaXRoU3RhdGVtZW50R2l2ZW5FcXVpdmFsZW5jZXMiLCJzdGF0ZW1lbnROb2RlQSIsInN0YXRlbWVudE5vZGVCIiwiZXF1aXZhbGVuY2VzIiwibG9jYWxDb250ZXh0QSIsImxvY2FsQ29udGV4dEIiLCJzdGF0ZW1lbnRVbmlmaWVkV2l0aFN0YXRlbWVudEdpdmVuRXF1aXZhbGVuY2VzIiwic3RhdGVtZW50U3RyaW5nQSIsIm5vZGVBc1N0cmluZyIsInN0YXRlbWVudFN0cmluZ0IiLCJ0cmFjZSIsInN1YnN0aXR1dGlvbnMiLCJTdWJzdGl0dXRpb25zIiwiZnJvbU5vdGhpbmciLCJub2RlQSIsIm5vZGVCIiwidW5pZmllZCIsImludHJpbnNpY0xldmVsVW5pZmllciIsInVuaWZ5Iiwic3Vic3RpdHV0aW9uc1VuaWZpZWRXaXRoRXF1aXZhbGVuY2VzIiwidW5pZnlXaXRoRXF1aXZhbGVuY2VzIiwibG9jYWxDb250ZXh0IiwiZGVidWciXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQUtBOzs7ZUFBd0JBOzs7b0VBSEU7cUVBQ1E7Ozs7OztBQUVuQixTQUFTQSw2Q0FBNkNDLGNBQWMsRUFBRUMsY0FBYyxFQUFFQyxZQUFZLEVBQUVDLGFBQWEsRUFBRUMsYUFBYTtJQUM3SSxJQUFJQyxpREFBaUQ7SUFFckQsSUFBTUMsbUJBQW1CSCxjQUFjSSxZQUFZLENBQUNQLGlCQUM5Q1EsbUJBQW1CSixjQUFjRyxZQUFZLENBQUNOO0lBRXBERyxjQUFjSyxLQUFLLENBQUMsQUFBQyxpQkFBeURILE9BQXpDRSxrQkFBaUIsMEJBQXlDLE9BQWpCRixrQkFBaUIsc0NBQW9DTDtJQUVuSSxJQUFJLENBQUNJLGdEQUFnRDtRQUNuRCxJQUFNSyxnQkFBZ0JDLHNCQUFhLENBQUNDLFdBQVcsSUFDekNDLFFBQVFiLGdCQUNSYyxRQUFRYixnQkFDUmMsVUFBVUMsdUJBQXFCLENBQUNDLEtBQUssQ0FBQ0osT0FBT0MsT0FBT0osZUFBZVAsZUFBZUM7UUFFeEYsSUFBSVcsU0FBUztZQUNYLElBQU1HLHVDQUF1Q1IsY0FBY1MscUJBQXFCLENBQUNqQixjQUFjQyxlQUFlQztZQUU5R0MsaURBQWlEYSxzQ0FBdUMsR0FBRztRQUM3RjtJQUNGO0lBRUEsSUFBSSxDQUFDYixnREFBZ0Q7UUFDbkQsSUFBTWUsZUFBZWpCLGVBQWUsR0FBRztRQUV2Q0EsZ0JBQWdCQyxlQUFnQixHQUFHO1FBRW5DQSxnQkFBZ0JnQixjQUFjLEdBQUc7UUFFakMsSUFBTVYsaUJBQWdCQyxzQkFBYSxDQUFDQyxXQUFXLElBQ3pDQyxTQUFRWixnQkFDUmEsU0FBUWQsZ0JBQ1JlLFdBQVVDLHVCQUFxQixDQUFDQyxLQUFLLENBQUNKLFFBQU9DLFFBQU9KLGdCQUFlUCxlQUFlQztRQUV4RixJQUFJVyxVQUFTO1lBQ1gsSUFBTUcsd0NBQXVDUixlQUFjUyxxQkFBcUIsQ0FBQ2pCLGNBQWNDLGVBQWVDO1lBRTlHQyxpREFBaURhLHVDQUF1QyxHQUFHO1FBQzdGO0lBQ0Y7SUFFQSxJQUFJYixnREFBZ0Q7UUFDbERELGNBQWNpQixLQUFLLENBQUMsQUFBQyxtQkFBMkRmLE9BQXpDRSxrQkFBaUIsMEJBQXlDLE9BQWpCRixrQkFBaUIsb0NBQWtDTDtJQUNySTtJQUVBLE9BQU9JO0FBQ1QifQ==