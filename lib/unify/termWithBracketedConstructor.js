"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyTermWithBracketedConstructor;
    }
});
var _shim = /*#__PURE__*/ _interop_require_default(require("../shim"));
var _bracketed = /*#__PURE__*/ _interop_require_default(require("../constructor/bracketed"));
var _query = require("../utilities/query");
var _termWithConstructors = require("../unify/termWithConstructors");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var termNodeQuery = (0, _query.nodeQuery)("/term/argument/term");
function unifyTermWithBracketedConstructor(termNode, terms, localContext, verifyAhead) {
    var termUnifiedWithBracketedConstructor;
    var termString = localContext.nodeAsString(termNode), bracketedTerms = [];
    localContext.trace("Unifying the '".concat(termString, "' term with the bracketed constructor..."), termNode);
    termUnifiedWithBracketedConstructor = (0, _termWithConstructors.unifyTermWithConstructor)(termNode, bracketedTerms, _bracketed.default, localContext, function() {
        var verifiedAhead;
        var bracketedTermNode = termNode; ///
        termNode = termNodeQuery(bracketedTermNode); ///
        var verifyTerm = _shim.default.verifyTerm, termVVerified = verifyTerm(termNode, terms, localContext, verifyAhead);
        verifiedAhead = termVVerified; ///
        return verifiedAhead;
    });
    if (termUnifiedWithBracketedConstructor) {
        localContext.debug("...unified the '".concat(termString, "' term with the bracketed constructor."), termNode);
    }
    return termUnifiedWithBracketedConstructor;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS90ZXJtV2l0aEJyYWNrZXRlZENvbnN0cnVjdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgc2hpbSBmcm9tIFwiLi4vc2hpbVwiO1xuaW1wb3J0IGJyYWNrZXRlZENvbnN0cnVjdG9yIGZyb20gXCIuLi9jb25zdHJ1Y3Rvci9icmFja2V0ZWRcIjtcblxuaW1wb3J0IHsgbm9kZVF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9xdWVyeVwiO1xuaW1wb3J0IHsgdW5pZnlUZXJtV2l0aENvbnN0cnVjdG9yIH0gZnJvbSBcIi4uL3VuaWZ5L3Rlcm1XaXRoQ29uc3RydWN0b3JzXCI7XG5cbmNvbnN0IHRlcm1Ob2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdGVybS9hcmd1bWVudC90ZXJtXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlmeVRlcm1XaXRoQnJhY2tldGVkQ29uc3RydWN0b3IodGVybU5vZGUsIHRlcm1zLCBsb2NhbENvbnRleHQsIHZlcmlmeUFoZWFkKSB7XG4gIGxldCB0ZXJtVW5pZmllZFdpdGhCcmFja2V0ZWRDb25zdHJ1Y3RvcjtcblxuICBjb25zdCB0ZXJtU3RyaW5nID0gbG9jYWxDb250ZXh0Lm5vZGVBc1N0cmluZyh0ZXJtTm9kZSksXG4gICAgICAgIGJyYWNrZXRlZFRlcm1zID0gW107XG5cbiAgbG9jYWxDb250ZXh0LnRyYWNlKGBVbmlmeWluZyB0aGUgJyR7dGVybVN0cmluZ30nIHRlcm0gd2l0aCB0aGUgYnJhY2tldGVkIGNvbnN0cnVjdG9yLi4uYCwgdGVybU5vZGUpO1xuXG4gIHRlcm1VbmlmaWVkV2l0aEJyYWNrZXRlZENvbnN0cnVjdG9yID0gdW5pZnlUZXJtV2l0aENvbnN0cnVjdG9yKHRlcm1Ob2RlLCBicmFja2V0ZWRUZXJtcywgYnJhY2tldGVkQ29uc3RydWN0b3IsIGxvY2FsQ29udGV4dCwgKCkgPT4ge1xuICAgIGxldCB2ZXJpZmllZEFoZWFkO1xuXG4gICAgY29uc3QgYnJhY2tldGVkVGVybU5vZGUgPSB0ZXJtTm9kZTsgLy8vXG5cbiAgICB0ZXJtTm9kZSA9IHRlcm1Ob2RlUXVlcnkoYnJhY2tldGVkVGVybU5vZGUpOyAvLy9cblxuICAgIGNvbnN0IHsgdmVyaWZ5VGVybSB9ID0gc2hpbSxcbiAgICAgICAgICB0ZXJtVlZlcmlmaWVkID0gdmVyaWZ5VGVybSh0ZXJtTm9kZSwgdGVybXMsIGxvY2FsQ29udGV4dCwgdmVyaWZ5QWhlYWQpO1xuXG4gICAgdmVyaWZpZWRBaGVhZCA9IHRlcm1WVmVyaWZpZWQ7ICAvLy9cblxuICAgIHJldHVybiB2ZXJpZmllZEFoZWFkO1xuICB9KTtcblxuICBpZiAodGVybVVuaWZpZWRXaXRoQnJhY2tldGVkQ29uc3RydWN0b3IpIHtcbiAgICBsb2NhbENvbnRleHQuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3Rlcm1TdHJpbmd9JyB0ZXJtIHdpdGggdGhlIGJyYWNrZXRlZCBjb25zdHJ1Y3Rvci5gLCB0ZXJtTm9kZSk7XG4gIH1cblxuICByZXR1cm4gdGVybVVuaWZpZWRXaXRoQnJhY2tldGVkQ29uc3RydWN0b3I7XG59XG4iXSwibmFtZXMiOlsidW5pZnlUZXJtV2l0aEJyYWNrZXRlZENvbnN0cnVjdG9yIiwidGVybU5vZGVRdWVyeSIsIm5vZGVRdWVyeSIsInRlcm1Ob2RlIiwidGVybXMiLCJsb2NhbENvbnRleHQiLCJ2ZXJpZnlBaGVhZCIsInRlcm1VbmlmaWVkV2l0aEJyYWNrZXRlZENvbnN0cnVjdG9yIiwidGVybVN0cmluZyIsIm5vZGVBc1N0cmluZyIsImJyYWNrZXRlZFRlcm1zIiwidHJhY2UiLCJ1bmlmeVRlcm1XaXRoQ29uc3RydWN0b3IiLCJicmFja2V0ZWRDb25zdHJ1Y3RvciIsInZlcmlmaWVkQWhlYWQiLCJicmFja2V0ZWRUZXJtTm9kZSIsInZlcmlmeVRlcm0iLCJzaGltIiwidGVybVZWZXJpZmllZCIsImRlYnVnIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFVQTs7O2VBQXdCQTs7OzJEQVJQO2dFQUNnQjtxQkFFUDtvQ0FDZTs7Ozs7O0FBRXpDLElBQU1DLGdCQUFnQkMsSUFBQUEsZ0JBQVMsRUFBQztBQUVqQixTQUFTRixrQ0FBa0NHLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLFdBQVc7SUFDbEcsSUFBSUM7SUFFSixJQUFNQyxhQUFhSCxhQUFhSSxZQUFZLENBQUNOLFdBQ3ZDTyxpQkFBaUIsRUFBRTtJQUV6QkwsYUFBYU0sS0FBSyxDQUFDLEFBQUMsaUJBQTJCLE9BQVhILFlBQVcsNkNBQTJDTDtJQUUxRkksc0NBQXNDSyxJQUFBQSw4Q0FBd0IsRUFBQ1QsVUFBVU8sZ0JBQWdCRyxrQkFBb0IsRUFBRVIsY0FBYztRQUMzSCxJQUFJUztRQUVKLElBQU1DLG9CQUFvQlosVUFBVSxHQUFHO1FBRXZDQSxXQUFXRixjQUFjYyxvQkFBb0IsR0FBRztRQUVoRCxJQUFNLEFBQUVDLGFBQWVDLGFBQUksQ0FBbkJELFlBQ0ZFLGdCQUFnQkYsV0FBV2IsVUFBVUMsT0FBT0MsY0FBY0M7UUFFaEVRLGdCQUFnQkksZUFBZ0IsR0FBRztRQUVuQyxPQUFPSjtJQUNUO0lBRUEsSUFBSVAscUNBQXFDO1FBQ3ZDRixhQUFhYyxLQUFLLENBQUMsQUFBQyxtQkFBNkIsT0FBWFgsWUFBVywyQ0FBeUNMO0lBQzVGO0lBRUEsT0FBT0k7QUFDVCJ9