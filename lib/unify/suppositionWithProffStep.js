"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifySuppositionWithProofStep;
    }
});
var _subproof = require("../utilities/subproof");
function unifySuppositionWithProofStep(suppositionA, proofStepB, substitutions, localContextA, localContextB) {
    var suppositionUnified = false;
    var suppositionAStatementNode = suppositionA.getStatementNode();
    if (suppositionAStatementNode !== null) {
        var proofStepBSubproofNode = proofStepB.getSubproofNode(), proofStepBStatementNode = proofStepB.getStatementNode(), subproofNodeB = proofStepBSubproofNode, statementNodeB = proofStepBStatementNode, statementNodeA = suppositionAStatementNode, statementStringA = localContextA.nodeAsString(statementNodeA);
        substitutions.snapshot();
        if (subproofNodeB !== null) {
            var subproofStringB = (0, _subproof.subproofNodeAsSubproofString)(subproofNodeB, localContextB);
            localContextB.trace("Unifying the '".concat(subproofStringB, "' subproof with the supposition's '").concat(statementStringA, "' statement..."), subproofNodeB);
            var subproofUnified = suppositionA.unifySubproof(subproofNodeB, substitutions, localContextA, localContextB);
            if (subproofUnified) {
                localContextB.debug("...unified the '".concat(subproofStringB, "' subproof with the supposition's '").concat(statementStringA, "' statement."), subproofNodeB);
                suppositionUnified = true;
            }
        }
        if (statementNodeB !== null) {
            var statementStringB = localContextB.nodeAsString(statementNodeB);
            localContextB.trace("Unifying the '".concat(statementStringB, "' statement with the supposition's '").concat(statementStringA, "' statement..."), statementNodeB);
            var statementUnified = suppositionA.unifyStatement(statementNodeB, substitutions, localContextA, localContextB);
            if (statementUnified) {
                localContextB.debug("...unified the '".concat(statementStringB, "' statement with the supposition's '").concat(statementStringA, "' statement."), statementNodeB);
                suppositionUnified = true;
            }
        }
        suppositionUnified ? substitutions.continue() : substitutions.rollback(localContextA, localContextB);
    }
    return suppositionUnified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS9zdXBwb3NpdGlvbldpdGhQcm9mZlN0ZXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHN1YnByb29mTm9kZUFzU3VicHJvb2ZTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3N1YnByb29mXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaWZ5U3VwcG9zaXRpb25XaXRoUHJvb2ZTdGVwKHN1cHBvc2l0aW9uQSwgcHJvb2ZTdGVwQiwgc3Vic3RpdHV0aW9ucywgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qikge1xuICBsZXQgc3VwcG9zaXRpb25VbmlmaWVkID0gZmFsc2U7XG5cbiAgY29uc3Qgc3VwcG9zaXRpb25BU3RhdGVtZW50Tm9kZSA9IHN1cHBvc2l0aW9uQS5nZXRTdGF0ZW1lbnROb2RlKCk7XG5cbiAgaWYgKHN1cHBvc2l0aW9uQVN0YXRlbWVudE5vZGUgIT09IG51bGwpIHtcbiAgICBjb25zdCBwcm9vZlN0ZXBCU3VicHJvb2ZOb2RlID0gcHJvb2ZTdGVwQi5nZXRTdWJwcm9vZk5vZGUoKSxcbiAgICAgICAgICBwcm9vZlN0ZXBCU3RhdGVtZW50Tm9kZSA9IHByb29mU3RlcEIuZ2V0U3RhdGVtZW50Tm9kZSgpLFxuICAgICAgICAgIHN1YnByb29mTm9kZUIgPSBwcm9vZlN0ZXBCU3VicHJvb2ZOb2RlLCAvLy9cbiAgICAgICAgICBzdGF0ZW1lbnROb2RlQiA9IHByb29mU3RlcEJTdGF0ZW1lbnROb2RlLCAvLy9cbiAgICAgICAgICBzdGF0ZW1lbnROb2RlQSA9IHN1cHBvc2l0aW9uQVN0YXRlbWVudE5vZGUsIC8vL1xuICAgICAgICAgIHN0YXRlbWVudFN0cmluZ0EgPSBsb2NhbENvbnRleHRBLm5vZGVBc1N0cmluZyhzdGF0ZW1lbnROb2RlQSlcblxuICAgIHN1YnN0aXR1dGlvbnMuc25hcHNob3QoKTtcblxuICAgIGlmIChzdWJwcm9vZk5vZGVCICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBzdWJwcm9vZlN0cmluZ0IgPSBzdWJwcm9vZk5vZGVBc1N1YnByb29mU3RyaW5nKHN1YnByb29mTm9kZUIsIGxvY2FsQ29udGV4dEIpO1xuXG4gICAgICBsb2NhbENvbnRleHRCLnRyYWNlKGBVbmlmeWluZyB0aGUgJyR7c3VicHJvb2ZTdHJpbmdCfScgc3VicHJvb2Ygd2l0aCB0aGUgc3VwcG9zaXRpb24ncyAnJHtzdGF0ZW1lbnRTdHJpbmdBfScgc3RhdGVtZW50Li4uYCwgc3VicHJvb2ZOb2RlQik7XG5cbiAgICAgIGNvbnN0IHN1YnByb29mVW5pZmllZCA9IHN1cHBvc2l0aW9uQS51bmlmeVN1YnByb29mKHN1YnByb29mTm9kZUIsIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpO1xuXG4gICAgICBpZiAoc3VicHJvb2ZVbmlmaWVkKSB7XG4gICAgICAgIGxvY2FsQ29udGV4dEIuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3N1YnByb29mU3RyaW5nQn0nIHN1YnByb29mIHdpdGggdGhlIHN1cHBvc2l0aW9uJ3MgJyR7c3RhdGVtZW50U3RyaW5nQX0nIHN0YXRlbWVudC5gLCBzdWJwcm9vZk5vZGVCKTtcblxuICAgICAgICBzdXBwb3NpdGlvblVuaWZpZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdGF0ZW1lbnROb2RlQiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgc3RhdGVtZW50U3RyaW5nQiA9IGxvY2FsQ29udGV4dEIubm9kZUFzU3RyaW5nKHN0YXRlbWVudE5vZGVCKTtcblxuICAgICAgbG9jYWxDb250ZXh0Qi50cmFjZShgVW5pZnlpbmcgdGhlICcke3N0YXRlbWVudFN0cmluZ0J9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgc3VwcG9zaXRpb24ncyAnJHtzdGF0ZW1lbnRTdHJpbmdBfScgc3RhdGVtZW50Li4uYCwgc3RhdGVtZW50Tm9kZUIpO1xuXG4gICAgICBjb25zdCBzdGF0ZW1lbnRVbmlmaWVkID0gc3VwcG9zaXRpb25BLnVuaWZ5U3RhdGVtZW50KHN0YXRlbWVudE5vZGVCLCBzdWJzdGl0dXRpb25zLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKTtcblxuICAgICAgaWYgKHN0YXRlbWVudFVuaWZpZWQpIHtcbiAgICAgICAgbG9jYWxDb250ZXh0Qi5kZWJ1ZyhgLi4udW5pZmllZCB0aGUgJyR7c3RhdGVtZW50U3RyaW5nQn0nIHN0YXRlbWVudCB3aXRoIHRoZSBzdXBwb3NpdGlvbidzICcke3N0YXRlbWVudFN0cmluZ0F9JyBzdGF0ZW1lbnQuYCwgc3RhdGVtZW50Tm9kZUIpO1xuXG4gICAgICAgIHN1cHBvc2l0aW9uVW5pZmllZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3VwcG9zaXRpb25VbmlmaWVkID9cbiAgICAgIHN1YnN0aXR1dGlvbnMuY29udGludWUoKSA6XG4gICAgICAgIHN1YnN0aXR1dGlvbnMucm9sbGJhY2sobG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qik7XG4gIH1cblxuICByZXR1cm4gc3VwcG9zaXRpb25VbmlmaWVkO1xufVxuIl0sIm5hbWVzIjpbInVuaWZ5U3VwcG9zaXRpb25XaXRoUHJvb2ZTdGVwIiwic3VwcG9zaXRpb25BIiwicHJvb2ZTdGVwQiIsInN1YnN0aXR1dGlvbnMiLCJsb2NhbENvbnRleHRBIiwibG9jYWxDb250ZXh0QiIsInN1cHBvc2l0aW9uVW5pZmllZCIsInN1cHBvc2l0aW9uQVN0YXRlbWVudE5vZGUiLCJnZXRTdGF0ZW1lbnROb2RlIiwicHJvb2ZTdGVwQlN1YnByb29mTm9kZSIsImdldFN1YnByb29mTm9kZSIsInByb29mU3RlcEJTdGF0ZW1lbnROb2RlIiwic3VicHJvb2ZOb2RlQiIsInN0YXRlbWVudE5vZGVCIiwic3RhdGVtZW50Tm9kZUEiLCJzdGF0ZW1lbnRTdHJpbmdBIiwibm9kZUFzU3RyaW5nIiwic25hcHNob3QiLCJzdWJwcm9vZlN0cmluZ0IiLCJzdWJwcm9vZk5vZGVBc1N1YnByb29mU3RyaW5nIiwidHJhY2UiLCJzdWJwcm9vZlVuaWZpZWQiLCJ1bmlmeVN1YnByb29mIiwiZGVidWciLCJzdGF0ZW1lbnRTdHJpbmdCIiwic3RhdGVtZW50VW5pZmllZCIsInVuaWZ5U3RhdGVtZW50IiwiY29udGludWUiLCJyb2xsYmFjayJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBSUE7OztlQUF3QkE7Ozt3QkFGcUI7QUFFOUIsU0FBU0EsOEJBQThCQyxZQUFZLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLGFBQWE7SUFDekgsSUFBSUMscUJBQXFCO0lBRXpCLElBQU1DLDRCQUE0Qk4sYUFBYU8sZ0JBQWdCO0lBRS9ELElBQUlELDhCQUE4QixNQUFNO1FBQ3RDLElBQU1FLHlCQUF5QlAsV0FBV1EsZUFBZSxJQUNuREMsMEJBQTBCVCxXQUFXTSxnQkFBZ0IsSUFDckRJLGdCQUFnQkgsd0JBQ2hCSSxpQkFBaUJGLHlCQUNqQkcsaUJBQWlCUCwyQkFDakJRLG1CQUFtQlgsY0FBY1ksWUFBWSxDQUFDRjtRQUVwRFgsY0FBY2MsUUFBUTtRQUV0QixJQUFJTCxrQkFBa0IsTUFBTTtZQUMxQixJQUFNTSxrQkFBa0JDLElBQUFBLHNDQUE0QixFQUFDUCxlQUFlUDtZQUVwRUEsY0FBY2UsS0FBSyxDQUFDLEFBQUMsaUJBQXFFTCxPQUFyREcsaUJBQWdCLHVDQUFzRCxPQUFqQkgsa0JBQWlCLG1CQUFpQkg7WUFFNUgsSUFBTVMsa0JBQWtCcEIsYUFBYXFCLGFBQWEsQ0FBQ1YsZUFBZVQsZUFBZUMsZUFBZUM7WUFFaEcsSUFBSWdCLGlCQUFpQjtnQkFDbkJoQixjQUFja0IsS0FBSyxDQUFDLEFBQUMsbUJBQXVFUixPQUFyREcsaUJBQWdCLHVDQUFzRCxPQUFqQkgsa0JBQWlCLGlCQUFlSDtnQkFFNUhOLHFCQUFxQjtZQUN2QjtRQUNGO1FBRUEsSUFBSU8sbUJBQW1CLE1BQU07WUFDM0IsSUFBTVcsbUJBQW1CbkIsY0FBY1csWUFBWSxDQUFDSDtZQUVwRFIsY0FBY2UsS0FBSyxDQUFDLEFBQUMsaUJBQXVFTCxPQUF2RFMsa0JBQWlCLHdDQUF1RCxPQUFqQlQsa0JBQWlCLG1CQUFpQkY7WUFFOUgsSUFBTVksbUJBQW1CeEIsYUFBYXlCLGNBQWMsQ0FBQ2IsZ0JBQWdCVixlQUFlQyxlQUFlQztZQUVuRyxJQUFJb0Isa0JBQWtCO2dCQUNwQnBCLGNBQWNrQixLQUFLLENBQUMsQUFBQyxtQkFBeUVSLE9BQXZEUyxrQkFBaUIsd0NBQXVELE9BQWpCVCxrQkFBaUIsaUJBQWVGO2dCQUU5SFAscUJBQXFCO1lBQ3ZCO1FBQ0Y7UUFFQUEscUJBQ0VILGNBQWN3QixRQUFRLEtBQ3BCeEIsY0FBY3lCLFFBQVEsQ0FBQ3hCLGVBQWVDO0lBQzVDO0lBRUEsT0FBT0M7QUFDVCJ9