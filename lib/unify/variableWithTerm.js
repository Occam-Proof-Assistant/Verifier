"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyVariableWithTerm;
    }
});
var _termForVariable = /*#__PURE__*/ _interop_require_default(require("../substitution/termForVariable"));
var _query = require("../utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var variableNodeQuery = (0, _query.nodeQuery)("/term/variable");
function unifyVariableWithTerm(variableNodeA, termNodeB, substitutions, localContextA, localContextB) {
    var variableUnifiedWithTerm = false;
    var substitution = substitutions.findSubstitutionByVariableNode(variableNodeA);
    if (substitution !== null) {
        var termNodeMatches = substitution.matchTermNode(termNodeB);
        if (termNodeMatches) {
            variableUnifiedWithTerm = true;
        }
    } else {
        var variableA = localContextA.findVariableByVariableNode(variableNodeA), variableB = variableFromTermNode(termNodeB, localContextB);
        if (variableA !== variableB) {
            var termNode = termNodeB, variableNode = variableNodeA, termForVariableSubstitution = _termForVariable.default.fromTernNodeAndVariableNode(termNode, variableNode), substitution1 = termForVariableSubstitution; ///
            substitutions.addSubstitution(substitution1, localContextA, localContextB);
        }
        variableUnifiedWithTerm = true;
    }
    return variableUnifiedWithTerm;
}
function variableFromTermNode(termNode, localContext) {
    var variable = null;
    var variableNode = variableNodeQuery(termNode);
    if (variableNode !== null) {
        variable = localContext.findVariableByVariableNode(variableNode);
    }
    return variable;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS92YXJpYWJsZVdpdGhUZXJtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgVGVybUZvclZhcmlhYmxlU3Vic3RpdHV0aW9uIGZyb20gXCIuLi9zdWJzdGl0dXRpb24vdGVybUZvclZhcmlhYmxlXCI7XG5cbmltcG9ydCB7IG5vZGVRdWVyeSB9IGZyb20gXCIuLi91dGlsaXRpZXMvcXVlcnlcIjtcblxuY29uc3QgdmFyaWFibGVOb2RlUXVlcnkgPSBub2RlUXVlcnkoXCIvdGVybS92YXJpYWJsZVwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pZnlWYXJpYWJsZVdpdGhUZXJtKHZhcmlhYmxlTm9kZUEsIHRlcm1Ob2RlQiwgc3Vic3RpdHV0aW9ucywgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qikge1xuICBsZXQgdmFyaWFibGVVbmlmaWVkV2l0aFRlcm0gPSBmYWxzZTtcblxuICBjb25zdCBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb25zLmZpbmRTdWJzdGl0dXRpb25CeVZhcmlhYmxlTm9kZSh2YXJpYWJsZU5vZGVBKTtcblxuICBpZiAoc3Vic3RpdHV0aW9uICE9PSBudWxsKSB7XG4gICAgY29uc3QgdGVybU5vZGVNYXRjaGVzID0gc3Vic3RpdHV0aW9uLm1hdGNoVGVybU5vZGUodGVybU5vZGVCKTtcblxuICAgIGlmICh0ZXJtTm9kZU1hdGNoZXMpIHtcbiAgICAgIHZhcmlhYmxlVW5pZmllZFdpdGhUZXJtID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdmFyaWFibGVBID0gbG9jYWxDb250ZXh0QS5maW5kVmFyaWFibGVCeVZhcmlhYmxlTm9kZSh2YXJpYWJsZU5vZGVBKSxcbiAgICAgICAgICB2YXJpYWJsZUIgPSB2YXJpYWJsZUZyb21UZXJtTm9kZSh0ZXJtTm9kZUIsIGxvY2FsQ29udGV4dEIpO1xuXG4gICAgaWYgKHZhcmlhYmxlQSAhPT0gdmFyaWFibGVCKSB7XG4gICAgICBjb25zdCB0ZXJtTm9kZSA9IHRlcm1Ob2RlQiwgLy8vXG4gICAgICAgICAgICB2YXJpYWJsZU5vZGUgPSB2YXJpYWJsZU5vZGVBLCAvLy9cbiAgICAgICAgICAgIHRlcm1Gb3JWYXJpYWJsZVN1YnN0aXR1dGlvbiA9IFRlcm1Gb3JWYXJpYWJsZVN1YnN0aXR1dGlvbi5mcm9tVGVybk5vZGVBbmRWYXJpYWJsZU5vZGUodGVybU5vZGUsIHZhcmlhYmxlTm9kZSksXG4gICAgICAgICAgICBzdWJzdGl0dXRpb24gPSB0ZXJtRm9yVmFyaWFibGVTdWJzdGl0dXRpb247ICAvLy9cblxuICAgICAgc3Vic3RpdHV0aW9ucy5hZGRTdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKTtcbiAgICB9XG5cbiAgICB2YXJpYWJsZVVuaWZpZWRXaXRoVGVybSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gdmFyaWFibGVVbmlmaWVkV2l0aFRlcm07XG59XG5cbmZ1bmN0aW9uIHZhcmlhYmxlRnJvbVRlcm1Ob2RlKHRlcm1Ob2RlLCBsb2NhbENvbnRleHQpIHtcbiAgbGV0IHZhcmlhYmxlID0gbnVsbDtcblxuICBjb25zdCB2YXJpYWJsZU5vZGUgPSB2YXJpYWJsZU5vZGVRdWVyeSh0ZXJtTm9kZSk7XG5cbiAgaWYgKHZhcmlhYmxlTm9kZSAhPT0gbnVsbCkge1xuICAgIHZhcmlhYmxlID0gbG9jYWxDb250ZXh0LmZpbmRWYXJpYWJsZUJ5VmFyaWFibGVOb2RlKHZhcmlhYmxlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gdmFyaWFibGU7XG59XG4iXSwibmFtZXMiOlsidW5pZnlWYXJpYWJsZVdpdGhUZXJtIiwidmFyaWFibGVOb2RlUXVlcnkiLCJub2RlUXVlcnkiLCJ2YXJpYWJsZU5vZGVBIiwidGVybU5vZGVCIiwic3Vic3RpdHV0aW9ucyIsImxvY2FsQ29udGV4dEEiLCJsb2NhbENvbnRleHRCIiwidmFyaWFibGVVbmlmaWVkV2l0aFRlcm0iLCJzdWJzdGl0dXRpb24iLCJmaW5kU3Vic3RpdHV0aW9uQnlWYXJpYWJsZU5vZGUiLCJ0ZXJtTm9kZU1hdGNoZXMiLCJtYXRjaFRlcm1Ob2RlIiwidmFyaWFibGVBIiwiZmluZFZhcmlhYmxlQnlWYXJpYWJsZU5vZGUiLCJ2YXJpYWJsZUIiLCJ2YXJpYWJsZUZyb21UZXJtTm9kZSIsInRlcm1Ob2RlIiwidmFyaWFibGVOb2RlIiwidGVybUZvclZhcmlhYmxlU3Vic3RpdHV0aW9uIiwiVGVybUZvclZhcmlhYmxlU3Vic3RpdHV0aW9uIiwiZnJvbVRlcm5Ob2RlQW5kVmFyaWFibGVOb2RlIiwiYWRkU3Vic3RpdHV0aW9uIiwibG9jYWxDb250ZXh0IiwidmFyaWFibGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVFBOzs7ZUFBd0JBOzs7c0VBTmdCO3FCQUVkOzs7Ozs7QUFFMUIsSUFBTUMsb0JBQW9CQyxJQUFBQSxnQkFBUyxFQUFDO0FBRXJCLFNBQVNGLHNCQUFzQkcsYUFBYSxFQUFFQyxTQUFTLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxhQUFhO0lBQ2pILElBQUlDLDBCQUEwQjtJQUU5QixJQUFNQyxlQUFlSixjQUFjSyw4QkFBOEIsQ0FBQ1A7SUFFbEUsSUFBSU0saUJBQWlCLE1BQU07UUFDekIsSUFBTUUsa0JBQWtCRixhQUFhRyxhQUFhLENBQUNSO1FBRW5ELElBQUlPLGlCQUFpQjtZQUNuQkgsMEJBQTBCO1FBQzVCO0lBQ0YsT0FBTztRQUNMLElBQU1LLFlBQVlQLGNBQWNRLDBCQUEwQixDQUFDWCxnQkFDckRZLFlBQVlDLHFCQUFxQlosV0FBV0c7UUFFbEQsSUFBSU0sY0FBY0UsV0FBVztZQUMzQixJQUFNRSxXQUFXYixXQUNYYyxlQUFlZixlQUNmZ0IsOEJBQThCQyx3QkFBMkIsQ0FBQ0MsMkJBQTJCLENBQUNKLFVBQVVDLGVBQ2hHVCxnQkFBZVUsNkJBQThCLEdBQUc7WUFFdERkLGNBQWNpQixlQUFlLENBQUNiLGVBQWNILGVBQWVDO1FBQzdEO1FBRUFDLDBCQUEwQjtJQUM1QjtJQUVBLE9BQU9BO0FBQ1Q7QUFFQSxTQUFTUSxxQkFBcUJDLFFBQVEsRUFBRU0sWUFBWTtJQUNsRCxJQUFJQyxXQUFXO0lBRWYsSUFBTU4sZUFBZWpCLGtCQUFrQmdCO0lBRXZDLElBQUlDLGlCQUFpQixNQUFNO1FBQ3pCTSxXQUFXRCxhQUFhVCwwQkFBMEIsQ0FBQ0k7SUFDckQ7SUFFQSxPQUFPTTtBQUNUIn0=