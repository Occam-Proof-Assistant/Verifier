"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyQualifiedStatement;
    }
});
var _metavariable = /*#__PURE__*/ _interop_require_default(require("../unifier/metavariable"));
var _statementForMetavariable = /*#__PURE__*/ _interop_require_default(require("../substitution/statementForMetavariable"));
var _query = require("../utilities/query");
var _name = require("../utilities/name");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var statementNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/statement!"), metavariableNodeQuery = (0, _query.nodeQuery)("/qualifiedStatement/reference/metavariable!");
var unifyQualifiedStatementFunctions = [
    unifyQualifiedStatementAWithRule,
    unifyQualifiedStatementAWithAxiom,
    unifyQualifiedStatementAWithLemma,
    unifyQualifiedStatementAWithTheorem,
    unifyQualifiedStatementAWithConjecture,
    unifyQualifiedStatementAWithReference
];
function unifyQualifiedStatement(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnified;
    var qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode);
    localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement..."), qualifiedStatementNode);
    qualifiedStatementUnified = unifyQualifiedStatementFunctions.some(function(unifyQualifiedStatementFunction) {
        var qualifiedStatementUnified = unifyQualifiedStatementFunction(qualifiedStatementNode, substitutions, localContext);
        return qualifiedStatementUnified;
    });
    if (qualifiedStatementUnified) {
        localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement."), qualifiedStatementNode);
    }
    return qualifiedStatementUnified;
}
function unifyQualifiedStatementAWithRule(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithRule = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), rule = localContext.findRuleByMetavariableNode(metavariableNode);
    if (rule !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), labelMetavariableNodes = rule.getLabelMetavariableNodes(), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode), labelMetavariableNodesString = localContext.nodesAsString(labelMetavariableNodes);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' rule..."), qualifiedStatementNode);
        var statementUnified = rule.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithRule = statementUnified; ///
        if (qualifiedStatementUnifiedWithRule) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' rule."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithRule;
}
function unifyQualifiedStatementAWithAxiom(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithAxiom = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), axiom = localContext.findAxiomByMetavariableNode(metavariableNode);
    if (axiom !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), labelMetavariableNodes = axiom.getLabelMetavariableNodes(), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode), labelMetavariableNodesString = localContext.nodesAsString(labelMetavariableNodes);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' axiom..."), qualifiedStatementNode);
        var statementUnified = axiom.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithAxiom = statementUnified; ///
        if (qualifiedStatementUnifiedWithAxiom) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' axiom."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithAxiom;
}
function unifyQualifiedStatementAWithLemma(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithLemma = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), lemma = localContext.findLemmaByMetavariableNode(metavariableNode);
    if (lemma !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), labelMetavariableNodes = lemma.getLabelMetavariableNodes(), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode), labelMetavariableNodesString = localContext.nodesAsString(labelMetavariableNodes);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' lemma..."), qualifiedStatementNode);
        var statementUnified = lemma.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithLemma = statementUnified; ///
        if (qualifiedStatementUnifiedWithLemma) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' lemma."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithLemma;
}
function unifyQualifiedStatementAWithTheorem(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithTheorem = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), theorem = localContext.findTheoremByMetavariableNode(metavariableNode);
    if (theorem !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), labelMetavariableNodes = theorem.getLabelMetavariableNodes(), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode), labelMetavariableNodesString = localContext.nodesAsString(labelMetavariableNodes);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' theorem..."), qualifiedStatementNode);
        var statementUnified = theorem.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithTheorem = statementUnified; ///
        if (qualifiedStatementUnifiedWithTheorem) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' theorem."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithTheorem;
}
function unifyQualifiedStatementAWithConjecture(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithConjecture = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode), conjecture = localContext.findConjectureByMetavariableNode(metavariableNode);
    if (conjecture !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), labelMetavariableNodes = conjecture.getLabelMetavariableNodes(), qualifiedStatementString = localContext.nodeAsString(qualifiedStatementNode), labelMetavariableNodesString = localContext.nodesAsString(labelMetavariableNodes);
        localContext.trace("Unifying the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' conjecture..."), qualifiedStatementNode);
        var statementUnified = conjecture.unifyStatement(statementNode, localContext);
        qualifiedStatementUnifiedWithConjecture = statementUnified; ///
        if (qualifiedStatementUnifiedWithConjecture) {
            localContext.debug("...unified the '".concat(qualifiedStatementString, "' qualified statement with the '").concat(labelMetavariableNodesString, "' conjecture."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithConjecture;
}
function unifyQualifiedStatementAWithReference(qualifiedStatementNode, substitutions, localContext) {
    var qualifiedStatementUnifiedWithReference = false;
    var metavariableNode = metavariableNodeQuery(qualifiedStatementNode);
    var metavariableName = (0, _name.metavariableNameFromMetavariableNode)(metavariableNode), metavariable = localContext.findMetavariableByMetavariableName(metavariableName);
    if (metavariable !== null) {
        var statementNode = statementNodeQuery(qualifiedStatementNode), statementString = localContext.nodeAsString(statementNode), metavariableString = localContext.nodeAsString(metavariableNode);
        localContext.trace("Unifying the '".concat(statementString, "' qualified statement with the '").concat(metavariableString, "' reference..."), qualifiedStatementNode);
        var metavariableNodeA = metavariableNode; ///
        metavariableNode = metavariable.getNode();
        var metavariableNodeB = metavariableNode; ///
        var unified = _metavariable.default.unify(metavariableNodeA, metavariableNodeB, localContext);
        if (unified) {
            metavariableNode = metavariableNodeA; ///
            var statementForMetavariableSubstitution = _statementForMetavariable.default.fromStatementNodeAndMetavariableNode(statementNode, metavariableNode), substitution = statementForMetavariableSubstitution, localContextA = localContext, localContextB = localContext; ///
            substitutions.addSubstitution(substitution, localContextA, localContextB);
            qualifiedStatementUnifiedWithReference = true;
        }
        if (qualifiedStatementUnifiedWithReference) {
            localContext.debug("...unified the '".concat(statementString, "' qualified statement with the '").concat(metavariableString, "' reference."), qualifiedStatementNode);
        }
    }
    return qualifiedStatementUnifiedWithReference;
}

//# sourceMappingURL=data:application/json;base64,