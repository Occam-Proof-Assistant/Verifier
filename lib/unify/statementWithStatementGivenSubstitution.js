"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyStatementWithStatementGivenSubstitution;
    }
});
var _substitutions = /*#__PURE__*/ _interop_require_default(require("../substitutions"));
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../unifier/metaLevel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function unifyStatementWithStatementGivenSubstitution(statementNodeA, statementNodeB, substitutionA, substitutions, localContextA, localContextB) {
    var statementUnifiedWithStatementGivenSubstitution = false;
    var statementStringA = localContextB.nodeAsString(statementNodeA), statementStringB = localContextB.nodeAsString(statementNodeB), substitutionStringA = substitutionA.asString(localContextA, localContextA); ///
    localContextB.trace("Unifying the '".concat(statementStringB, "' statement with the '").concat(statementStringA, "' statement given the ").concat(substitutionStringA, " substitution..."), statementNodeB);
    var transformedSubstitutionA = substitutionA.transformed(substitutions), substitutionsB = _substitutions.default.fromNothing(), substitutionB = transformedSubstitutionA; ///
    if (substitutionB !== null) {
        substitutionsB.addSubstitution(substitutionB, localContextB, localContextB); ///
    }
    var nodeA = statementNodeA, nodeB = statementNodeB, unified = _metaLevel.default.unify(nodeA, nodeB, substitutionsB, localContextB, localContextB); ///
    if (unified) {
        if (substitutionB !== null) {
            substitutionsB.removeSubstitution(substitutionB, localContextB, localContextB);
        }
        substitutionsB.forEachSubstitution(function(substitutionB) {
            var transformedSubstitutionB = substitutionB.transformedVariableNode(substitutions);
            if (transformedSubstitutionB !== null) {
                var substitution = transformedSubstitutionB; ///
                substitutions.addSubstitution(substitution, localContextA, localContextB);
            }
        });
        statementUnifiedWithStatementGivenSubstitution = true;
    }
    if (statementUnifiedWithStatementGivenSubstitution) {
        localContextB.debug("...unified the '".concat(statementStringB, "' statement with the '").concat(statementStringA, "' statement given the ").concat(substitutionStringA, " substitution."), statementNodeB);
    }
    return statementUnifiedWithStatementGivenSubstitution;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS9zdGF0ZW1lbnRXaXRoU3RhdGVtZW50R2l2ZW5TdWJzdGl0dXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBTdWJzdGl0dXRpb25zIGZyb20gXCIuLi9zdWJzdGl0dXRpb25zXCI7XG5pbXBvcnQgbWV0YUxldmVsVW5pZmllciBmcm9tIFwiLi4vdW5pZmllci9tZXRhTGV2ZWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pZnlTdGF0ZW1lbnRXaXRoU3RhdGVtZW50R2l2ZW5TdWJzdGl0dXRpb24oc3RhdGVtZW50Tm9kZUEsIHN0YXRlbWVudE5vZGVCLCBzdWJzdGl0dXRpb25BLCBzdWJzdGl0dXRpb25zLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKSB7XG4gIGxldCBzdGF0ZW1lbnRVbmlmaWVkV2l0aFN0YXRlbWVudEdpdmVuU3Vic3RpdHV0aW9uID0gZmFsc2U7XG5cbiAgY29uc3Qgc3RhdGVtZW50U3RyaW5nQSA9IGxvY2FsQ29udGV4dEIubm9kZUFzU3RyaW5nKHN0YXRlbWVudE5vZGVBKSwgIC8vL1xuICAgICAgICBzdGF0ZW1lbnRTdHJpbmdCID0gbG9jYWxDb250ZXh0Qi5ub2RlQXNTdHJpbmcoc3RhdGVtZW50Tm9kZUIpLFxuICAgICAgICBzdWJzdGl0dXRpb25TdHJpbmdBID0gc3Vic3RpdHV0aW9uQS5hc1N0cmluZyhsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRBKTsgIC8vL1xuXG4gIGxvY2FsQ29udGV4dEIudHJhY2UoYFVuaWZ5aW5nIHRoZSAnJHtzdGF0ZW1lbnRTdHJpbmdCfScgc3RhdGVtZW50IHdpdGggdGhlICcke3N0YXRlbWVudFN0cmluZ0F9JyBzdGF0ZW1lbnQgZ2l2ZW4gdGhlICR7c3Vic3RpdHV0aW9uU3RyaW5nQX0gc3Vic3RpdHV0aW9uLi4uYCwgc3RhdGVtZW50Tm9kZUIpO1xuXG4gIGNvbnN0IHRyYW5zZm9ybWVkU3Vic3RpdHV0aW9uQSA9IHN1YnN0aXR1dGlvbkEudHJhbnNmb3JtZWQoc3Vic3RpdHV0aW9ucyksXG4gICAgICAgIHN1YnN0aXR1dGlvbnNCID0gU3Vic3RpdHV0aW9ucy5mcm9tTm90aGluZygpLFxuICAgICAgICBzdWJzdGl0dXRpb25CID0gdHJhbnNmb3JtZWRTdWJzdGl0dXRpb25BOyAvLy9cblxuICBpZiAoc3Vic3RpdHV0aW9uQiAhPT0gbnVsbCkge1xuICAgIHN1YnN0aXR1dGlvbnNCLmFkZFN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb25CLCBsb2NhbENvbnRleHRCLCBsb2NhbENvbnRleHRCKTsgIC8vL1xuICB9XG5cbiAgY29uc3Qgbm9kZUEgPSBzdGF0ZW1lbnROb2RlQSwgIC8vL1xuICAgICAgICBub2RlQiA9IHN0YXRlbWVudE5vZGVCLCAgLy8vXG4gICAgICAgIHVuaWZpZWQgPSBtZXRhTGV2ZWxVbmlmaWVyLnVuaWZ5KG5vZGVBLCBub2RlQiwgc3Vic3RpdHV0aW9uc0IsIGxvY2FsQ29udGV4dEIsIGxvY2FsQ29udGV4dEIpOyAvLy9cblxuICBpZiAodW5pZmllZCkge1xuICAgIGlmIChzdWJzdGl0dXRpb25CICE9PSBudWxsKSB7XG4gICAgICBzdWJzdGl0dXRpb25zQi5yZW1vdmVTdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uQiwgbG9jYWxDb250ZXh0QiwgbG9jYWxDb250ZXh0Qik7XG4gICAgfVxuXG4gICAgc3Vic3RpdHV0aW9uc0IuZm9yRWFjaFN1YnN0aXR1dGlvbigoc3Vic3RpdHV0aW9uQikgPT4ge1xuICAgICAgY29uc3QgdHJhbnNmb3JtZWRTdWJzdGl0dXRpb25CID0gc3Vic3RpdHV0aW9uQi50cmFuc2Zvcm1lZFZhcmlhYmxlTm9kZShzdWJzdGl0dXRpb25zKTtcblxuICAgICAgaWYgKHRyYW5zZm9ybWVkU3Vic3RpdHV0aW9uQiAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBzdWJzdGl0dXRpb24gPSB0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvbkI7ICAvLy9cblxuICAgICAgICBzdWJzdGl0dXRpb25zLmFkZFN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhdGVtZW50VW5pZmllZFdpdGhTdGF0ZW1lbnRHaXZlblN1YnN0aXR1dGlvbiA9IHRydWU7XG4gIH1cblxuICBpZiAoc3RhdGVtZW50VW5pZmllZFdpdGhTdGF0ZW1lbnRHaXZlblN1YnN0aXR1dGlvbikge1xuICAgIGxvY2FsQ29udGV4dEIuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3N0YXRlbWVudFN0cmluZ0J9JyBzdGF0ZW1lbnQgd2l0aCB0aGUgJyR7c3RhdGVtZW50U3RyaW5nQX0nIHN0YXRlbWVudCBnaXZlbiB0aGUgJHtzdWJzdGl0dXRpb25TdHJpbmdBfSBzdWJzdGl0dXRpb24uYCwgc3RhdGVtZW50Tm9kZUIpO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlbWVudFVuaWZpZWRXaXRoU3RhdGVtZW50R2l2ZW5TdWJzdGl0dXRpb247XG59XG4iXSwibmFtZXMiOlsidW5pZnlTdGF0ZW1lbnRXaXRoU3RhdGVtZW50R2l2ZW5TdWJzdGl0dXRpb24iLCJzdGF0ZW1lbnROb2RlQSIsInN0YXRlbWVudE5vZGVCIiwic3Vic3RpdHV0aW9uQSIsInN1YnN0aXR1dGlvbnMiLCJsb2NhbENvbnRleHRBIiwibG9jYWxDb250ZXh0QiIsInN0YXRlbWVudFVuaWZpZWRXaXRoU3RhdGVtZW50R2l2ZW5TdWJzdGl0dXRpb24iLCJzdGF0ZW1lbnRTdHJpbmdBIiwibm9kZUFzU3RyaW5nIiwic3RhdGVtZW50U3RyaW5nQiIsInN1YnN0aXR1dGlvblN0cmluZ0EiLCJhc1N0cmluZyIsInRyYWNlIiwidHJhbnNmb3JtZWRTdWJzdGl0dXRpb25BIiwidHJhbnNmb3JtZWQiLCJzdWJzdGl0dXRpb25zQiIsIlN1YnN0aXR1dGlvbnMiLCJmcm9tTm90aGluZyIsInN1YnN0aXR1dGlvbkIiLCJhZGRTdWJzdGl0dXRpb24iLCJub2RlQSIsIm5vZGVCIiwidW5pZmllZCIsIm1ldGFMZXZlbFVuaWZpZXIiLCJ1bmlmeSIsInJlbW92ZVN1YnN0aXR1dGlvbiIsImZvckVhY2hTdWJzdGl0dXRpb24iLCJ0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvbkIiLCJ0cmFuc2Zvcm1lZFZhcmlhYmxlTm9kZSIsInN1YnN0aXR1dGlvbiIsImRlYnVnIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFLQTs7O2VBQXdCQTs7O29FQUhFO2dFQUNHOzs7Ozs7QUFFZCxTQUFTQSw2Q0FBNkNDLGNBQWMsRUFBRUMsY0FBYyxFQUFFQyxhQUFhLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxhQUFhO0lBQzdKLElBQUlDLGlEQUFpRDtJQUVyRCxJQUFNQyxtQkFBbUJGLGNBQWNHLFlBQVksQ0FBQ1IsaUJBQzlDUyxtQkFBbUJKLGNBQWNHLFlBQVksQ0FBQ1AsaUJBQzlDUyxzQkFBc0JSLGNBQWNTLFFBQVEsQ0FBQ1AsZUFBZUEsZ0JBQWlCLEdBQUc7SUFFdEZDLGNBQWNPLEtBQUssQ0FBQyxBQUFDLGlCQUF5REwsT0FBekNFLGtCQUFpQiwwQkFBaUVDLE9BQXpDSCxrQkFBaUIsMEJBQTRDLE9BQXBCRyxxQkFBb0IscUJBQW1CVDtJQUU5SixJQUFNWSwyQkFBMkJYLGNBQWNZLFdBQVcsQ0FBQ1gsZ0JBQ3JEWSxpQkFBaUJDLHNCQUFhLENBQUNDLFdBQVcsSUFDMUNDLGdCQUFnQkwsMEJBQTBCLEdBQUc7SUFFbkQsSUFBSUssa0JBQWtCLE1BQU07UUFDMUJILGVBQWVJLGVBQWUsQ0FBQ0QsZUFBZWIsZUFBZUEsZ0JBQWlCLEdBQUc7SUFDbkY7SUFFQSxJQUFNZSxRQUFRcEIsZ0JBQ1JxQixRQUFRcEIsZ0JBQ1JxQixVQUFVQyxrQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDSixPQUFPQyxPQUFPTixnQkFBZ0JWLGVBQWVBLGdCQUFnQixHQUFHO0lBRXZHLElBQUlpQixTQUFTO1FBQ1gsSUFBSUosa0JBQWtCLE1BQU07WUFDMUJILGVBQWVVLGtCQUFrQixDQUFDUCxlQUFlYixlQUFlQTtRQUNsRTtRQUVBVSxlQUFlVyxtQkFBbUIsQ0FBQyxTQUFDUjtZQUNsQyxJQUFNUywyQkFBMkJULGNBQWNVLHVCQUF1QixDQUFDekI7WUFFdkUsSUFBSXdCLDZCQUE2QixNQUFNO2dCQUNyQyxJQUFNRSxlQUFlRiwwQkFBMkIsR0FBRztnQkFFbkR4QixjQUFjZ0IsZUFBZSxDQUFDVSxjQUFjekIsZUFBZUM7WUFDN0Q7UUFDRjtRQUVBQyxpREFBaUQ7SUFDbkQ7SUFFQSxJQUFJQSxnREFBZ0Q7UUFDbERELGNBQWN5QixLQUFLLENBQUMsQUFBQyxtQkFBMkR2QixPQUF6Q0Usa0JBQWlCLDBCQUFpRUMsT0FBekNILGtCQUFpQiwwQkFBNEMsT0FBcEJHLHFCQUFvQixtQkFBaUJUO0lBQ2hLO0lBRUEsT0FBT0s7QUFDVCJ9