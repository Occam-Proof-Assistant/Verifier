"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyPremiseAgainstProofStep;
    }
});
var _unify = require("../utilities/unify");
function unifyPremiseAgainstProofStep(premiseA, proofStepB, substitutions, localContextA, localContextB) {
    var premiseUnified = false;
    var premiseAStatementNode = premiseA.getStatementNode();
    if (premiseAStatementNode !== null) {
        var proofStepBSubproofNode = proofStepB.getSubproofNode(), proofStepBStatementNode = proofStepB.getStatementNode(), subproofNodeB = proofStepBSubproofNode, statementNodeB = proofStepBStatementNode, statementNodeA = premiseAStatementNode, statementStringA = localContextA.nodeAsString(statementNodeA);
        substitutions.snapshot();
        if (subproofNodeB !== null) {
            var subproofStringB = (0, _unify.subproofNodeAsSubproofString)(subproofNodeB, localContextB);
            localContextB.trace("Unifying the '".concat(subproofStringB, "' subproof against the premise's '").concat(statementStringA, "' statement..."), subproofNodeB);
            var subproofUnified = premiseA.unifySubproof(subproofNodeB, substitutions, localContextA, localContextB);
            if (subproofUnified) {
                localContextB.debug("...unified the '".concat(subproofStringB, "' subproof against the premise's '").concat(statementStringA, "' statement."), subproofNodeB);
                premiseUnified = true;
            }
        }
        if (statementNodeB !== null) {
            var statementStringB = localContextB.nodeAsString(statementNodeB);
            localContextB.trace("Unifying the '".concat(statementStringB, "' statement against the premise's '").concat(statementStringA, "' statement..."), statementNodeB);
            var statementUnified = premiseA.unifyStatement(statementNodeB, substitutions, localContextA, localContextB);
            if (statementUnified) {
                localContextB.debug("...unified the '".concat(statementStringB, "' statement against the premise's '").concat(statementStringA, "' statement."), statementNodeB);
                premiseUnified = true;
            }
        }
        premiseUnified ? substitutions.continue() : substitutions.rollback();
    }
    return premiseUnified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS9wcmVtaXNlQWdhaW5zdFByb29mU3RlcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgc3VicHJvb2ZOb2RlQXNTdWJwcm9vZlN0cmluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvdW5pZnlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pZnlQcmVtaXNlQWdhaW5zdFByb29mU3RlcChwcmVtaXNlQSwgcHJvb2ZTdGVwQiwgc3Vic3RpdHV0aW9ucywgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qikge1xuICBsZXQgcHJlbWlzZVVuaWZpZWQgPSBmYWxzZTtcblxuICBjb25zdCBwcmVtaXNlQVN0YXRlbWVudE5vZGUgPSBwcmVtaXNlQS5nZXRTdGF0ZW1lbnROb2RlKCk7XG5cbiAgaWYgKHByZW1pc2VBU3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHByb29mU3RlcEJTdWJwcm9vZk5vZGUgPSBwcm9vZlN0ZXBCLmdldFN1YnByb29mTm9kZSgpLFxuICAgICAgICAgIHByb29mU3RlcEJTdGF0ZW1lbnROb2RlID0gcHJvb2ZTdGVwQi5nZXRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgICAgc3VicHJvb2ZOb2RlQiA9IHByb29mU3RlcEJTdWJwcm9vZk5vZGUsIC8vL1xuICAgICAgICAgIHN0YXRlbWVudE5vZGVCID0gcHJvb2ZTdGVwQlN0YXRlbWVudE5vZGUsIC8vL1xuICAgICAgICAgIHN0YXRlbWVudE5vZGVBID0gcHJlbWlzZUFTdGF0ZW1lbnROb2RlLCAvLy9cbiAgICAgICAgICBzdGF0ZW1lbnRTdHJpbmdBID0gbG9jYWxDb250ZXh0QS5ub2RlQXNTdHJpbmcoc3RhdGVtZW50Tm9kZUEpXG5cbiAgICBzdWJzdGl0dXRpb25zLnNuYXBzaG90KCk7XG5cbiAgICBpZiAoc3VicHJvb2ZOb2RlQiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgc3VicHJvb2ZTdHJpbmdCID0gc3VicHJvb2ZOb2RlQXNTdWJwcm9vZlN0cmluZyhzdWJwcm9vZk5vZGVCLCBsb2NhbENvbnRleHRCKTtcblxuICAgICAgbG9jYWxDb250ZXh0Qi50cmFjZShgVW5pZnlpbmcgdGhlICcke3N1YnByb29mU3RyaW5nQn0nIHN1YnByb29mIGFnYWluc3QgdGhlIHByZW1pc2UncyAnJHtzdGF0ZW1lbnRTdHJpbmdBfScgc3RhdGVtZW50Li4uYCwgc3VicHJvb2ZOb2RlQik7XG5cbiAgICAgIGNvbnN0IHN1YnByb29mVW5pZmllZCA9IHByZW1pc2VBLnVuaWZ5U3VicHJvb2Yoc3VicHJvb2ZOb2RlQiwgc3Vic3RpdHV0aW9ucywgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qik7XG5cbiAgICAgIGlmIChzdWJwcm9vZlVuaWZpZWQpIHtcbiAgICAgICAgbG9jYWxDb250ZXh0Qi5kZWJ1ZyhgLi4udW5pZmllZCB0aGUgJyR7c3VicHJvb2ZTdHJpbmdCfScgc3VicHJvb2YgYWdhaW5zdCB0aGUgcHJlbWlzZSdzICcke3N0YXRlbWVudFN0cmluZ0F9JyBzdGF0ZW1lbnQuYCwgc3VicHJvb2ZOb2RlQik7XG5cbiAgICAgICAgcHJlbWlzZVVuaWZpZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdGF0ZW1lbnROb2RlQiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgc3RhdGVtZW50U3RyaW5nQiA9IGxvY2FsQ29udGV4dEIubm9kZUFzU3RyaW5nKHN0YXRlbWVudE5vZGVCKTtcblxuICAgICAgbG9jYWxDb250ZXh0Qi50cmFjZShgVW5pZnlpbmcgdGhlICcke3N0YXRlbWVudFN0cmluZ0J9JyBzdGF0ZW1lbnQgYWdhaW5zdCB0aGUgcHJlbWlzZSdzICcke3N0YXRlbWVudFN0cmluZ0F9JyBzdGF0ZW1lbnQuLi5gLCBzdGF0ZW1lbnROb2RlQik7XG5cbiAgICAgIGNvbnN0IHN0YXRlbWVudFVuaWZpZWQgPSBwcmVtaXNlQS51bmlmeVN0YXRlbWVudChzdGF0ZW1lbnROb2RlQiwgc3Vic3RpdHV0aW9ucywgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qik7XG5cbiAgICAgIGlmIChzdGF0ZW1lbnRVbmlmaWVkKSB7XG4gICAgICAgIGxvY2FsQ29udGV4dEIuZGVidWcoYC4uLnVuaWZpZWQgdGhlICcke3N0YXRlbWVudFN0cmluZ0J9JyBzdGF0ZW1lbnQgYWdhaW5zdCB0aGUgcHJlbWlzZSdzICcke3N0YXRlbWVudFN0cmluZ0F9JyBzdGF0ZW1lbnQuYCwgc3RhdGVtZW50Tm9kZUIpO1xuXG4gICAgICAgIHByZW1pc2VVbmlmaWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcmVtaXNlVW5pZmllZCA/XG4gICAgICBzdWJzdGl0dXRpb25zLmNvbnRpbnVlKCkgOlxuICAgICAgICBzdWJzdGl0dXRpb25zLnJvbGxiYWNrKCk7XG4gIH1cblxuICByZXR1cm4gcHJlbWlzZVVuaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidW5pZnlQcmVtaXNlQWdhaW5zdFByb29mU3RlcCIsInByZW1pc2VBIiwicHJvb2ZTdGVwQiIsInN1YnN0aXR1dGlvbnMiLCJsb2NhbENvbnRleHRBIiwibG9jYWxDb250ZXh0QiIsInByZW1pc2VVbmlmaWVkIiwicHJlbWlzZUFTdGF0ZW1lbnROb2RlIiwiZ2V0U3RhdGVtZW50Tm9kZSIsInByb29mU3RlcEJTdWJwcm9vZk5vZGUiLCJnZXRTdWJwcm9vZk5vZGUiLCJwcm9vZlN0ZXBCU3RhdGVtZW50Tm9kZSIsInN1YnByb29mTm9kZUIiLCJzdGF0ZW1lbnROb2RlQiIsInN0YXRlbWVudE5vZGVBIiwic3RhdGVtZW50U3RyaW5nQSIsIm5vZGVBc1N0cmluZyIsInNuYXBzaG90Iiwic3VicHJvb2ZTdHJpbmdCIiwic3VicHJvb2ZOb2RlQXNTdWJwcm9vZlN0cmluZyIsInRyYWNlIiwic3VicHJvb2ZVbmlmaWVkIiwidW5pZnlTdWJwcm9vZiIsImRlYnVnIiwic3RhdGVtZW50U3RyaW5nQiIsInN0YXRlbWVudFVuaWZpZWQiLCJ1bmlmeVN0YXRlbWVudCIsImNvbnRpbnVlIiwicm9sbGJhY2siXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQUlBOzs7ZUFBd0JBOzs7cUJBRnFCO0FBRTlCLFNBQVNBLDZCQUE2QkMsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxhQUFhO0lBQ3BILElBQUlDLGlCQUFpQjtJQUVyQixJQUFNQyx3QkFBd0JOLFNBQVNPLGdCQUFnQjtJQUV2RCxJQUFJRCwwQkFBMEIsTUFBTTtRQUNsQyxJQUFNRSx5QkFBeUJQLFdBQVdRLGVBQWUsSUFDbkRDLDBCQUEwQlQsV0FBV00sZ0JBQWdCLElBQ3JESSxnQkFBZ0JILHdCQUNoQkksaUJBQWlCRix5QkFDakJHLGlCQUFpQlAsdUJBQ2pCUSxtQkFBbUJYLGNBQWNZLFlBQVksQ0FBQ0Y7UUFFcERYLGNBQWNjLFFBQVE7UUFFdEIsSUFBSUwsa0JBQWtCLE1BQU07WUFDMUIsSUFBTU0sa0JBQWtCQyxJQUFBQSxtQ0FBNEIsRUFBQ1AsZUFBZVA7WUFFcEVBLGNBQWNlLEtBQUssQ0FBQyxBQUFDLGlCQUFvRUwsT0FBcERHLGlCQUFnQixzQ0FBcUQsT0FBakJILGtCQUFpQixtQkFBaUJIO1lBRTNILElBQU1TLGtCQUFrQnBCLFNBQVNxQixhQUFhLENBQUNWLGVBQWVULGVBQWVDLGVBQWVDO1lBRTVGLElBQUlnQixpQkFBaUI7Z0JBQ25CaEIsY0FBY2tCLEtBQUssQ0FBQyxBQUFDLG1CQUFzRVIsT0FBcERHLGlCQUFnQixzQ0FBcUQsT0FBakJILGtCQUFpQixpQkFBZUg7Z0JBRTNITixpQkFBaUI7WUFDbkI7UUFDRjtRQUVBLElBQUlPLG1CQUFtQixNQUFNO1lBQzNCLElBQU1XLG1CQUFtQm5CLGNBQWNXLFlBQVksQ0FBQ0g7WUFFcERSLGNBQWNlLEtBQUssQ0FBQyxBQUFDLGlCQUFzRUwsT0FBdERTLGtCQUFpQix1Q0FBc0QsT0FBakJULGtCQUFpQixtQkFBaUJGO1lBRTdILElBQU1ZLG1CQUFtQnhCLFNBQVN5QixjQUFjLENBQUNiLGdCQUFnQlYsZUFBZUMsZUFBZUM7WUFFL0YsSUFBSW9CLGtCQUFrQjtnQkFDcEJwQixjQUFja0IsS0FBSyxDQUFDLEFBQUMsbUJBQXdFUixPQUF0RFMsa0JBQWlCLHVDQUFzRCxPQUFqQlQsa0JBQWlCLGlCQUFlRjtnQkFFN0hQLGlCQUFpQjtZQUNuQjtRQUNGO1FBRUFBLGlCQUNFSCxjQUFjd0IsUUFBUSxLQUNwQnhCLGNBQWN5QixRQUFRO0lBQzVCO0lBRUEsT0FBT3RCO0FBQ1QifQ==