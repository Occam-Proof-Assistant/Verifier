"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return unifyPremiseAgainstProofStep;
    }
});
var _unify = require("../utilities/unify");
function unifyPremiseAgainstProofStep(premiseA, proofStepB, substitutions, localContextA, localContextB) {
    var premiseUnified = false;
    var premiseAStatementNode = premiseA.getStatementNode();
    if (premiseAStatementNode !== null) {
        var proofStepBSubproofNode = proofStepB.getSubproofNode(), proofStepBStatementNode = proofStepB.getStatementNode(), subproofNodeB = proofStepBSubproofNode, statementNodeB = proofStepBStatementNode, statementNodeA = premiseAStatementNode, statementStringA = localContextA.nodeAsString(statementNodeA);
        substitutions.snapshot();
        if (subproofNodeB !== null) {
            var subproofStringB = (0, _unify.subproofNodeAsSubproofString)(subproofNodeB, localContextB);
            localContextA.trace("Unifying the proof step's '".concat(subproofStringB, "' subproof against the premise's '").concat(statementStringA, "' statement..."), statementNodeA);
            var subproofUnified = premiseA.unifySubproof(subproofNodeB, substitutions, localContextA, localContextB);
            if (subproofUnified) {
                localContextA.debug("...unified the proof step's '".concat(subproofStringB, "' subproof against the premise's '").concat(statementStringA, "' statement."), statementNodeA);
                premiseUnified = true;
            }
        }
        if (statementNodeB !== null) {
            var statementStringB = localContextB.nodeAsString(statementNodeB);
            localContextA.trace("Unifying the proof step's '".concat(statementStringB, "' statement against the premise's '").concat(statementStringA, "' statement..."), statementNodeA);
            var statementUnified = premiseA.unifyStatement(statementNodeB, substitutions, localContextA, localContextB);
            if (statementUnified) {
                localContextA.debug("...unified the proof step's '".concat(statementStringB, "' statement against the premise's '").concat(statementStringA, "' statement."), statementNodeA);
                premiseUnified = true;
            }
        }
        premiseUnified ? substitutions.continue() : substitutions.rollback();
    }
    return premiseUnified;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91bmlmeS9wcmVtaXNlQWdhaW5zdFByb29mU3RlcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgc3VicHJvb2ZOb2RlQXNTdWJwcm9vZlN0cmluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvdW5pZnlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pZnlQcmVtaXNlQWdhaW5zdFByb29mU3RlcChwcmVtaXNlQSwgcHJvb2ZTdGVwQiwgc3Vic3RpdHV0aW9ucywgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qikge1xuICBsZXQgcHJlbWlzZVVuaWZpZWQgPSBmYWxzZTtcblxuICBjb25zdCBwcmVtaXNlQVN0YXRlbWVudE5vZGUgPSBwcmVtaXNlQS5nZXRTdGF0ZW1lbnROb2RlKCk7XG5cbiAgaWYgKHByZW1pc2VBU3RhdGVtZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHByb29mU3RlcEJTdWJwcm9vZk5vZGUgPSBwcm9vZlN0ZXBCLmdldFN1YnByb29mTm9kZSgpLFxuICAgICAgICAgIHByb29mU3RlcEJTdGF0ZW1lbnROb2RlID0gcHJvb2ZTdGVwQi5nZXRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgICAgc3VicHJvb2ZOb2RlQiA9IHByb29mU3RlcEJTdWJwcm9vZk5vZGUsIC8vL1xuICAgICAgICAgIHN0YXRlbWVudE5vZGVCID0gcHJvb2ZTdGVwQlN0YXRlbWVudE5vZGUsIC8vL1xuICAgICAgICAgIHN0YXRlbWVudE5vZGVBID0gcHJlbWlzZUFTdGF0ZW1lbnROb2RlLCAvLy9cbiAgICAgICAgICBzdGF0ZW1lbnRTdHJpbmdBID0gbG9jYWxDb250ZXh0QS5ub2RlQXNTdHJpbmcoc3RhdGVtZW50Tm9kZUEpXG5cbiAgICBzdWJzdGl0dXRpb25zLnNuYXBzaG90KCk7XG5cbiAgICBpZiAoc3VicHJvb2ZOb2RlQiAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qgc3VicHJvb2ZTdHJpbmdCID0gc3VicHJvb2ZOb2RlQXNTdWJwcm9vZlN0cmluZyhzdWJwcm9vZk5vZGVCLCBsb2NhbENvbnRleHRCKTtcblxuICAgICAgbG9jYWxDb250ZXh0QS50cmFjZShgVW5pZnlpbmcgdGhlIHByb29mIHN0ZXAncyAnJHtzdWJwcm9vZlN0cmluZ0J9JyBzdWJwcm9vZiBhZ2FpbnN0IHRoZSBwcmVtaXNlJ3MgJyR7c3RhdGVtZW50U3RyaW5nQX0nIHN0YXRlbWVudC4uLmAsIHN0YXRlbWVudE5vZGVBKTtcblxuICAgICAgY29uc3Qgc3VicHJvb2ZVbmlmaWVkID0gcHJlbWlzZUEudW5pZnlTdWJwcm9vZihzdWJwcm9vZk5vZGVCLCBzdWJzdGl0dXRpb25zLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKTtcblxuICAgICAgaWYgKHN1YnByb29mVW5pZmllZCkge1xuICAgICAgICBsb2NhbENvbnRleHRBLmRlYnVnKGAuLi51bmlmaWVkIHRoZSBwcm9vZiBzdGVwJ3MgJyR7c3VicHJvb2ZTdHJpbmdCfScgc3VicHJvb2YgYWdhaW5zdCB0aGUgcHJlbWlzZSdzICcke3N0YXRlbWVudFN0cmluZ0F9JyBzdGF0ZW1lbnQuYCwgc3RhdGVtZW50Tm9kZUEpO1xuXG4gICAgICAgIHByZW1pc2VVbmlmaWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhdGVtZW50Tm9kZUIgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHN0YXRlbWVudFN0cmluZ0IgPSBsb2NhbENvbnRleHRCLm5vZGVBc1N0cmluZyhzdGF0ZW1lbnROb2RlQik7XG5cbiAgICAgIGxvY2FsQ29udGV4dEEudHJhY2UoYFVuaWZ5aW5nIHRoZSBwcm9vZiBzdGVwJ3MgJyR7c3RhdGVtZW50U3RyaW5nQn0nIHN0YXRlbWVudCBhZ2FpbnN0IHRoZSBwcmVtaXNlJ3MgJyR7c3RhdGVtZW50U3RyaW5nQX0nIHN0YXRlbWVudC4uLmAsIHN0YXRlbWVudE5vZGVBKTtcblxuICAgICAgY29uc3Qgc3RhdGVtZW50VW5pZmllZCA9IHByZW1pc2VBLnVuaWZ5U3RhdGVtZW50KHN0YXRlbWVudE5vZGVCLCBzdWJzdGl0dXRpb25zLCBsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKTtcblxuICAgICAgaWYgKHN0YXRlbWVudFVuaWZpZWQpIHtcbiAgICAgICAgbG9jYWxDb250ZXh0QS5kZWJ1ZyhgLi4udW5pZmllZCB0aGUgcHJvb2Ygc3RlcCdzICcke3N0YXRlbWVudFN0cmluZ0J9JyBzdGF0ZW1lbnQgYWdhaW5zdCB0aGUgcHJlbWlzZSdzICcke3N0YXRlbWVudFN0cmluZ0F9JyBzdGF0ZW1lbnQuYCwgc3RhdGVtZW50Tm9kZUEpO1xuXG4gICAgICAgIHByZW1pc2VVbmlmaWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcmVtaXNlVW5pZmllZCA/XG4gICAgICBzdWJzdGl0dXRpb25zLmNvbnRpbnVlKCkgOlxuICAgICAgICBzdWJzdGl0dXRpb25zLnJvbGxiYWNrKCk7XG4gIH1cblxuICByZXR1cm4gcHJlbWlzZVVuaWZpZWQ7XG59XG4iXSwibmFtZXMiOlsidW5pZnlQcmVtaXNlQWdhaW5zdFByb29mU3RlcCIsInByZW1pc2VBIiwicHJvb2ZTdGVwQiIsInN1YnN0aXR1dGlvbnMiLCJsb2NhbENvbnRleHRBIiwibG9jYWxDb250ZXh0QiIsInByZW1pc2VVbmlmaWVkIiwicHJlbWlzZUFTdGF0ZW1lbnROb2RlIiwiZ2V0U3RhdGVtZW50Tm9kZSIsInByb29mU3RlcEJTdWJwcm9vZk5vZGUiLCJnZXRTdWJwcm9vZk5vZGUiLCJwcm9vZlN0ZXBCU3RhdGVtZW50Tm9kZSIsInN1YnByb29mTm9kZUIiLCJzdGF0ZW1lbnROb2RlQiIsInN0YXRlbWVudE5vZGVBIiwic3RhdGVtZW50U3RyaW5nQSIsIm5vZGVBc1N0cmluZyIsInNuYXBzaG90Iiwic3VicHJvb2ZTdHJpbmdCIiwic3VicHJvb2ZOb2RlQXNTdWJwcm9vZlN0cmluZyIsInRyYWNlIiwic3VicHJvb2ZVbmlmaWVkIiwidW5pZnlTdWJwcm9vZiIsImRlYnVnIiwic3RhdGVtZW50U3RyaW5nQiIsInN0YXRlbWVudFVuaWZpZWQiLCJ1bmlmeVN0YXRlbWVudCIsImNvbnRpbnVlIiwicm9sbGJhY2siXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQUlBOzs7ZUFBd0JBOzs7cUJBRnFCO0FBRTlCLFNBQVNBLDZCQUE2QkMsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxhQUFhO0lBQ3BILElBQUlDLGlCQUFpQjtJQUVyQixJQUFNQyx3QkFBd0JOLFNBQVNPLGdCQUFnQjtJQUV2RCxJQUFJRCwwQkFBMEIsTUFBTTtRQUNsQyxJQUFNRSx5QkFBeUJQLFdBQVdRLGVBQWUsSUFDbkRDLDBCQUEwQlQsV0FBV00sZ0JBQWdCLElBQ3JESSxnQkFBZ0JILHdCQUNoQkksaUJBQWlCRix5QkFDakJHLGlCQUFpQlAsdUJBQ2pCUSxtQkFBbUJYLGNBQWNZLFlBQVksQ0FBQ0Y7UUFFcERYLGNBQWNjLFFBQVE7UUFFdEIsSUFBSUwsa0JBQWtCLE1BQU07WUFDMUIsSUFBTU0sa0JBQWtCQyxJQUFBQSxtQ0FBNEIsRUFBQ1AsZUFBZVA7WUFFcEVELGNBQWNnQixLQUFLLENBQUMsQUFBQyw4QkFBaUZMLE9BQXBERyxpQkFBZ0Isc0NBQXFELE9BQWpCSCxrQkFBaUIsbUJBQWlCRDtZQUV4SSxJQUFNTyxrQkFBa0JwQixTQUFTcUIsYUFBYSxDQUFDVixlQUFlVCxlQUFlQyxlQUFlQztZQUU1RixJQUFJZ0IsaUJBQWlCO2dCQUNuQmpCLGNBQWNtQixLQUFLLENBQUMsQUFBQyxnQ0FBbUZSLE9BQXBERyxpQkFBZ0Isc0NBQXFELE9BQWpCSCxrQkFBaUIsaUJBQWVEO2dCQUV4SVIsaUJBQWlCO1lBQ25CO1FBQ0Y7UUFFQSxJQUFJTyxtQkFBbUIsTUFBTTtZQUMzQixJQUFNVyxtQkFBbUJuQixjQUFjVyxZQUFZLENBQUNIO1lBRXBEVCxjQUFjZ0IsS0FBSyxDQUFDLEFBQUMsOEJBQW1GTCxPQUF0RFMsa0JBQWlCLHVDQUFzRCxPQUFqQlQsa0JBQWlCLG1CQUFpQkQ7WUFFMUksSUFBTVcsbUJBQW1CeEIsU0FBU3lCLGNBQWMsQ0FBQ2IsZ0JBQWdCVixlQUFlQyxlQUFlQztZQUUvRixJQUFJb0Isa0JBQWtCO2dCQUNwQnJCLGNBQWNtQixLQUFLLENBQUMsQUFBQyxnQ0FBcUZSLE9BQXREUyxrQkFBaUIsdUNBQXNELE9BQWpCVCxrQkFBaUIsaUJBQWVEO2dCQUUxSVIsaUJBQWlCO1lBQ25CO1FBQ0Y7UUFFQUEsaUJBQ0VILGNBQWN3QixRQUFRLEtBQ3BCeEIsY0FBY3lCLFFBQVE7SUFDNUI7SUFFQSxPQUFPdEI7QUFDVCJ9