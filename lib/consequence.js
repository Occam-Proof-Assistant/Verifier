"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return Consequence;
    }
});
var _array = require("./utilities/array");
var _string = require("./utilities/string");
var _query = require("./utilities/query");
var _ruleNames = require("./ruleNames");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Consequence = /*#__PURE__*/ function() {
    function Consequence(statementNode) {
        _classCallCheck(this, Consequence);
        this.statementNode = statementNode;
    }
    _createClass(Consequence, [
        {
            key: "getStatementNode",
            value: function getStatementNode() {
                return this.statementNode;
            }
        },
        {
            key: "matchStatementNode",
            value: function matchStatementNode(statementNode, metaSubstitutions) {
                var nonTerminalNode = statementNode, consequenceNonTerminalNode = this.statementNode, consequenceNonTerminalNodeMatches = matchConsequenceNonTerminalNode(consequenceNonTerminalNode, nonTerminalNode, metaSubstitutions), statementNodeMatches = consequenceNonTerminalNodeMatches; ///
                return statementNodeMatches;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var statementString = (0, _string.nodeAsString)(this.statementNode), statement = statementString, json = {
                    statement: statement
                };
                return json;
            }
        }
    ], [
        {
            key: "fromJSON",
            value: function fromJSON(json, releaseContext) {
                var statement = json.statement, statementString = statement, statementNode = (0, _string.statementNodeFromStatementString)(statementString, releaseContext), consequence = new Consequence(statementNode);
                return consequence;
            }
        },
        {
            key: "fromStatementNode",
            value: function fromStatementNode(statementNode) {
                var consequence = new Consequence(statementNode);
                return consequence;
            }
        }
    ]);
    return Consequence;
}();
function matchConsequenceNode(consequenceNode, node, metaSubstitutions) {
    var consequenceNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = consequenceNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, consequenceTerminalNode = consequenceNode, consequenceTerminalNodeMatches = matchConsequenceTerminalNode(consequenceTerminalNode, terminalNode, metaSubstitutions);
            consequenceNodeMatches = consequenceTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, consequenceNonTerminalNode = consequenceNode, consequenceNonTerminalNodeMatches = matchConsequenceNonTerminalNode(consequenceNonTerminalNode, nonTerminalNode, metaSubstitutions);
            consequenceNodeMatches = consequenceNonTerminalNodeMatches; ///
        }
    }
    return consequenceNodeMatches;
}
function matchConsequenceNodes(consequenceNodes, nodes, metaSubstitutions) {
    var consequenceNodesMatches = false;
    var nodesLength = nodes.length, consequenceNodesLength = consequenceNodes.length;
    if (nodesLength === consequenceNodesLength) {
        consequenceNodesMatches = nodes.every(function(node, index) {
            var consequenceNode = consequenceNodes[index], consequenceNodeMatches = matchConsequenceNode(consequenceNode, node, metaSubstitutions);
            if (consequenceNodeMatches) {
                return true;
            }
        });
    }
    return consequenceNodesMatches;
}
function matchConsequenceVariable(consequenceVariableNode, nodes, metaSubstitutions) {
    var consequenceVariableMatches = true;
    var consequenceVariableName = (0, _query.variableNameFromVariableNode)(consequenceVariableNode), metaSubstitution = metaSubstitutions.find(function(metaSubstitution) {
        var variableName = metaSubstitution.getVariableName();
        if (variableName === consequenceVariableName) {
            return true;
        }
    }) || null;
    if (metaSubstitution !== null) {
        var metaSubstitutionNodesMatch = metaSubstitution.matchNodes(nodes);
        consequenceVariableMatches = metaSubstitutionNodesMatch; ///
    }
    return consequenceVariableMatches;
}
function matchConsequenceTerminalNode(consequenceTerminalNode, terminalNode, metaSubstitutions) {
    var matches = consequenceTerminalNode.match(terminalNode), consequenceTerminalNodeMatches = matches; ///
    return consequenceTerminalNodeMatches;
}
function matchConsequenceNonTerminalNode(consequenceNonTerminalNode, nonTerminalNode, metaSubstitutions) {
    var consequenceNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), consequenceRuleName = consequenceNonTerminalNode.getRuleName(); ///
    if (ruleName === consequenceRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), consequenceChildNodes = consequenceNonTerminalNode.getChildNodes(), nodes = childNodes, consequenceNodes = consequenceChildNodes, consequenceChildNodesMatches = matchConsequenceNodes(consequenceNodes, nodes, metaSubstitutions);
        consequenceNonTerminalNodeMatches = consequenceChildNodesMatches; ///
        if (!consequenceNonTerminalNodeMatches) {
            var ruleNameStatementRuleName = ruleName === _ruleNames.STATEMENT_RULE_NAME;
            if (ruleNameStatementRuleName) {
                var statementNode = nonTerminalNode, consequenceStatementNode = consequenceNonTerminalNode, consequenceStatementNodeMatches = matchConsequenceStatementNode(consequenceStatementNode, statementNode, metaSubstitutions);
                consequenceNonTerminalNodeMatches = consequenceStatementNodeMatches; ///
            }
        }
    }
    return consequenceNonTerminalNodeMatches;
}
function matchConsequenceStatementNode(consequenceStatementNode, statementNode, metaSubstitutions) {
    var consequenceStatementNodeMatches = false;
    var consequenceNonTerminalNode = consequenceStatementNode, consequenceChildNodes = consequenceNonTerminalNode.getChildNodes(), consequenceChildNodesLength = consequenceChildNodes.length;
    if (consequenceChildNodesLength === 1) {
        var firstConsequenceChildNode = (0, _array.first)(consequenceChildNodes), consequenceChildNode = firstConsequenceChildNode, consequenceChildNodeNonTerminalNode = consequenceChildNode.isNonTerminalNode();
        if (consequenceChildNodeNonTerminalNode) {
            var consequenceNonTerminalChildNode = consequenceChildNode, consequenceNonTerminalChildNodeRuleName = consequenceNonTerminalChildNode.getRuleName(), consequenceNonTerminalChildNodeRuleNameVariableRuleName = consequenceNonTerminalChildNodeRuleName === _ruleNames.VARIABLE_RULE_NAME;
            if (consequenceNonTerminalChildNodeRuleNameVariableRuleName) {
                var consequenceVariableNode = consequenceNonTerminalChildNode, nonTerminalNode = statementNode, childNodes = nonTerminalNode.getChildNodes(), nodes = childNodes, consequenceMetaVariableMatches = matchConsequenceVariable(consequenceVariableNode, nodes, metaSubstitutions);
                consequenceStatementNodeMatches = consequenceMetaVariableMatches; ///
            }
        }
    }
    return consequenceStatementNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,