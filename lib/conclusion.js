"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return Conclusion;
    }
});
var _array = require("./utilities/array");
var _query = require("./utilities/query");
var _ruleNames = require("./ruleNames");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Conclusion = /*#__PURE__*/ function() {
    function Conclusion(metastatementNode) {
        _classCallCheck(this, Conclusion);
        this.metastatementNode = metastatementNode;
    }
    _createClass(Conclusion, [
        {
            key: "getMetastatementNode",
            value: function getMetastatementNode() {
                return this.metastatementNode;
            }
        },
        {
            key: "matchMetastatementNode",
            value: function matchMetastatementNode(metastatementNode, metaSubstitutions) {
                var nonTerminalNode = metastatementNode, conclusionNonTerminalNode = this.metastatementNode, conclusionNonTerminalNodeMatches = matchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, metaSubstitutions), metastatementNodeMatches = conclusionNonTerminalNodeMatches; ///
                return metastatementNodeMatches;
            }
        }
    ], [
        {
            key: "fromMetastatementNode",
            value: function fromMetastatementNode(metastatementNode) {
                var conclusion = new Conclusion(metastatementNode);
                return conclusion;
            }
        }
    ]);
    return Conclusion;
}();
function matchConclusionNode(conclusionNode, node, metaSubstitutions) {
    var conclusionNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = conclusionNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, conclusionTerminalNode = conclusionNode, conclusionTerminalNodeMatches = matchConclusionTerminalNode(conclusionTerminalNode, terminalNode, metaSubstitutions);
            conclusionNodeMatches = conclusionTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, conclusionNonTerminalNode = conclusionNode, conclusionNonTerminalNodeMatches = matchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, metaSubstitutions);
            conclusionNodeMatches = conclusionNonTerminalNodeMatches; ///
        }
    }
    return conclusionNodeMatches;
}
function matchConclusionNodes(conclusionNodes, nodes, metaSubstitutions) {
    var conclusionNodesMatches = false;
    var nodesLength = nodes.length, conclusionNodesLength = conclusionNodes.length;
    if (nodesLength === conclusionNodesLength) {
        conclusionNodesMatches = nodes.every(function(node, index) {
            var conclusionNode = conclusionNodes[index], conclusionNodeMatches = matchConclusionNode(conclusionNode, node, metaSubstitutions);
            if (conclusionNodeMatches) {
                return true;
            }
        });
    }
    return conclusionNodesMatches;
}
function matchConclusionMetavariable(conclusionMetavariableNode, nodes, metaSubstitutions) {
    var conclusionMetavariableMatches = true;
    var conclusionMetavariableName = (0, _query.metavariableNameFromMetavariableNode)(conclusionMetavariableNode), metaSubstitution = metaSubstitutions.find(function(metaSubstitution) {
        var metavariableName = metaSubstitution.getMetavariableName();
        if (metavariableName === conclusionMetavariableName) {
            return true;
        }
    }) || null;
    if (metaSubstitution !== null) {
        var metaSubstitutionNodesMatch = metaSubstitution.matchNodes(nodes);
        conclusionMetavariableMatches = metaSubstitutionNodesMatch; ///
    }
    return conclusionMetavariableMatches;
}
function matchConclusionTerminalNode(conclusionTerminalNode, terminalNode, metaSubstitutions) {
    var matches = conclusionTerminalNode.match(terminalNode), conclusionTerminalNodeMatches = matches; ///
    return conclusionTerminalNodeMatches;
}
function matchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, metaSubstitutions) {
    var conclusionNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), conclusionRuleName = conclusionNonTerminalNode.getRuleName(); ///
    if (ruleName === conclusionRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), conclusionChildNodes = conclusionNonTerminalNode.getChildNodes(), nodes = childNodes, conclusionNodes = conclusionChildNodes, conclusionChildNodesMatches = matchConclusionNodes(conclusionNodes, nodes, metaSubstitutions);
        conclusionNonTerminalNodeMatches = conclusionChildNodesMatches; ///
        if (!conclusionNonTerminalNodeMatches) {
            var ruleNameMetastatementRuleName = ruleName === _ruleNames.METASTATEMENT_RULE_NAME;
            if (ruleNameMetastatementRuleName) {
                var metastatementNode = nonTerminalNode, conclusionMetastatementNode = conclusionNonTerminalNode, conclusionMetastatementNodeMatches = matchConclusionMetastatementNode(conclusionMetastatementNode, metastatementNode, metaSubstitutions);
                conclusionNonTerminalNodeMatches = conclusionMetastatementNodeMatches; ///
            }
        }
    }
    return conclusionNonTerminalNodeMatches;
}
function matchConclusionMetastatementNode(conclusionMetastatementNode, metastatementNode, metaSubstitutions) {
    var conclusionMetastatementNodeMatches = false;
    var conclusionNonTerminalNode = conclusionMetastatementNode, conclusionChildNodes = conclusionNonTerminalNode.getChildNodes(), conclusionChildNodesLength = conclusionChildNodes.length;
    if (conclusionChildNodesLength === 1) {
        var firstConclusionChildNode = (0, _array.first)(conclusionChildNodes), conclusionChildNode = firstConclusionChildNode, conclusionChildNodeNonTerminalNode = conclusionChildNode.isNonTerminalNode();
        if (conclusionChildNodeNonTerminalNode) {
            var conclusionNonTerminalChildNode = conclusionChildNode, conclusionNonTerminalChildNodeRuleName = conclusionNonTerminalChildNode.getRuleName(), conclusionNonTerminalChildNodeRuleNameMetavariableRuleName = conclusionNonTerminalChildNodeRuleName === _ruleNames.METAVARIABLE_RULE_NAME;
            if (conclusionNonTerminalChildNodeRuleNameMetavariableRuleName) {
                var conclusionMetavariableNode = conclusionNonTerminalChildNode, nonTerminalNode = metastatementNode, childNodes = nonTerminalNode.getChildNodes(), nodes = childNodes, conclusionMetaVariableMatches = matchConclusionMetavariable(conclusionMetavariableNode, nodes, metaSubstitutions);
                conclusionMetastatementNodeMatches = conclusionMetaVariableMatches; ///
            }
        }
    }
    return conclusionMetastatementNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,