"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return Conclusion;
    }
});
var _array = require("./utilities/array");
var _string = require("./utilities/string");
var _query = require("./utilities/query");
var _ruleNames = require("./ruleNames");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var Conclusion = /*#__PURE__*/ function() {
    function Conclusion(metastatementNode) {
        _classCallCheck(this, Conclusion);
        this.metastatementNode = metastatementNode;
    }
    _createClass(Conclusion, [
        {
            key: "getMetastatementNode",
            value: function getMetastatementNode() {
                return this.metastatementNode;
            }
        },
        {
            key: "matchStatementNode",
            value: function matchStatementNode(statementNode, substitutions) {
                var nonTerminalNode = statementNode, conclusionNonTerminalNode = this.metastatementNode, conclusionNonTerminalNodeMatches = matchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, substitutions), statementNodeMatches = conclusionNonTerminalNodeMatches; ///
                return statementNodeMatches;
            }
        },
        {
            key: "matchMetastatementNode",
            value: function matchMetastatementNode(metastatementNode, metaSubstitutions) {
                var nonTerminalNode = metastatementNode, conclusionNonTerminalNode = this.metastatementNode, conclusionNonTerminalNodeMatches = metaMatchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, metaSubstitutions), metastatementNodeMatches = conclusionNonTerminalNodeMatches; ///
                return metastatementNodeMatches;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var metastatementString = (0, _string.nodeAsString)(this.metastatementNode), metastatement = metastatementString, json = {
                    metastatement: metastatement
                };
                return json;
            }
        }
    ], [
        {
            key: "fromJSON",
            value: function fromJSON(json, releaseContext) {
                var metastatement = json.metastatement, metastatementString = metastatement, metastatementNode = (0, _string.metastatementNodeFromMetastatementString)(metastatementString, releaseContext), conclusion = new Conclusion(metastatementNode);
                return conclusion;
            }
        },
        {
            key: "fromMetastatementNode",
            value: function fromMetastatementNode(metastatementNode) {
                var conclusion = new Conclusion(metastatementNode);
                return conclusion;
            }
        }
    ]);
    return Conclusion;
}();
function matchConclusionNode(conclusionNode, node, substitutions) {
    var conclusionNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = conclusionNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, conclusionTerminalNode = conclusionNode, conclusionTerminalNodeMatches = matchConclusionTerminalNode(conclusionTerminalNode, terminalNode, substitutions);
            conclusionNodeMatches = conclusionTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, conclusionNonTerminalNode = conclusionNode, conclusionNonTerminalNodeMatches = matchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, substitutions);
            conclusionNodeMatches = conclusionNonTerminalNodeMatches; ///
        }
    }
    return conclusionNodeMatches;
}
function matchConclusionNodes(conclusionNodes, nodes, metaSubstitutions) {
    var conclusionNodesMatch = false;
    var nodesLength = nodes.length, conclusionNodesLength = conclusionNodes.length;
    if (nodesLength === conclusionNodesLength) {
        conclusionNodesMatch = nodes.every(function(node, index) {
            var conclusionNode = conclusionNodes[index], conclusionNodeMatches = matchConclusionNode(conclusionNode, node, metaSubstitutions);
            if (conclusionNodeMatches) {
                return true;
            }
        });
    }
    return conclusionNodesMatch;
}
function matchConclusionTerminalNode(conclusionTerminalNode, terminalNode, substitutions) {
    var matches = conclusionTerminalNode.match(terminalNode), conclusionTerminalNodeMatches = matches; ///
    return conclusionTerminalNodeMatches;
}
function matchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, substitutions) {
    var conclusionNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), childNodes = nonTerminalNode.getChildNodes(), conclusionNonTerminalNodeRuleName = conclusionNonTerminalNode.getRuleName(), conclusionNonTerminalNodeChildNodes = conclusionNonTerminalNode.getChildNodes(), nodes = childNodes, conclusionNodes = conclusionNonTerminalNodeChildNodes, ruleNameStatementRuleName = ruleName === _ruleNames.STATEMENT_RULE_NAME, conclusionNonTerminalNodeRuleNameMetastatementRuleName = conclusionNonTerminalNodeRuleName === _ruleNames.METASTATEMENT_RULE_NAME;
    if (ruleNameStatementRuleName && conclusionNonTerminalNodeRuleNameMetastatementRuleName) {
        var statementNode = nonTerminalNode, conclusionMetastatementNode = conclusionNonTerminalNode, conclusionMetastatementNodeMatches = matchConclusionMetastatementNode(conclusionMetastatementNode, statementNode, substitutions);
        if (conclusionMetastatementNodeMatches) {
            conclusionNonTerminalNodeMatches = true; ///
        } else {
            var conclusionNonTerminalNodeChildNodesMatches = matchConclusionNodes(conclusionNodes, nodes, substitutions);
            conclusionNonTerminalNodeMatches = conclusionNonTerminalNodeChildNodesMatches; ///
        }
    } else if (ruleName === conclusionNonTerminalNodeRuleName) {
        var conclusionNonTerminalNodeChildNodesMatches1 = matchConclusionNodes(conclusionNodes, nodes, substitutions);
        conclusionNonTerminalNodeMatches = conclusionNonTerminalNodeChildNodesMatches1; ///
    }
    return conclusionNonTerminalNodeMatches;
}
function matchConclusionMetavariableNode(conclusionMetavariableNode, statementNode, substitutions) {
    var conclusionMetavariableNodeMatches = true;
    var conclusionMetavariableName = (0, _query.metavariableNameFromMetavariableNode)(conclusionMetavariableNode), substitution = substitutions.find(function(substitution) {
        var metavariableName = substitution.getMetavariableName();
        if (metavariableName === conclusionMetavariableName) {
            return true;
        }
    }) || null;
    if (substitution !== null) {
        var substitutionNodesMatch = substitution.matchStatementNode(statementNode);
        conclusionMetavariableNodeMatches = substitutionNodesMatch; ///
    }
    return conclusionMetavariableNodeMatches;
}
function matchConclusionMetastatementNode(conclusionMetastatementNode, statementNode, substitutions) {
    var conclusionMetastatementNodeMatches = false;
    var conclusionNonTerminalNode = conclusionMetastatementNode, conclusionNonTerminalNodeChildNodes = conclusionNonTerminalNode.getChildNodes(), conclusionNonTerminalNodeChildNodesLength = conclusionNonTerminalNodeChildNodes.length;
    if (conclusionNonTerminalNodeChildNodesLength === 1) {
        var firstConclusionChildNode = (0, _array.first)(conclusionNonTerminalNodeChildNodes), conclusionChildNode = firstConclusionChildNode, conclusionChildNodeNonTerminalNode = conclusionChildNode.isNonTerminalNode();
        if (conclusionChildNodeNonTerminalNode) {
            var conclusionNonTerminalChildNode = conclusionChildNode, conclusionNonTerminalChildNodeRuleName = conclusionNonTerminalChildNode.getRuleName(), conclusionNonTerminalChildNodeRuleNameMetavariableRuleName = conclusionNonTerminalChildNodeRuleName === _ruleNames.METAVARIABLE_RULE_NAME;
            if (conclusionNonTerminalChildNodeRuleNameMetavariableRuleName) {
                var conclusionMetavariableNode = conclusionNonTerminalChildNode, conclusionMetavariableNodeMatches = matchConclusionMetavariableNode(conclusionMetavariableNode, statementNode, substitutions);
                conclusionMetastatementNodeMatches = conclusionMetavariableNodeMatches; ///
            }
        }
    }
    return conclusionMetastatementNodeMatches;
}
function metaMatchConclusionNode(conclusionNode, node, metaSubstitutions) {
    var conclusionNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = conclusionNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, conclusionTerminalNode = conclusionNode, conclusionTerminalNodeMatches = metaMatchConclusionTerminalNode(conclusionTerminalNode, terminalNode, metaSubstitutions);
            conclusionNodeMatches = conclusionTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, conclusionNonTerminalNode = conclusionNode, conclusionNonTerminalNodeMatches = metaMatchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, metaSubstitutions);
            conclusionNodeMatches = conclusionNonTerminalNodeMatches; ///
        }
    }
    return conclusionNodeMatches;
}
function metaMatchConclusionNodes(conclusionNodes, nodes, metaSubstitutions) {
    var conclusionNodesMatch = false;
    var nodesLength = nodes.length, conclusionNodesLength = conclusionNodes.length;
    if (nodesLength === conclusionNodesLength) {
        conclusionNodesMatch = nodes.every(function(node, index) {
            var conclusionNode = conclusionNodes[index], conclusionNodeMatches = metaMatchConclusionNode(conclusionNode, node, metaSubstitutions);
            if (conclusionNodeMatches) {
                return true;
            }
        });
    }
    return conclusionNodesMatch;
}
function metaMatchConclusionTerminalNode(conclusionTerminalNode, terminalNode, metaSubstitutions) {
    var matches = conclusionTerminalNode.match(terminalNode), conclusionTerminalNodeMatches = matches; ///
    return conclusionTerminalNodeMatches;
}
function metaMatchConclusionNonTerminalNode(conclusionNonTerminalNode, nonTerminalNode, metaSubstitutions) {
    var conclusionNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), conclusionNonTerminalNodeRuleName = conclusionNonTerminalNode.getRuleName();
    if (ruleName === conclusionNonTerminalNodeRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), conclusionNonTerminalNodeChildNodes = conclusionNonTerminalNode.getChildNodes(), nodes = childNodes, conclusionNodes = conclusionNonTerminalNodeChildNodes, conclusionNonTerminalNodeChildNodesMatches = metaMatchConclusionNodes(conclusionNodes, nodes, metaSubstitutions);
        conclusionNonTerminalNodeMatches = conclusionNonTerminalNodeChildNodesMatches; ///
        if (!conclusionNonTerminalNodeMatches) {
            var ruleNameMetastatementRuleName = ruleName === _ruleNames.METASTATEMENT_RULE_NAME;
            if (ruleNameMetastatementRuleName) {
                var metastatementNode = nonTerminalNode, conclusionMetastatementNode = conclusionNonTerminalNode, conclusionMetastatementNodeMatches = metaMatchConclusionMetastatementNode(conclusionMetastatementNode, metastatementNode, metaSubstitutions);
                conclusionNonTerminalNodeMatches = conclusionMetastatementNodeMatches; ///
            }
        }
    }
    return conclusionNonTerminalNodeMatches;
}
function metaMatchConclusionMetavariableNode(conclusionMetavariableNode, metastatementNode, metaSubstitutions) {
    var conclusionMetavariableNodeMatches = true;
    var conclusionMetavariableName = (0, _query.metavariableNameFromMetavariableNode)(conclusionMetavariableNode), metaSubstitution = metaSubstitutions.find(function(metaSubstitution) {
        var metavariableName = metaSubstitution.getMetavariableName();
        if (metavariableName === conclusionMetavariableName) {
            return true;
        }
    }) || null;
    if (metaSubstitution !== null) {
        var metaSubstitutionNodesMatch = metaSubstitution.matchMetastatementNode(metastatementNode);
        conclusionMetavariableNodeMatches = metaSubstitutionNodesMatch; ///
    }
    return conclusionMetavariableNodeMatches;
}
function metaMatchConclusionMetastatementNode(conclusionMetastatementNode, metastatementNode, metaSubstitutions) {
    var conclusionMetastatementNodeMatches = false;
    var conclusionNonTerminalNode = conclusionMetastatementNode, conclusionNonTerminalNodeChildNodes = conclusionNonTerminalNode.getChildNodes(), conclusionNonTerminalNodeChildNodesLength = conclusionNonTerminalNodeChildNodes.length;
    if (conclusionNonTerminalNodeChildNodesLength === 1) {
        var firstConclusionChildNode = (0, _array.first)(conclusionNonTerminalNodeChildNodes), conclusionChildNode = firstConclusionChildNode, conclusionChildNodeNonTerminalNode = conclusionChildNode.isNonTerminalNode();
        if (conclusionChildNodeNonTerminalNode) {
            var conclusionNonTerminalChildNode = conclusionChildNode, conclusionNonTerminalChildNodeRuleName = conclusionNonTerminalChildNode.getRuleName(), conclusionNonTerminalChildNodeRuleNameMetavariableRuleName = conclusionNonTerminalChildNodeRuleName === _ruleNames.METAVARIABLE_RULE_NAME;
            if (conclusionNonTerminalChildNodeRuleNameMetavariableRuleName) {
                var conclusionMetavariableNode = conclusionNonTerminalChildNode, conclusionMetavariableNodeMatches = metaMatchConclusionMetavariableNode(conclusionMetavariableNode, metastatementNode, metaSubstitutions);
                conclusionMetastatementNodeMatches = conclusionMetavariableNodeMatches; ///
            }
        }
    }
    return conclusionMetastatementNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,