"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return MetaAssertion;
    }
});
var _array = require("./utilities/array");
var _query = require("./utilities/query");
var _metastatement = require("./utilities/metastatement");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var metastatementNodeQuery = (0, _query.nodeQuery)("/*/metastatement!"), metastatementNodesQuery = (0, _query.nodesQuery)("/metaSubproofAssertion/metastatement"), metaSubproofAssertionNodeQuery = (0, _query.nodeQuery)("/metastatement/metaSubproofAssertion"), qualifiedOrUnqualifiedMetastatementMetastatementNodesQuery = (0, _query.nodesQuery)("/metaSubproof/qualifiedMetastatement|unqualifiedMetastatement/metastatement!");
var MetaAssertion = /*#__PURE__*/ function() {
    function MetaAssertion(metaSubproofNode, metastatementNode) {
        _classCallCheck(this, MetaAssertion);
        this.metaSubproofNode = metaSubproofNode;
        this.metastatementNode = metastatementNode;
    }
    _createClass(MetaAssertion, [
        {
            key: "getMetaSubproofNode",
            value: function getMetaSubproofNode() {
                return this.metaSubproofNode;
            }
        },
        {
            key: "getMetastatementNode",
            value: function getMetastatementNode() {
                return this.metastatementNode;
            }
        },
        {
            key: "match",
            value: function match(metaAssertion) {
                var matches = false;
                var metastatementNode = metaAssertion.getMetastatementNode();
                if (metastatementNode !== null) {
                    var metaSubproofAssertionNode = metaSubproofAssertionNodeQuery(metastatementNode);
                    if (metaSubproofAssertionNode === null) {
                        var metastatementNodeMatches = this.matchMetastatementNode(metastatementNode);
                        matches = metastatementNodeMatches; ///
                    } else {
                        var metaSubproofAssertionNodeMatches = this.matchMetaSubproofAssertionNode(metaSubproofAssertionNode);
                        matches = metaSubproofAssertionNodeMatches; ///
                    }
                }
                return matches;
            }
        },
        {
            key: "matchMetastatementNode",
            value: function matchMetastatementNode(metastatementNode) {
                var metastatementNodeMatches = false;
                if (this.metastatementNode !== null) {
                    var topmostMetastatementNode = metastatementNode, topmostMetaAssertionMetastatementNode = this.metastatementNode, topmostMetaAssertionMetastatementNodeMatches = matchTopmostMetaAssertionMetastatementNode(topmostMetaAssertionMetastatementNode, topmostMetastatementNode);
                    metastatementNodeMatches = topmostMetaAssertionMetastatementNodeMatches; ///
                }
                return metastatementNodeMatches;
            }
        },
        {
            key: "matchMetaSubproofAssertionNode",
            value: function matchMetaSubproofAssertionNode(metaSubproofAssertionNode) {
                var metaSubproofAssertionNodeMatches = false;
                if (this.metaSubproofNode !== null) {
                    var metaSubproofAssertionMetastatementNodes = metastatementNodesQuery(metaSubproofAssertionNode), firstMetaSubproofAssertionMetastatementNode = (0, _array.first)(metaSubproofAssertionMetastatementNodes), qualifiedOrUnqualifiedMetastatementMetastatementNodes = qualifiedOrUnqualifiedMetastatementMetastatementNodesQuery(this.metaSubproofNode), firstQualifiedOrUnqualifiedMetastatementMetastatementNode = (0, _array.first)(qualifiedOrUnqualifiedMetastatementMetastatementNodes);
                    var topmostMetastatementNode = firstMetaSubproofAssertionMetastatementNode, topmostMetaAssertionMetastatementNode = firstQualifiedOrUnqualifiedMetastatementMetastatementNode, topmostMetaAssertionMetastatementNodeMatches = matchTopmostMetaAssertionMetastatementNode(topmostMetaAssertionMetastatementNode, topmostMetastatementNode);
                    if (topmostMetaAssertionMetastatementNodeMatches) {
                        var secondMetaSubproofAssertionMetastatementNode = (0, _array.second)(metaSubproofAssertionMetastatementNodes), secondQualifiedOrUnqualifiedMetastatementMetastatementNode = (0, _array.second)(qualifiedOrUnqualifiedMetastatementMetastatementNodes);
                        var topmostMetastatementNode1 = secondMetaSubproofAssertionMetastatementNode, topmostMetaAssertionMetastatementNode1 = secondQualifiedOrUnqualifiedMetastatementMetastatementNode, topmostMetaAssertionMetastatementNodeMatches1 = matchTopmostMetaAssertionMetastatementNode(topmostMetaAssertionMetastatementNode1, topmostMetastatementNode1);
                        metaSubproofAssertionNodeMatches = topmostMetaAssertionMetastatementNodeMatches1; ///
                    }
                }
                return metaSubproofAssertionNodeMatches;
            }
        }
    ], [
        {
            key: "fromMetaSubproofNode",
            value: function fromMetaSubproofNode(metaSubproofNode) {
                var metastatementNode = null, metaAssertion = new MetaAssertion(metaSubproofNode, metastatementNode);
                return metaAssertion;
            }
        },
        {
            key: "fromMetastatementNode",
            value: function fromMetastatementNode(metastatementNode) {
                var metaSubproofNode = null, metaAssertion = new MetaAssertion(metaSubproofNode, metastatementNode);
                return metaAssertion;
            }
        },
        {
            key: "fromQualifiedMetastatementNode",
            value: function fromQualifiedMetastatementNode(qualifiedMetastatementNode) {
                var metaSubproofNode = null, metastatementNode = metastatementNodeQuery(qualifiedMetastatementNode), metaAssertion = new MetaAssertion(metaSubproofNode, metastatementNode);
                return metaAssertion;
            }
        },
        {
            key: "fromUnqualifiedMetastatementNode",
            value: function fromUnqualifiedMetastatementNode(unqualifiedMetastatementNode) {
                var metaSubproofNode = null, metastatementNode = metastatementNodeQuery(unqualifiedMetastatementNode), metaAssertion = new MetaAssertion(metaSubproofNode, metastatementNode);
                return metaAssertion;
            }
        }
    ]);
    return MetaAssertion;
}();
function matchMetaAssertionNode(metaAssertionNode, node) {
    var metaAssertionNodeMatches = false;
    var nodeTerminalNode = node.isTerminalNode(), ruleNodeTerminalNode = metaAssertionNode.isTerminalNode();
    if (nodeTerminalNode === ruleNodeTerminalNode) {
        if (nodeTerminalNode) {
            var terminalNode = node, metaAssertionTerminalNode = metaAssertionNode, metaAssertionTerminalNodeMatches = matchMetaAssertionTerminalNode(metaAssertionTerminalNode, terminalNode);
            metaAssertionNodeMatches = metaAssertionTerminalNodeMatches; ///
        } else {
            var nonTerminalNode = node, metaAssertionNonTerminalNode = metaAssertionNode, metaAssertionNonTerminalNodeMatches = matchMetaAssertionNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode);
            metaAssertionNodeMatches = metaAssertionNonTerminalNodeMatches; ///
        }
    }
    return metaAssertionNodeMatches;
}
function matchMetaAssertionNodes(metaAssertionNodes, nodes) {
    var metaAssertionNodesMatches = false;
    var nodesLength = nodes.length, metaAssertionNodesLength = metaAssertionNodes.length;
    if (nodesLength === metaAssertionNodesLength) {
        metaAssertionNodesMatches = nodes.every(function(node, index) {
            var metaAssertionNode = metaAssertionNodes[index], metaAssertionNodeMatches = matchMetaAssertionNode(metaAssertionNode, node);
            if (metaAssertionNodeMatches) {
                return true;
            }
        });
    }
    return metaAssertionNodesMatches;
}
function matchMetaAssertionTerminalNode(metaAssertionTerminalNode, terminalNode) {
    var metaAssertionTerminalNodeMatches = false;
    var matches = metaAssertionTerminalNode.match(terminalNode);
    if (matches) {
        metaAssertionTerminalNodeMatches = true;
    }
    return metaAssertionTerminalNodeMatches;
}
function matchMetaAssertionNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode) {
    var metaAssertionNonTerminalNodeMatches = false;
    var ruleName = nonTerminalNode.getRuleName(), metaAssertionRuleName = metaAssertionNonTerminalNode.getRuleName(); ///
    if (ruleName === metaAssertionRuleName) {
        var childNodes = nonTerminalNode.getChildNodes(), nodes = childNodes, metaAssertionChildNodes = metaAssertionNonTerminalNode.getChildNodes(), metaAssertionNodes = metaAssertionChildNodes, metaAssertionNodesMatches = matchMetaAssertionNodes(metaAssertionNodes, nodes);
        metaAssertionNonTerminalNodeMatches = metaAssertionNodesMatches; ///
    }
    return metaAssertionNonTerminalNodeMatches;
}
function matchMetaAssertionMetastatementNode(metaAssertionMetastatementNode, metastatementNode) {
    var nonTerminalNode = metastatementNode, metaAssertionNonTerminalNode = metaAssertionMetastatementNode, metaAssertionNonTerminalNodeMatches = matchMetaAssertionNonTerminalNode(metaAssertionNonTerminalNode, nonTerminalNode), metaAssertionMetastatementNodeNatches = metaAssertionNonTerminalNodeMatches; ///
    return metaAssertionMetastatementNodeNatches;
}
function matchTopmostMetaAssertionMetastatementNode(topmostMetaAssertionMetastatementNode, topmostMetastatementNode) {
    var metaAssertionMetastatementNodeMatches;
    var metastatementNode = topmostMetastatementNode, metaAssertionMetastatementNode = topmostMetaAssertionMetastatementNode; ///
    metaAssertionMetastatementNodeMatches = matchMetaAssertionMetastatementNode(metaAssertionMetastatementNode, metastatementNode);
    if (!metaAssertionMetastatementNodeMatches) {
        var nonTerminalNode = metastatementNode, childNodes = nonTerminalNode, bracketedMetastatementChildNodeMatches = (0, _metastatement.matchBracketedMetastatementChildNode)(childNodes, function(bracketedMetastatementChildNode) {
            var metastatementNode = bracketedMetastatementChildNode, metaAssertionMetastatementNodeMatches = matchMetaAssertionMetastatementNode(metaAssertionMetastatementNode, metastatementNode), bracketedMetastatementChildNodeMatches = metaAssertionMetastatementNodeMatches;
            return bracketedMetastatementChildNodeMatches;
        });
        metaAssertionMetastatementNodeMatches = bracketedMetastatementChildNodeMatches; ///
    }
    if (!metaAssertionMetastatementNodeMatches) {
        var metaAssertionNonTerminalNode = metaAssertionMetastatementNode, metaAssertionChildNodes = metaAssertionNonTerminalNode.getChildNodes(), bracketedMetaAssertionMetastatementChildNodeMatches = (0, _metastatement.matchBracketedMetastatementChildNode)(metaAssertionChildNodes, function(bracketedMetaAssertionMetastatementChildNode) {
            var metaAssertionMetastatementNode = bracketedMetaAssertionMetastatementChildNode, metaAssertionMetastatementNodeMatches = matchMetaAssertionMetastatementNode(metaAssertionMetastatementNode, metastatementNode), bracketedMetaAssertionMetastatementChildNodeMatches = metaAssertionMetastatementNodeMatches;
            return bracketedMetaAssertionMetastatementChildNodeMatches;
        });
        metaAssertionMetastatementNodeMatches = bracketedMetaAssertionMetastatementChildNodeMatches; ///
    }
    var topmostMetaAssertionMetastatementNodeMatches = metaAssertionMetastatementNodeMatches; ///
    return topmostMetaAssertionMetastatementNodeMatches;
}

//# sourceMappingURL=data:application/json;base64,