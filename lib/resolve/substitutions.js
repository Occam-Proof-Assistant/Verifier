"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return resolveSubstitutions;
    }
});
var _local = /*#__PURE__*/ _interop_require_default(require("../context/local"));
var _substitutions = /*#__PURE__*/ _interop_require_default(require("../substitutions"));
var _metaLevel = /*#__PURE__*/ _interop_require_default(require("../unifier/metaLevel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function resolveSubstitutions(substitutions, fileContextA, localContextB) {
    var substitutionsResolved = substitutions.areResolved();
    if (!substitutionsResolved) {
        var localContextA = _local.default.fromFileContext(fileContextA), metavariableNodes = substitutions.getMetavariableNodes();
        substitutionsResolved = metavariableNodes.every(function(metavariableNode) {
            var complexSubstitutions = substitutions.findComplexSubstitutionsByMetavariableNode(metavariableNode), complexSubstitutionsResolved = resolveComplexSubstitutions(complexSubstitutions, substitutions, localContextA, localContextB);
            if (complexSubstitutionsResolved) {
                return true;
            }
        });
    }
    return substitutionsResolved;
}
function resolveComplexSubstitution(complexSubstitution, substitutions, localContextA, localContextB) {
    var complexSubstitutionResolved = false;
    var metavariableNode = complexSubstitution.getMetavariableNode(), simpleSubstitution = substitutions.findSimpleSubstitutionByMetavariableNode(metavariableNode);
    if (simpleSubstitution !== null) {
        var complexSubstitutionResolvedAgainstSimpleSubstitution = resolveComplexSubstitutionAgainstSimpleSubstitution(complexSubstitution, simpleSubstitution, substitutions, localContextA, localContextB);
        complexSubstitutionResolved = complexSubstitutionResolvedAgainstSimpleSubstitution; ///
    }
    return complexSubstitutionResolved;
}
function resolveComplexSubstitutions(complexSubstitutions, substitutions, localContextA, localContextB) {
    var complexSubstitutionsResolved = complexSubstitutions.everySubstitution(function(complexSubstitution) {
        var complexSubstitutionResolved = resolveComplexSubstitution(complexSubstitution, substitutions, localContextA, localContextB);
        if (complexSubstitutionResolved) {
            return true;
        }
    });
    return complexSubstitutionsResolved;
}
function resolveComplexSubstitutionAgainstSimpleSubstitution(complexSubstitution, simpleSubstitution, substitutions, localContextA, localContextB) {
    var complexSubstitutionResolvedAgainstSimpleSubstitution = false;
    var statementNode = complexSubstitution.getStatementNode(), simpleSubstitutionString = simpleSubstitution.asString(localContextA, localContextB), complexSubstitutionString = complexSubstitution.asString(localContextA, localContextB);
    localContextB.trace("Resolving the complex ".concat(complexSubstitutionString, " substitution against the simple ").concat(simpleSubstitutionString, " substitution..."), statementNode);
    var transformedSubstitution = transformedSubstitutionFromComplexSubstitutionSimpleSubstitutionAndSubstitutions(complexSubstitution, simpleSubstitution, substitutions, localContextA, localContextB);
    if (transformedSubstitution !== null) {
        var variableNode = transformedSubstitution.getVariableNode(), substitution = substitutions.findSubstitutionByVariableNode(variableNode);
        if (substitution === null) {
            simpleSubstitution = transformedSubstitution; ///
            substitutions.addSubstitution(simpleSubstitution, localContextA, localContextB);
            substitutions.removeSubstitution(complexSubstitution, localContextA, localContextB);
            complexSubstitutionResolvedAgainstSimpleSubstitution = true;
        } else {
            var termNode = transformedSubstitution.getTermNode(), termNodeMatches = substitution.matchTermNode(termNode);
            if (termNodeMatches) {
                substitutions.removeSubstitution(complexSubstitution, localContextA, localContextB);
                complexSubstitutionResolvedAgainstSimpleSubstitution = true;
            }
        }
    }
    if (complexSubstitutionResolvedAgainstSimpleSubstitution) {
        localContextB.debug("...resolved the complex ".concat(complexSubstitutionString, " substitution against the simple ").concat(simpleSubstitutionString, " substitution."), statementNode);
    }
    return complexSubstitutionResolvedAgainstSimpleSubstitution;
}
function unifyComplexSubstitutionStatementWithSimpleSubstitutionStatement(complexSubstitutionStatementNode, simpleSubstitutionStatementNode, substitutions, localContextA, localContextB) {
    var complexSubstitutionStatementWithSimpleSubstitutionStatement;
    var nodeA = complexSubstitutionStatementNode, nodeB = simpleSubstitutionStatementNode; ///
    localContextA = localContextB; ///
    var unified = _metaLevel.default.unify(nodeA, nodeB, substitutions, localContextA, localContextB);
    complexSubstitutionStatementWithSimpleSubstitutionStatement = unified; ///
    return complexSubstitutionStatementWithSimpleSubstitutionStatement;
}
function transformedSubstitutionFromComplexSubstitutionSimpleSubstitutionAndSubstitutions(complexSubstitution, simpleSubstitution, substitutions, localContextA, localContextB) {
    var transformedSubstitution;
    var substitution = complexSubstitution.getSubstitution();
    transformedSubstitution = substitution.transformed(substitutions);
    if (transformedSubstitution !== null) {
        var simpleSubstitutionStatementNode = simpleSubstitution.getStatementNode(), complexSubstitutionStatementNode = complexSubstitution.getStatementNode();
        substitutions = _substitutions.default.fromNothing(); ///
        var complexSubstitutionStatementWithSimpleSubstitutionStatement = unifyComplexSubstitutionStatementWithSimpleSubstitutionStatement(complexSubstitutionStatementNode, simpleSubstitutionStatementNode, substitutions, localContextA, localContextB);
        if (complexSubstitutionStatementWithSimpleSubstitutionStatement) {
            var substitution1 = transformedSubstitution; ///
            transformedSubstitution = substitution1.transformed(substitutions);
        }
    }
    return transformedSubstitution;
}

//# sourceMappingURL=data:application/json;base64,