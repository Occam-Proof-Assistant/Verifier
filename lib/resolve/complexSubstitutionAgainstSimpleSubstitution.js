"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return resolveComplexSubstitutionAgainstSimpleSubstitution;
    }
});
var _substitutions = /*#__PURE__*/ _interop_require_default(require("../substitutions"));
var _complexSubstitutionStatementWithSimpleSubstitutionStatement = /*#__PURE__*/ _interop_require_default(require("../unify/complexSubstitutionStatementWithSimpleSubstitutionStatement"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function resolveComplexSubstitutionAgainstSimpleSubstitution(complexSubstitution, simpleSubstitution, substitutions, localContextA, localContextB) {
    var complexSubstitutionResolvedAgainstSimpleSubstitution = false;
    var statementNode = complexSubstitution.getStatementNode(), simpleSubstitutionString = simpleSubstitution.asString(localContextA, localContextB), complexSubstitutionString = complexSubstitution.asString(localContextA, localContextB);
    localContextB.trace("Resolving the complex ".concat(complexSubstitutionString, " substitution against the simple ").concat(simpleSubstitutionString, " substitution..."), statementNode);
    var transformedSubstitution = transformedSubstitutionFromComplexSubstitutionSimpleSubstitutionAndSubstitutions(complexSubstitution, simpleSubstitution, substitutions, localContextA, localContextB);
    if (transformedSubstitution !== null) {
        var variableNode = transformedSubstitution.getVariableNode(), metavariableNode = transformedSubstitution.getMetavariableNode();
        if (false) {
        ///
        } else if (variableNode !== null) {
            var substitution = substitutions.findSubstitutionByVariableNode(variableNode);
            if (substitution === null) {
                substitutions.addSubstitution(transformedSubstitution, localContextA, localContextB);
                substitutions.removeSubstitution(complexSubstitution, localContextA, localContextB);
                complexSubstitutionResolvedAgainstSimpleSubstitution = true;
            } else {
                var termNode = transformedSubstitution.getTermNode(), termNodeMatches = substitution.matchTermNode(termNode);
                if (termNodeMatches) {
                    substitutions.removeSubstitution(complexSubstitution, localContextA, localContextB);
                    complexSubstitutionResolvedAgainstSimpleSubstitution = true;
                }
            }
        } else if (metavariableNode !== null) {
            var substitution1 = substitutions.findSubstitutionByMetavariableNode(metavariableNode);
            if (substitution1 === null) {
                substitutions.addSubstitution(transformedSubstitution, localContextA, localContextB);
                substitutions.removeSubstitution(complexSubstitution, localContextA, localContextB);
                complexSubstitutionResolvedAgainstSimpleSubstitution = true;
            } else {
                var frameNode = transformedSubstitution.getFrameNode(), frameNodeMatches = substitution1.matchFrameNode(frameNode);
                if (frameNodeMatches) {
                    substitutions.removeSubstitution(complexSubstitution, localContextA, localContextB);
                    complexSubstitutionResolvedAgainstSimpleSubstitution = true;
                }
            }
        }
    }
    if (complexSubstitutionResolvedAgainstSimpleSubstitution) {
        localContextB.debug("...resolved the complex ".concat(complexSubstitutionString, " substitution against the simple ").concat(simpleSubstitutionString, " substitution."), statementNode);
    }
    return complexSubstitutionResolvedAgainstSimpleSubstitution;
}
function transformedSubstitutionFromComplexSubstitutionSimpleSubstitutionAndSubstitutions(complexSubstitution, simpleSubstitution, substitutions, localContextA, localContextB) {
    var transformedSubstitution;
    var substitution = complexSubstitution.getSubstitution();
    transformedSubstitution = substitution.transformed(substitutions);
    if (transformedSubstitution !== null) {
        var simpleSubstitutionStatementNode = simpleSubstitution.getStatementNode(), complexSubstitutionStatementNode = complexSubstitution.getStatementNode();
        substitutions = _substitutions.default.fromNothing(); ///
        var complexSubstitutionStatementWithSimpleSubstitutionStatement = (0, _complexSubstitutionStatementWithSimpleSubstitutionStatement.default)(complexSubstitutionStatementNode, simpleSubstitutionStatementNode, substitutions, localContextA, localContextB);
        if (complexSubstitutionStatementWithSimpleSubstitutionStatement) {
            var substitution1 = transformedSubstitution; ///
            transformedSubstitution = substitution1.transformed(substitutions);
        }
    }
    return transformedSubstitution;
}

//# sourceMappingURL=data:application/json;base64,