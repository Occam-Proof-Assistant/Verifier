"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return resolveComplexSubstitutionAgainstSimpleSubstitution;
    }
});
var _substitutions = /*#__PURE__*/ _interop_require_default(require("../substitutions"));
var _simpleSubstitutionStatementWithComplexSubstitutionStatement = /*#__PURE__*/ _interop_require_default(require("../unify/simpleSubstitutionStatementWithComplexSubstitutionStatement"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function resolveComplexSubstitutionAgainstSimpleSubstitution(complexSubstitution, simpleSubstitution, substitutions, localContextA, localContextB) {
    var complexSubstitutionResolvedAgainstSimpleSubstitution = false;
    var statementNode = complexSubstitution.getStatementNode(), simpleSubstitutionString = simpleSubstitution.asString(localContextA, localContextB), complexSubstitutionString = complexSubstitution.asString(localContextA, localContextB);
    localContextB.trace("Resolving the complex ".concat(complexSubstitutionString, " substitution against the simple ").concat(simpleSubstitutionString, " substitution..."), statementNode);
    var transformedSubstitution = transformedSubstitutionFromComplexSubstitution(complexSubstitution, substitutions, localContextA, localContextB);
    if (transformedSubstitution !== null) {
        var substitution = substitutionFromComplexSubstitutionAndAndSimpleSubstitution(complexSubstitution, simpleSubstitution, localContextA, localContextB);
        if (substitution !== null) {
            var substitutionString = substitution.asString(localContextB, localContextB), transformedSubstitutionString = transformedSubstitution.asString(localContextB, localContextB);
            localContextB.trace("Equating the ".concat(substitutionString, " substitution to the transformed ").concat(transformedSubstitutionString, " substitution..."), statementNode);
            var substitutionEqualToTransformedSubstitution = substitution.isEqualTo(transformedSubstitution);
            complexSubstitutionResolvedAgainstSimpleSubstitution = substitutionEqualToTransformedSubstitution; ///
        }
    }
    if (complexSubstitutionResolvedAgainstSimpleSubstitution) {
        localContextB.debug("...resolved the complex ".concat(complexSubstitutionString, " substitution against the simple ").concat(simpleSubstitutionString, " substitution."), statementNode);
    }
    return complexSubstitutionResolvedAgainstSimpleSubstitution;
}
function transformedSubstitutionFromComplexSubstitution(complexSubstitution, substitutions, localContextA, localContextB) {
    var substitution = complexSubstitution.getSubstitution(), substitutionString = substitution.asString(localContextA, localContextA), complexSubstitutionStatementNode = complexSubstitution.getStatementNode();
    localContextB.trace("Transforming the complex substitution's '".concat(substitutionString, "' substitution...."), complexSubstitutionStatementNode);
    var transformedSubstitution = substitution.transformed(substitutions);
    if (transformedSubstitution !== null) {
        var transformedSubstitutionString = transformedSubstitution.asString(localContextB, localContextB);
        localContextB.debug("Transformed the complex substitution's '".concat(substitutionString, "' substitution into the '").concat(transformedSubstitutionString, "' substitution."), complexSubstitutionStatementNode);
    }
    return transformedSubstitution;
}
function substitutionFromComplexSubstitutionAndAndSimpleSubstitution(complexSubstitution, simpleSubstitution, localContextA, localContextB) {
    var substitution = null;
    var substitutions = _substitutions.default.fromNothing(), simpleSubstitutionStatementNode = simpleSubstitution.getStatementNode(), complexSubstitutionStatementNode = complexSubstitution.getStatementNode();
    localContextA = localContextB; ///
    var simpleSubstitutionStatementUnifiedWithComplexSubstitutionStatement = (0, _simpleSubstitutionStatementWithComplexSubstitutionStatement.default)(complexSubstitutionStatementNode, simpleSubstitutionStatementNode, substitutions, localContextA, localContextB);
    if (simpleSubstitutionStatementUnifiedWithComplexSubstitutionStatement) {
        var substitutionsLength = substitutions.getLength();
        if (substitutionsLength === 1) {
            var firstSubstitution = substitutions.getFirstSubstitution();
            substitution = firstSubstitution; ///
        }
    }
    return substitution;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNvbHZlL2NvbXBsZXhTdWJzdGl0dXRpb25BZ2FpbnN0U2ltcGxlU3Vic3RpdHV0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgU3Vic3RpdHV0aW9ucyBmcm9tIFwiLi4vc3Vic3RpdHV0aW9uc1wiO1xuaW1wb3J0IHVuaWZ5Q29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudFdpdGhTaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnQgZnJvbSBcIi4uL3VuaWZ5L3NpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudFdpdGhDb21wbGV4U3Vic3RpdHV0aW9uU3RhdGVtZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVDb21wbGV4U3Vic3RpdHV0aW9uQWdhaW5zdFNpbXBsZVN1YnN0aXR1dGlvbihjb21wbGV4U3Vic3RpdHV0aW9uLCBzaW1wbGVTdWJzdGl0dXRpb24sIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpIHtcbiAgbGV0IGNvbXBsZXhTdWJzdGl0dXRpb25SZXNvbHZlZEFnYWluc3RTaW1wbGVTdWJzdGl0dXRpb24gPSBmYWxzZTtcblxuICBjb25zdCBzdGF0ZW1lbnROb2RlID0gY29tcGxleFN1YnN0aXR1dGlvbi5nZXRTdGF0ZW1lbnROb2RlKCksXG4gICAgICAgIHNpbXBsZVN1YnN0aXR1dGlvblN0cmluZyA9IHNpbXBsZVN1YnN0aXR1dGlvbi5hc1N0cmluZyhsb2NhbENvbnRleHRBLCBsb2NhbENvbnRleHRCKSxcbiAgICAgICAgY29tcGxleFN1YnN0aXR1dGlvblN0cmluZyA9IGNvbXBsZXhTdWJzdGl0dXRpb24uYXNTdHJpbmcobG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qik7XG5cbiAgbG9jYWxDb250ZXh0Qi50cmFjZShgUmVzb2x2aW5nIHRoZSBjb21wbGV4ICR7Y29tcGxleFN1YnN0aXR1dGlvblN0cmluZ30gc3Vic3RpdHV0aW9uIGFnYWluc3QgdGhlIHNpbXBsZSAke3NpbXBsZVN1YnN0aXR1dGlvblN0cmluZ30gc3Vic3RpdHV0aW9uLi4uYCwgc3RhdGVtZW50Tm9kZSk7XG5cbiAgY29uc3QgdHJhbnNmb3JtZWRTdWJzdGl0dXRpb24gPSB0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvbkZyb21Db21wbGV4U3Vic3RpdHV0aW9uKGNvbXBsZXhTdWJzdGl0dXRpb24sIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpO1xuXG4gIGlmICh0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvbiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbkZyb21Db21wbGV4U3Vic3RpdHV0aW9uQW5kQW5kU2ltcGxlU3Vic3RpdHV0aW9uKGNvbXBsZXhTdWJzdGl0dXRpb24sIHNpbXBsZVN1YnN0aXR1dGlvbiwgbG9jYWxDb250ZXh0QSwgbG9jYWxDb250ZXh0Qik7XG5cbiAgICBpZiAoc3Vic3RpdHV0aW9uICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBzdWJzdGl0dXRpb25TdHJpbmcgPSBzdWJzdGl0dXRpb24uYXNTdHJpbmcobG9jYWxDb250ZXh0QiwgbG9jYWxDb250ZXh0QiksXG4gICAgICAgICAgICB0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvblN0cmluZyA9IHRyYW5zZm9ybWVkU3Vic3RpdHV0aW9uLmFzU3RyaW5nKGxvY2FsQ29udGV4dEIsIGxvY2FsQ29udGV4dEIpO1xuXG4gICAgICBsb2NhbENvbnRleHRCLnRyYWNlKGBFcXVhdGluZyB0aGUgJHtzdWJzdGl0dXRpb25TdHJpbmd9IHN1YnN0aXR1dGlvbiB0byB0aGUgdHJhbnNmb3JtZWQgJHt0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvblN0cmluZ30gc3Vic3RpdHV0aW9uLi4uYCwgc3RhdGVtZW50Tm9kZSk7XG5cbiAgICAgIGNvbnN0IHN1YnN0aXR1dGlvbkVxdWFsVG9UcmFuc2Zvcm1lZFN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5pc0VxdWFsVG8odHJhbnNmb3JtZWRTdWJzdGl0dXRpb24pO1xuXG4gICAgICBjb21wbGV4U3Vic3RpdHV0aW9uUmVzb2x2ZWRBZ2FpbnN0U2ltcGxlU3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uRXF1YWxUb1RyYW5zZm9ybWVkU3Vic3RpdHV0aW9uOyAgLy8vXG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbXBsZXhTdWJzdGl0dXRpb25SZXNvbHZlZEFnYWluc3RTaW1wbGVTdWJzdGl0dXRpb24pIHtcbiAgICBsb2NhbENvbnRleHRCLmRlYnVnKGAuLi5yZXNvbHZlZCB0aGUgY29tcGxleCAke2NvbXBsZXhTdWJzdGl0dXRpb25TdHJpbmd9IHN1YnN0aXR1dGlvbiBhZ2FpbnN0IHRoZSBzaW1wbGUgJHtzaW1wbGVTdWJzdGl0dXRpb25TdHJpbmd9IHN1YnN0aXR1dGlvbi5gLCBzdGF0ZW1lbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBjb21wbGV4U3Vic3RpdHV0aW9uUmVzb2x2ZWRBZ2FpbnN0U2ltcGxlU3Vic3RpdHV0aW9uO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvbkZyb21Db21wbGV4U3Vic3RpdHV0aW9uKGNvbXBsZXhTdWJzdGl0dXRpb24sIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpIHtcbiAgY29uc3Qgc3Vic3RpdHV0aW9uID0gY29tcGxleFN1YnN0aXR1dGlvbi5nZXRTdWJzdGl0dXRpb24oKSxcbiAgICAgICAgc3Vic3RpdHV0aW9uU3RyaW5nID0gc3Vic3RpdHV0aW9uLmFzU3RyaW5nKGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEEpLFxuICAgICAgICBjb21wbGV4U3Vic3RpdHV0aW9uU3RhdGVtZW50Tm9kZSA9IGNvbXBsZXhTdWJzdGl0dXRpb24uZ2V0U3RhdGVtZW50Tm9kZSgpO1xuXG4gIGxvY2FsQ29udGV4dEIudHJhY2UoYFRyYW5zZm9ybWluZyB0aGUgY29tcGxleCBzdWJzdGl0dXRpb24ncyAnJHtzdWJzdGl0dXRpb25TdHJpbmd9JyBzdWJzdGl0dXRpb24uLi4uYCwgY29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUpO1xuXG4gIGNvbnN0IHRyYW5zZm9ybWVkU3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uLnRyYW5zZm9ybWVkKHN1YnN0aXR1dGlvbnMpO1xuXG4gIGlmICh0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvbiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVkU3Vic3RpdHV0aW9uU3RyaW5nID0gdHJhbnNmb3JtZWRTdWJzdGl0dXRpb24uYXNTdHJpbmcobG9jYWxDb250ZXh0QiwgbG9jYWxDb250ZXh0Qik7XG5cbiAgICBsb2NhbENvbnRleHRCLmRlYnVnKGBUcmFuc2Zvcm1lZCB0aGUgY29tcGxleCBzdWJzdGl0dXRpb24ncyAnJHtzdWJzdGl0dXRpb25TdHJpbmd9JyBzdWJzdGl0dXRpb24gaW50byB0aGUgJyR7dHJhbnNmb3JtZWRTdWJzdGl0dXRpb25TdHJpbmd9JyBzdWJzdGl0dXRpb24uYCwgY29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zZm9ybWVkU3Vic3RpdHV0aW9uO1xufVxuXG5mdW5jdGlvbiBzdWJzdGl0dXRpb25Gcm9tQ29tcGxleFN1YnN0aXR1dGlvbkFuZEFuZFNpbXBsZVN1YnN0aXR1dGlvbihjb21wbGV4U3Vic3RpdHV0aW9uLCBzaW1wbGVTdWJzdGl0dXRpb24sIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpIHtcbiAgbGV0IHN1YnN0aXR1dGlvbiA9IG51bGw7XG5cbiAgY29uc3Qgc3Vic3RpdHV0aW9ucyA9IFN1YnN0aXR1dGlvbnMuZnJvbU5vdGhpbmcoKSwgIC8vL1xuICAgICAgICBzaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnROb2RlID0gc2ltcGxlU3Vic3RpdHV0aW9uLmdldFN0YXRlbWVudE5vZGUoKSxcbiAgICAgICAgY29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUgPSBjb21wbGV4U3Vic3RpdHV0aW9uLmdldFN0YXRlbWVudE5vZGUoKTtcblxuICBsb2NhbENvbnRleHRBID0gbG9jYWxDb250ZXh0QjsgIC8vL1xuXG4gIGNvbnN0IHNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudFVuaWZpZWRXaXRoQ29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudCA9IHVuaWZ5Q29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudFdpdGhTaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnQoY29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUsIHNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUsIHN1YnN0aXR1dGlvbnMsIGxvY2FsQ29udGV4dEEsIGxvY2FsQ29udGV4dEIpO1xuXG4gIGlmIChzaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnRVbmlmaWVkV2l0aENvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnQpIHtcbiAgICBjb25zdCBzdWJzdGl0dXRpb25zTGVuZ3RoID0gc3Vic3RpdHV0aW9ucy5nZXRMZW5ndGgoKTtcblxuICAgIGlmIChzdWJzdGl0dXRpb25zTGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBmaXJzdFN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbnMuZ2V0Rmlyc3RTdWJzdGl0dXRpb24oKTtcblxuICAgICAgc3Vic3RpdHV0aW9uID0gZmlyc3RTdWJzdGl0dXRpb247IC8vL1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJzdGl0dXRpb247XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZUNvbXBsZXhTdWJzdGl0dXRpb25BZ2FpbnN0U2ltcGxlU3Vic3RpdHV0aW9uIiwiY29tcGxleFN1YnN0aXR1dGlvbiIsInNpbXBsZVN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbnMiLCJsb2NhbENvbnRleHRBIiwibG9jYWxDb250ZXh0QiIsImNvbXBsZXhTdWJzdGl0dXRpb25SZXNvbHZlZEFnYWluc3RTaW1wbGVTdWJzdGl0dXRpb24iLCJzdGF0ZW1lbnROb2RlIiwiZ2V0U3RhdGVtZW50Tm9kZSIsInNpbXBsZVN1YnN0aXR1dGlvblN0cmluZyIsImFzU3RyaW5nIiwiY29tcGxleFN1YnN0aXR1dGlvblN0cmluZyIsInRyYWNlIiwidHJhbnNmb3JtZWRTdWJzdGl0dXRpb24iLCJ0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvbkZyb21Db21wbGV4U3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uRnJvbUNvbXBsZXhTdWJzdGl0dXRpb25BbmRBbmRTaW1wbGVTdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb25TdHJpbmciLCJ0cmFuc2Zvcm1lZFN1YnN0aXR1dGlvblN0cmluZyIsInN1YnN0aXR1dGlvbkVxdWFsVG9UcmFuc2Zvcm1lZFN1YnN0aXR1dGlvbiIsImlzRXF1YWxUbyIsImRlYnVnIiwiZ2V0U3Vic3RpdHV0aW9uIiwiY29tcGxleFN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUiLCJ0cmFuc2Zvcm1lZCIsIlN1YnN0aXR1dGlvbnMiLCJmcm9tTm90aGluZyIsInNpbXBsZVN1YnN0aXR1dGlvblN0YXRlbWVudE5vZGUiLCJzaW1wbGVTdWJzdGl0dXRpb25TdGF0ZW1lbnRVbmlmaWVkV2l0aENvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnQiLCJ1bmlmeUNvbXBsZXhTdWJzdGl0dXRpb25TdGF0ZW1lbnRXaXRoU2ltcGxlU3Vic3RpdHV0aW9uU3RhdGVtZW50Iiwic3Vic3RpdHV0aW9uc0xlbmd0aCIsImdldExlbmd0aCIsImZpcnN0U3Vic3RpdHV0aW9uIiwiZ2V0Rmlyc3RTdWJzdGl0dXRpb24iXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQUtBOzs7ZUFBd0JBOzs7b0VBSEU7a0hBQ21EOzs7Ozs7QUFFOUQsU0FBU0Esb0RBQW9EQyxtQkFBbUIsRUFBRUMsa0JBQWtCLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxhQUFhO0lBQzlKLElBQUlDLHVEQUF1RDtJQUUzRCxJQUFNQyxn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